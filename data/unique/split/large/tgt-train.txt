e.getCacheMisses()
mPaused || !mPlaying
CollectionUtils.filter(sources,routes,new Spec<File>(){   @Override public boolean isSatisfiedBy(  File file){     return file.getName().equals("routes");   } } )
new PortletBagImpl(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
@Override public T getAsset(){   return null; } 
info != null && !mContext.getPackageName().equals(info.activityInfo.packageName)
new CreateIndexResponse(true,true,index){ } 
SOCKET_TIMEOUT=30_000
new File(value).toPath()
DictionaryGenerator.buildDictionaryFromValueList(tblColRef.getType(),Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ),tblColRef.getType())
nextRequest(newRequest,future)
60 * 1000
assertEquals(orig.getResponse(),expectedResponse)
IdeBorderFactory.createTitledBorderSimpleWithoutIndent(ApplicationBundle.message("title.preview"))
prevNerEndIndex != (start - 1) && nextNerStartIndex != end
Configuration conf
assertEquals(5,lm.getFields().size())
(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)
ReflectionUtil.forName(this.owner)
id=10859
mNetAttributes[type].mLastState == state && mNetAttributes[type].mRadio == ConnectivityManager.TYPE_WIFI
listenersMap.remove(eventId)
i != null && locations != null && i.routePointOffset < locations.size()
@Override public final Field createField(SchemaField field,Object val,float boost){   throw new IllegalStateException("should be calling createFields because isPolyField() is true"); } 
srcFile.isDirectory()
this::expand
new Random(0)
GtkPreferredJComboBoxRendererInspection.class
log.logError(BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFound.Label"))
bestState.score()
sY != 0
new UnsupportedOperationException(getClass().getName())
rdi != null && !rdi.getPath().equals("/")
setLowHighExpected(lowResults,highResults,expectedResults,BCUBED_TP,12440,12451.87,12451.87)
c.findOne(new BasicDBObject("_id",17),null)
new MessageHeaderAccessor(originalMessage)
findKeyFromPubKey(recipient)
type == null || type == JAXBElement.class
Integer.toString(9)
SyncAccountService.addSyncAccount(filePathName,10,"test@liferay.com","test",false,"http://localhost:8080/api/jsonws")
runOTIafterNTI=true
pongPublication.offer(buffer,offset,length) > 0L
new Configuration(true,false,Predicates.<NamespaceDescriptor>alwaysTrue())
Debug.logv(msg,args)
@Specialization protected LLVMBoxedPrimitive fromLong(long value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new JMenuItem(dockToTrayText)
i == -1 || nsname.equals("/")
DEFAULT_WAKE_LOCK_TIMEOUT=60000
properties.length > 4
factory.getDeclaredConstructor()
info.getIccSerialNumberForSubscriber(subId,mContext.getOpPackageName())
processEngineConfiguration.getCommandExecutor()
InvokerHelper.setProperty(target,"layout",answer)
Throwable cause
thisVisible || !isVisible
!isEnabledTracker() || sessionURL == null
Integer autoCommitInterval
Slog.e(TAG,"Starting rect for app requested, but none available",new Throwable())
!sourceNodeTextData.getText().isEmpty()
selectorBox.getComponent()
Exception e
-10
faceIndex*=3
!useSuper && !isStatic && GroovyCategorySupport.hasCategoryInCurrentThread()&& name.length() > 0
sshClient.connect(sshHost,sshPortNum)
mPm.getPackageUidAsUser(callingPackage,PackageManager.MATCH_ENCRYPTION_AWARE_AND_UNAWARE | PackageManager.MATCH_UNINSTALLED_PACKAGES)
WindowedValue.valueInGlobalWindow(2,PaneInfo.ON_TIME_AND_ONLY_FIRING)
UnsupportedTypeException.raise(ex,arguments)
future.get(30,TimeUnit.SECONDS)
assertEquals(0.3148133418670781,mse,1e-8)
ProgressDialog.show(context,null,context.getText(R.string.signing_out),false)
topLevelBuildData.getUserContentRelativePath()
block.localsLiveIn.andNot(block.localsLiveKill)
d instanceof URLDetail
new TezTaskRunner2(conf,taskUgi,fragmentInfo.getLocalDirs(),taskSpec,request.getAppAttemptNumber(),serviceConsumerMetadata,envMap,startedInputsMap,taskReporter,executor,objectRegistry,pid,executionContext,memoryAvailable,false)
new XmlPathConfig(jaxbObjectMapperFactory,defaultParserType,defaultDeserializer,charset,features)
logger.info("--> checking snapshot status again after snapshot is done")
i <= position + totalAddedItems
app.setOwnerName(ownerName)
new OAuth2RefreshToken("refresh-token",this.accessToken.getIssuedAt())
new ExpressionEvaluatingMessageProcessor<String>(remoteDirectoryExpression,String.class)
subrange.getEnd()
sequence.getCache() != null && sequence.getCache() > 0
new InternalSearchResponse(hits,null,null,null,false,null)
mStackSupervisor.mAppVisibilitiesChangedSinceLastPause || mService.mStackSupervisor.getStack(PINNED_STACK_ID) != null
buffer.putDouble(bo,value)
parent.getSubmittedCount() <= (parent.getPoolSize())
listView.getCount()
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicDistributedTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
cc.getLazy()
preMap.size()
EnglishUdLas=88.72648417258083
new Textifier(ASM5){   @Override public void visitMethodEnd(){     System.out.println(cr.getClassName() + ":" + methodName+ methodDesc);     for (    Object line : getText()) {       System.out.print(line);     }     System.out.println();     System.out.println();     super.visitMethodEnd();   } } 
final TicketGrantingTicket tId=getCentralAuthenticationService().createTicketGrantingTicket(TestUtils.getCredentialsWithSameUsernameAndPassword()); 
res.sendError(501,"Websocket protocol not supported")
t.toString()
Assert.assertEquals(5,count)
PojoUtils.realize(list.toArray(),invokeMethod.getParameterTypes(),invokeMethod.getGenericParameterTypes())
LOGGER.info("Cached resource {} is up-to-date (lastModified: {}).",location,cached.getExternalLastModified())
getNonCacheableSingleModelLoader()
handleExportPackage()
LOG.warn("Error in response for blockId: " + recvMsg.getBlockId() + " message: "+ recvMsg.getStatus().getMessage())
factory.get(fBodyWildcard,NO_ANNOTATIONS,retrofit)
list.removeFirst()
VERSION=8
Slog.w(TAG,"Session failed to close due to remote exception",e)
add(comp,BorderLayout.CENTER)
port >= 65536
builder.appendRows("4dlu, pref")
mSearch.isManualSearch() && mSingleAccountMode && mAccount.allowRemoteSearch()
3 * 60 * 1000L
ciManagement.getSystem()
Slog.e(TAG,sb.toString())
_buildTemplateWithGradle("rest","rest-dependency-management","--dependency-management-enabled")
PsiTreeUtil.getNextSiblingOfType(curItem,XmlTag.class)
patternLen == 0 || nameIndex >= nameLen
id=23
MAX_ERROR_RETRIES_DEFAULT=10
Entity::propertyVisibility
getBooleanValue("project","thrift_target_types_enabled",false)
getBoldStatus(elements[1])
loading.dismissAllowingStateLoss()
incomingMessage.getMessagePayloadByte(1)
value == null || Objects.equals(value,defaultValue)
LOG.debug("Registered pre-upgrade check {}",upgradeCheck.getClass())
super.onDestroy()
lines("Function.prototype.inherits = function(parentCtor) {","  function tempCtor() {};","  tempCtor.prototype = parentCtor.prototype;","  this.superClass_ = parentCtor.prototype;","  this.prototype = new tempCtor();","  this.prototype.constructor = this;","};","/** @constructor */ function A() {}","/** @constructor */ function B() {}","B.inherits(A);","use(B.superClass_);")
accountCapsule.putFreeAssetNetUsage(tokenName,newFreeAssetNetUsage)
sleep < 0 || !run
private T myCurrentTree; 
_keep_cross_validation_models=true
StringBuilder argBuf
instruction.getRegister()
id=49
Throwable t
Thread.sleep(1500)
!mTileState
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],paging.asPostParameterList(),true))
form instanceof IObj && !(form instanceof Var) && ((IObj)form).meta() != null
(Number)array[this.index]
Model != null && Model.Book != null
out.writeData(function)
latch.await(5,TimeUnit.MINUTES)
LOGGER.warn("Warning: could not get " + idForErrorMessage + " translation for \""+ key+ "\" for locale "+ Locale.getDefault())
Flux.from(this.messageService.publisherPreAuthorizeHasRoleFindById(1L)).subscriberContext(withUser)
mono.doOnSuccess(result -> {   T adapted;   try {     adapted=adapt(result);   }  catch (  Throwable ex) {     registry.failure(ex);     return;   }   registry.success(adapted); } ).doOnError(this.registry::failure).toProcessor()
service.getRecordsForSelectedTab(collectionMetadata,entity,sectionCrumbs,currentTabName)
!prevSearchFiles
args[1]
!context().getSettingsModule().isNotificationsEnabled()
child.getNodeValue() != null && child.getNodeValue().indexOf(lSep) == -1
true || UISettings.getInstance().HIDE_TOOL_STRIPES && !PropertiesComponent.getInstance().isTrueValue(key)
new SettingsValidators.InclusiveIntegerRangeValidator(0,100)
items[i].getValue("")
codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals(codingSystem)
new CompoundShelfFileProcessor(streamProviders,configPath)
props.put(StreamsConfig.NUM_STREAM_THREADS_CONFIG,1)
YogaNode.jni_YGNodeSetOwner(child.mNativePointer,0)
remoteFormat != null
entries.remove(timeKey)
excludesPattern == null || requestURI == null
new ConcurrentHashMap<String,Object>(256)
Iterables.find(reportReader.readComponentMeasures(component.getRef()),new Predicate<BatchReport.Measure>(){   @Override public boolean apply(  @Nonnull BatchReport.Measure input){     return input.getMetricKey().equals(metric.getKey());   } } ,null)
paramEntry.getValue()
inLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
new SelectWidget("Show server home page:",new String[]{"Automatic","Always","Never"},new String[]{"sessions","always","never"},false,true,false)
setup(context)
renderedObject.getId() % 2 == 1
forced == null || con.getListener().isForceDefault()
SHORT_CF_NAMES_DEFAULT=false
entity.addReference(referenceEntity)
public ExecutionStrategyParameters transform(Consumer<Builder> builderConsumer){   Builder builder=newParameters(this);   builderConsumer.accept(builder);   return builder.build(); } 
localInputFuture.cancel(mayInterruptIfRunning)
physType.comparer()
mMenuDrawer.isMenuVisible()
assertEquals(0,dataCountsDoc.get("bucket_count"))
javaVersion < 8
mActiveStreamType == -1 || streamType != mActiveStreamType
Files.createDirectories(destPath)
dirDirtyRecursively(myProject.getBaseDir(),true)
bits2[1] == true
JNIExceptionHandlerReturnNullHandle.class
postResourcesElementDesc.getStoreFactory()
DynamicCounter.increment(filterName,"status","success","type",filter.filterType())
JMeterUtils.getPropDefault("proxy.cert.validity",90)
new RaftMessages.HeartbeatResponse(myself)
new IOException("Test IOException")
timeout=30000
NFC_UID=1027
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA("DHE-RSA-DES-CBC3-SHA",KeyExchange.EDH,Authentication.RSA,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA")
LOG.debug("EOL(end-of-line) defined for the CSV: {}",eol)
viewCache.getObject(monitor,this,name,DB2View.class)
descriptor.getKind() != ClassKind.TRAIT && descriptor.getKind() != ClassKind.OBJECT
"Error resetting interface " + mTetherInterfaceName + ", :"+ e
assertThat(stack.selectChangelog("ISSUE-1")).isEmpty()
return _repositoryConfiguration; 
value="email_index"
powerQuery[i] == 0.0d && internalNextPower[i] > 0
paintBorder.top > 1
block != null && block.getTextRange().getLength() > 1
Collectors.toMap(Entry::getKey,Entry::getValue,(k,v) -> k)
new BTreeMap<K,Object>(engine,nodeSize,false,false,defaultSerializer,serializer,null,comparator)
query.assignees().toArray()
Boolean.parseBoolean(literalOption)
size <= MAX_SEQ_LENGTH
new ConcurrentHashMap<Class<?>,Boolean>(256)
isActive() && mInfo != null
assertEquals(1,stages.get(0).getAttemptCount(hostname,"SECONDARY_NAMENODE"))
vs == 0xFE0E || testCase.mVariationSelectors.contains(vs)
DfsSearchResult.addOne(stats.totalTermFreq())
verifyPosition(decoder,text("*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"))
Messages.getString("Spoon.ExportResourceZipFileExists.Message",zipFilename)
String resource
new CompletionThread(w,TestConcurrencyObserverEvent.onCompleted,f1,f2,f3,f4,f5,f6,f7,f8)
assertEquals("helloworld",ss.getSalt())
ItemStack.areItemStackTagsEqual(stack,result)
F.asList(ctx.store(),ctx.events(),ctx.evicts(),ctx.queries(),ctx.continuousQueries(),ctx.dr(),ctx.offheap())
AbstractCompactionIterable.class
world.scheduleUpdate(pos,state.getBlock(),state.getBlock().tickRate(world))
server.getPlayerExact(name)
values.get("error").toString()
iterations == 0
HMSHANDLERATTEMPTS("hive.hmshandler.retry.attempts",10,"The number of times to retry a HMSHandler call if there were a connection error.")
15 * MINUTES
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
StringEscapeUtils.escapeXml10(atts.getValue(i))
mAudioHandler.hasMessages(MSG_SET_A2DP_SINK_CONNECTION_STATE,btDevice)
Color.fromRGB(0x41CD34)
getMainAreaHeight()
BuildAndDecodeJarTest.class
assertCompletionVariants(myProjectPom,"jar","test-jar","pom","ear","ejb","ejb-client","war","bundle","jboss-har")
new IllegalStateException(ex)
Color.fromRGB(0xB3312C)
this(deploymentName,maxSessions,false); 
/**   * Returns a client with all our selected properties / params.  * @return client  */ public static final HttpClient getClient(){   return getClient(connectionTimeout); } 
List<ByteBuffer>
1.083f * t
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsWrite")
super.getCollectionSizeEqualsProvider(path)
Cheese.class
view.switchMap(v -> v.lifecycle().map(e -> Pair.create(v,e)))
position.getServerTime()
logger.debug("[{}][{}] failed to multi percolate",e,request.index(),request.shardId())
q.getColRef()
atomicityMode() == CacheAtomicityMode.TRANSACTIONAL || (atomicityMode() == CacheAtomicityMode.ATOMIC && nearEnabled())
runtimeContextFactory.create(environment,openShiftEnvironment,id,this)
@Override public AbstractConfigValue get(Object key){   if (key instanceof String)   return peek((String)key);  else   return null; } 
!mConfiguration.isInMemoryDb() && (mConfiguration.openFlags & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_zsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
row.slider.setProgress(newProgress,true)
/**   * {@inheritDoc}  */ @Override public Broadcaster removeAtmosphereResource(AtmosphereResource r){   if (destroyed.get()) {     logger.debug(DESTROYED,getID(),"removeAtmosphereResource(AtmosphereResource r)");     return r;   }   if (!resources.contains(r)) {     return null;   }   boolean removed=resources.remove(r);   if (removed) {     if (resources.isEmpty()) {       notifyEmptyListener();       if (scope != SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) {         releaseExternalResources();       }  else       if (scope == SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) {         BroadcasterFactory.getDefault().remove(this,name);         destroy();       }     }   }   return r; } 
getTableName(filter)
motionPosition >= 0
client.services()
writer.close()
TEST_STREAM_KEYS_SIZE=10000
moduleRegistry.getModule("gradle-test-kit").getImplementationClasspath()
indexLock.writeLock()
return __assumedEncodings; 
folderName=FONT_16SP
/**   * Indicates that the user's friends are able to see posts made by the application.  */ FRIENDS(NativeProtocol.AUDIENCE_FRIENDS)
mPowerManager.isInteractive()
temp.requestFocusInWindow()
taskClass.findClassAttribute("description",true)
logger.warn("{} invalid: {}",getEntityClass().getSimpleName(),msg)
configuration.copy()
i.remove()
config.getBroadcasterFactory().lookup(m.broadcaster(),path,true)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
Timber.v(e,"Permanent failure during XOAUTH2")
onHold & ON_HOLD_REMOTELY
ids.getIDs().length > 50
factory.get(mResponseWildcard,NO_ANNOTATIONS,retrofit)
LOG.debug(" job " + job.getName() + " completed ")
!mPrefWriteAnswers
braceStyle == CodeStyleSettings.END_OF_LINE || braceStyle == CodeStyleSettings.NEXT_LINE_IF_WRAPPED
dest.writeValue(this.milestone)
ftrain.numRows() != training_rows
number.contains("A")
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public boolean onContextMenuClick(  ArrayAdapter<?> adapter,  int itemId,  int pos,  boolean isChecked){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }     return true;   } } ).position(16)
hasVisibleChildren(group,myRealUpdateStrategy)
new ServerPing.Players(listener.getMaxPlayers(),bungee.getOnlineCount())
getGlobalOptions().setManualOrder(enabled)
entity instanceof ProcessDefinitionEntity
(data[readAt++] & 0xffL) << 56
protected T getCurrentTree(){   return myCurrentTree; } 
addMedia(mediaUri)
new MaxNParallelTestClassProcessor(testTask.getMaxParallelForks(),reforkingProcessorFactory,actorFactory)
final LongAdder8 sum=new LongAdder8(); 
assertEquals(response.getResponseBody().length(),3873)
caretOffset > indent && document.getTextLength() > offset + indent
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",true))
HashMap.class
JCVideoPlayerManager.lastListener()
ChannelBuffers.wrappedBuffer(request.getByteData())
clazz == null || !(clazz instanceof JSQualifiedNamedElement)
!TextSecurePreferences.isPushRegistered(this) || !TextSecurePreferences.isWebrtcCallingEnabled(this) || isGroupConversation()
Preconditions.checkNotNull(jobName,"Streaming Job name should not be null.")
new UnderFileStatus("dummy",0L,isDirectory,0L,"owner","group",(short)077)
_certWilds.isEmpty()
log.logError(BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryNotExists.Label"))
outLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
onFailed(x)
labelsMask != null
assertTrue(predicate.apply(pickleEvent))
log.warn("Expected " + s.getStyleId() + " to have <w:basedOn ??")
sm.getString("namingContext.nameNotBound",name,name.get(0))
parsePrimaryConstructorParameterList()
new LFWDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,nChannels},outputNum,useSubset,true,new Random(seed))
notifyItemRangeRemoved(flatPosition,removedCount)
@NotNull ModuleExtension o
case FORWARD: 
new PartialEscapeAnalysisPhase(null,runtime(),assumptions,iterativeEscapeAnalysis)
resolveFromIndices(localProcessor)
in.readFully(message)
Long.toString(localExpire)
Character.class
new WelcomePagerAdapter(this,getIntent().hasExtra(TOKEN_MANUAL_SHOW))
LibraryTableEditor.editLibraryTable(getGlobalLibrariesProvider(),myProject)
_log.error("Bundles " + collidedBundleNames + " have the same Web-ContextPath. This can lead to"+ " unexpected behavior when the bundles are deployed"+ " to the same layout")
minSimilar > 1
!"".equals(callBeep.canPlayType("audio/ogg;"))
program.getUuid()
CacheData<RealmObject>
Map<String,String>
StatsLog.write(StatsLog.ANR_OCCURRED,app.uid,app.processName,activity == null ? "unknown" : activity.shortComponentName,annotation,(app.info != null) ? (app.info.isInstantApp() ? StatsLog.ANROCCURRED__IS_INSTANT_APP__TRUE : StatsLog.ANROCCURRED__IS_INSTANT_APP__FALSE) : StatsLog.ANROCCURRED__IS_INSTANT_APP__UNAVAILABLE,app != null ? (app.isInterestingToUserLocked() ? StatsLog.ANROCCURRED__FOREGROUND_STATE__FOREGROUND : StatsLog.ANROCCURRED__FOREGROUND_STATE__BACKGROUND) : StatsLog.ANROCCURRED__FOREGROUND_STATE__UNKNOWN)
path.endsWith(".js") || path.endsWith(".json")
myCell.getSourceAsString()
MultiLayerNetwork.class
BuildEventStreamProtos.BuildStarted.newBuilder().setUuid(request.getId().toString()).setStartTimeMillis(request.getStartTime())
routerChain.notifyFullInvokers(invokers,getUrl())
item < txId
telephony.getNeighboringCellInfo(mContext.getOpPackageName())
log.warn(exception.getMessage())
JournalArticleLocalServiceUtil.search(TestPropsValues.getCompanyId(),_group.getGroupId(),folderIds,JournalArticleConstants.CLASSNAME_ID_DEFAULT,null,null,null,null,keyword,"","",null,null,status,null,false,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
case INODE_REFERENCE: 
!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())
message.getToTag()
getIEuiccController().updateSubscriptionNickname(subscriptionId,nickname,mContext.getOpPackageName(),callbackIntent)
putProject(null,folder,true,true)
mBluetoothGatt.startScan(mScannerId,mSettings,mFilters,mResultStorages,ActivityThread.currentOpPackageName())
i < tupleType.getElementCount()
tnext.getValue()
parentId != null
new Intent(Intent.ACTION_USER_PRESENT)
value=data[byteOffset]
@NotNull JsonNumberLiteral value
nodeTextIndex < nodeText.getElements().size()
public SimpleAttributeBinding getValueBinding(){   return attributeBinding; } 
changeAffiliationByAdmin(jid,"owner",null)
new IllegalArgumentException("Could not instantiate Collection type: " + collectionType.getName(),ex)
ListDataSink.get(1)
LOG.warn("src link in the context java doc window does not attached")
labels.size()
logger.warn("Table spec retrieval failed, couldn't find table spec: " + modelName)
new HtmlExporter()
body.isEmpty()
isFormat(format,F50,F51,F52)
revisionVersion=6
index >= n
new MultiSearchResponse(new MultiSearchResponse.Item[]{new MultiSearchResponse.Item(response,null)},randomNonNegativeLong())
triggerManager.getRules(CHANGE,item,oldState,newState)
list.append(ai)
pe instanceof DuplicateLockException
hStack.getScrollHeight() + vLayout.getScrollHeight() + 10
grid(0).cache(null)
String.format("BUG: %s changed score during rematch: %d -> %d",newNetwork.name(),score,newNetwork.getCurrentScore())
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the IQ provider.  */ public static PrivateData getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return privateDataProviders.get(key); } 
dynamicServletRequest.getParameterValues(name)
SC_DUPLICATE_FILE_EXCEPTION=490
getNumberOfJournalFiles() <= 4
(currentCon != null) && (currentCon.getMode() == Conversation.MODE_MULTI) && (!alwaysNotify)&& notify
"cache." + propertiesName + ".size"
(CustomEditText)findViewById(R.id.hostUrlInput)
openFileDescriptor == null || !openFileDescriptor.getFile().isValid()
rotationVector.length >= 4
chain.resolveUrlPath(resourceUrlPath,locations).switchIfEmpty(Mono.defer(() -> {   String webJarResourcePath=findWebJarResourcePath(resourceUrlPath);   if (webJarResourcePath != null) {     return chain.resolveUrlPath(webJarResourcePath,locations);   }  else {     return Mono.empty();   } } ))
number.longValue()
BorrowablePath.notBorrowablePath(output.getUnchecked())
StringUtils.trimToEmpty(comparisonObjectSchema.getName())
mView.setVisibility(mFinalVisibility)
target != null && !target.isEmpty()
ordinals.size()
authenticator.executeCommandAndAuthenticateIfNecessary(myProject,myRepo,myDestination,"push",arguments,arguments.size() - 1)
random.nextInt(currentSize + 1) != 0
Executors.newScheduledThreadPool(1,new NamedThreadFactory("Strong-Reference-Leak-Detector"))
propMember.getType()
new DBException(String.format("Error while creating Aerospike " + "client for %s:%d.",host,port),e)
void setting(int identifier,long value) throws ConnectionException ; 
id=43
TokenSet.create(JavaTokenType.C_STYLE_COMMENT,JavaTokenType.END_OF_LINE_COMMENT,JavaDocElementType.DOC_COMMENT,TokenType.WHITE_SPACE)
"ppc64".equals(arch) || "ppc64le".equals(arch) || "aarch64".equals(arch)
i > 0 && i < 8
URI.create(super.getHeader(name)).getRawPath()
spawnSettings.containsKey(id)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() == 0
!reversed
IllegalArgumentException ise
new GenericItem("Test","Test"){   @Override public List<Class<? extends State>> getAcceptedDataTypes(){     return null;   }   @Override public List<Class<? extends Command>> getAcceptedCommandTypes(){     return null;   } } 
control.getEmptyRowHeight()
GlobalPlanImplV0.class
name.trim()
wrapDetails(sku,quantity,request)
LOG.error("Should have transformed " + managedClassName + " but didn't")
account.getId()
ConfigAssertions.recordDefaults(FeaturesConfig.class).setExperimentalSyntaxEnabled(false).setDistributedIndexJoinsEnabled(false).setDistributedJoinsEnabled(true).setRedistributeWrites(true).setOptimizeMetadataQueries(false).setOptimizeHashGeneration(true).setOptimizeSingleDistinct(true).setPushTableWriteThroughUnion(true)
strategiesBuilder::customMessageWriter
!visible || outerCircleCenter == null
value == 0
bungee.getTranslation("outdated_client",bungee.getGameVersion())
new IllegalStateException("Unable to initialize codec with ClassLoader parameter",e)
((Context)entry.value).destroySubcontext(name.getSuffix(1))
PortletFileRepositoryUtil.getPortletRepositoryId(groupId,PortletKeys.DOCUMENT_LIBRARY,serviceContext)
sw.toString().getBytes("utf-8")
RuntimeException.class
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",null,paging.asPostParameterList(),true))
selenium.uploadFile("//input[@id='_86_importFileName']",RuntimeVariables.replace("L:\\portal\\build\\portal-web\\test\\com\\liferay\\portalweb\\portlet\\mediagallery\\dependencies\\Media_Gallery-Selenium.portlet.lar"))
@Autowired GraphTraversalService graphTraversalService; 
2 - iteration
clauses.size() > 0 && conj == CONJ_AND
message.getPresence().getResourcepart()
assertEquals(0.2087662734069947,mses[i],1e-4)
ObjectStore.isCurrentStatsValidForTheQuery(conf,params,statsWriteId,writeIdString,false)
Nd4j.randn(order,shape).muli(FastMath.sqrt(2.0 / (fanIn + fanOut)))
List<CallServiceInfo>
Object message=messageObj.get("d"); 
-4
getItemViewType(wantedPosition)
CloudJettyRunner lastJetty=null; 
!((Player)target).isOnline()
IOConverter.toString(out,null)
new ModLoaderModContainer(bmClazz,canonicalFile)
public ISOLatin1AccentFilter create(TokenStream input){   return new ISOLatin1AccentFilter(input); } 
texCoords.put(updateTexCoordArray,offset,size)
new PriorityTieredBrokerSelectorStrategy(1,1)
TIMEOUT=30000
new InetSocketAddress(0)
JournalTestUtil.updateArticle(article,"Content: Enterprise. Open Source. For Life.",article.getContent(),serviceContext)
mapper.setSqlSessionTemplate(sqlSessionTemplate)
AbstractTreeNode<PsiElement>
documented=false
getContext().enforceCallingPermission(android.Manifest.permission.CHANGE_OVERLAY_PACKAGES,message)
StringUtils.isEmpty(objectId) || "HEAD".equalsIgnoreCase(objectId)
new MongoSynchronization(holderToUse,mongo)
endOffset - 1
stream.getProperty(NettyServerStream.class)
createLightFile("Test.java","class Test extends Type {\n}")
colIndex > columnTypes.length
String.format(formatStr,container.getContainerID(),openStatus,data.getDBPath(),data.getContainerPath(),"",datanodeDetails.getHostName(),datanodeDetails.getHostName())
code == null || code.length() == 0
new FPSAnimator(window,60)
conferenceInfo.appendChild(users)
threadCount=25
Long.parseLong(attrValue)
AbstractBeginNode beginNode=block.getBeginNode(); 
parameters == null || parameters.length == 0
jabberStatusToPresenceStatus(o1,parentProvider)
TcpChannel channel
mErrorPopup.showAsDropDown(mTextView,getErrorX(),getErrorY(),Gravity.TOP | Gravity.LEFT)
myMatcher.getElementsByPattern(namePattern,name,myCheckboxState,new Computable<Boolean>(){   public Boolean compute(){     return myCancelled;   } } )
classes.getPath()
Lists.newArrayList(stream1,stream2)
appInfo.targetSdkVersion > O
allDefinitions != null && composed.getInterfaces() != null
in.read(buffer,read,buffer.length - read)
new IllegalArgumentException("Cannot determine if commit is consistent")
getPropertyAsString(IMPLEMENTATION,DEFAULT_IMPLEMENTATION)
this.contactTabsTable.put(contact.getMetaUID(),chatPanel)
type != SessionInfo.BUILD_TOOLS_PACKAGE
RecursivePkgValue.key(repository,RootedPath.toRootedPath(root,directory),filteredBlacklistedSubdirectories)
new Spinner(getContext(),null,R.attr.actionDropDownStyle)
Long.toString(bitstampOrder.getId())
child.mAttrs.type == WindowManager.LayoutParams.TYPE_WALLPAPER && child.isVisibleLw()
region.getRegionHeight()
DeprecationLogger.nagUserWith("<someIdeTask>.withXml is deprecated! Moved to the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
myError != null
DiagnosticType.error("AMBIGUOUS_FUNCTION_DECL","Ambiguous use of a named function: {0}.")
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + b.txt","D a.txt")
container.getVersionId()
super(8081,new File(".")); 
dlFileEntryLocalService.getFileEntries(groupId,folderId)
Base64.encodeBytes(key,Base64.DONT_BREAK_LINES)
pairs != null && pairs.getKeyValues() != null
Assert.assertEquals(122L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
Utils.readLong(binary,8)
holder.setGone(getLoadFailViewId(),visible)
EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING,ExecutableState.ERROR)
dexBuf.readUshort(interfacesOffset + 4 + (2 * index))
baseRevision != null && !baseRevision.getRevision().isEmpty()
errorCount >= maxErrors
executedBulkWrite=true
new DefaultPaymentMethod(input,getPaymentMethodDetail(pluginPms,input.getExternalId()))
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))
getClass().getSimpleName()
toJSON(item,config)
ctx != null && ctx != 0
logger.debug("Cannot add group member ({})",e.getMessage())
onFailure(new JSONException("Unexpected type " + jsonResponse.getClass().getName()),(JSONObject)null)
/**   * The component supports both opt-in and opt-out warnings on a per-user basis using a simple algorithm of three variables: <ol> <li> {@link #setWarningAttributeName(String) warningAttributeName}</li> <li> {@link #setWarningAttributeValue(String)} warningAttributeValue}</li><li> {@link #setDisplayWarningOnMatch(boolean) displayWarningOnMatch}</li> </ol> The first two parameters define an attribute on the user entry to match on, and the third parameter determines whether password expiration warnings should be displayed on match. <p> Deployers MUST configure LDAP components to provide <code>warningAttributeName</code> in the set of attributes returned from the LDAP query for user details.  * @author Marvin S. Addison  */ public class OptionalWarningAccountStateHandler extends DefaultAccountStateHandler {   /**   * Name of user attribute that describes whether or not to display expiration warnings.   */   @NotNull private String warningAttributeName;   /**   * Attribute value to match.   */   @NotNull private String warningAttributeValue;   /**   * True to opt into password expiration warnings on match, false to opt out on match.   */   private boolean displayWarningOnMatch=true;   /**   * Sets the user attribute used to determine whether to display password expiration warnings.  * @param warningAttributeName Attribute on authenticated user entry.  */   public void setWarningAttributeName(  final String warningAttributeName){     this.warningAttributeName=warningAttributeName;   }   /**   * Sets the value of  {@link #warningAttributeName} used as basis of comparison.  * @param warningAttributeValue Value to match against.  */   public void setWarningAttributeValue(  final String warningAttributeValue){     this.warningAttributeValue=warningAttributeValue;   }   /**   * Determines whether password expiration warnings are opt-in or opt-out.  * @param displayWarningOnMatch True to opt into password expiration warnings on match, false to opt out on match.Default is true.  */   public void setDisplayWarningOnMatch(  final boolean displayWarningOnMatch){     this.displayWarningOnMatch=displayWarningOnMatch;   }   @Override protected void handleWarning(  final AccountState.Warning warning,  final AuthenticationResponse response,  final LdapPasswordPolicyConfiguration configuration,  final List<Message> messages){     final LdapAttribute attribute=response.getLdapEntry().getAttribute(this.warningAttributeName);     boolean matches=false;     if (attribute != null) {       matches=this.warningAttributeValue.equals(attribute.getStringValue());     }     if (displayWarningOnMatch == matches) {       super.handleWarning(warning,response,configuration,messages);     }   } } 
processEngineConfiguration.setEnableSafeBpmnXml(true)
new AutoCompleteListener(searchAutoCompleter)
new ObjectMapper().readerFor(defaultInstance().constructCollectionType(List.class,DiskBalancerWorkEntry.class))
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
(imgRef != null) && !imgRef.isEmpty() && (imgRef.charAt(0) == '#')
_connector.getResponse("METHOD /foo HTTP/1.0\name: f+" + ooo + "\n\n")
T[]
database.getDatabaseMajorVersion() < 9
!active
spec.multiPart(controlName,contentBody,mimeType)
LOGGER.debug(e.getMessage(),e)
!CodeStyleSettingsManager.getSettings(myProject).LINE_COMMENT_AT_FIRST_COLUMN
type.getIconKeyName()
assertTrue(getProjectActions().toString(),getProjectActions().contains(id))
fragmentEntryPersistence.countByG_FCI_S(groupId,fragmentCollectionId,status)
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,0.012242754628809,DeepLearningModel.DeepLearningParameters.Activation.Rectifier)
new DefaultConfiguration(new DataSourceConnectionProvider(datasource),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
Assert.assertEquals(transitions.size(),3)
order=0
writer.writeUshort(getReferenceIndex(instruction))
WRONG_SHARED_SECRET=101
LOG.warn("delete failed: {}",e.getMessage())
new LightweightThread(null,null,new MergeTest())
UpdateValueAndNotifyManager()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(42)
migrateXmlString(content,22,35)
before == after
doAnswer(new Answer<Object>(){   @Override public Object answer(  InvocationOnMock invocation) throws Throwable {     sem.release();     return null;   } } ).when(loggerMock).warn(anyString())
StampFactory.declaredTrusted(type.getComponentType())
err.jspError("jsp.error.tld.mandatory.element.missing","tlib-version",uri)
type.getDeclaredConstructor()
toSetIn.length() <= 1
Preconditions.checkNotNull(value)
PetiteReferenceType... lookupReferences
getNext().invoke(proxy,method,args)
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
b.getBroadcasterConfig().applyFilters(r,t)
cleanString(nameAttribute.getValue())
httpServletRequest.getParameterValues(name)
mTextColorLink.getColorForState(ds.drawableState,0)
@Override public final DivideByOnConditionStep andNotExists(Select<?> select){   return and(notExists(select)); } 
new GraphQLException("no operation found")
logger.warn("Field sorting failed!")
new JarResourceRoot(root,new File(getBase()),baseUrlString,path)
log.debug("Not in OSGi: using plexus based maven parser")
i <= uri.length() - 2
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportFromCompanionObject.kt")
scope == null
new MethodDescription.Token(FOO,MODIFIERS,Collections.singletonList(mock(GenericTypeDescription.class)),first,Collections.singletonList(secondParameter),Collections.singletonList(mock(GenericTypeDescription.class)),Collections.singletonList(mock(AnnotationDescription.class)),null)
melody.length() - 1
outputDir.mkdirs()
ErrorPageFilter.class
columnSums.sum(1)
params[9]
!eventsDone.remove(event)
retry=0
/**   * Integration tests for GRPC over Http2 using the OkHttp framework.  */ @RunWith(JUnit4.class) public class Http2OkHttpTest extends AbstractInteropTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer() throws Exception {     try {       SslProvider sslProvider=SslContext.defaultServerProvider();       if (sslProvider == SslProvider.OPENSSL && !OpenSsl.isAlpnSupported()) {         sslProvider=SslProvider.JDK;       }       SslContextBuilder contextBuilder=SslContextBuilder.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key"));       GrpcSslContexts.configure(contextBuilder,sslProvider);       contextBuilder.ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE);       startStaticServer(NettyServerBuilder.forPort(serverPort).sslContext(contextBuilder.build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer() throws Exception {     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort(TestUtils.TEST_SERVER_HOST,serverPort));     try {       builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")));     }  catch (    Exception e) {       throw new RuntimeException(e);     }     return builder.build();   }   @Test(timeout=10000) public void receivedDataForFinishedStream() throws Exception {     Messages.ResponseParameters.Builder responseParameters=Messages.ResponseParameters.newBuilder().setSize(1);     Messages.StreamingOutputCallRequest.Builder requestBuilder=Messages.StreamingOutputCallRequest.newBuilder().setResponseType(Messages.PayloadType.COMPRESSABLE);     for (int i=0; i < 1000; i++) {       requestBuilder.addResponseParameters(responseParameters);     }     StreamRecorder<Messages.StreamingOutputCallResponse> recorder=StreamRecorder.create();     StreamObserver<Messages.StreamingOutputCallRequest> requestStream=asyncStub.fullDuplexCall(recorder);     requestStream.onNext(requestBuilder.build());     recorder.firstValue().get();     requestStream.onError(new Exception("failed"));     recorder.awaitCompletion();     emptyUnary();   }   @Test(timeout=10000) public void wrongHostNameFailHostnameVerification() throws Exception {     OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress("127.0.0.1",serverPort).connectionSpec(new ConnectionSpec.Builder(OkHttpChannelBuilder.DEFAULT_CONNECTION_SPEC).cipherSuites(TestUtils.preferredTestCiphers().toArray(new String[0])).tlsVersions(ConnectionSpec.MODERN_TLS.tlsVersions().toArray(new TlsVersion[0])).build()).overrideAuthority(GrpcUtil.authorityFromHostAndPort("I.am.a.bad.hostname",serverPort));     ManagedChannel channel=builder.sslSocketFactory(TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem"))).build();     TestServiceGrpc.TestServiceBlockingStub blockingStub=TestServiceGrpc.newBlockingStub(channel);     try {       blockingStub.emptyCall(Empty.getDefaultInstance());       fail("The rpc should have been failed due to hostname verification");     }  catch (    Throwable t) {       Throwable cause=Throwables.getRootCause(t);       assertTrue("Failed by unexpected exception: " + cause,cause instanceof SSLPeerUnverifiedException);     }     channel.shutdown();   } } 
internedAnnotationSetRefItems.get(annotationSetRefKey)
registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT,ModClusterEnableContext.INSTANCE,enableContext,false,runtimeOnlyFlags)
other instanceof BitDocSet
classFile.matcher(file.getName()).matches()
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(host);   } } )
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_class_name"))
VERSION=23
this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)
saveCredentialsInSmartLock()
generator.toJson(json.toString())
sStatsd.informDeviceShutdown()
mediaController != null && player != null
gavin.getStudentNumber()
taskService.createTaskQuery().or().taskInvolvedUser("involvedUser").taskInvolvedGroupsIn(groups)
DummyObject t
new MongoClientEmbeddedException(format("Connection String contains invalid hosts: %s",connectionString.getHosts()))
!classType.hasTypeTree()
new DMLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
TimeUtils.millis()
WatchlistConfig.getInstance().isConfigSecure()
Assert.assertEquals(21,Context.getAdministrationService().getAllGlobalProperties().size())
nearbyTransportStopRoutes != null && nearbyTransportStopRoutes.size() > 0
new RootModelImpl(myRootModel,this,true,accessor,myFilePointerManager,myProjectRootManager){   @Override public void dispose(){     super.dispose();     if (Disposer.isDebugMode()) {       myModelCreations.remove(this);     }     for (    OrderEntry entry : ModuleRootManagerImpl.this.getOrderEntries()) {       assert !((RootModelComponentBase)entry).isDisposed();     }   } } 
mMat[5]
Long.valueOf(sizeInBytesProp)
formatInfo.getFormat() == 7
value == Long.MAX_VALUE
valueFormatter != null && !(valueFormatter instanceof ValueFormatter.Raw)
this.cleanedUrl
assertEquals("We have all the items via GameData",392,Item.REGISTRY.getKeys().size())
data.getBytes(response.getCharacterEncoding())
reportMissingOverride.isOn() && !declaredOverride && superClassHasDeclaredProperty&& declaredLocally&& !"__proto__".equals(propertyName)
!calledSetTotal
id=10842
(i & RSV_BITMASK) != 0
Exception e
arguments != null && arguments.length > 0
LensPositionSelectors.external()
Color.fromRGB(0xD88198)
Integer.class
verifyPosition(decoder,text("(865733028143493,00I76,00,000,,,,,A,133755,210617,10.57354,077.24912,SW,000,00598,00000,K,0017368,1,12.7,,,0.000,,,0,0,0,0,1,1,0,,)074"))
new ConcurrentHashMap<String,RootBeanDefinition>(256)
@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
Timber.e("Cannot remove EXPUNGEd messages")
new FrameTask.DataInfo(train,1,false,true,!classification,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_configuration,_templateContextHelper,false)
new IllegalArgumentException("Could not create keystore: " + e.getMessage(),e)
getKey(companyId,repositoryId,dirName)
ConcurrentHashMap<String,Presence>
proratedOrderAdjustment.compareTo(BigDecimal.ZERO) != 0
this.evaluator.prepareRightObject(handle)
LOG_KEY_EVENTS=false
id=10830
case 9: 
public class BackupManagerService implements BackupManagerServiceInterface {   private static final String TAG="BackupManagerService";   static final boolean DEBUG=true;   static final boolean MORE_DEBUG=false;   static final boolean DEBUG_SCHEDULING=MORE_DEBUG || true;   static final String BACKUP_ENABLE_FILE="backup_enabled";   static final String KEY_WIDGET_STATE="\uffed\uffedwidget";   static final String PBKDF_CURRENT="PBKDF2WithHmacSHA1";   static final String PBKDF_FALLBACK="PBKDF2WithHmacSHA1And8bit";   static final String BACKUP_MANIFEST_FILENAME="_manifest";   static final int BACKUP_MANIFEST_VERSION=1;   static final int BACKUP_FILE_VERSION=5;   static final String BACKUP_FILE_HEADER_MAGIC="ANDROID BACKUP\n";   static final int BACKUP_PW_FILE_VERSION=2;   static final String BACKUP_METADATA_FILENAME="_meta";   static final int BACKUP_METADATA_VERSION=1;   static final int BACKUP_WIDGET_METADATA_TOKEN=0x01FFED01;   static final int TAR_HEADER_LONG_RADIX=8;   static final int TAR_HEADER_OFFSET_FILESIZE=124;   static final int TAR_HEADER_LENGTH_FILESIZE=12;   static final int TAR_HEADER_OFFSET_MODTIME=136;   static final int TAR_HEADER_LENGTH_MODTIME=12;   static final int TAR_HEADER_OFFSET_MODE=100;   static final int TAR_HEADER_LENGTH_MODE=8;   static final int TAR_HEADER_OFFSET_PATH_PREFIX=345;   static final int TAR_HEADER_LENGTH_PATH_PREFIX=155;   static final int TAR_HEADER_OFFSET_PATH=0;   static final int TAR_HEADER_LENGTH_PATH=100;   static final int TAR_HEADER_OFFSET_TYPE_CHAR=156;   static final boolean COMPRESS_FULL_BACKUPS=true;   static final String SETTINGS_PACKAGE="com.android.providers.settings";   static final String SHARED_BACKUP_AGENT_PACKAGE="com.android.sharedstoragebackup";   static final String SERVICE_ACTION_TRANSPORT_HOST="android.backup.TRANSPORT_HOST";   private static final long TRANSPORT_RETRY_INTERVAL=1 * AlarmManager.INTERVAL_HOUR;   private static final String RUN_BACKUP_ACTION="android.app.backup.intent.RUN";   private static final String RUN_INITIALIZE_ACTION="android.app.backup.intent.INIT";   private static final int MSG_RUN_BACKUP=1;   private static final int MSG_RUN_ADB_BACKUP=2;   private static final int MSG_RUN_RESTORE=3;   private static final int MSG_RUN_CLEAR=4;   private static final int MSG_RUN_INITIALIZE=5;   private static final int MSG_RUN_GET_RESTORE_SETS=6;   private static final int MSG_RESTORE_SESSION_TIMEOUT=8;   private static final int MSG_FULL_CONFIRMATION_TIMEOUT=9;   private static final int MSG_RUN_ADB_RESTORE=10;   private static final int MSG_RETRY_INIT=11;   private static final int MSG_RETRY_CLEAR=12;   private static final int MSG_WIDGET_BROADCAST=13;   private static final int MSG_RUN_FULL_TRANSPORT_BACKUP=14;   private static final int MSG_REQUEST_BACKUP=15;   private static final int MSG_SCHEDULE_BACKUP_PACKAGE=16;   private static final int MSG_BACKUP_OPERATION_TIMEOUT=17;   private static final int MSG_RESTORE_OPERATION_TIMEOUT=18;   static final int MSG_BACKUP_RESTORE_STEP=20;   static final int MSG_OP_COMPLETE=21;   static final long TIMEOUT_INTERVAL=10 * 1000;   static final long TIMEOUT_BACKUP_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_BACKUP_INTERVAL=5 * 60 * 1000;   static final long TIMEOUT_SHARED_BACKUP_INTERVAL=30 * 60 * 1000;   static final long TIMEOUT_RESTORE_INTERVAL=60 * 1000;   static final long TIMEOUT_RESTORE_FINISHED_INTERVAL=30 * 1000;   static final long TIMEOUT_FULL_CONFIRMATION=60 * 1000;   static final long MIN_FULL_BACKUP_INTERVAL=1000 * 60 * 60* 24;   static final long BUSY_BACKOFF_MIN_MILLIS=1000 * 60 * 60;   static final int BUSY_BACKOFF_FUZZ=1000 * 60 * 60* 2;   Context mContext;   private PackageManager mPackageManager;   IPackageManager mPackageManagerBinder;   private IActivityManager mActivityManager;   private PowerManager mPowerManager;   private AlarmManager mAlarmManager;   private IStorageManager mStorageManager;   IBackupManager mBackupManagerBinder;   private final TransportManager mTransportManager;   boolean mEnabled;   boolean mProvisioned;   boolean mAutoRestore;   PowerManager.WakeLock mWakelock;   HandlerThread mHandlerThread;   BackupHandler mBackupHandler;   PendingIntent mRunBackupIntent, mRunInitIntent;   BroadcastReceiver mRunBackupReceiver, mRunInitReceiver;   final SparseArray<HashSet<String>> mBackupParticipants=new SparseArray<HashSet<String>>(); class BackupRequest {     public String packageName;     BackupRequest(    String pkgName){       packageName=pkgName;     }     public String toString(){       return "BackupRequest{pkg=" + packageName + "}";     }   }   HashMap<String,BackupRequest> mPendingBackups=new HashMap<String,BackupRequest>();   static final String PACKAGE_MANAGER_SENTINEL="@pm@";   final Object mQueueLock=new Object();   final Object mAgentConnectLock=new Object();   IBackupAgent mConnectedAgent;   volatile boolean mBackupRunning;   volatile boolean mConnecting;   volatile long mLastBackupPass;   static final boolean DEBUG_BACKUP_TRACE=true;   final List<String> mBackupTrace=new ArrayList<String>();   final Object mClearDataLock=new Object();   volatile boolean mClearingData;   @GuardedBy("mPendingRestores") private boolean mIsRestoreInProgress;   @GuardedBy("mPendingRestores") private final Queue<PerformUnifiedRestoreTask> mPendingRestores=new ArrayDeque<>();   ActiveRestoreSession mActiveRestoreSession;   ContentObserver mProvisionedObserver;   static Trampoline sInstance;   static Trampoline getInstance(){     return sInstance;   } public static final class Lifecycle extends SystemService {     public Lifecycle(    Context context){       super(context);       sInstance=new Trampoline(context);     }     @Override public void onStart(){       publishBinderService(Context.BACKUP_SERVICE,sInstance);     }     @Override public void onUnlockUser(    int userId){       if (userId == UserHandle.USER_SYSTEM) {         sInstance.initialize(userId);         if (!backupSettingMigrated(userId)) {           if (DEBUG) {             Slog.i(TAG,"Backup enable apparently not migrated");           }           final ContentResolver r=sInstance.mContext.getContentResolver();           final int enableState=Settings.Secure.getIntForUser(r,Settings.Secure.BACKUP_ENABLED,-1,userId);           if (enableState >= 0) {             if (DEBUG) {               Slog.i(TAG,"Migrating enable state " + (enableState != 0));             }             writeBackupEnableState(enableState != 0,userId);             Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId);           }  else {             if (DEBUG) {               Slog.i(TAG,"Backup not yet configured; retaining null enable state");             }           }         }         try {           sInstance.setBackupEnabled(readBackupEnableState(userId));         }  catch (        RemoteException e) {         }       }     }   } class ProvisionedObserver extends ContentObserver {     public ProvisionedObserver(    Handler handler){       super(handler);     }     public void onChange(    boolean selfChange){       final boolean wasProvisioned=mProvisioned;       final boolean isProvisioned=deviceIsProvisioned();       mProvisioned=wasProvisioned || isProvisioned;       if (MORE_DEBUG) {         Slog.d(TAG,"Provisioning change: was=" + wasProvisioned + " is="+ isProvisioned+ " now="+ mProvisioned);       } synchronized (mQueueLock) {         if (mProvisioned && !wasProvisioned && mEnabled) {           if (MORE_DEBUG)           Slog.d(TAG,"Now provisioned, so starting backups");           KeyValueBackupJob.schedule(mContext);           scheduleNextFullBackupJob(0);         }       }     }   } class RestoreGetSetsParams {     public IBackupTransport transport;     public ActiveRestoreSession session;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     RestoreGetSetsParams(    IBackupTransport _transport,    ActiveRestoreSession _session,    IRestoreObserver _observer,    IBackupManagerMonitor _monitor){       transport=_transport;       session=_session;       observer=_observer;       monitor=_monitor;     }   } class RestoreParams {     public IBackupTransport transport;     public String dirName;     public IRestoreObserver observer;     public IBackupManagerMonitor monitor;     public long token;     public PackageInfo pkgInfo;     public int pmToken;     public boolean isSystemRestore;     public String[] filterSet;     /**   * Restore a single package; no kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    PackageInfo _pkg){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=_pkg;       pmToken=0;       isSystemRestore=false;       filterSet=null;     }     /**   * Restore at install: PM token needed, kill after restore  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String _pkgName,    int _pmToken){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=_pmToken;       isSystemRestore=false;       filterSet=new String[]{_pkgName};     }     /**   * Restore everything possible.  This is the form that Setup Wizard or similar restore UXes use.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=true;       filterSet=null;     }     /**   * Restore some set of packages.  Leave this one up to the caller to specify whether it's to be considered a system-level restore.  */     RestoreParams(    IBackupTransport _transport,    String _dirName,    IRestoreObserver _obs,    IBackupManagerMonitor _monitor,    long _token,    String[] _filterSet,    boolean _isSystemRestore){       transport=_transport;       dirName=_dirName;       observer=_obs;       monitor=_monitor;       token=_token;       pkgInfo=null;       pmToken=0;       isSystemRestore=_isSystemRestore;       filterSet=_filterSet;     }   } class ClearParams {     public IBackupTransport transport;     public PackageInfo packageInfo;     ClearParams(    IBackupTransport _transport,    PackageInfo _info){       transport=_transport;       packageInfo=_info;     }   } class ClearRetryParams {     public String transportName;     public String packageName;     ClearRetryParams(    String transport,    String pkg){       transportName=transport;       packageName=pkg;     }   } class AdbParams {     public ParcelFileDescriptor fd;     public final AtomicBoolean latch;     public IFullBackupRestoreObserver observer;     public String curPassword;     public String encryptPassword;     AdbParams(){       latch=new AtomicBoolean(false);     }   } class AdbBackupParams extends AdbParams {     public boolean includeApks;     public boolean includeObbs;     public boolean includeShared;     public boolean doWidgets;     public boolean allApps;     public boolean includeSystem;     public boolean doCompress;     public boolean includeKeyValue;     public String[] packages;     AdbBackupParams(    ParcelFileDescriptor output,    boolean saveApks,    boolean saveObbs,    boolean saveShared,    boolean alsoWidgets,    boolean doAllApps,    boolean doSystem,    boolean compress,    boolean doKeyValue,    String[] pkgList){       fd=output;       includeApks=saveApks;       includeObbs=saveObbs;       includeShared=saveShared;       doWidgets=alsoWidgets;       allApps=doAllApps;       includeSystem=doSystem;       doCompress=compress;       includeKeyValue=doKeyValue;       packages=pkgList;     }   } class AdbRestoreParams extends AdbParams {     AdbRestoreParams(    ParcelFileDescriptor input){       fd=input;     }   } class BackupParams {     public IBackupTransport transport;     public String dirName;     public ArrayList<String> kvPackages;     public ArrayList<String> fullPackages;     public IBackupObserver observer;     public IBackupManagerMonitor monitor;     public boolean userInitiated;     public boolean nonIncrementalBackup;     BackupParams(    IBackupTransport transport,    String dirName,    ArrayList<String> kvPackages,    ArrayList<String> fullPackages,    IBackupObserver observer,    IBackupManagerMonitor monitor,    boolean userInitiated,    boolean nonIncrementalBackup){       this.transport=transport;       this.dirName=dirName;       this.kvPackages=kvPackages;       this.fullPackages=fullPackages;       this.observer=observer;       this.monitor=monitor;       this.userInitiated=userInitiated;       this.nonIncrementalBackup=nonIncrementalBackup;     }   }   static final int OP_PENDING=0;   static final int OP_ACKNOWLEDGED=1;   static final int OP_TIMEOUT=-1;   static final int OP_TYPE_BACKUP_WAIT=0;   static final int OP_TYPE_RESTORE_WAIT=1;   private static final int OP_TYPE_BACKUP=2; class Operation {     int state;     final BackupRestoreTask callback;     final int type;     Operation(    int initialState,    BackupRestoreTask callbackObj,    int type){       state=initialState;       callback=callbackObj;       this.type=type;     }   }   /**   * mCurrentOperations contains the list of currently active operations. If type of operation is OP_TYPE_WAIT, it are waiting for an ack or timeout. An operation wraps a BackupRestoreTask within it. It's the responsibility of this task to remove the operation from this array. A BackupRestore task gets notified of ack/timeout for the operation via BackupRestoreTask#handleCancel, BackupRestoreTask#operationComplete and notifyAll called on the mCurrentOpLock.  {@link BackupManagerService#waitUntilOperationComplete(int)} isused in various places to 'wait' for notifyAll and detect change of pending state of an operation. So typically, an operation will be removed from this array by: - BackupRestoreTask#handleCancel and - BackupRestoreTask#operationComplete OR waitUntilOperationComplete. Do not remove at both these places because waitUntilOperationComplete relies on the operation being present to determine its completion status. If type of operation is OP_BACKUP, it is a task running backups. It provides a handle to cancel backup tasks.  */   @GuardedBy("mCurrentOpLock") final SparseArray<Operation> mCurrentOperations=new SparseArray<Operation>();   final Object mCurrentOpLock=new Object();   final Random mTokenGenerator=new Random();   final SparseArray<AdbParams> mAdbBackupRestoreConfirmations=new SparseArray<AdbParams>();   File mBaseStateDir;   File mDataDir;   File mJournalDir;   File mJournal;   private final SecureRandom mRng=new SecureRandom();   private String mPasswordHash;   private File mPasswordHashFile;   private int mPasswordVersion;   private File mPasswordVersionFile;   private byte[] mPasswordSalt;   static final int PBKDF2_HASH_ROUNDS=10000;   static final int PBKDF2_KEY_SIZE=256;   static final int PBKDF2_SALT_SIZE=512;   static final String ENCRYPTION_ALGORITHM_NAME="AES-256";   private File mEverStored;   HashSet<String> mEverStoredApps=new HashSet<String>();   static final int CURRENT_ANCESTRAL_RECORD_VERSION=1;   File mTokenFile;   Set<String> mAncestralPackages=null;   long mAncestralToken=0;   long mCurrentToken=0;   static final String INIT_SENTINEL_FILE_NAME="_need_init_";   HashSet<String> mPendingInits=new HashSet<String>();   static final int SCHEDULE_FILE_VERSION=1; class FullBackupEntry implements Comparable<FullBackupEntry> {     String packageName;     long lastBackup;     FullBackupEntry(    String pkg,    long when){       packageName=pkg;       lastBackup=when;     }     @Override public int compareTo(    FullBackupEntry other){       if (lastBackup < other.lastBackup)       return -1;  else       if (lastBackup > other.lastBackup)       return 1;  else       return 0;     }   }   File mFullBackupScheduleFile;   @GuardedBy("mQueueLock") PerformFullTransportBackupTask mRunningFullBackupTask;   @GuardedBy("mQueueLock") ArrayList<FullBackupEntry> mFullBackupQueue;   int generateToken(){     int token;     do { synchronized (mTokenGenerator) {         token=mTokenGenerator.nextInt();       }     }  while (token < 0);     return token;   }   public static boolean appIsEligibleForBackup(  ApplicationInfo app){     if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {       return false;     }     if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {       return false;     }     if (app.packageName.equals(BackupManagerService.SHARED_BACKUP_AGENT_PACKAGE)) {       return false;     }     return true;   }   private static boolean appIsStopped(  ApplicationInfo app){     return ((app.flags & ApplicationInfo.FLAG_STOPPED) != 0);   }   private static boolean appGetsFullBackup(  PackageInfo pkg){     if (pkg.applicationInfo.backupAgentName != null) {       return (pkg.applicationInfo.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0;     }     return true;   }   private static boolean appIsKeyValueOnly(  PackageInfo pkg){     return !appGetsFullBackup(pkg);   } private class BackupHandler extends Handler {     public BackupHandler(    Looper looper){       super(looper);     }     public void handleMessage(    Message msg){ switch (msg.what) { case MSG_RUN_BACKUP: {           mLastBackupPass=System.currentTimeMillis();           IBackupTransport transport=mTransportManager.getCurrentTransportBinder();           if (transport == null) {             Slog.v(TAG,"Backup requested but no transport available"); synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();             break;           }           ArrayList<BackupRequest> queue=new ArrayList<BackupRequest>();           File oldJournal=mJournal; synchronized (mQueueLock) {             if (mPendingBackups.size() > 0) {               for (              BackupRequest b : mPendingBackups.values()) {                 queue.add(b);               }               if (DEBUG)               Slog.v(TAG,"clearing pending backups");               mPendingBackups.clear();               mJournal=null;             }           }           boolean staged=true;           if (queue.size() > 0) {             try {               String dirName=transport.transportDirName();               PerformBackupTask pbt=new PerformBackupTask(transport,dirName,queue,oldJournal,null,null,Collections.<String>emptyList(),false,false);               Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt);               sendMessage(pbtMessage);             }  catch (            Exception e) {               Slog.e(TAG,"Transport became unavailable attempting backup" + " or error initializing backup task",e);               staged=false;             }           }  else {             Slog.v(TAG,"Backup requested but nothing pending");             staged=false;           }           if (!staged) { synchronized (mQueueLock) {               mBackupRunning=false;             }             mWakelock.release();           }           break;         } case MSG_BACKUP_RESTORE_STEP: {         try {           BackupRestoreTask task=(BackupRestoreTask)msg.obj;           if (MORE_DEBUG)           Slog.v(TAG,"Got next step for " + task + ", executing");           task.execute();         }  catch (        ClassCastException e) {           Slog.e(TAG,"Invalid backup task in flight, obj=" + msg.obj);         }         break;       } case MSG_OP_COMPLETE: {       try {         Pair<BackupRestoreTask,Long> taskWithResult=(Pair<BackupRestoreTask,Long>)msg.obj;         taskWithResult.first.operationComplete(taskWithResult.second);       }  catch (      ClassCastException e) {         Slog.e(TAG,"Invalid completion in flight, obj=" + msg.obj);       }       break;     } case MSG_RUN_ADB_BACKUP: {     AdbBackupParams params=(AdbBackupParams)msg.obj;     PerformAdbBackupTask task=new PerformAdbBackupTask(params.fd,params.observer,params.includeApks,params.includeObbs,params.includeShared,params.doWidgets,params.curPassword,params.encryptPassword,params.allApps,params.includeSystem,params.doCompress,params.includeKeyValue,params.packages,params.latch);     (new Thread(task,"adb-backup")).start();     break;   } case MSG_RUN_FULL_TRANSPORT_BACKUP: {   PerformFullTransportBackupTask task=(PerformFullTransportBackupTask)msg.obj;   (new Thread(task,"transport-backup")).start();   break; } case MSG_RUN_RESTORE: { RestoreParams params=(RestoreParams)msg.obj; Slog.d(TAG,"MSG_RUN_RESTORE observer=" + params.observer); PerformUnifiedRestoreTask task=new PerformUnifiedRestoreTask(params.transport,params.observer,params.monitor,params.token,params.pkgInfo,params.pmToken,params.isSystemRestore,params.filterSet); synchronized (mPendingRestores) {   if (mIsRestoreInProgress) {     if (DEBUG) {       Slog.d(TAG,"Restore in progress, queueing.");     }     mPendingRestores.add(task);   }  else {     if (DEBUG) {       Slog.d(TAG,"Starting restore.");     }     mIsRestoreInProgress=true;     Message restoreMsg=obtainMessage(MSG_BACKUP_RESTORE_STEP,task);     sendMessage(restoreMsg);   } } break; } case MSG_RUN_ADB_RESTORE: { AdbRestoreParams params=(AdbRestoreParams)msg.obj; PerformAdbRestoreTask task=new PerformAdbRestoreTask(params.fd,params.curPassword,params.encryptPassword,params.observer,params.latch); (new Thread(task,"adb-restore")).start(); break; } case MSG_RUN_CLEAR: { ClearParams params=(ClearParams)msg.obj; (new PerformClearTask(params.transport,params.packageInfo)).run(); break; } case MSG_RETRY_CLEAR: { ClearRetryParams params=(ClearRetryParams)msg.obj; clearBackupData(params.transportName,params.packageName); break; } case MSG_RUN_INITIALIZE: { HashSet<String> queue; synchronized (mQueueLock) { queue=new HashSet<String>(mPendingInits); mPendingInits.clear(); } (new PerformInitializeTask(queue)).run(); break; } case MSG_RETRY_INIT: { synchronized (mQueueLock) { recordInitPendingLocked(msg.arg1 != 0,(String)msg.obj); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } break; } case MSG_RUN_GET_RESTORE_SETS: { RestoreSet[] sets=null; RestoreGetSetsParams params=(RestoreGetSetsParams)msg.obj; try { sets=params.transport.getAvailableRestoreSets(); synchronized (params.session) { params.session.mRestoreSets=sets; } if (sets == null) EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); }  catch (Exception e) { Slog.e(TAG,"Error from transport getting set list: " + e.getMessage()); }  finally { if (params.observer != null) { try { params.observer.restoreSetsAvailable(sets); }  catch (RemoteException re) { Slog.e(TAG,"Unable to report listing to observer"); } catch (Exception e) { Slog.e(TAG,"Restore observer threw: " + e.getMessage()); } } removeMessages(MSG_RESTORE_SESSION_TIMEOUT); sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); mWakelock.release(); } break; } case MSG_BACKUP_OPERATION_TIMEOUT: case MSG_RESTORE_OPERATION_TIMEOUT: { Slog.d(TAG,"Timeout message received for token=" + Integer.toHexString(msg.arg1)); handleCancel(msg.arg1,false); break; } case MSG_RESTORE_SESSION_TIMEOUT: { synchronized (BackupManagerService.this) { if (mActiveRestoreSession != null) { Slog.w(TAG,"Restore session timed out; aborting"); mActiveRestoreSession.markTimedOut(); post(mActiveRestoreSession.new EndRestoreRunnable(BackupManagerService.this,mActiveRestoreSession)); } } break; } case MSG_FULL_CONFIRMATION_TIMEOUT: { synchronized (mAdbBackupRestoreConfirmations) { AdbParams params=mAdbBackupRestoreConfirmations.get(msg.arg1); if (params != null) { Slog.i(TAG,"Full backup/restore timed out waiting for user confirmation"); signalAdbBackupRestoreCompletion(params); mAdbBackupRestoreConfirmations.delete(msg.arg1); if (params.observer != null) { try { params.observer.onTimeout(); }  catch (RemoteException e) { } } }  else { Slog.d(TAG,"couldn't find params for token " + msg.arg1); } } break; } case MSG_WIDGET_BROADCAST: { final Intent intent=(Intent)msg.obj; mContext.sendBroadcastAsUser(intent,UserHandle.SYSTEM); break; } case MSG_REQUEST_BACKUP: { BackupParams params=(BackupParams)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_REQUEST_BACKUP observer=" + params.observer); } ArrayList<BackupRequest> kvQueue=new ArrayList<>(); for (String packageName : params.kvPackages) { kvQueue.add(new BackupRequest(packageName)); } mBackupRunning=true; mWakelock.acquire(); PerformBackupTask pbt=new PerformBackupTask(params.transport,params.dirName,kvQueue,null,params.observer,params.monitor,params.fullPackages,true,params.nonIncrementalBackup); Message pbtMessage=obtainMessage(MSG_BACKUP_RESTORE_STEP,pbt); sendMessage(pbtMessage); break; } case MSG_SCHEDULE_BACKUP_PACKAGE: { String pkgName=(String)msg.obj; if (MORE_DEBUG) { Slog.d(TAG,"MSG_SCHEDULE_BACKUP_PACKAGE " + pkgName); } dataChangedImpl(pkgName); break; } } } } void addBackupTrace(String s){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.add(s); } } } void clearBackupTrace(){ if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { mBackupTrace.clear(); } } } public BackupManagerService(Context context,Trampoline parent){ mContext=context; mPackageManager=context.getPackageManager(); mPackageManagerBinder=AppGlobals.getPackageManager(); mActivityManager=ActivityManager.getService(); mAlarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE); mPowerManager=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mStorageManager=IStorageManager.Stub.asInterface(ServiceManager.getService("mount")); mBackupManagerBinder=Trampoline.asInterface(parent.asBinder()); mHandlerThread=new HandlerThread("backup",Process.THREAD_PRIORITY_BACKGROUND); mHandlerThread.start(); mBackupHandler=new BackupHandler(mHandlerThread.getLooper()); final ContentResolver resolver=context.getContentResolver(); mProvisioned=Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0; mAutoRestore=Settings.Secure.getInt(resolver,Settings.Secure.BACKUP_AUTO_RESTORE,1) != 0; mProvisionedObserver=new ProvisionedObserver(mBackupHandler); resolver.registerContentObserver(Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),false,mProvisionedObserver); mBaseStateDir=new File(Environment.getDataDirectory(),"backup"); mBaseStateDir.mkdirs(); if (!SELinux.restorecon(mBaseStateDir)) { Slog.e(TAG,"SELinux restorecon failed on " + mBaseStateDir); } mDataDir=new File(Environment.getDownloadCacheDirectory(),"backup_stage"); mPasswordVersion=1; mPasswordVersionFile=new File(mBaseStateDir,"pwversion"); if (mPasswordVersionFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordVersionFile); in=new DataInputStream(fin); mPasswordVersion=in.readInt(); }  catch (IOException e) { Slog.e(TAG,"Unable to read backup pw version"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing pw version files"); } } } mPasswordHashFile=new File(mBaseStateDir,"pwhash"); if (mPasswordHashFile.exists()) { FileInputStream fin=null; DataInputStream in=null; try { fin=new FileInputStream(mPasswordHashFile); in=new DataInputStream(new BufferedInputStream(fin)); int saltLen=in.readInt(); byte[] salt=new byte[saltLen]; in.readFully(salt); mPasswordHash=in.readUTF(); mPasswordSalt=salt; }  catch (IOException e) { Slog.e(TAG,"Unable to read saved backup pw hash"); }  finally { try { if (in != null) in.close(); if (fin != null) fin.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close streams"); } } } mRunBackupReceiver=new RunBackupReceiver(); IntentFilter filter=new IntentFilter(); filter.addAction(RUN_BACKUP_ACTION); context.registerReceiver(mRunBackupReceiver,filter,android.Manifest.permission.BACKUP,null); mRunInitReceiver=new RunInitializeReceiver(); filter=new IntentFilter(); filter.addAction(RUN_INITIALIZE_ACTION); context.registerReceiver(mRunInitReceiver,filter,android.Manifest.permission.BACKUP,null); Intent backupIntent=new Intent(RUN_BACKUP_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunBackupIntent=PendingIntent.getBroadcast(context,MSG_RUN_BACKUP,backupIntent,0); Intent initIntent=new Intent(RUN_INITIALIZE_ACTION); backupIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY); mRunInitIntent=PendingIntent.getBroadcast(context,MSG_RUN_INITIALIZE,initIntent,0); mJournalDir=new File(mBaseStateDir,"pending"); mJournalDir.mkdirs(); mJournal=null; mFullBackupScheduleFile=new File(mBaseStateDir,"fb-schedule"); initPackageTracking(); synchronized (mBackupParticipants) { addPackageParticipantsLocked(null); } SystemConfig systemConfig=SystemConfig.getInstance(); Set<ComponentName> transportWhitelist=systemConfig.getBackupTransportWhitelist(); String transport=Settings.Secure.getString(context.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT); if (TextUtils.isEmpty(transport)) { transport=null; } String currentTransport=transport; if (DEBUG) Slog.v(TAG,"Starting with transport " + currentTransport); mTransportManager=new TransportManager(context,transportWhitelist,currentTransport,mTransportBoundListener,mHandlerThread.getLooper()); mTransportManager.registerAllTransports(); mBackupHandler.post(() -> parseLeftoverJournals()); mWakelock=mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"*backup*"); } private class RunBackupReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_BACKUP_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (mPendingInits.size() > 0) { if (MORE_DEBUG) Slog.v(TAG,"Init pending at scheduled backup"); try { mAlarmManager.cancel(mRunInitIntent); mRunInitIntent.send(); }  catch (PendingIntent.CanceledException ce) { Slog.e(TAG,"Run init intent cancelled"); } }  else { if (mEnabled && mProvisioned) { if (!mBackupRunning) { if (DEBUG) Slog.v(TAG,"Running a backup pass"); mBackupRunning=true; mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_BACKUP); mBackupHandler.sendMessage(msg); }  else { Slog.i(TAG,"Backup time but one already running"); } }  else { Slog.w(TAG,"Backup pass but e=" + mEnabled + " p="+ mProvisioned); } } } } } } private class RunInitializeReceiver extends BroadcastReceiver { public void onReceive(Context context,Intent intent){ if (RUN_INITIALIZE_ACTION.equals(intent.getAction())) { synchronized (mQueueLock) { if (DEBUG) Slog.v(TAG,"Running a device init"); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_INITIALIZE); mBackupHandler.sendMessage(msg); } } } } private void initPackageTracking(){ if (MORE_DEBUG) Slog.v(TAG,"` tracking"); mTokenFile=new File(mBaseStateDir,"ancestral"); try { RandomAccessFile tf=new RandomAccessFile(mTokenFile,"r"); int version=tf.readInt(); if (version == CURRENT_ANCESTRAL_RECORD_VERSION) { mAncestralToken=tf.readLong(); mCurrentToken=tf.readLong(); int numPackages=tf.readInt(); if (numPackages >= 0) { mAncestralPackages=new HashSet<String>(); for (int i=0; i < numPackages; i++) { String pkgName=tf.readUTF(); mAncestralPackages.add(pkgName); } } } tf.close(); }  catch (FileNotFoundException fnf) { Slog.v(TAG,"No ancestral data"); } catch (IOException e) { Slog.w(TAG,"Unable to read token file",e); } mEverStored=new File(mBaseStateDir,"processed"); File tempProcessedFile=new File(mBaseStateDir,"processed.new"); if (tempProcessedFile.exists()) { tempProcessedFile.delete(); } if (mEverStored.exists()) { RandomAccessFile temp=null; RandomAccessFile in=null; try { temp=new RandomAccessFile(tempProcessedFile,"rws"); in=new RandomAccessFile(mEverStored,"r"); while (true) { String pkg=in.readUTF(); try { mPackageManager.getPackageInfo(pkg,0); mEverStoredApps.add(pkg); temp.writeUTF(pkg); if (MORE_DEBUG) Slog.v(TAG,"   + " + pkg); }  catch (NameNotFoundException e) { if (MORE_DEBUG) Slog.v(TAG,"   - " + pkg); } } }  catch (EOFException e) { if (!tempProcessedFile.renameTo(mEverStored)) { Slog.e(TAG,"Error renaming " + tempProcessedFile + " to "+ mEverStored); } } catch (IOException e) { Slog.e(TAG,"Error in processed file",e); }  finally { try { if (temp != null) temp.close(); }  catch (IOException e) { } try { if (in != null) in.close(); }  catch (IOException e) { } } } synchronized (mQueueLock) { mFullBackupQueue=readFullBackupSchedule(); } IntentFilter filter=new IntentFilter(); filter.addAction(Intent.ACTION_PACKAGE_ADDED); filter.addAction(Intent.ACTION_PACKAGE_REMOVED); filter.addAction(Intent.ACTION_PACKAGE_CHANGED); filter.addDataScheme("package"); mContext.registerReceiver(mBroadcastReceiver,filter); IntentFilter sdFilter=new IntentFilter(); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE); sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE); mContext.registerReceiver(mBroadcastReceiver,sdFilter); } private ArrayList<FullBackupEntry> readFullBackupSchedule(){ boolean changed=false; ArrayList<FullBackupEntry> schedule=null; List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); if (mFullBackupScheduleFile.exists()) { FileInputStream fstream=null; BufferedInputStream bufStream=null; DataInputStream in=null; try { fstream=new FileInputStream(mFullBackupScheduleFile); bufStream=new BufferedInputStream(fstream); in=new DataInputStream(bufStream); int version=in.readInt(); if (version != SCHEDULE_FILE_VERSION) { Slog.e(TAG,"Unknown backup schedule version " + version); return null; } final int N=in.readInt(); schedule=new ArrayList<FullBackupEntry>(N); HashSet<String> foundApps=new HashSet<String>(N); for (int i=0; i < N; i++) { String pkgName=in.readUTF(); long lastBackup=in.readLong(); foundApps.add(pkgName); try { PackageInfo pkg=mPackageManager.getPackageInfo(pkgName,0); if (appGetsFullBackup(pkg) && appIsEligibleForBackup(pkg.applicationInfo)) { schedule.add(new FullBackupEntry(pkgName,lastBackup)); }  else { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " no longer eligible for full backup"); } } }  catch (NameNotFoundException e) { if (DEBUG) { Slog.i(TAG,"Package " + pkgName + " not installed; dropping from full backup"); } } } for (PackageInfo app : apps) { if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { if (!foundApps.contains(app.packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"New full backup app " + app.packageName + " found"); } schedule.add(new FullBackupEntry(app.packageName,0)); changed=true; } } } Collections.sort(schedule); }  catch (Exception e) { Slog.e(TAG,"Unable to read backup schedule",e); mFullBackupScheduleFile.delete(); schedule=null; }  finally { IoUtils.closeQuietly(in); IoUtils.closeQuietly(bufStream); IoUtils.closeQuietly(fstream); } } if (schedule == null) { changed=true; schedule=new ArrayList<FullBackupEntry>(apps.size()); for (PackageInfo info : apps) { if (appGetsFullBackup(info) && appIsEligibleForBackup(info.applicationInfo)) { schedule.add(new FullBackupEntry(info.packageName,0)); } } } if (changed) { writeFullBackupScheduleAsync(); } return schedule; } Runnable mFullBackupScheduleWriter=new Runnable(){ @Override public void run(){ synchronized (mQueueLock) { try { ByteArrayOutputStream bufStream=new ByteArrayOutputStream(4096); DataOutputStream bufOut=new DataOutputStream(bufStream); bufOut.writeInt(SCHEDULE_FILE_VERSION); int N=mFullBackupQueue.size(); bufOut.writeInt(N); for (int i=0; i < N; i++) { FullBackupEntry entry=mFullBackupQueue.get(i); bufOut.writeUTF(entry.packageName); bufOut.writeLong(entry.lastBackup); } bufOut.flush(); AtomicFile af=new AtomicFile(mFullBackupScheduleFile); FileOutputStream out=af.startWrite(); out.write(bufStream.toByteArray()); af.finishWrite(out); }  catch (Exception e) { Slog.e(TAG,"Unable to write backup schedule!",e); } } } } ; private void writeFullBackupScheduleAsync(){ mBackupHandler.removeCallbacks(mFullBackupScheduleWriter); mBackupHandler.post(mFullBackupScheduleWriter); } private void parseLeftoverJournals(){ for (File f : mJournalDir.listFiles()) { if (mJournal == null || f.compareTo(mJournal) != 0) { DataInputStream in=null; try { Slog.i(TAG,"Found stale backup journal, scheduling"); InputStream bufferedInputStream=new BufferedInputStream(new FileInputStream(f),8192); in=new DataInputStream(bufferedInputStream); while (true) { String packageName=in.readUTF(); if (MORE_DEBUG) Slog.i(TAG,"  " + packageName); dataChangedImpl(packageName); } }  catch (EOFException e) { } catch (Exception e) { Slog.e(TAG,"Can't read " + f,e); }  finally { try { if (in != null) in.close(); }  catch (IOException e) { } f.delete(); } } } } private SecretKey buildPasswordKey(String algorithm,String pw,byte[] salt,int rounds){ return buildCharArrayKey(algorithm,pw.toCharArray(),salt,rounds); } private SecretKey buildCharArrayKey(String algorithm,char[] pwArray,byte[] salt,int rounds){ try { SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(algorithm); KeySpec ks=new PBEKeySpec(pwArray,salt,rounds,PBKDF2_KEY_SIZE); return keyFactory.generateSecret(ks); }  catch (InvalidKeySpecException e) { Slog.e(TAG,"Invalid key spec for PBKDF2!"); } catch (NoSuchAlgorithmException e) { Slog.e(TAG,"PBKDF2 unavailable!"); } return null; } private String buildPasswordHash(String algorithm,String pw,byte[] salt,int rounds){ SecretKey key=buildPasswordKey(algorithm,pw,salt,rounds); if (key != null) { return byteArrayToHex(key.getEncoded()); } return null; } private String byteArrayToHex(byte[] data){ StringBuilder buf=new StringBuilder(data.length * 2); for (int i=0; i < data.length; i++) { buf.append(Byte.toHexString(data[i],true)); } return buf.toString(); } private byte[] hexToByteArray(String digits){ final int bytes=digits.length() / 2; if (2 * bytes != digits.length()) { throw new IllegalArgumentException("Hex string must have an even number of digits"); } byte[] result=new byte[bytes]; for (int i=0; i < digits.length(); i+=2) { result[i / 2]=(byte)Integer.parseInt(digits.substring(i,i + 2),16); } return result; } private byte[] makeKeyChecksum(String algorithm,byte[] pwBytes,byte[] salt,int rounds){ char[] mkAsChar=new char[pwBytes.length]; for (int i=0; i < pwBytes.length; i++) { mkAsChar[i]=(char)pwBytes[i]; } Key checksum=buildCharArrayKey(algorithm,mkAsChar,salt,rounds); return checksum.getEncoded(); } private byte[] randomBytes(int bits){ byte[] array=new byte[bits / 8]; mRng.nextBytes(array); return array; } boolean passwordMatchesSaved(String algorithm,String candidatePw,int rounds){ if (mPasswordHash == null) { if (candidatePw == null || "".equals(candidatePw)) { return true; } }  else { if (candidatePw != null && candidatePw.length() > 0) { String currentPwHash=buildPasswordHash(algorithm,candidatePw,mPasswordSalt,rounds); if (mPasswordHash.equalsIgnoreCase(currentPwHash)) { return true; } } } return false; } @Override public boolean setBackupPassword(String currentPw,String newPw){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupPassword"); final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { return false; } mPasswordVersion=BACKUP_PW_FILE_VERSION; FileOutputStream pwFout=null; DataOutputStream pwOut=null; try { pwFout=new FileOutputStream(mPasswordVersionFile); pwOut=new DataOutputStream(pwFout); pwOut.writeInt(mPasswordVersion); }  catch (IOException e) { Slog.e(TAG,"Unable to write backup pw version; password not changed"); return false; }  finally { try { if (pwOut != null) pwOut.close(); if (pwFout != null) pwFout.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pw version record"); } } if (newPw == null || newPw.isEmpty()) { if (mPasswordHashFile.exists()) { if (!mPasswordHashFile.delete()) { Slog.e(TAG,"Unable to clear backup password"); return false; } } mPasswordHash=null; mPasswordSalt=null; return true; } try { byte[] salt=randomBytes(PBKDF2_SALT_SIZE); String newPwHash=buildPasswordHash(PBKDF_CURRENT,newPw,salt,PBKDF2_HASH_ROUNDS); OutputStream pwf=null, buffer=null; DataOutputStream out=null; try { pwf=new FileOutputStream(mPasswordHashFile); buffer=new BufferedOutputStream(pwf); out=new DataOutputStream(buffer); out.writeInt(salt.length); out.write(salt); out.writeUTF(newPwHash); out.flush(); mPasswordHash=newPwHash; mPasswordSalt=salt; return true; }   finally { if (out != null) out.close(); if (buffer != null) buffer.close(); if (pwf != null) pwf.close(); } }  catch (IOException e) { Slog.e(TAG,"Unable to set backup password"); } return false; } @Override public boolean hasBackupPassword(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"hasBackupPassword"); return mPasswordHash != null && mPasswordHash.length() > 0; } private boolean backupPasswordMatches(String currentPw){ if (hasBackupPassword()) { final boolean pbkdf2Fallback=(mPasswordVersion < BACKUP_PW_FILE_VERSION); if (!passwordMatchesSaved(PBKDF_CURRENT,currentPw,PBKDF2_HASH_ROUNDS) && !(pbkdf2Fallback && passwordMatchesSaved(PBKDF_FALLBACK,currentPw,PBKDF2_HASH_ROUNDS))) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return false; } } return true; } void recordInitPendingLocked(boolean isPending,String transportName){ if (MORE_DEBUG) Slog.i(TAG,"recordInitPendingLocked: " + isPending + " on transport "+ transportName); mBackupHandler.removeMessages(MSG_RETRY_INIT); try { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); File initPendingFile=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (isPending) { mPendingInits.add(transportName); try { (new FileOutputStream(initPendingFile)).close(); }  catch (IOException ioe) { } }  else { initPendingFile.delete(); mPendingInits.remove(transportName); } return; } }  catch (Exception e) { Slog.e(TAG,"Transport " + transportName + " failed to report name: "+ e.getMessage()); } if (isPending) { mPendingInits.add(transportName); mBackupHandler.sendMessageDelayed(mBackupHandler.obtainMessage(MSG_RETRY_INIT,(isPending ? 1 : 0),0,transportName),TRANSPORT_RETRY_INTERVAL); } } void resetBackupState(File stateFileDir){ synchronized (mQueueLock) { mEverStoredApps.clear(); mEverStored.delete(); mCurrentToken=0; writeRestoreTokens(); for (File sf : stateFileDir.listFiles()) { if (!sf.getName().equals(INIT_SENTINEL_FILE_NAME)) { sf.delete(); } } } synchronized (mBackupParticipants) { final int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> participants=mBackupParticipants.valueAt(i); if (participants != null) { for (String packageName : participants) { dataChangedImpl(packageName); } } } } } private TransportManager.TransportBoundListener mTransportBoundListener=new TransportManager.TransportBoundListener(){ @Override public boolean onTransportBound(IBackupTransport transport){ String name=null; try { name=transport.name(); String transportDirName=transport.transportDirName(); File stateDir=new File(mBaseStateDir,transportDirName); stateDir.mkdirs(); File initSentinel=new File(stateDir,INIT_SENTINEL_FILE_NAME); if (initSentinel.exists()) { synchronized (mQueueLock) { mPendingInits.add(name); long delay=1000 * 60; mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } return true; }  catch (Exception e) { Slog.w(TAG,"Failed to regiser transport: " + name); return false; } } } ; BroadcastReceiver mBroadcastReceiver=new BroadcastReceiver(){ public void onReceive(Context context,Intent intent){ if (MORE_DEBUG) Slog.d(TAG,"Received broadcast " + intent); String action=intent.getAction(); boolean replacing=false; boolean added=false; boolean changed=false; Bundle extras=intent.getExtras(); String pkgList[]=null; if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_CHANGED.equals(action)) { Uri uri=intent.getData(); if (uri == null) { return; } String pkgName=uri.getSchemeSpecificPart(); if (pkgName != null) { pkgList=new String[]{pkgName}; } changed=Intent.ACTION_PACKAGE_CHANGED.equals(action); if (changed) { String[] components=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST); if (MORE_DEBUG) { Slog.i(TAG,"Package " + pkgName + " changed; rechecking"); for (int i=0; i < components.length; i++) { Slog.i(TAG,"   * " + components[i]); } } mTransportManager.onPackageChanged(pkgName,components); return; } added=Intent.ACTION_PACKAGE_ADDED.equals(action); replacing=extras.getBoolean(Intent.EXTRA_REPLACING,false); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) { added=true; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); }  else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) { added=false; pkgList=intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST); } if (pkgList == null || pkgList.length == 0) { return; } final int uid=extras.getInt(Intent.EXTRA_UID); if (added) { synchronized (mBackupParticipants) { if (replacing) { removePackageParticipantsLocked(pkgList,uid); } addPackageParticipantsLocked(pkgList); } final long now=System.currentTimeMillis(); for (String packageName : pkgList) { try { PackageInfo app=mPackageManager.getPackageInfo(packageName,0); if (appGetsFullBackup(app) && appIsEligibleForBackup(app.applicationInfo)) { enqueueFullBackup(packageName,now); scheduleNextFullBackupJob(0); }  else { synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); } writeFullBackupScheduleAsync(); } mTransportManager.onPackageAdded(packageName); }  catch (NameNotFoundException e) { if (DEBUG) { Slog.w(TAG,"Can't resolve new app " + packageName); } } } dataChangedImpl(PACKAGE_MANAGER_SENTINEL); }  else { if (replacing) { }  else { synchronized (mBackupParticipants) { removePackageParticipantsLocked(pkgList,uid); } } for (String pkgName : pkgList) { mTransportManager.onPackageRemoved(pkgName); } } } } ; void addPackageParticipantsLocked(String[] packageNames){ List<PackageInfo> targetApps=allAgentPackages(); if (packageNames != null) { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: #" + packageNames.length); for (String packageName : packageNames) { addPackageParticipantsLockedInner(packageName,targetApps); } }  else { if (MORE_DEBUG) Slog.v(TAG,"addPackageParticipantsLocked: all"); addPackageParticipantsLockedInner(null,targetApps); } } private void addPackageParticipantsLockedInner(String packageName,List<PackageInfo> targetPkgs){ if (MORE_DEBUG) { Slog.v(TAG,"Examining " + packageName + " for backup agent"); } for (PackageInfo pkg : targetPkgs) { if (packageName == null || pkg.packageName.equals(packageName)) { int uid=pkg.applicationInfo.uid; HashSet<String> set=mBackupParticipants.get(uid); if (set == null) { set=new HashSet<>(); mBackupParticipants.put(uid,set); } set.add(pkg.packageName); if (MORE_DEBUG) Slog.v(TAG,"Agent found; added"); if (MORE_DEBUG) Slog.i(TAG,"Scheduling backup for new app " + pkg.packageName); Message msg=mBackupHandler.obtainMessage(MSG_SCHEDULE_BACKUP_PACKAGE,pkg.packageName); mBackupHandler.sendMessage(msg); } } } void removePackageParticipantsLocked(String[] packageNames,int oldUid){ if (packageNames == null) { Slog.w(TAG,"removePackageParticipants with null list"); return; } if (MORE_DEBUG) Slog.v(TAG,"removePackageParticipantsLocked: uid=" + oldUid + " #"+ packageNames.length); for (String pkg : packageNames) { HashSet<String> set=mBackupParticipants.get(oldUid); if (set != null && set.contains(pkg)) { removePackageFromSetLocked(set,pkg); if (set.isEmpty()) { if (MORE_DEBUG) Slog.v(TAG,"  last one of this uid; purging set"); mBackupParticipants.remove(oldUid); } } } } private void removePackageFromSetLocked(final HashSet<String> set,final String packageName){ if (set.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"  removing participant " + packageName); set.remove(packageName); mPendingBackups.remove(packageName); } } List<PackageInfo> allAgentPackages(){ int flags=PackageManager.GET_SIGNATURES; List<PackageInfo> packages=mPackageManager.getInstalledPackages(flags); int N=packages.size(); for (int a=N - 1; a >= 0; a--) { PackageInfo pkg=packages.get(a); try { ApplicationInfo app=pkg.applicationInfo; if (((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) || app.backupAgentName == null || (app.flags & ApplicationInfo.FLAG_FULL_BACKUP_ONLY) != 0) { packages.remove(a); }  else { app=mPackageManager.getApplicationInfo(pkg.packageName,PackageManager.GET_SHARED_LIBRARY_FILES); pkg.applicationInfo.sharedLibraryFiles=app.sharedLibraryFiles; } }  catch (NameNotFoundException e) { packages.remove(a); } } return packages; } void logBackupComplete(String packageName){ if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) return; synchronized (mEverStoredApps) { if (!mEverStoredApps.add(packageName)) return; RandomAccessFile out=null; try { out=new RandomAccessFile(mEverStored,"rws"); out.seek(out.length()); out.writeUTF(packageName); }  catch (IOException e) { Slog.e(TAG,"Can't log backup of " + packageName + " to "+ mEverStored); }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } } void removeEverBackedUp(String packageName){ if (DEBUG) Slog.v(TAG,"Removing backed-up knowledge of " + packageName); if (MORE_DEBUG) Slog.v(TAG,"New set:"); synchronized (mEverStoredApps) { File tempKnownFile=new File(mBaseStateDir,"processed.new"); RandomAccessFile known=null; try { known=new RandomAccessFile(tempKnownFile,"rws"); mEverStoredApps.remove(packageName); for (String s : mEverStoredApps) { known.writeUTF(s); if (MORE_DEBUG) Slog.v(TAG,"    " + s); } known.close(); known=null; if (!tempKnownFile.renameTo(mEverStored)) { throw new IOException("Can't rename " + tempKnownFile + " to "+ mEverStored); } }  catch (IOException e) { Slog.w(TAG,"Error rewriting " + mEverStored,e); mEverStoredApps.clear(); tempKnownFile.delete(); mEverStored.delete(); }  finally { try { if (known != null) known.close(); }  catch (IOException e) { } } } } void writeRestoreTokens(){ try { RandomAccessFile af=new RandomAccessFile(mTokenFile,"rwd"); af.writeInt(CURRENT_ANCESTRAL_RECORD_VERSION); af.writeLong(mAncestralToken); af.writeLong(mCurrentToken); if (mAncestralPackages == null) { af.writeInt(-1); }  else { af.writeInt(mAncestralPackages.size()); if (DEBUG) Slog.v(TAG,"Ancestral packages:  " + mAncestralPackages.size()); for (String pkgName : mAncestralPackages) { af.writeUTF(pkgName); if (MORE_DEBUG) Slog.v(TAG,"   " + pkgName); } } af.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to write token file:",e); } } private String getTransportName(IBackupTransport transport){ if (MORE_DEBUG) { Slog.v(TAG,"Searching for transport name of " + transport); } return mTransportManager.getTransportName(transport); } IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){ IBackupAgent agent=null; synchronized (mAgentConnectLock) { mConnecting=true; mConnectedAgent=null; try { if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) { Slog.d(TAG,"awaiting agent for " + app); long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) { try { mAgentConnectLock.wait(5000); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted: " + e); mConnecting=false; mConnectedAgent=null; } } if (mConnecting == true) { Slog.w(TAG,"Timeout waiting for agent " + app); mConnectedAgent=null; } if (DEBUG) Slog.i(TAG,"got agent " + mConnectedAgent); agent=mConnectedAgent; } }  catch (RemoteException e) { } } if (agent == null) { try { mActivityManager.clearPendingBackup(); }  catch (RemoteException e) { } } return agent; } void clearApplicationDataSynchronous(String packageName){ try { PackageInfo info=mPackageManager.getPackageInfo(packageName,0); if ((info.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) == 0) { if (MORE_DEBUG) Slog.i(TAG,"allowClearUserData=false so not wiping " + packageName); return; } }  catch (NameNotFoundException e) { Slog.w(TAG,"Tried to clear data for " + packageName + " but not found"); return; } ClearDataObserver observer=new ClearDataObserver(); synchronized (mClearDataLock) { mClearingData=true; try { mActivityManager.clearApplicationUserData(packageName,observer,0); }  catch (RemoteException e) { } long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL; while (mClearingData && (System.currentTimeMillis() < timeoutMark)) { try { mClearDataLock.wait(5000); }  catch (InterruptedException e) { mClearingData=false; } } } } class ClearDataObserver extends IPackageDataObserver.Stub { public void onRemoveCompleted(String packageName,boolean succeeded){ synchronized (mClearDataLock) { mClearingData=false; mClearDataLock.notifyAll(); } } } @Override public long getAvailableRestoreToken(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreToken"); long token=mAncestralToken; synchronized (mQueueLock) { if (mEverStoredApps.contains(packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"App in ever-stored, so using current token"); } token=mCurrentToken; } } if (MORE_DEBUG) Slog.i(TAG,"getAvailableRestoreToken() == " + token); return token; } @Override public int requestBackup(String[] packages,IBackupObserver observer,int flags){ return requestBackup(packages,observer,null,flags); } @Override public int requestBackup(String[] packages,IBackupObserver observer,IBackupManagerMonitor monitor,int flags){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"requestBackup"); if (packages == null || packages.length < 1) { Slog.e(TAG,"No packages named for backup request"); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PACKAGES,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); throw new IllegalArgumentException("No packages are provided for backup"); } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); monitor=monitorEvent(monitor,BackupManagerMonitor.LOG_EVENT_ID_TRANSPORT_IS_NULL,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return BackupManager.ERROR_TRANSPORT_ABORTED; } ArrayList<String> fullBackupList=new ArrayList<>(); ArrayList<String> kvBackupList=new ArrayList<>(); for (String packageName : packages) { if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { kvBackupList.add(packageName); continue; } try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo)) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } if (appGetsFullBackup(packageInfo)) { fullBackupList.add(packageInfo.packageName); }  else { kvBackupList.add(packageInfo.packageName); } }  catch (NameNotFoundException e) { sendBackupOnPackageResult(observer,packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); } } EventLog.writeEvent(EventLogTags.BACKUP_REQUESTED,packages.length,kvBackupList.size(),fullBackupList.size()); if (MORE_DEBUG) { Slog.i(TAG,"Backup requested for " + packages.length + " packages, of them: "+ fullBackupList.size()+ " full backups, "+ kvBackupList.size()+ " k/v backups"); } String dirName; try { dirName=transport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Transport unavailable while attempting backup: " + e.getMessage()); sendBackupFinished(observer,BackupManager.ERROR_TRANSPORT_ABORTED); return BackupManager.ERROR_TRANSPORT_ABORTED; } boolean nonIncrementalBackup=(flags & BackupManager.FLAG_NON_INCREMENTAL_BACKUP) != 0; Message msg=mBackupHandler.obtainMessage(MSG_REQUEST_BACKUP); msg.obj=new BackupParams(transport,dirName,kvBackupList,fullBackupList,observer,monitor,true,nonIncrementalBackup); mBackupHandler.sendMessage(msg); return BackupManager.SUCCESS; } @Override public void cancelBackups(){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"cancelBackups"); if (MORE_DEBUG) { Slog.i(TAG,"cancelBackups() called."); } final long oldToken=Binder.clearCallingIdentity(); try { List<Integer> operationsToCancel=new ArrayList<>(); synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); int token=mCurrentOperations.keyAt(i); if (op.type == OP_TYPE_BACKUP) { operationsToCancel.add(token); } } } for (Integer token : operationsToCancel) { handleCancel(token,true); } KeyValueBackupJob.schedule(mContext,BUSY_BACKOFF_MIN_MILLIS); FullBackupJob.schedule(mContext,2 * BUSY_BACKOFF_MIN_MILLIS); }   finally { Binder.restoreCallingIdentity(oldToken); } } interface BackupRestoreTask { void execute(); void operationComplete(long result); void handleCancel(boolean cancelAll); } void prepareOperationTimeout(int token,long interval,BackupRestoreTask callback,int operationType){ if (operationType != OP_TYPE_BACKUP_WAIT && operationType != OP_TYPE_RESTORE_WAIT) { Slog.wtf(TAG,"prepareOperationTimeout() doesn't support operation " + Integer.toHexString(token) + " of type "+ operationType); return; } if (MORE_DEBUG) Slog.v(TAG,"starting timeout: token=" + Integer.toHexString(token) + " interval="+ interval+ " callback="+ callback); synchronized (mCurrentOpLock) { mCurrentOperations.put(token,new Operation(OP_PENDING,callback,operationType)); Message msg=mBackupHandler.obtainMessage(getMessageIdForOperationType(operationType),token,0,callback); mBackupHandler.sendMessageDelayed(msg,interval); } } private int getMessageIdForOperationType(int operationType){ switch (operationType) { case OP_TYPE_BACKUP_WAIT: return MSG_BACKUP_OPERATION_TIMEOUT; case OP_TYPE_RESTORE_WAIT: return MSG_RESTORE_OPERATION_TIMEOUT; default : Slog.wtf(TAG,"getMessageIdForOperationType called on invalid operation type: " + operationType); return -1; } } private void removeOperation(int token){ if (MORE_DEBUG) { Slog.d(TAG,"Removing operation token=" + Integer.toHexString(token)); } synchronized (mCurrentOpLock) { if (mCurrentOperations.get(token) == null) { Slog.w(TAG,"Duplicate remove for operation. token=" + Integer.toHexString(token)); } mCurrentOperations.remove(token); } } boolean waitUntilOperationComplete(int token){ if (MORE_DEBUG) Slog.i(TAG,"Blocking until operation complete for " + Integer.toHexString(token)); int finalState=OP_PENDING; Operation op=null; synchronized (mCurrentOpLock) { while (true) { op=mCurrentOperations.get(token); if (op == null) { break; }  else { if (op.state == OP_PENDING) { try { mCurrentOpLock.wait(); }  catch (InterruptedException e) { } }  else { if (MORE_DEBUG) { Slog.d(TAG,"Unblocked waiting for operation token=" + Integer.toHexString(token)); } finalState=op.state; break; } } } } removeOperation(token); if (op != null) { mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } if (MORE_DEBUG) Slog.v(TAG,"operation " + Integer.toHexString(token) + " complete: finalState="+ finalState); return finalState == OP_ACKNOWLEDGED; } void handleCancel(int token,boolean cancelAll){ Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (MORE_DEBUG) { if (op == null) Slog.w(TAG,"Cancel of token " + Integer.toHexString(token) + " but no op found"); } int state=(op != null) ? op.state : OP_TIMEOUT; if (state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Operation already got an ack." + "Should have been removed from mCurrentOperations."); } op=null; mCurrentOperations.delete(token); }  else if (state == OP_PENDING) { if (DEBUG) Slog.v(TAG,"Cancel: token=" + Integer.toHexString(token)); op.state=OP_TIMEOUT; mBackupHandler.removeMessages(getMessageIdForOperationType(op.type)); } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { if (MORE_DEBUG) { Slog.v(TAG,"   Invoking cancel on " + op.callback); } op.callback.handleCancel(cancelAll); } } enum BackupState {INITIAL, RUNNING_QUEUE, FINAL} /**   * This class handles the process of backing up a given list of key/value backup packages. Also takes in a list of pending dolly backups and kicks them off when key/value backups are done. Flow: If required, backup @pm@. For each pending key/value backup package: - Bind to agent. - Call agent.doBackup() - Wait either for cancel/timeout or operationComplete() callback from the agent. Start task to perform dolly backups. There are three entry points into this class: - execute() [Called from the handler thread] - operationComplete(long result) [Called from the handler thread] - handleCancel(boolean cancelAll) [Can be called from any thread] These methods synchronize on mCancelLock. Interaction with mCurrentOperations: - An entry for this task is put into mCurrentOperations for the entire lifetime of the task. This is useful to cancel the task if required. - An ephemeral entry is put into mCurrentOperations each time we are waiting on for response from a backup agent. This is used to plumb timeouts and completion callbacks.  */ class PerformBackupTask implements BackupRestoreTask { private static final String TAG="PerformBackupTask"; private final Object mCancelLock=new Object(); IBackupTransport mTransport; ArrayList<BackupRequest> mQueue; ArrayList<BackupRequest> mOriginalQueue; File mStateDir; File mJournal; BackupState mCurrentState; List<String> mPendingFullBackups; IBackupObserver mObserver; IBackupManagerMonitor mMonitor; private final PerformFullTransportBackupTask mFullBackupTask; private final int mCurrentOpToken; private volatile int mEphemeralOpToken; IBackupAgent mAgentBinder; PackageInfo mCurrentPackage; File mSavedStateName; File mBackupDataName; File mNewStateName; ParcelFileDescriptor mSavedState; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; int mStatus; boolean mFinished; final boolean mUserInitiated; final boolean mNonIncremental; private volatile boolean mCancelAll; public PerformBackupTask(IBackupTransport transport,String dirName,ArrayList<BackupRequest> queue,File journal,IBackupObserver observer,IBackupManagerMonitor monitor,List<String> pendingFullBackups,boolean userInitiated,boolean nonIncremental){ mTransport=transport; mOriginalQueue=queue; mQueue=new ArrayList<>(); mJournal=journal; mObserver=observer; mMonitor=monitor; mPendingFullBackups=pendingFullBackups; mUserInitiated=userInitiated; mNonIncremental=nonIncremental; mStateDir=new File(mBaseStateDir,dirName); mCurrentOpToken=generateToken(); mFinished=false; synchronized (mCurrentOpLock) { if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping backup since one is already in progress."); } mCancelAll=true; mFullBackupTask=null; mCurrentState=BackupState.FINAL; addBackupTrace("Skipped. Backup already in progress."); }  else { mCurrentState=BackupState.INITIAL; CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); mFullBackupTask=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); registerTask(); addBackupTrace("STATE => INITIAL"); } } } /**   * Put this task in the repository of running tasks.  */ private void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } /**   * Remove this task from repository of running tasks.  */ private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override @GuardedBy("mCancelLock") public void execute(){ synchronized (mCancelLock) { switch (mCurrentState) { case INITIAL: beginBackup(); break; case RUNNING_QUEUE: invokeNextAgent(); break; case FINAL: if (!mFinished) finalizeBackup();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } } void beginBackup(){ if (DEBUG_BACKUP_TRACE) { clearBackupTrace(); StringBuilder b=new StringBuilder(256); b.append("beginBackup: ["); for (BackupRequest req : mOriginalQueue) { b.append(' '); b.append(req.packageName); } b.append(" ]"); addBackupTrace(b.toString()); } mAgentBinder=null; mStatus=BackupTransport.TRANSPORT_OK; if (mOriginalQueue.isEmpty() && mPendingFullBackups.isEmpty()) { Slog.w(TAG,"Backup begun with an empty queue - nothing to do."); addBackupTrace("queue empty at begin"); sendBackupFinished(mObserver,BackupManager.SUCCESS); executeNextState(BackupState.FINAL); return; } mQueue=(ArrayList<BackupRequest>)mOriginalQueue.clone(); boolean skipPm=mNonIncremental; for (int i=0; i < mQueue.size(); i++) { if (PACKAGE_MANAGER_SENTINEL.equals(mQueue.get(i).packageName)) { if (MORE_DEBUG) { Slog.i(TAG,"Metadata in queue; eliding"); } mQueue.remove(i); skipPm=false; break; } } if (DEBUG) Slog.v(TAG,"Beginning backup of " + mQueue.size() + " targets"); File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); try { final String transportName=mTransport.transportDirName(); EventLog.writeEvent(EventLogTags.BACKUP_START,transportName); if (mStatus == BackupTransport.TRANSPORT_OK && pmState.length() <= 0) { Slog.i(TAG,"Initializing (wiping) backup state and transport storage"); addBackupTrace("initializing transport " + transportName); resetBackupState(mStateDir); mStatus=mTransport.initializeDevice(); addBackupTrace("transport.initializeDevice() == " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); }  else { EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); Slog.e(TAG,"Transport error in initializeDevice()"); } } if (skipPm) { Slog.d(TAG,"Skipping backup of package metadata."); executeNextState(BackupState.RUNNING_QUEUE); }  else { if (mStatus == BackupTransport.TRANSPORT_OK) { PackageManagerBackupAgent pmAgent=new PackageManagerBackupAgent(mPackageManager); mStatus=invokeAgentForBackup(PACKAGE_MANAGER_SENTINEL,IBackupAgent.Stub.asInterface(pmAgent.onBind()),mTransport); addBackupTrace("PMBA invoke: " + mStatus); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); } } if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { EventLog.writeEvent(EventLogTags.BACKUP_RESET,mTransport.transportDirName()); } }  catch (Exception e) { Slog.e(TAG,"Error in backup thread",e); addBackupTrace("Exception in backup thread: " + e); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { addBackupTrace("exiting prelim: " + mStatus); if (mStatus != BackupTransport.TRANSPORT_OK) { resetBackupState(mStateDir); sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); executeNextState(BackupState.FINAL); } } } void invokeNextAgent(){ mStatus=BackupTransport.TRANSPORT_OK; addBackupTrace("invoke q=" + mQueue.size()); if (mQueue.isEmpty()) { if (MORE_DEBUG) Slog.i(TAG,"queue now empty"); executeNextState(BackupState.FINAL); return; } BackupRequest request=mQueue.get(0); mQueue.remove(0); Slog.d(TAG,"starting key/value backup of " + request); addBackupTrace("launch agent for " + request.packageName); try { mCurrentPackage=mPackageManager.getPackageInfo(request.packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(mCurrentPackage.applicationInfo)) { Slog.i(TAG,"Package " + request.packageName + " no longer supports backup; skipping"); addBackupTrace("skipping - not eligible, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appGetsFullBackup(mCurrentPackage)) { Slog.i(TAG,"Package " + request.packageName + " requests full-data rather than key/value; skipping"); addBackupTrace("skipping - fullBackupOnly, completion is noop"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } if (appIsStopped(mCurrentPackage.applicationInfo)) { addBackupTrace("skipping - stopped"); sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_BACKUP_NOT_ALLOWED); executeNextState(BackupState.RUNNING_QUEUE); return; } IBackupAgent agent=null; try { mWakelock.setWorkSource(new WorkSource(mCurrentPackage.applicationInfo.uid)); agent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); addBackupTrace("agent bound; a? = " + (agent != null)); if (agent != null) { mAgentBinder=agent; mStatus=invokeAgentForBackup(request.packageName,agent,mTransport); }  else { mStatus=BackupTransport.AGENT_ERROR; } }  catch (SecurityException ex) { Slog.d(TAG,"error in bind/backup",ex); mStatus=BackupTransport.AGENT_ERROR; addBackupTrace("agent SE"); } }  catch (NameNotFoundException e) { Slog.d(TAG,"Package does not exist; skipping"); addBackupTrace("no such package"); mStatus=BackupTransport.AGENT_UNKNOWN; }  finally { mWakelock.setWorkSource(null); if (mStatus != BackupTransport.TRANSPORT_OK) { BackupState nextState=BackupState.RUNNING_QUEUE; mAgentBinder=null; if (mStatus == BackupTransport.AGENT_ERROR) { if (MORE_DEBUG) Slog.i(TAG,"Agent failure for " + request.packageName + " - restaging"); dataChangedImpl(request.packageName); mStatus=BackupTransport.TRANSPORT_OK; if (mQueue.isEmpty()) nextState=BackupState.FINAL; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_AGENT_FAILURE); }  else if (mStatus == BackupTransport.AGENT_UNKNOWN) { mStatus=BackupTransport.TRANSPORT_OK; sendBackupOnPackageResult(mObserver,mCurrentPackage.packageName,BackupManager.ERROR_PACKAGE_NOT_FOUND); }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); }  else { addBackupTrace("expecting completion/timeout callback"); } } } void finalizeBackup(){ addBackupTrace("finishing"); for (BackupRequest req : mQueue) { dataChangedImpl(req.packageName); } if (mJournal != null && !mJournal.delete()) { Slog.e(TAG,"Unable to remove backup journal file " + mJournal); } if ((mCurrentToken == 0) && (mStatus == BackupTransport.TRANSPORT_OK)) { addBackupTrace("success; recording token"); try { mCurrentToken=mTransport.getCurrentRestoreSet(); writeRestoreTokens(); }  catch (Exception e) { Slog.e(TAG,"Transport threw reporting restore set: " + e.getMessage()); addBackupTrace("transport threw returning token"); } } synchronized (mQueueLock) { mBackupRunning=false; if (mStatus == BackupTransport.TRANSPORT_NOT_INITIALIZED) { if (MORE_DEBUG) Slog.d(TAG,"Server requires init; rerunning"); addBackupTrace("init required; rerunning"); try { final String name=mTransportManager.getTransportName(mTransport); if (name != null) { mPendingInits.add(name); }  else { if (DEBUG) { Slog.w(TAG,"Couldn't find name of transport " + mTransport + " for init"); } } }  catch (Exception e) { Slog.w(TAG,"Failed to query transport name for init: " + e.getMessage()); } clearMetadata(); backupNow(); } } clearBackupTrace(); unregisterTask(); if (!mCancelAll && mStatus == BackupTransport.TRANSPORT_OK && mPendingFullBackups != null && !mPendingFullBackups.isEmpty()) { Slog.d(TAG,"Starting full backups for: " + mPendingFullBackups); CountDownLatch latch=new CountDownLatch(1); String[] fullBackups=mPendingFullBackups.toArray(new String[mPendingFullBackups.size()]); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,fullBackups,false,null,latch,mObserver,mMonitor,mUserInitiated); mWakelock.acquire(); (new Thread(mFullBackupTask,"full-transport-requested")).start(); }  else if (mCancelAll) { if (mFullBackupTask != null) { mFullBackupTask.unregisterTask(); } sendBackupFinished(mObserver,BackupManager.ERROR_BACKUP_CANCELLED); }  else { mFullBackupTask.unregisterTask(); switch (mStatus) { case BackupTransport.TRANSPORT_OK: sendBackupFinished(mObserver,BackupManager.SUCCESS); break; case BackupTransport.TRANSPORT_NOT_INITIALIZED: sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; case BackupTransport.TRANSPORT_ERROR: default : sendBackupFinished(mObserver,BackupManager.ERROR_TRANSPORT_ABORTED); break; } } Slog.i(BackupManagerService.TAG,"K/V backup pass finished."); mWakelock.release(); } void clearMetadata(){ final File pmState=new File(mStateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.exists()) pmState.delete(); } int invokeAgentForBackup(String packageName,IBackupAgent agent,IBackupTransport transport){ if (DEBUG) Slog.d(TAG,"invokeAgentForBackup on " + packageName); addBackupTrace("invoking " + packageName); File blankStateName=new File(mStateDir,"blank_state"); mSavedStateName=new File(mStateDir,packageName); mBackupDataName=new File(mDataDir,packageName + ".data"); mNewStateName=new File(mStateDir,packageName + ".new"); if (MORE_DEBUG) Slog.d(TAG,"data file: " + mBackupDataName); mSavedState=null; mBackupData=null; mNewState=null; boolean callingAgent=false; mEphemeralOpToken=generateToken(); try { if (packageName.equals(PACKAGE_MANAGER_SENTINEL)) { mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=packageName; } mSavedState=ParcelFileDescriptor.open(mNonIncremental ? blankStateName : mSavedStateName,ParcelFileDescriptor.MODE_READ_ONLY | ParcelFileDescriptor.MODE_CREATE); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (!SELinux.restorecon(mBackupDataName)) { Slog.e(TAG,"SELinux restorecon failed on " + mBackupDataName); } mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); final long quota=mTransport.getBackupQuota(packageName,false); callingAgent=true; addBackupTrace("setting timeout"); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("calling agent doBackup()"); agent.doBackup(mSavedState,mBackupData,mNewState,quota,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Error invoking for backup on " + packageName + ". "+ e); addBackupTrace("exception: " + e); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName,e.toString()); errorCleanup(); return callingAgent ? BackupTransport.AGENT_ERROR : BackupTransport.TRANSPORT_ERROR; }  finally { if (mNonIncremental) { blankStateName.delete(); } } addBackupTrace("invoke success"); return BackupTransport.TRANSPORT_OK; } public void failAgent(IBackupAgent agent,String message){ try { agent.fail(message); }  catch (Exception e) { Slog.w(TAG,"Error conveying failure to " + mCurrentPackage.packageName); } } private String SHA1Checksum(byte[] input){ final byte[] checksum; try { MessageDigest md=MessageDigest.getInstance("SHA-1"); checksum=md.digest(input); }  catch (NoSuchAlgorithmException e) { Slog.e(TAG,"Unable to use SHA-1!"); return "00"; } StringBuffer sb=new StringBuffer(checksum.length * 2); for (int i=0; i < checksum.length; i++) { sb.append(Integer.toHexString(checksum[i])); } return sb.toString(); } private void writeWidgetPayloadIfAppropriate(FileDescriptor fd,String pkgName) throws IOException { byte[] widgetState=AppWidgetBackupBridge.getWidgetState(pkgName,UserHandle.USER_SYSTEM); final File widgetFile=new File(mStateDir,pkgName + "_widget"); final boolean priorStateExists=widgetFile.exists(); if (MORE_DEBUG) { if (priorStateExists || widgetState != null) { Slog.i(TAG,"Checking widget update: state=" + (widgetState != null) + " prior="+ priorStateExists); } } if (!priorStateExists && widgetState == null) { return; } String newChecksum=null; if (widgetState != null) { newChecksum=SHA1Checksum(widgetState); if (priorStateExists) { final String priorChecksum; try (FileInputStream fin=new FileInputStream(widgetFile);DataInputStream in=new DataInputStream(fin)){ priorChecksum=in.readUTF(); }  if (Objects.equals(newChecksum,priorChecksum)) { return; } } } BackupDataOutput out=new BackupDataOutput(fd); if (widgetState != null) { try (FileOutputStream fout=new FileOutputStream(widgetFile);DataOutputStream stateOut=new DataOutputStream(fout)){ stateOut.writeUTF(newChecksum); }  out.writeEntityHeader(KEY_WIDGET_STATE,widgetState.length); out.writeEntityData(widgetState,widgetState.length); }  else { out.writeEntityHeader(KEY_WIDGET_STATE,-1); widgetFile.delete(); } } @Override @GuardedBy("mCancelLock") public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { Slog.d(TAG,"operationComplete received after task finished."); return; } if (mBackupData == null) { final String pkg=(mCurrentPackage != null) ? mCurrentPackage.packageName : "[none]"; if (MORE_DEBUG) { Slog.i(TAG,"Callback after agent teardown: " + pkg); } addBackupTrace("late opComplete; curPkg = " + pkg); return; } final String pkgName=mCurrentPackage.packageName; final long filepos=mBackupDataName.length(); FileDescriptor fd=mBackupData.getFileDescriptor(); try { if (mCurrentPackage.applicationInfo != null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) { ParcelFileDescriptor readFd=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); BackupDataInput in=new BackupDataInput(readFd.getFileDescriptor()); try { while (in.readNextHeader()) { final String key=in.getKey(); if (key != null && key.charAt(0) >= 0xff00) { failAgent(mAgentBinder,"Illegal backup key: " + key); addBackupTrace("illegal key " + key + " from "+ pkgName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,pkgName,"bad key"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ILLEGAL_KEY,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_ILLEGAL_KEY,key)); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_AGENT_FAILURE); errorCleanup(); return; } in.skipEntityData(); } }   finally { if (readFd != null) { readFd.close(); } } } writeWidgetPayloadIfAppropriate(fd,pkgName); }  catch (IOException e) { Slog.w(TAG,"Unable to save widget state for " + pkgName); try { Os.ftruncate(fd,filepos); }  catch (ErrnoException ee) { Slog.w(TAG,"Unable to roll back!"); } } if (MORE_DEBUG) Slog.v(TAG,"operationComplete(): sending data to transport for " + pkgName); mBackupHandler.removeMessages(MSG_BACKUP_OPERATION_TIMEOUT); clearAgentState(); addBackupTrace("operation complete"); ParcelFileDescriptor backupData=null; mStatus=BackupTransport.TRANSPORT_OK; long size=0; try { size=mBackupDataName.length(); if (size > 0) { if (mStatus == BackupTransport.TRANSPORT_OK) { backupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); addBackupTrace("sending data to transport"); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; mStatus=mTransport.performBackup(mCurrentPackage,backupData,flags); } addBackupTrace("data delivered: " + mStatus); if (mStatus == BackupTransport.TRANSPORT_OK) { addBackupTrace("finishing op on transport"); mStatus=mTransport.finishBackup(); addBackupTrace("finished: " + mStatus); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { addBackupTrace("transport rejected package"); } }  else { if (MORE_DEBUG) Slog.i(TAG,"no backup data written; not calling transport"); addBackupTrace("no data to send"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_DATA_TO_SEND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } if (mStatus == BackupTransport.TRANSPORT_OK) { mBackupDataName.delete(); mNewStateName.renameTo(mSavedStateName); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.BACKUP_PACKAGE,pkgName,size); logBackupComplete(pkgName); }  else if (mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { mBackupDataName.delete(); mNewStateName.delete(); sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); EventLogTags.writeBackupAgentFailure(pkgName,"Transport rejected"); }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); EventLog.writeEvent(EventLogTags.BACKUP_QUOTA_EXCEEDED,pkgName); }  else { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); } }  catch (Exception e) { sendBackupOnPackageResult(mObserver,pkgName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.e(TAG,"Transport error backing up " + pkgName,e); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,pkgName); mStatus=BackupTransport.TRANSPORT_ERROR; }  finally { try { if (backupData != null) backupData.close(); }  catch (IOException e) { } } final BackupState nextState; if (mStatus == BackupTransport.TRANSPORT_OK || mStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else if (mStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package " + mCurrentPackage.packageName + " hit quota limit on k/v backup"); } if (mAgentBinder != null) { try { long quota=mTransport.getBackupQuota(mCurrentPackage.packageName,false); mAgentBinder.doQuotaExceeded(size,quota); }  catch (Exception e) { Slog.e(TAG,"Unable to notify about quota exceeded: " + e.getMessage()); } } nextState=(mQueue.isEmpty()) ? BackupState.FINAL : BackupState.RUNNING_QUEUE; }  else { revertAndEndBackup(); nextState=BackupState.FINAL; } executeNextState(nextState); } } @Override @GuardedBy("mCancelLock") public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); synchronized (mCancelLock) { if (mFinished) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stale cancel. cancelAll=" + cancelAll); } return; } mCancelAll=cancelAll; final String logPackageName=(mCurrentPackage != null) ? mCurrentPackage.packageName : "no_package_yet"; Slog.i(TAG,"Cancel backing up " + logPackageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,logPackageName); addBackupTrace("cancel of " + logPackageName + ", cancelAll="+ cancelAll); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_CANCEL_ALL,mCancelAll)); errorCleanup(); if (!cancelAll) { executeNextState(mQueue.isEmpty() ? BackupState.FINAL : BackupState.RUNNING_QUEUE); dataChangedImpl(mCurrentPackage.packageName); }  else { finalizeBackup(); } } } void revertAndEndBackup(){ if (MORE_DEBUG) Slog.i(TAG,"Reverting backup queue - restaging everything"); addBackupTrace("transport error; reverting"); long delay; try { delay=mTransport.requestBackupTime(); }  catch (Exception e) { Slog.w(TAG,"Unable to contact transport for recommended backoff: " + e.getMessage()); delay=0; } KeyValueBackupJob.schedule(mContext,delay); for (BackupRequest request : mOriginalQueue) { dataChangedImpl(request.packageName); } } void errorCleanup(){ mBackupDataName.delete(); mNewStateName.delete(); clearAgentState(); } void clearAgentState(){ try { if (mSavedState != null) mSavedState.close(); }  catch (IOException e) { } try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } synchronized (mCurrentOpLock) { mCurrentOperations.remove(mEphemeralOpToken); mSavedState=mBackupData=mNewState=null; } if (mCurrentPackage.applicationInfo != null) { addBackupTrace("unbinding " + mCurrentPackage.packageName); try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); }  catch (RemoteException e) { } } } void executeNextState(BackupState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); addBackupTrace("executeNextState => " + nextState); mCurrentState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } } private boolean isBackupOperationInProgress(){ synchronized (mCurrentOpLock) { for (int i=0; i < mCurrentOperations.size(); i++) { Operation op=mCurrentOperations.valueAt(i); if (op.type == OP_TYPE_BACKUP && op.state == OP_PENDING) { return true; } } } return false; } class FullBackupObbConnection implements ServiceConnection { volatile IObbBackupService mService; FullBackupObbConnection(){ mService=null; } public void establish(){ if (MORE_DEBUG) Slog.i(TAG,"Initiating bind of OBB service on " + this); Intent obbIntent=new Intent().setComponent(new ComponentName("com.android.sharedstoragebackup","com.android.sharedstoragebackup.ObbBackupService")); BackupManagerService.this.mContext.bindServiceAsUser(obbIntent,this,Context.BIND_AUTO_CREATE,UserHandle.SYSTEM); } public void tearDown(){ BackupManagerService.this.mContext.unbindService(this); } public boolean backupObbs(PackageInfo pkg,OutputStream out){ boolean success=false; waitForConnection(); ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); int token=generateToken(); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,null,OP_TYPE_BACKUP_WAIT); mService.backupObbs(pkg.packageName,pipes[1],token,mBackupManagerBinder); routeSocketDataToOutput(pipes[0],out); success=waitUntilOperationComplete(token); }  catch (Exception e) { Slog.w(TAG,"Unable to back up OBBs for " + pkg,e); }  finally { try { out.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"I/O error closing down OBB backup",e); } } return success; } public void restoreObbFile(String pkgName,ParcelFileDescriptor data,long fileSize,int type,String path,long mode,long mtime,int token,IBackupManager callbackBinder){ waitForConnection(); try { mService.restoreObbFile(pkgName,data,fileSize,type,path,mode,mtime,token,callbackBinder); }  catch (Exception e) { Slog.w(TAG,"Unable to restore OBBs for " + pkgName,e); } } private void waitForConnection(){ synchronized (this) { while (mService == null) { if (MORE_DEBUG) Slog.i(TAG,"...waiting for OBB service binding..."); try { this.wait(); }  catch (InterruptedException e) { } } if (MORE_DEBUG) Slog.i(TAG,"Connected to OBB service; continuing"); } } @Override public void onServiceConnected(ComponentName name,IBinder service){ synchronized (this) { mService=IObbBackupService.Stub.asInterface(service); if (MORE_DEBUG) Slog.i(TAG,"OBB service connection " + mService + " connected on "+ this); this.notifyAll(); } } @Override public void onServiceDisconnected(ComponentName name){ synchronized (this) { mService=null; if (MORE_DEBUG) Slog.i(TAG,"OBB service connection disconnected on " + this); this.notifyAll(); } } } static void routeSocketDataToOutput(ParcelFileDescriptor inPipe,OutputStream out) throws IOException { FileInputStream raw=new FileInputStream(inPipe.getFileDescriptor()); DataInputStream in=new DataInputStream(raw); byte[] buffer=new byte[32 * 1024]; int chunkTotal; while ((chunkTotal=in.readInt()) > 0) { while (chunkTotal > 0) { int toRead=(chunkTotal > buffer.length) ? buffer.length : chunkTotal; int nRead=in.read(buffer,0,toRead); out.write(buffer,0,nRead); chunkTotal-=nRead; } } } void tearDownAgentAndKill(ApplicationInfo app){ if (app == null) { return; } try { mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (MORE_DEBUG) Slog.d(TAG,"Killing agent host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (MORE_DEBUG) Slog.d(TAG,"Not killing after operation: " + app.processName); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } } interface FullBackupPreflight { /**   * Perform the preflight operation necessary for the given package.  * @param pkg The name of the package being proposed for full-data backup  * @param agent Live BackupAgent binding to the target app's agent  * @return BackupTransport.TRANSPORT_OK to proceed with the backup operation,or one of the other BackupTransport.* error codes as appropriate  */ int preflightFullBackup(PackageInfo pkg,IBackupAgent agent); long getExpectedSizeOrErrorCode(); } class FullBackupEngine { OutputStream mOutput; FullBackupPreflight mPreflightHook; BackupRestoreTask mTimeoutMonitor; IBackupAgent mAgent; File mFilesDir; File mManifestFile; File mMetadataFile; boolean mIncludeApks; PackageInfo mPkg; private final long mQuota; private final int mOpToken; class FullBackupRunner implements Runnable { PackageInfo mPackage; byte[] mWidgetData; IBackupAgent mAgent; ParcelFileDescriptor mPipe; int mToken; boolean mSendApk; boolean mWriteManifest; FullBackupRunner(PackageInfo pack,IBackupAgent agent,ParcelFileDescriptor pipe,int token,boolean sendApk,boolean writeManifest,byte[] widgetData) throws IOException { mPackage=pack; mWidgetData=widgetData; mAgent=agent; mPipe=ParcelFileDescriptor.dup(pipe.getFileDescriptor()); mToken=token; mSendApk=sendApk; mWriteManifest=writeManifest; } @Override public void run(){ try { FullBackupDataOutput output=new FullBackupDataOutput(mPipe); if (mWriteManifest) { final boolean writeWidgetData=mWidgetData != null; if (MORE_DEBUG) Slog.d(TAG,"Writing manifest for " + mPackage.packageName); writeAppManifest(mPackage,mPackageManager,mManifestFile,mSendApk,writeWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mManifestFile.getAbsolutePath(),output); mManifestFile.delete(); if (writeWidgetData) { writeMetadata(mPackage,mMetadataFile,mWidgetData); FullBackup.backupToTar(mPackage.packageName,null,null,mFilesDir.getAbsolutePath(),mMetadataFile.getAbsolutePath(),output); mMetadataFile.delete(); } } if (mSendApk) { writeApkToBackup(mPackage,output); } if (DEBUG) Slog.d(TAG,"Calling doFullBackup() on " + mPackage.packageName); prepareOperationTimeout(mToken,TIMEOUT_FULL_BACKUP_INTERVAL,mTimeoutMonitor,OP_TYPE_BACKUP_WAIT); mAgent.doFullBackup(mPipe,mQuota,mToken,mBackupManagerBinder); }  catch (IOException e) { Slog.e(TAG,"Error running full backup for " + mPackage.packageName); } catch (RemoteException e) { Slog.e(TAG,"Remote agent vanished during full backup of " + mPackage.packageName); }  finally { try { mPipe.close(); }  catch (IOException e) { } } } } FullBackupEngine(OutputStream output,FullBackupPreflight preflightHook,PackageInfo pkg,boolean alsoApks,BackupRestoreTask timeoutMonitor,long quota,int opToken){ mOutput=output; mPreflightHook=preflightHook; mPkg=pkg; mIncludeApks=alsoApks; mTimeoutMonitor=timeoutMonitor; mFilesDir=new File("/data/system"); mManifestFile=new File(mFilesDir,BACKUP_MANIFEST_FILENAME); mMetadataFile=new File(mFilesDir,BACKUP_METADATA_FILENAME); mQuota=quota; mOpToken=opToken; } public int preflightCheck() throws RemoteException { if (mPreflightHook == null) { if (MORE_DEBUG) { Slog.v(TAG,"No preflight check"); } return BackupTransport.TRANSPORT_OK; } if (initializeAgent()) { int result=mPreflightHook.preflightFullBackup(mPkg,mAgent); if (MORE_DEBUG) { Slog.v(TAG,"preflight returned " + result); } return result; }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); return BackupTransport.AGENT_ERROR; } } public int backupOnePackage() throws RemoteException { int result=BackupTransport.AGENT_ERROR; if (initializeAgent()) { ParcelFileDescriptor[] pipes=null; try { pipes=ParcelFileDescriptor.createPipe(); ApplicationInfo app=mPkg.applicationInfo; final boolean isSharedStorage=mPkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); final boolean sendApk=mIncludeApks && !isSharedStorage && ((app.privateFlags & ApplicationInfo.PRIVATE_FLAG_FORWARD_LOCK) == 0)&& ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 || (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0); byte[] widgetBlob=AppWidgetBackupBridge.getWidgetState(mPkg.packageName,UserHandle.USER_SYSTEM); FullBackupRunner runner=new FullBackupRunner(mPkg,mAgent,pipes[1],mOpToken,sendApk,!isSharedStorage,widgetBlob); pipes[1].close(); pipes[1]=null; Thread t=new Thread(runner,"app-data-runner"); t.start(); routeSocketDataToOutput(pipes[0],mOutput); if (!waitUntilOperationComplete(mOpToken)) { Slog.e(TAG,"Full backup failed on package " + mPkg.packageName); }  else { if (MORE_DEBUG) { Slog.d(TAG,"Full package backup success: " + mPkg.packageName); } result=BackupTransport.TRANSPORT_OK; } }  catch (IOException e) { Slog.e(TAG,"Error backing up " + mPkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; }  finally { try { mOutput.flush(); if (pipes != null) { if (pipes[0] != null) pipes[0].close(); if (pipes[1] != null) pipes[1].close(); } }  catch (IOException e) { Slog.w(TAG,"Error bringing down backup stack"); result=BackupTransport.TRANSPORT_ERROR; } } }  else { Slog.w(TAG,"Unable to bind to full agent for " + mPkg.packageName); } tearDown(); return result; } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ if (initializeAgent()) { try { mAgent.doQuotaExceeded(backupDataBytes,quotaBytes); }  catch (RemoteException e) { Slog.e(TAG,"Remote exception while telling agent about quota exceeded"); } } } private boolean initializeAgent(){ if (mAgent == null) { if (MORE_DEBUG) { Slog.d(TAG,"Binding to full backup agent : " + mPkg.packageName); } mAgent=bindToAgentSynchronous(mPkg.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_FULL); } return mAgent != null; } private void writeApkToBackup(PackageInfo pkg,FullBackupDataOutput output){ final String appSourceDir=pkg.applicationInfo.getBaseCodePath(); final String apkDir=new File(appSourceDir).getParent(); FullBackup.backupToTar(pkg.packageName,FullBackup.APK_TREE_TOKEN,null,apkDir,appSourceDir,output); final UserEnvironment userEnv=new UserEnvironment(UserHandle.USER_SYSTEM); final File obbDir=userEnv.buildExternalStorageAppObbDirs(pkg.packageName)[0]; if (obbDir != null) { if (MORE_DEBUG) Log.i(TAG,"obb dir: " + obbDir.getAbsolutePath()); File[] obbFiles=obbDir.listFiles(); if (obbFiles != null) { final String obbDirName=obbDir.getAbsolutePath(); for (File obb : obbFiles) { FullBackup.backupToTar(pkg.packageName,FullBackup.OBB_TREE_TOKEN,null,obbDirName,obb.getAbsolutePath(),output); } } } } private void writeMetadata(PackageInfo pkg,File destination,byte[] widgetData) throws IOException { StringBuilder b=new StringBuilder(512); StringBuilderPrinter printer=new StringBuilderPrinter(b); printer.println(Integer.toString(BACKUP_METADATA_VERSION)); printer.println(pkg.packageName); FileOutputStream fout=new FileOutputStream(destination); BufferedOutputStream bout=new BufferedOutputStream(fout); DataOutputStream out=new DataOutputStream(bout); bout.write(b.toString().getBytes()); if (widgetData != null && widgetData.length > 0) { out.writeInt(BACKUP_WIDGET_METADATA_TOKEN); out.writeInt(widgetData.length); out.write(widgetData); } bout.flush(); out.close(); destination.setLastModified(0); } private void tearDown(){ if (mPkg != null) { tearDownAgentAndKill(mPkg.applicationInfo); } } } static void writeAppManifest(PackageInfo pkg,PackageManager packageManager,File manifestFile,boolean withApk,boolean withWidgets) throws IOException { StringBuilder builder=new StringBuilder(4096); StringBuilderPrinter printer=new StringBuilderPrinter(builder); printer.println(Integer.toString(BACKUP_MANIFEST_VERSION)); printer.println(pkg.packageName); printer.println(Integer.toString(pkg.versionCode)); printer.println(Integer.toString(Build.VERSION.SDK_INT)); String installerName=packageManager.getInstallerPackageName(pkg.packageName); printer.println((installerName != null) ? installerName : ""); printer.println(withApk ? "1" : "0"); if (pkg.signatures == null) { printer.println("0"); }  else { printer.println(Integer.toString(pkg.signatures.length)); for (Signature sig : pkg.signatures) { printer.println(sig.toCharsString()); } } FileOutputStream outstream=new FileOutputStream(manifestFile); outstream.write(builder.toString().getBytes()); outstream.close(); manifestFile.setLastModified(0); } abstract class FullBackupTask implements Runnable { IFullBackupRestoreObserver mObserver; FullBackupTask(IFullBackupRestoreObserver observer){ mObserver=observer; } final void sendStartBackup(){ if (mObserver != null) { try { mObserver.onStartBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: startBackup"); mObserver=null; } } } final void sendOnBackupPackage(String name){ if (mObserver != null) { try { mObserver.onBackupPackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: backupPackage"); mObserver=null; } } } final void sendEndBackup(){ if (mObserver != null) { try { mObserver.onEndBackup(); }  catch (RemoteException e) { Slog.w(TAG,"full backup observer went away: endBackup"); mObserver=null; } } } } boolean deviceIsEncrypted(){ try { return mStorageManager.getEncryptionState() != StorageManager.ENCRYPTION_STATE_NONE && mStorageManager.getPasswordType() != StorageManager.CRYPT_TYPE_DEFAULT; }  catch (Exception e) { Slog.e(TAG,"Unable to communicate with storagemanager service: " + e.getMessage()); return true; } } class PerformAdbBackupTask extends FullBackupTask implements BackupRestoreTask { FullBackupEngine mBackupEngine; final AtomicBoolean mLatch; ParcelFileDescriptor mOutputFile; DeflaterOutputStream mDeflater; boolean mIncludeApks; boolean mIncludeObbs; boolean mIncludeShared; boolean mDoWidgets; boolean mAllApps; boolean mIncludeSystem; boolean mCompress; boolean mKeyValue; ArrayList<String> mPackages; PackageInfo mCurrentTarget; String mCurrentPassword; String mEncryptPassword; private final int mCurrentOpToken; PerformAdbBackupTask(ParcelFileDescriptor fd,IFullBackupRestoreObserver observer,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,String curPassword,String encryptPassword,boolean doAllApps,boolean doSystem,boolean doCompress,boolean doKeyValue,String[] packages,AtomicBoolean latch){ super(observer); mCurrentOpToken=generateToken(); mLatch=latch; mOutputFile=fd; mIncludeApks=includeApks; mIncludeObbs=includeObbs; mIncludeShared=includeShared; mDoWidgets=doWidgets; mAllApps=doAllApps; mIncludeSystem=doSystem; mPackages=(packages == null) ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(packages)); mCurrentPassword=curPassword; if (encryptPassword == null || "".equals(encryptPassword)) { mEncryptPassword=curPassword; }  else { mEncryptPassword=encryptPassword; } if (MORE_DEBUG) { Slog.w(TAG,"Encrypting backup with passphrase=" + mEncryptPassword); } mCompress=doCompress; mKeyValue=doKeyValue; } void addPackagesToSet(TreeMap<String,PackageInfo> set,List<String> pkgNames){ for (String pkgName : pkgNames) { if (!set.containsKey(pkgName)) { try { PackageInfo info=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); set.put(pkgName,info); }  catch (NameNotFoundException e) { Slog.w(TAG,"Unknown package " + pkgName + ", skipping"); } } } } private OutputStream emitAesBackupHeader(StringBuilder headerbuf,OutputStream ofstream) throws Exception { byte[] newUserSalt=randomBytes(PBKDF2_SALT_SIZE); SecretKey userKey=buildPasswordKey(PBKDF_CURRENT,mEncryptPassword,newUserSalt,PBKDF2_HASH_ROUNDS); byte[] masterPw=new byte[256 / 8]; mRng.nextBytes(masterPw); byte[] checksumSalt=randomBytes(PBKDF2_SALT_SIZE); Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKeySpec masterKeySpec=new SecretKeySpec(masterPw,"AES"); c.init(Cipher.ENCRYPT_MODE,masterKeySpec); OutputStream finalOutput=new CipherOutputStream(ofstream,c); headerbuf.append(ENCRYPTION_ALGORITHM_NAME); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(newUserSalt)); headerbuf.append('\n'); headerbuf.append(byteArrayToHex(checksumSalt)); headerbuf.append('\n'); headerbuf.append(PBKDF2_HASH_ROUNDS); headerbuf.append('\n'); Cipher mkC=Cipher.getInstance("AES/CBC/PKCS5Padding"); mkC.init(Cipher.ENCRYPT_MODE,userKey); byte[] IV=mkC.getIV(); headerbuf.append(byteArrayToHex(IV)); headerbuf.append('\n'); IV=c.getIV(); byte[] mk=masterKeySpec.getEncoded(); byte[] checksum=makeKeyChecksum(PBKDF_CURRENT,masterKeySpec.getEncoded(),checksumSalt,PBKDF2_HASH_ROUNDS); ByteArrayOutputStream blob=new ByteArrayOutputStream(IV.length + mk.length + checksum.length+ 3); DataOutputStream mkOut=new DataOutputStream(blob); mkOut.writeByte(IV.length); mkOut.write(IV); mkOut.writeByte(mk.length); mkOut.write(mk); mkOut.writeByte(checksum.length); mkOut.write(checksum); mkOut.flush(); byte[] encryptedMk=mkC.doFinal(blob.toByteArray()); headerbuf.append(byteArrayToHex(encryptedMk)); headerbuf.append('\n'); return finalOutput; } private void finalizeBackup(OutputStream out){ try { byte[] eof=new byte[512 * 2]; out.write(eof); }  catch (IOException e) { Slog.w(TAG,"Error attempting to finalize backup stream"); } } @Override public void run(){ String includeKeyValue=mKeyValue ? ", including key-value backups" : ""; Slog.i(TAG,"--- Performing adb backup" + includeKeyValue + " ---"); TreeMap<String,PackageInfo> packagesToBackup=new TreeMap<String,PackageInfo>(); FullBackupObbConnection obbConnection=new FullBackupObbConnection(); obbConnection.establish(); sendStartBackup(); if (mAllApps) { List<PackageInfo> allPackages=mPackageManager.getInstalledPackages(PackageManager.GET_SIGNATURES); for (int i=0; i < allPackages.size(); i++) { PackageInfo pkg=allPackages.get(i); if (mIncludeSystem == true || ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) { packagesToBackup.put(pkg.packageName,pkg); } } } if (mDoWidgets) { List<String> pkgs=AppWidgetBackupBridge.getWidgetParticipants(UserHandle.USER_SYSTEM); if (pkgs != null) { if (MORE_DEBUG) { Slog.i(TAG,"Adding widget participants to backup set:"); StringBuilder sb=new StringBuilder(128); sb.append("   "); for (String s : pkgs) { sb.append(' '); sb.append(s); } Slog.i(TAG,sb.toString()); } addPackagesToSet(packagesToBackup,pkgs); } } if (mPackages != null) { addPackagesToSet(packagesToBackup,mPackages); } ArrayList<PackageInfo> keyValueBackupQueue=new ArrayList<>(); Iterator<Entry<String,PackageInfo>> iter=packagesToBackup.entrySet().iterator(); while (iter.hasNext()) { PackageInfo pkg=iter.next().getValue(); if (!appIsEligibleForBackup(pkg.applicationInfo) || appIsStopped(pkg.applicationInfo)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is not eligible for backup, removing."); } }  else if (appIsKeyValueOnly(pkg)) { iter.remove(); if (DEBUG) { Slog.i(TAG,"Package " + pkg.packageName + " is key-value."); } keyValueBackupQueue.add(pkg); } } ArrayList<PackageInfo> backupQueue=new ArrayList<PackageInfo>(packagesToBackup.values()); FileOutputStream ofstream=new FileOutputStream(mOutputFile.getFileDescriptor()); OutputStream out=null; PackageInfo pkg=null; try { boolean encrypting=(mEncryptPassword != null && mEncryptPassword.length() > 0); if (deviceIsEncrypted() && !encrypting) { Slog.e(TAG,"Unencrypted backup of encrypted device; aborting"); return; } OutputStream finalOutput=ofstream; if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } StringBuilder headerbuf=new StringBuilder(1024); headerbuf.append(BACKUP_FILE_HEADER_MAGIC); headerbuf.append(BACKUP_FILE_VERSION); headerbuf.append(mCompress ? "\n1\n" : "\n0\n"); try { if (encrypting) { finalOutput=emitAesBackupHeader(headerbuf,finalOutput); }  else { headerbuf.append("none\n"); } byte[] header=headerbuf.toString().getBytes("UTF-8"); ofstream.write(header); if (mCompress) { Deflater deflater=new Deflater(Deflater.BEST_COMPRESSION); finalOutput=new DeflaterOutputStream(finalOutput,deflater,true); } out=finalOutput; }  catch (Exception e) { Slog.e(TAG,"Unable to emit archive header",e); return; } if (mIncludeShared) { try { pkg=mPackageManager.getPackageInfo(SHARED_BACKUP_AGENT_PACKAGE,0); backupQueue.add(pkg); }  catch (NameNotFoundException e) { Slog.e(TAG,"Unable to find shared-storage backup handler"); } } int N=backupQueue.size(); for (int i=0; i < N; i++) { pkg=backupQueue.get(i); if (DEBUG) { Slog.i(TAG,"--- Performing full backup for package " + pkg.packageName + " ---"); } final boolean isSharedStorage=pkg.packageName.equals(SHARED_BACKUP_AGENT_PACKAGE); mBackupEngine=new FullBackupEngine(out,null,pkg,mIncludeApks,this,Long.MAX_VALUE,mCurrentOpToken); sendOnBackupPackage(isSharedStorage ? "Shared storage" : pkg.packageName); mCurrentTarget=pkg; mBackupEngine.backupOnePackage(); if (mIncludeObbs) { boolean obbOkay=obbConnection.backupObbs(pkg,out); if (!obbOkay) { throw new RuntimeException("Failure writing OBB stack for " + pkg); } } } if (mKeyValue) { for (PackageInfo keyValuePackage : keyValueBackupQueue) { if (DEBUG) { Slog.i(TAG,"--- Performing key-value backup for package " + keyValuePackage.packageName + " ---"); } KeyValueAdbBackupEngine kvBackupEngine=new KeyValueAdbBackupEngine(out,keyValuePackage,BackupManagerService.this,mPackageManager,mBaseStateDir,mDataDir); sendOnBackupPackage(keyValuePackage.packageName); kvBackupEngine.backupOnePackage(); } } finalizeBackup(out); }  catch (RemoteException e) { Slog.e(TAG,"App died during full backup"); } catch (Exception e) { Slog.e(TAG,"Internal exception during full backup",e); }  finally { try { if (out != null) { out.flush(); out.close(); } mOutputFile.close(); }  catch (IOException e) { } synchronized (mLatch) { mLatch.set(true); mLatch.notifyAll(); } sendEndBackup(); obbConnection.tearDown(); if (DEBUG) Slog.d(TAG,"Full backup pass complete."); mWakelock.release(); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ final PackageInfo target=mCurrentTarget; if (DEBUG) { Slog.w(TAG,"adb backup cancel of " + target); } if (target != null) { tearDownAgentAndKill(mCurrentTarget.applicationInfo); } removeOperation(mCurrentOpToken); } } /**   * Full backup task extension used for transport-oriented operation. Flow: For each requested package: - Spin off a new SinglePackageBackupRunner (mBackupRunner) for the current package. - Wait until preflight is complete. (mBackupRunner.getPreflightResultBlocking()) - If preflight data size is within limit, start reading data from agent pipe and writing to transport pipe. While there is data to send, call transport.sendBackupData(int) to tell the transport how many bytes to expect on its pipe. - After sending all data, call transport.finishBackup() if things went well. And transport.cancelFullBackup() otherwise. Interactions with mCurrentOperations: - An entry for this object is added to mCurrentOperations for the entire lifetime of this object. Used to cancel the operation. - SinglePackageBackupRunner and SinglePackageBackupPreflight will put ephemeral entries to get timeouts or operation complete callbacks. Handling cancels: - The contract we provide is that the task won't interact with the transport after handleCancel() is done executing. - This task blocks at 3 points: 1. Preflight result check 2. Reading on agent side pipe and 3. Get backup result from mBackupRunner. - Bubbling up handleCancel to mBackupRunner handles all 3: 1. Calls handleCancel on the preflight operation which counts down on the preflight latch. 2. Tears down the agent, so read() returns -1. 3. Notifies mCurrentOpLock which unblocks mBackupRunner.getBackupResultBlocking().  */ class PerformFullTransportBackupTask extends FullBackupTask implements BackupRestoreTask { static final String TAG="PFTBT"; private final Object mCancelLock=new Object(); ArrayList<PackageInfo> mPackages; PackageInfo mCurrentPackage; boolean mUpdateSchedule; CountDownLatch mLatch; FullBackupJob mJob; IBackupObserver mBackupObserver; IBackupManagerMonitor mMonitor; boolean mUserInitiated; private volatile IBackupTransport mTransport; SinglePackageBackupRunner mBackupRunner; private final int mBackupRunnerOpToken; private volatile boolean mIsDoingBackup; private volatile boolean mCancelAll; private final int mCurrentOpToken; PerformFullTransportBackupTask(IFullBackupRestoreObserver observer,String[] whichPackages,boolean updateSchedule,FullBackupJob runningJob,CountDownLatch latch,IBackupObserver backupObserver,IBackupManagerMonitor monitor,boolean userInitiated){ super(observer); mUpdateSchedule=updateSchedule; mLatch=latch; mJob=runningJob; mPackages=new ArrayList<PackageInfo>(whichPackages.length); mBackupObserver=backupObserver; mMonitor=monitor; mUserInitiated=userInitiated; mCurrentOpToken=generateToken(); mBackupRunnerOpToken=generateToken(); if (isBackupOperationInProgress()) { if (DEBUG) { Slog.d(TAG,"Skipping full backup. A backup is already in progress."); } mCancelAll=true; return; } registerTask(); for (String pkg : whichPackages) { try { PackageInfo info=mPackageManager.getPackageInfo(pkg,PackageManager.GET_SIGNATURES); mCurrentPackage=info; if (!appIsEligibleForBackup(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring ineligible package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_INELIGIBLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (!appGetsFullBackup(info)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring full-data backup of key/value participant " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_KEY_VALUE_PARTICIPANT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; }  else if (appIsStopped(info.applicationInfo)) { if (MORE_DEBUG) { Slog.d(TAG,"Ignoring stopped package " + pkg); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_STOPPED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); sendBackupOnPackageResult(mBackupObserver,pkg,BackupManager.ERROR_BACKUP_NOT_ALLOWED); continue; } mPackages.add(info); }  catch (NameNotFoundException e) { Slog.i(TAG,"Requested package " + pkg + " not found; ignoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_FOUND,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } } } private void registerTask(){ synchronized (mCurrentOpLock) { Slog.d(TAG,"backupmanager pftbt token=" + Integer.toHexString(mCurrentOpToken)); mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP)); } } private void unregisterTask(){ removeOperation(mCurrentOpToken); } @Override public void execute(){ } @Override public void handleCancel(boolean cancelAll){ synchronized (mCancelLock) { if (!cancelAll) { Slog.wtf(TAG,"Expected cancelAll to be true."); } if (mCancelAll) { Slog.d(TAG,"Ignoring duplicate cancel call."); return; } mCancelAll=true; if (mIsDoingBackup) { BackupManagerService.this.handleCancel(mBackupRunnerOpToken,cancelAll); try { mTransport.cancelFullBackup(); }  catch (RemoteException e) { Slog.w(TAG,"Error calling cancelFullBackup() on transport: " + e); } } } } @Override public void operationComplete(long result){ } @Override public void run(){ ParcelFileDescriptor[] enginePipes=null; ParcelFileDescriptor[] transportPipes=null; long backoff=0; int backupRunStatus=BackupManager.SUCCESS; try { if (!mEnabled || !mProvisioned) { if (DEBUG) { Slog.i(TAG,"full backup requested but enabled=" + mEnabled + " provisioned="+ mProvisioned+ "; ignoring"); } int monitoringEvent; if (!mEnabled) { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_BACKUP_DISABLED; }  else { monitoringEvent=BackupManagerMonitor.LOG_EVENT_ID_DEVICE_NOT_PROVISIONED; } mMonitor=monitorEvent(mMonitor,monitoringEvent,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mUpdateSchedule=false; backupRunStatus=BackupManager.ERROR_BACKUP_NOT_ALLOWED; return; } mTransport=mTransportManager.getCurrentTransportBinder(); if (mTransport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_TRANSPORT_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); return; } final int N=mPackages.size(); final byte[] buffer=new byte[8192]; for (int i=0; i < N; i++) { PackageInfo currentPackage=mPackages.get(i); String packageName=currentPackage.packageName; if (DEBUG) { Slog.i(TAG,"Initiating full-data transport backup of " + packageName + " token: "+ mCurrentOpToken); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_PACKAGE,packageName); transportPipes=ParcelFileDescriptor.createPipe(); int flags=mUserInitiated ? BackupTransport.FLAG_USER_INITIATED : 0; int backupPackageStatus; long quota=Long.MAX_VALUE; synchronized (mCancelLock) { if (mCancelAll) { break; } backupPackageStatus=mTransport.performFullBackup(currentPackage,transportPipes[0],flags); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { quota=mTransport.getBackupQuota(currentPackage.packageName,true); enginePipes=ParcelFileDescriptor.createPipe(); mBackupRunner=new SinglePackageBackupRunner(enginePipes[1],currentPackage,mTransport,quota,mBackupRunnerOpToken); enginePipes[1].close(); enginePipes[1]=null; mIsDoingBackup=true; } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { transportPipes[0].close(); transportPipes[0]=null; (new Thread(mBackupRunner,"package-backup-bridge")).start(); FileInputStream in=new FileInputStream(enginePipes[0].getFileDescriptor()); FileOutputStream out=new FileOutputStream(transportPipes[1].getFileDescriptor()); long totalRead=0; final long preflightResult=mBackupRunner.getPreflightResultBlocking(); if (preflightResult < 0) { if (MORE_DEBUG) { Slog.d(TAG,"Backup error after preflight of package " + packageName + ": "+ preflightResult+ ", not running backup."); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_ERROR_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_PREFLIGHT_ERROR,preflightResult)); backupPackageStatus=(int)preflightResult; }  else { int nRead=0; do { nRead=in.read(buffer); if (MORE_DEBUG) { Slog.v(TAG,"in.read(buffer) from app: " + nRead); } if (nRead > 0) { out.write(buffer,0,nRead); synchronized (mCancelLock) { if (!mCancelAll) { backupPackageStatus=mTransport.sendBackupData(nRead); } } totalRead+=nRead; if (mBackupObserver != null && preflightResult > 0) { sendBackupOnUpdate(mBackupObserver,packageName,new BackupProgress(preflightResult,totalRead)); } } }  while (nRead > 0 && backupPackageStatus == BackupTransport.TRANSPORT_OK); if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { Slog.w(TAG,"Package hit quota limit in-flight " + packageName + ": "+ totalRead+ " of "+ quota); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_QUOTA_HIT_PREFLIGHT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mBackupRunner.sendQuotaExceeded(totalRead,quota); } } final int backupRunnerResult=mBackupRunner.getBackupResultBlocking(); synchronized (mCancelLock) { mIsDoingBackup=false; if (!mCancelAll) { if (backupRunnerResult == BackupTransport.TRANSPORT_OK) { final int finishResult=mTransport.finishBackup(); if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { backupPackageStatus=finishResult; } }  else { mTransport.cancelFullBackup(); } } } if (backupPackageStatus == BackupTransport.TRANSPORT_OK) { if (backupRunnerResult != BackupTransport.TRANSPORT_OK) { backupPackageStatus=backupRunnerResult; } }  else { if (MORE_DEBUG) { Slog.i(TAG,"Transport-level failure; cancelling agent work"); } } if (MORE_DEBUG) { Slog.i(TAG,"Done delivering backup data: result=" + backupPackageStatus); } if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error " + backupPackageStatus + " backing up "+ packageName); } backoff=mTransport.requestFullBackupTime(); if (DEBUG_SCHEDULING) { Slog.i(TAG,"Transport suggested backoff=" + backoff); } } if (mUpdateSchedule) { enqueueFullBackup(packageName,System.currentTimeMillis()); } if (backupPackageStatus == BackupTransport.TRANSPORT_PACKAGE_REJECTED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_PACKAGE_REJECTED); if (DEBUG) { Slog.i(TAG,"Transport rejected backup of " + packageName + ", skipping"); } EventLog.writeEvent(EventLogTags.FULL_BACKUP_AGENT_FAILURE,packageName,"transport rejected"); }  else if (backupPackageStatus == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_QUOTA_EXCEEDED); if (DEBUG) { Slog.i(TAG,"Transport quota exceeded for package: " + packageName); EventLog.writeEvent(EventLogTags.FULL_BACKUP_QUOTA_EXCEEDED,packageName); } }  else if (backupPackageStatus == BackupTransport.AGENT_ERROR) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_AGENT_FAILURE); Slog.w(TAG,"Application failure for package: " + packageName); EventLog.writeEvent(EventLogTags.BACKUP_AGENT_FAILURE,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus == BackupManager.ERROR_BACKUP_CANCELLED) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_BACKUP_CANCELLED); Slog.w(TAG,"Backup cancelled. package=" + packageName + ", cancelAll="+ mCancelAll); EventLog.writeEvent(EventLogTags.FULL_BACKUP_CANCELLED,packageName); tearDownAgentAndKill(currentPackage.applicationInfo); }  else if (backupPackageStatus != BackupTransport.TRANSPORT_OK) { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.ERROR_TRANSPORT_ABORTED); Slog.w(TAG,"Transport failed; aborting backup: " + backupPackageStatus); EventLog.writeEvent(EventLogTags.FULL_BACKUP_TRANSPORT_FAILURE); backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; return; }  else { sendBackupOnPackageResult(mBackupObserver,packageName,BackupManager.SUCCESS); EventLog.writeEvent(EventLogTags.FULL_BACKUP_SUCCESS,packageName); logBackupComplete(packageName); } cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); if (currentPackage.applicationInfo != null) { Slog.i(TAG,"Unbinding agent in " + packageName); addBackupTrace("unbinding " + packageName); try { mActivityManager.unbindBackupAgent(currentPackage.applicationInfo); }  catch (RemoteException e) { } } } }  catch (Exception e) { backupRunStatus=BackupManager.ERROR_TRANSPORT_ABORTED; Slog.w(TAG,"Exception trying full transport backup",e); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_EXCEPTION_FULL_BACKUP,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_EXCEPTION_FULL_BACKUP,Log.getStackTraceString(e))); }  finally { if (mCancelAll) { backupRunStatus=BackupManager.ERROR_BACKUP_CANCELLED; } if (DEBUG) { Slog.i(TAG,"Full backup completed with status: " + backupRunStatus); } sendBackupFinished(mBackupObserver,backupRunStatus); cleanUpPipes(transportPipes); cleanUpPipes(enginePipes); unregisterTask(); if (mJob != null) { mJob.finishBackupPass(); } synchronized (mQueueLock) { mRunningFullBackupTask=null; } mLatch.countDown(); if (mUpdateSchedule) { scheduleNextFullBackupJob(backoff); } Slog.i(BackupManagerService.TAG,"Full data backup pass finished."); mWakelock.release(); } } void cleanUpPipes(ParcelFileDescriptor[] pipes){ if (pipes != null) { if (pipes[0] != null) { ParcelFileDescriptor fd=pipes[0]; pipes[0]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } if (pipes[1] != null) { ParcelFileDescriptor fd=pipes[1]; pipes[1]=null; try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Unable to close pipe!"); } } } } class SinglePackageBackupPreflight implements BackupRestoreTask, FullBackupPreflight { final AtomicLong mResult=new AtomicLong(BackupTransport.AGENT_ERROR); final CountDownLatch mLatch=new CountDownLatch(1); final IBackupTransport mTransport; final long mQuota; private final int mCurrentOpToken; SinglePackageBackupPreflight(IBackupTransport transport,long quota,int currentOpToken){ mTransport=transport; mQuota=quota; mCurrentOpToken=currentOpToken; } @Override public int preflightFullBackup(PackageInfo pkg,IBackupAgent agent){ int result; try { prepareOperationTimeout(mCurrentOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,this,OP_TYPE_BACKUP_WAIT); addBackupTrace("preflighting"); if (MORE_DEBUG) { Slog.d(TAG,"Preflighting full payload of " + pkg.packageName); } agent.doMeasureFullBackup(mQuota,mCurrentOpToken,mBackupManagerBinder); mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); long totalSize=mResult.get(); if (totalSize < 0) { return (int)totalSize; } if (MORE_DEBUG) { Slog.v(TAG,"Got preflight response; size=" + totalSize); } result=mTransport.checkFullBackupSize(totalSize); if (result == BackupTransport.TRANSPORT_QUOTA_EXCEEDED) { if (MORE_DEBUG) { Slog.d(TAG,"Package hit quota limit on preflight " + pkg.packageName + ": "+ totalSize+ " of "+ mQuota); } agent.doQuotaExceeded(totalSize,mQuota); } }  catch (Exception e) { Slog.w(TAG,"Exception preflighting " + pkg.packageName + ": "+ e.getMessage()); result=BackupTransport.AGENT_ERROR; } return result; } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight op complete, result=" + result); } mResult.set(result); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (MORE_DEBUG) { Slog.i(TAG,"Preflight cancelled; failing"); } mResult.set(BackupTransport.AGENT_ERROR); mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public long getExpectedSizeOrErrorCode(){ try { mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); return mResult.get(); }  catch (InterruptedException e) { return BackupTransport.NO_MORE_DATA; } } } class SinglePackageBackupRunner implements Runnable, BackupRestoreTask { final ParcelFileDescriptor mOutput; final PackageInfo mTarget; final SinglePackageBackupPreflight mPreflight; final CountDownLatch mPreflightLatch; final CountDownLatch mBackupLatch; private final int mCurrentOpToken; private final int mEphemeralToken; private FullBackupEngine mEngine; private volatile int mPreflightResult; private volatile int mBackupResult; private final long mQuota; private volatile boolean mIsCancelled; SinglePackageBackupRunner(ParcelFileDescriptor output,PackageInfo target,IBackupTransport transport,long quota,int currentOpToken) throws IOException { mOutput=ParcelFileDescriptor.dup(output.getFileDescriptor()); mTarget=target; mCurrentOpToken=currentOpToken; mEphemeralToken=generateToken(); mPreflight=new SinglePackageBackupPreflight(transport,quota,mEphemeralToken); mPreflightLatch=new CountDownLatch(1); mBackupLatch=new CountDownLatch(1); mPreflightResult=BackupTransport.AGENT_ERROR; mBackupResult=BackupTransport.AGENT_ERROR; mQuota=quota; registerTask(); } void registerTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.put(mCurrentOpToken,new Operation(OP_PENDING,this,OP_TYPE_BACKUP_WAIT)); } } void unregisterTask(){ synchronized (mCurrentOpLock) { mCurrentOperations.remove(mCurrentOpToken); } } @Override public void run(){ FileOutputStream out=new FileOutputStream(mOutput.getFileDescriptor()); mEngine=new FullBackupEngine(out,mPreflight,mTarget,false,this,mQuota,mCurrentOpToken); try { try { if (!mIsCancelled) { mPreflightResult=mEngine.preflightCheck(); } }   finally { mPreflightLatch.countDown(); } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { if (!mIsCancelled) { mBackupResult=mEngine.backupOnePackage(); } } }  catch (Exception e) { Slog.e(TAG,"Exception during full package backup of " + mTarget.packageName); }  finally { unregisterTask(); mBackupLatch.countDown(); try { mOutput.close(); }  catch (IOException e) { Slog.w(TAG,"Error closing transport pipe in runner"); } } } public void sendQuotaExceeded(final long backupDataBytes,final long quotaBytes){ mEngine.sendQuotaExceeded(backupDataBytes,quotaBytes); } long getPreflightResultBlocking(){ try { mPreflightLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } if (mPreflightResult == BackupTransport.TRANSPORT_OK) { return mPreflight.getExpectedSizeOrErrorCode(); }  else { return mPreflightResult; } }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } int getBackupResultBlocking(){ try { mBackupLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); if (mIsCancelled) { return BackupManager.ERROR_BACKUP_CANCELLED; } return mBackupResult; }  catch (InterruptedException e) { return BackupTransport.AGENT_ERROR; } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"Full backup cancel of " + mTarget.packageName); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_BACKUP_CANCEL,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mIsCancelled=true; BackupManagerService.this.handleCancel(mEphemeralToken,cancelAll); tearDownAgentAndKill(mTarget.applicationInfo); mPreflightLatch.countDown(); mBackupLatch.countDown(); removeOperation(mCurrentOpToken); } } } /**   * Schedule a job to tell us when it's a good time to run a full backup  */ void scheduleNextFullBackupJob(long transportMinLatency){ synchronized (mQueueLock) { if (mFullBackupQueue.size() > 0) { final long upcomingLastBackup=mFullBackupQueue.get(0).lastBackup; final long timeSinceLast=System.currentTimeMillis() - upcomingLastBackup; final long appLatency=(timeSinceLast < MIN_FULL_BACKUP_INTERVAL) ? (MIN_FULL_BACKUP_INTERVAL - timeSinceLast) : 0; final long latency=Math.max(transportMinLatency,appLatency); Runnable r=new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,latency); } } ; mBackupHandler.postDelayed(r,2500); }  else { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Full backup queue empty; not scheduling"); } } } } /**   * Remove a package from the full-data queue.  */ void dequeueFullBackupLocked(String packageName){ final int N=mFullBackupQueue.size(); for (int i=N - 1; i >= 0; i--) { final FullBackupEntry e=mFullBackupQueue.get(i); if (packageName.equals(e.packageName)) { mFullBackupQueue.remove(i); } } } /**   * Enqueue full backup for the given app, with a note about when it last ran.  */ void enqueueFullBackup(String packageName,long lastBackedUp){ FullBackupEntry newEntry=new FullBackupEntry(packageName,lastBackedUp); synchronized (mQueueLock) { dequeueFullBackupLocked(packageName); int which=-1; if (lastBackedUp > 0) { for (which=mFullBackupQueue.size() - 1; which >= 0; which--) { final FullBackupEntry entry=mFullBackupQueue.get(which); if (entry.lastBackup <= lastBackedUp) { mFullBackupQueue.add(which + 1,newEntry); break; } } } if (which < 0) { mFullBackupQueue.add(0,newEntry); } } writeFullBackupScheduleAsync(); } private boolean fullBackupAllowable(IBackupTransport transport){ if (transport == null) { Slog.w(TAG,"Transport not present; full data backup not performed"); return false; } try { File stateDir=new File(mBaseStateDir,transport.transportDirName()); File pmState=new File(stateDir,PACKAGE_MANAGER_SENTINEL); if (pmState.length() <= 0) { if (DEBUG) { Slog.i(TAG,"Full backup requested but dataset not yet initialized"); } return false; } }  catch (Exception e) { Slog.w(TAG,"Unable to get transport name: " + e.getMessage()); return false; } return true; } /**   * Conditions are right for a full backup operation, so run one.  The model we use is to perform one app backup per scheduled job execution, and to reschedule the job with zero latency as long as conditions remain right and we still have work to do. <p>This is the "start a full backup operation" entry point called by the scheduled job.  * @return Whether ongoing work will continue.  The return value here will be passedalong as the return value to the scheduled job's onStartJob() callback.  */ boolean beginFullBackup(FullBackupJob scheduledJob){ long now=System.currentTimeMillis(); FullBackupEntry entry=null; long latency=MIN_FULL_BACKUP_INTERVAL; if (!mEnabled || !mProvisioned) { if (MORE_DEBUG) { Slog.i(TAG,"beginFullBackup but e=" + mEnabled + " p="+ mProvisioned+ "; ignoring"); } return false; } final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.FULL_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.i(TAG,"Deferring scheduled full backups in battery saver mode"); FullBackupJob.schedule(mContext,KeyValueBackupJob.BATCH_INTERVAL); return false; } if (DEBUG_SCHEDULING) { Slog.i(TAG,"Beginning scheduled full backup operation"); } synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { Slog.e(TAG,"Backup triggered but one already/still running!"); return false; } boolean runBackup=true; boolean headBusy; do { if (mFullBackupQueue.size() == 0) { if (DEBUG) { Slog.i(TAG,"Backup queue empty; doing nothing"); } runBackup=false; break; } headBusy=false; if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { if (MORE_DEBUG) { Slog.i(TAG,"Preconditions not met; not running full backup"); } runBackup=false; latency=KeyValueBackupJob.BATCH_INTERVAL; } if (runBackup) { entry=mFullBackupQueue.get(0); long timeSinceRun=now - entry.lastBackup; runBackup=(timeSinceRun >= MIN_FULL_BACKUP_INTERVAL); if (!runBackup) { if (MORE_DEBUG) { Slog.i(TAG,"Device ready but too early to back up next app"); } latency=MIN_FULL_BACKUP_INTERVAL - timeSinceRun; break; } try { PackageInfo appInfo=mPackageManager.getPackageInfo(entry.packageName,0); if (!appGetsFullBackup(appInfo)) { if (MORE_DEBUG) { Slog.i(TAG,"Culling package " + entry.packageName + " in full-backup queue but not eligible"); } mFullBackupQueue.remove(0); headBusy=true; continue; } final int privFlags=appInfo.applicationInfo.privateFlags; headBusy=(privFlags & PRIVATE_FLAG_BACKUP_IN_FOREGROUND) == 0 && mActivityManager.isAppForeground(appInfo.applicationInfo.uid); if (headBusy) { final long nextEligible=System.currentTimeMillis() + BUSY_BACKOFF_MIN_MILLIS + mTokenGenerator.nextInt(BUSY_BACKOFF_FUZZ); if (DEBUG_SCHEDULING) { SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); Slog.i(TAG,"Full backup time but " + entry.packageName + " is busy; deferring to "+ sdf.format(new Date(nextEligible))); } enqueueFullBackup(entry.packageName,nextEligible - MIN_FULL_BACKUP_INTERVAL); } }  catch (NameNotFoundException nnf) { runBackup=(mFullBackupQueue.size() > 1); } catch (RemoteException e) { } } }  while (headBusy); if (!runBackup) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Nothing pending full backup; rescheduling +" + latency); } final long deferTime=latency; mBackupHandler.post(new Runnable(){ @Override public void run(){ FullBackupJob.schedule(mContext,deferTime); } } ); return false; } mFullBackupQueue.remove(0); CountDownLatch latch=new CountDownLatch(1); String[] pkg=new String[]{entry.packageName}; mRunningFullBackupTask=new PerformFullTransportBackupTask(null,pkg,true,scheduledJob,latch,null,null,false); mWakelock.acquire(); (new Thread(mRunningFullBackupTask)).start(); } return true; } void endFullBackup(){ synchronized (mQueueLock) { if (mRunningFullBackupTask != null) { if (DEBUG_SCHEDULING) { Slog.i(TAG,"Telling running backup to stop"); } mRunningFullBackupTask.handleCancel(true); } } } abstract class RestoreEngine { static final String TAG="RestoreEngine"; public static final int SUCCESS=0; public static final int TARGET_FAILURE=-2; public static final int TRANSPORT_FAILURE=-3; private AtomicBoolean mRunning=new AtomicBoolean(false); private AtomicInteger mResult=new AtomicInteger(SUCCESS); public boolean isRunning(){ return mRunning.get(); } public void setRunning(boolean stillRunning){ synchronized (mRunning) { mRunning.set(stillRunning); mRunning.notifyAll(); } } public int waitForResult(){ synchronized (mRunning) { while (isRunning()) { try { mRunning.wait(); }  catch (InterruptedException e) { } } } return getResult(); } public int getResult(){ return mResult.get(); } public void setResult(int result){ mResult.set(result); } } static class FileMetadata { String packageName; String installerPackageName; int type; String domain; String path; long mode; long mtime; long size; @Override public String toString(){ StringBuilder sb=new StringBuilder(128); sb.append("FileMetadata{"); sb.append(packageName); sb.append(','); sb.append(type); sb.append(','); sb.append(domain); sb.append(':'); sb.append(path); sb.append(','); sb.append(size); sb.append('}'); return sb.toString(); } } enum RestorePolicy {IGNORE, ACCEPT, ACCEPT_IF_APK} class FullRestoreEngine extends RestoreEngine { BackupRestoreTask mMonitorTask; IFullBackupRestoreObserver mObserver; IBackupManagerMonitor mMonitor; IBackupAgent mAgent; PackageInfo mOnlyPackage; boolean mAllowApks; boolean mAllowObbs; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); long mBytes; byte[] mBuffer; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; private final int mEphemeralOpToken; class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } public FullRestoreEngine(BackupRestoreTask monitorTask,IFullBackupRestoreObserver observer,IBackupManagerMonitor monitor,PackageInfo onlyPackage,boolean allowApks,boolean allowObbs,int ephemeralOpToken){ mEphemeralOpToken=ephemeralOpToken; mMonitorTask=monitorTask; mObserver=observer; mMonitor=monitor; mOnlyPackage=onlyPackage; mAllowApks=allowApks; mAllowObbs=allowObbs; mBuffer=new byte[32 * 1024]; mBytes=0; } public IBackupAgent getAgent(){ return mAgent; } public byte[] getWidgetData(){ return mWidgetData; } public boolean restoreOneFile(InputStream instream,boolean mustKillAgent){ if (!isRunning()) { Slog.w(TAG,"Restore engine used after halting"); return false; } FileMetadata info; try { if (MORE_DEBUG) { Slog.v(TAG,"Reading tar header for restoring file"); } info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (mOnlyPackage != null) { if (!pkg.equals(mOnlyPackage.packageName)) { Slog.w(TAG,"Expected data for " + mOnlyPackage + " but saw "+ pkg); setResult(RestoreEngine.TRANSPORT_FAILURE); setRunning(false); return false; } } if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (!isRestorableFile(info)) { okay=false; } if (MORE_DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (MORE_DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (MORE_DEBUG) { Slog.d(TAG,"We've initialized this app already; no clear required"); } } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { Slog.e(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_FULL_BACKUP_INTERVAL,mMonitorTask,OP_TYPE_RESTORE_WAIT); if (info.domain.equals(FullBackup.OBB_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); }  else { if (MORE_DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],mEphemeralOpToken); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,mEphemeralOpToken,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { if (MORE_DEBUG) { Slog.v(TAG,"  copying to restore agent: " + toCopy + " bytes"); } boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > mBuffer.length) ? mBuffer.length : (int)toCopy; int nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(mBuffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe: " + e.getMessage()); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(mEphemeralOpToken); } if (!agentSuccess) { Slog.w(TAG,"Agent failure; ending restore"); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp); mAgent=null; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); if (mOnlyPackage != null) { setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); return false; } } } if (!okay) { if (MORE_DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > mBuffer.length) ? mBuffer.length : (int)bytesToConsume; long nRead=instream.read(mBuffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read: " + e.getMessage()); setResult(RestoreEngine.TRANSPORT_FAILURE); info=null; } if (info == null) { if (MORE_DEBUG) { Slog.i(TAG,"No [more] data for this package; tearing down"); } tearDownPipes(); setRunning(false); if (mustKillAgent) { tearDownAgent(mTargetApp); } } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ synchronized (this) { if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } } void tearDownAgent(ApplicationInfo app){ if (mAgent != null) { tearDownAgentAndKill(app); mAgent=null; } } void handleTimeout(){ tearDownPipes(); setResult(RestoreEngine.TARGET_FAILURE); setRunning(false); } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; if (MORE_DEBUG) { Slog.i(TAG,"Skipping tar padding: " + needed + " bytes"); } byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_WIDGET_PACKAGE_NAME,pkg); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_METADATA_MISMATCH,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_WIDGET_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (MORE_DEBUG) { Slog.i(TAG,"   readAppManifest() looking for " + info.size + " bytes, "+ mBytes+ " already consumed"); } if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_RESTORE_ANY_VERSION,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSIONS_MATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); }  else { if (mAllowApks) { Slog.i(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { Slog.i(TAG,"Data requires newer version " + version + "; ignoring"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_VERSION_OF_BACKUP_OLDER,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_OLD_VERSION,version)); policy=RestorePolicy.IGNORE; } } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_SIGNATURE_MISMATCH,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_SYSTEM_APP_NO_AGENT,pkgInfo,LOG_EVENT_CATEGORY_AGENT,null); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_FULL_RESTORE_ALLOW_BACKUP_FALSE,pkgInfo,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); } }  catch (NameNotFoundException e) { if (mAllowApks) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; }  else { policy=RestorePolicy.IGNORE; } Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_POLICY_ALLOW_APKS,mAllowApks); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_APK_NOT_INSTALLED,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_CANNOT_RESTORE_WITHOUT_APK,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_MISSING_SIGNATURE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_MANIFEST_PACKAGE_NAME,manifestPackage); mMonitor=monitorEvent(mMonitor,LOG_EVENT_ID_EXPECTED_DIFFERENT_PACKAGE,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); Bundle monitoringExtras=putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName); monitoringExtras=putMonitoringExtra(monitoringExtras,EXTRA_LOG_EVENT_PACKAGE_VERSION,version); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_UNKNOWN_VERSION,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CORRUPT_MANIFEST,null,LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,putMonitoringExtra(null,EXTRA_LOG_EVENT_PACKAGE_NAME,info.packageName)); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (MORE_DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,TAR_HEADER_OFFSET_FILESIZE,TAR_HEADER_LENGTH_FILESIZE,TAR_HEADER_LONG_RADIX); info.mtime=extractRadix(block,TAR_HEADER_OFFSET_MODTIME,TAR_HEADER_LENGTH_MODTIME,TAR_HEADER_LONG_RADIX); info.mode=extractRadix(block,TAR_HEADER_OFFSET_MODE,TAR_HEADER_LENGTH_MODE,TAR_HEADER_LONG_RADIX); info.path=extractString(block,TAR_HEADER_OFFSET_PATH_PREFIX,TAR_HEADER_LENGTH_PATH_PREFIX); String path=extractString(block,TAR_HEADER_OFFSET_PATH,TAR_HEADER_LENGTH_PATH); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[TAR_HEADER_OFFSET_TYPE_CHAR]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (MORE_DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) { throw new IOException("Illegal semantic path in non-manifest " + info.path); } info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); if (MORE_DEBUG) { HEXLOG(block); } } throw e; } } return info; } private boolean isRestorableFile(FileMetadata info){ if (FullBackup.CACHE_TREE_TOKEN.equals(info.domain)) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping cache file path " + info.path); } return false; } if (FullBackup.ROOT_TREE_TOKEN.equals(info.domain)) { if (info.path.startsWith("no_backup/")) { if (MORE_DEBUG) { Slog.i(TAG,"Dropping no_backup file path " + info.path); } return false; } } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } return false; } return true; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); if (MORE_DEBUG) Slog.i(TAG,"  ... readExactly(" + size + ") called"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; if (MORE_DEBUG) Slog.v(TAG,"   + got " + nRead + "; now wanting "+ (size - soFar)); } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } class AdbRestoreFinishedLatch implements BackupRestoreTask { static final String TAG="AdbRestoreFinishedLatch"; final CountDownLatch mLatch; private final int mCurrentOpToken; AdbRestoreFinishedLatch(int currentOpToken){ mLatch=new CountDownLatch(1); mCurrentOpToken=currentOpToken; } void await(){ boolean latched=false; try { latched=mLatch.await(TIMEOUT_FULL_BACKUP_INTERVAL,TimeUnit.MILLISECONDS); }  catch (InterruptedException e) { Slog.w(TAG,"Interrupted!"); } } @Override public void execute(){ } @Override public void operationComplete(long result){ if (MORE_DEBUG) { Slog.w(TAG,"adb onRestoreFinished() complete"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } @Override public void handleCancel(boolean cancelAll){ if (DEBUG) { Slog.w(TAG,"adb onRestoreFinished() timed out"); } mLatch.countDown(); removeOperation(mCurrentOpToken); } } class PerformAdbRestoreTask implements Runnable { ParcelFileDescriptor mInputFile; String mCurrentPassword; String mDecryptPassword; IFullBackupRestoreObserver mObserver; AtomicBoolean mLatchObject; IBackupAgent mAgent; PackageManagerBackupAgent mPackageManagerBackupAgent; String mAgentPackage; ApplicationInfo mTargetApp; FullBackupObbConnection mObbConnection=null; ParcelFileDescriptor[] mPipes=null; byte[] mWidgetData=null; long mBytes; class RestoreFinishedRunnable implements Runnable { final IBackupAgent mAgent; final int mToken; RestoreFinishedRunnable(IBackupAgent agent,int token){ mAgent=agent; mToken=token; } @Override public void run(){ try { mAgent.doRestoreFinished(mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } final HashMap<String,RestorePolicy> mPackagePolicies=new HashMap<String,RestorePolicy>(); final HashMap<String,String> mPackageInstallers=new HashMap<String,String>(); final HashMap<String,Signature[]> mManifestSignatures=new HashMap<String,Signature[]>(); final HashSet<String> mClearedPackages=new HashSet<String>(); PerformAdbRestoreTask(ParcelFileDescriptor fd,String curPassword,String decryptPassword,IFullBackupRestoreObserver observer,AtomicBoolean latch){ mInputFile=fd; mCurrentPassword=curPassword; mDecryptPassword=decryptPassword; mObserver=observer; mLatchObject=latch; mAgent=null; mPackageManagerBackupAgent=new PackageManagerBackupAgent(mPackageManager); mAgentPackage=null; mTargetApp=null; mObbConnection=new FullBackupObbConnection(); mClearedPackages.add("android"); mClearedPackages.add(SETTINGS_PACKAGE); } class RestoreFileRunnable implements Runnable { IBackupAgent mAgent; FileMetadata mInfo; ParcelFileDescriptor mSocket; int mToken; RestoreFileRunnable(IBackupAgent agent,FileMetadata info,ParcelFileDescriptor socket,int token) throws IOException { mAgent=agent; mInfo=info; mToken=token; mSocket=ParcelFileDescriptor.dup(socket.getFileDescriptor()); } @Override public void run(){ try { mAgent.doRestoreFile(mSocket,mInfo.size,mInfo.type,mInfo.domain,mInfo.path,mInfo.mode,mInfo.mtime,mToken,mBackupManagerBinder); }  catch (RemoteException e) { } } } @Override public void run(){ Slog.i(TAG,"--- Performing full-dataset restore ---"); mObbConnection.establish(); sendStartRestore(); if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { mPackagePolicies.put(SHARED_BACKUP_AGENT_PACKAGE,RestorePolicy.ACCEPT); } FileInputStream rawInStream=null; DataInputStream rawDataIn=null; try { if (!backupPasswordMatches(mCurrentPassword)) { if (DEBUG) Slog.w(TAG,"Backup password mismatch; aborting"); return; } mBytes=0; byte[] buffer=new byte[32 * 1024]; rawInStream=new FileInputStream(mInputFile.getFileDescriptor()); rawDataIn=new DataInputStream(rawInStream); boolean compressed=false; InputStream preCompressStream=rawInStream; final InputStream in; boolean okay=false; final int headerLen=BACKUP_FILE_HEADER_MAGIC.length(); byte[] streamHeader=new byte[headerLen]; rawDataIn.readFully(streamHeader); byte[] magicBytes=BACKUP_FILE_HEADER_MAGIC.getBytes("UTF-8"); if (Arrays.equals(magicBytes,streamHeader)) { String s=readHeaderLine(rawInStream); final int archiveVersion=Integer.parseInt(s); if (archiveVersion <= BACKUP_FILE_VERSION) { final boolean pbkdf2Fallback=(archiveVersion == 1); s=readHeaderLine(rawInStream); compressed=(Integer.parseInt(s) != 0); s=readHeaderLine(rawInStream); if (s.equals("none")) { okay=true; }  else if (mDecryptPassword != null && mDecryptPassword.length() > 0) { preCompressStream=decodeAesHeaderAndInitialize(s,pbkdf2Fallback,rawInStream); if (preCompressStream != null) { okay=true; } }  else Slog.w(TAG,"Archive is encrypted but no password given"); }  else Slog.w(TAG,"Wrong header version: " + s); }  else Slog.w(TAG,"Didn't read the right header magic"); if (!okay) { Slog.w(TAG,"Invalid restore data; aborting."); return; } in=(compressed) ? new InflaterInputStream(preCompressStream) : preCompressStream; boolean didRestore; do { didRestore=restoreOneFile(in,buffer); }  while (didRestore); if (MORE_DEBUG) Slog.v(TAG,"Done consuming input tarfile, total bytes=" + mBytes); }  catch (IOException e) { Slog.e(TAG,"Unable to read restore input"); }  finally { tearDownPipes(); tearDownAgent(mTargetApp,true); try { if (rawDataIn != null) rawDataIn.close(); if (rawInStream != null) rawInStream.close(); mInputFile.close(); }  catch (IOException e) { Slog.w(TAG,"Close of restore data pipe threw",e); } synchronized (mLatchObject) { mLatchObject.set(true); mLatchObject.notifyAll(); } mObbConnection.tearDown(); sendEndRestore(); Slog.d(TAG,"Full restore pass complete."); mWakelock.release(); } } String readHeaderLine(InputStream in) throws IOException { int c; StringBuilder buffer=new StringBuilder(80); while ((c=in.read()) >= 0) { if (c == '\n') break; buffer.append((char)c); } return buffer.toString(); } InputStream attemptMasterKeyDecryption(String algorithm,byte[] userSalt,byte[] ckSalt,int rounds,String userIvHex,String masterKeyBlobHex,InputStream rawInStream,boolean doLog){ InputStream result=null; try { Cipher c=Cipher.getInstance("AES/CBC/PKCS5Padding"); SecretKey userKey=buildPasswordKey(algorithm,mDecryptPassword,userSalt,rounds); byte[] IV=hexToByteArray(userIvHex); IvParameterSpec ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(userKey.getEncoded(),"AES"),ivSpec); byte[] mkCipher=hexToByteArray(masterKeyBlobHex); byte[] mkBlob=c.doFinal(mkCipher); int offset=0; int len=mkBlob[offset++]; IV=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mk=Arrays.copyOfRange(mkBlob,offset,offset + len); offset+=len; len=mkBlob[offset++]; byte[] mkChecksum=Arrays.copyOfRange(mkBlob,offset,offset + len); byte[] calculatedCk=makeKeyChecksum(algorithm,mk,ckSalt,rounds); if (Arrays.equals(calculatedCk,mkChecksum)) { ivSpec=new IvParameterSpec(IV); c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(mk,"AES"),ivSpec); result=new CipherInputStream(rawInStream,c); }  else if (doLog) Slog.w(TAG,"Incorrect password"); }  catch (InvalidAlgorithmParameterException e) { if (doLog) Slog.e(TAG,"Needed parameter spec unavailable!",e); } catch (BadPaddingException e) { if (doLog) Slog.w(TAG,"Incorrect password"); } catch (IllegalBlockSizeException e) { if (doLog) Slog.w(TAG,"Invalid block size in master key"); } catch (NoSuchAlgorithmException e) { if (doLog) Slog.e(TAG,"Needed decryption algorithm unavailable!"); } catch (NoSuchPaddingException e) { if (doLog) Slog.e(TAG,"Needed padding mechanism unavailable!"); } catch (InvalidKeyException e) { if (doLog) Slog.w(TAG,"Illegal password; aborting"); } return result; } InputStream decodeAesHeaderAndInitialize(String encryptionName,boolean pbkdf2Fallback,InputStream rawInStream){ InputStream result=null; try { if (encryptionName.equals(ENCRYPTION_ALGORITHM_NAME)) { String userSaltHex=readHeaderLine(rawInStream); byte[] userSalt=hexToByteArray(userSaltHex); String ckSaltHex=readHeaderLine(rawInStream); byte[] ckSalt=hexToByteArray(ckSaltHex); int rounds=Integer.parseInt(readHeaderLine(rawInStream)); String userIvHex=readHeaderLine(rawInStream); String masterKeyBlobHex=readHeaderLine(rawInStream); result=attemptMasterKeyDecryption(PBKDF_CURRENT,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,false); if (result == null && pbkdf2Fallback) { result=attemptMasterKeyDecryption(PBKDF_FALLBACK,userSalt,ckSalt,rounds,userIvHex,masterKeyBlobHex,rawInStream,true); } }  else Slog.w(TAG,"Unsupported encryption method: " + encryptionName); }  catch (NumberFormatException e) { Slog.w(TAG,"Can't parse restore data header"); } catch (IOException e) { Slog.w(TAG,"Can't read input header"); } return result; } boolean restoreOneFile(InputStream instream,byte[] buffer){ FileMetadata info; try { info=readTarHeaders(instream); if (info != null) { if (MORE_DEBUG) { dumpFileMetadata(info); } final String pkg=info.packageName; if (!pkg.equals(mAgentPackage)) { if (!mPackagePolicies.containsKey(pkg)) { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } if (mAgent != null) { if (DEBUG) Slog.d(TAG,"Saw new package; finalizing old one"); tearDownPipes(); tearDownAgent(mTargetApp,true); mTargetApp=null; mAgentPackage=null; } } if (info.path.equals(BACKUP_MANIFEST_FILENAME)) { mPackagePolicies.put(pkg,readAppManifest(info,instream)); mPackageInstallers.put(pkg,info.installerPackageName); skipTarPadding(info.size,instream); sendOnRestorePackage(pkg); }  else if (info.path.equals(BACKUP_METADATA_FILENAME)) { readMetadata(info,instream); skipTarPadding(info.size,instream); }  else { boolean okay=true; RestorePolicy policy=mPackagePolicies.get(pkg); switch (policy) { case IGNORE: okay=false; break; case ACCEPT_IF_APK: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"APK file; installing"); String installerName=mPackageInstallers.get(pkg); okay=installApk(info,installerName,instream); mPackagePolicies.put(pkg,(okay) ? RestorePolicy.ACCEPT : RestorePolicy.IGNORE); skipTarPadding(info.size,instream); return true; }  else { mPackagePolicies.put(pkg,RestorePolicy.IGNORE); okay=false; } break; case ACCEPT: if (info.domain.equals(FullBackup.APK_TREE_TOKEN)) { if (DEBUG) Slog.d(TAG,"apk present but ACCEPT"); okay=false; } break; default : Slog.e(TAG,"Invalid policy from manifest"); okay=false; mPackagePolicies.put(pkg,RestorePolicy.IGNORE); break; } if (info.path.contains("..") || info.path.contains("//")) { if (MORE_DEBUG) { Slog.w(TAG,"Dropping invalid path " + info.path); } okay=false; } if (DEBUG && okay && mAgent != null) { Slog.i(TAG,"Reusing existing agent instance"); } if (okay && mAgent == null) { if (DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); try { mTargetApp=mPackageManager.getApplicationInfo(pkg,0); if (!mClearedPackages.contains(pkg)) { if (mTargetApp.backupAgentName == null) { if (DEBUG) Slog.d(TAG,"Clearing app data preparatory to full restore"); clearApplicationDataSynchronous(pkg); }  else { if (DEBUG) Slog.d(TAG,"backup agent (" + mTargetApp.backupAgentName + ") => no clear"); } mClearedPackages.add(pkg); }  else { if (DEBUG) Slog.d(TAG,"We've initialized this app already; no clear required"); } setUpPipes(); mAgent=bindToAgentSynchronous(mTargetApp,ApplicationThreadConstants.BACKUP_MODE_RESTORE_FULL); mAgentPackage=pkg; }  catch (IOException e) { } catch (NameNotFoundException e) { } if (mAgent == null) { if (DEBUG) Slog.d(TAG,"Unable to create agent for " + pkg); okay=false; tearDownPipes(); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (okay && !pkg.equals(mAgentPackage)) { Slog.e(TAG,"Restoring data for " + pkg + " but agent is for "+ mAgentPackage); okay=false; } if (okay) { boolean agentSuccess=true; long toCopy=info.size; final int token=generateToken(); try { prepareOperationTimeout(token,TIMEOUT_RESTORE_INTERVAL,null,OP_TYPE_RESTORE_WAIT); if (FullBackup.OBB_TREE_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring OBB file for " + pkg + " : "+ info.path); mObbConnection.restoreObbFile(pkg,mPipes[0],info.size,info.type,info.path,info.mode,info.mtime,token,mBackupManagerBinder); }  else if (FullBackup.KEY_VALUE_DATA_TOKEN.equals(info.domain)) { if (DEBUG) Slog.d(TAG,"Restoring key-value file for " + pkg + " : "+ info.path); KeyValueAdbRestoreEngine restoreEngine=new KeyValueAdbRestoreEngine(BackupManagerService.this,mDataDir,info,mPipes[0],mAgent,token); new Thread(restoreEngine,"restore-key-value-runner").start(); }  else { if (DEBUG) Slog.d(TAG,"Invoking agent to restore file " + info.path); if (mTargetApp.processName.equals("system")) { Slog.d(TAG,"system process agent - spinning a thread"); RestoreFileRunnable runner=new RestoreFileRunnable(mAgent,info,mPipes[0],token); new Thread(runner,"restore-sys-runner").start(); }  else { mAgent.doRestoreFile(mPipes[0],info.size,info.type,info.domain,info.path,info.mode,info.mtime,token,mBackupManagerBinder); } } }  catch (IOException e) { Slog.d(TAG,"Couldn't establish restore"); agentSuccess=false; okay=false; } catch (RemoteException e) { Slog.e(TAG,"Agent crashed during full restore"); agentSuccess=false; okay=false; } if (okay) { boolean pipeOkay=true; FileOutputStream pipe=new FileOutputStream(mPipes[1].getFileDescriptor()); while (toCopy > 0) { int toRead=(toCopy > buffer.length) ? buffer.length : (int)toCopy; int nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; toCopy-=nRead; if (pipeOkay) { try { pipe.write(buffer,0,nRead); }  catch (IOException e) { Slog.e(TAG,"Failed to write to restore pipe",e); pipeOkay=false; } } } skipTarPadding(info.size,instream); agentSuccess=waitUntilOperationComplete(token); } if (!agentSuccess) { if (DEBUG) { Slog.d(TAG,"Agent failure restoring " + pkg + "; now ignoring"); } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); tearDownPipes(); tearDownAgent(mTargetApp,false); mPackagePolicies.put(pkg,RestorePolicy.IGNORE); } } if (!okay) { if (DEBUG) Slog.d(TAG,"[discarding file content]"); long bytesToConsume=(info.size + 511) & ~511; while (bytesToConsume > 0) { int toRead=(bytesToConsume > buffer.length) ? buffer.length : (int)bytesToConsume; long nRead=instream.read(buffer,0,toRead); if (nRead >= 0) mBytes+=nRead; if (nRead <= 0) break; bytesToConsume-=nRead; } } } } }  catch (IOException e) { if (DEBUG) Slog.w(TAG,"io exception on restore socket read",e); info=null; } return (info != null); } void setUpPipes() throws IOException { mPipes=ParcelFileDescriptor.createPipe(); } void tearDownPipes(){ if (mPipes != null) { try { mPipes[0].close(); mPipes[0]=null; mPipes[1].close(); mPipes[1]=null; }  catch (IOException e) { Slog.w(TAG,"Couldn't close agent pipes",e); } mPipes=null; } } void tearDownAgent(ApplicationInfo app,boolean doRestoreFinished){ if (mAgent != null) { try { if (doRestoreFinished) { final int token=generateToken(); final AdbRestoreFinishedLatch latch=new AdbRestoreFinishedLatch(token); prepareOperationTimeout(token,TIMEOUT_FULL_BACKUP_INTERVAL,latch,OP_TYPE_RESTORE_WAIT); if (mTargetApp.processName.equals("system")) { if (MORE_DEBUG) { Slog.d(TAG,"system agent - restoreFinished on thread"); } Runnable runner=new RestoreFinishedRunnable(mAgent,token); new Thread(runner,"restore-sys-finished-runner").start(); }  else { mAgent.doRestoreFinished(token,mBackupManagerBinder); } latch.await(); } mActivityManager.unbindBackupAgent(app); if (app.uid >= Process.FIRST_APPLICATION_UID && !app.packageName.equals("com.android.backupconfirm")) { if (DEBUG) Slog.d(TAG,"Killing host process"); mActivityManager.killApplicationProcess(app.processName,app.uid); }  else { if (DEBUG) Slog.d(TAG,"Not killing after full restore"); } }  catch (RemoteException e) { Slog.d(TAG,"Lost app trying to shut down"); } mAgent=null; } } class RestoreInstallObserver extends PackageInstallObserver { final AtomicBoolean mDone=new AtomicBoolean(); String mPackageName; int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } int getResult(){ return mResult; } @Override public void onPackageInstalled(String packageName,int returnCode,String msg,Bundle extras){ synchronized (mDone) { mResult=returnCode; mPackageName=packageName; mDone.set(true); mDone.notifyAll(); } } } class RestoreDeleteObserver extends IPackageDeleteObserver.Stub { final AtomicBoolean mDone=new AtomicBoolean(); int mResult; public void reset(){ synchronized (mDone) { mDone.set(false); } } public void waitForCompletion(){ synchronized (mDone) { while (mDone.get() == false) { try { mDone.wait(); }  catch (InterruptedException e) { } } } } @Override public void packageDeleted(String packageName,int returnCode) throws RemoteException { synchronized (mDone) { mResult=returnCode; mDone.set(true); mDone.notifyAll(); } } } final RestoreInstallObserver mInstallObserver=new RestoreInstallObserver(); final RestoreDeleteObserver mDeleteObserver=new RestoreDeleteObserver(); boolean installApk(FileMetadata info,String installerPackage,InputStream instream){ boolean okay=true; if (DEBUG) Slog.d(TAG,"Installing from backup: " + info.packageName); File apkFile=new File(mDataDir,info.packageName); try { FileOutputStream apkStream=new FileOutputStream(apkFile); byte[] buffer=new byte[32 * 1024]; long size=info.size; while (size > 0) { long toRead=(buffer.length < size) ? buffer.length : size; int didRead=instream.read(buffer,0,(int)toRead); if (didRead >= 0) mBytes+=didRead; apkStream.write(buffer,0,didRead); size-=didRead; } apkStream.close(); apkFile.setReadable(true,false); Uri packageUri=Uri.fromFile(apkFile); mInstallObserver.reset(); mPackageManager.installPackage(packageUri,mInstallObserver,PackageManager.INSTALL_REPLACE_EXISTING | PackageManager.INSTALL_FROM_ADB,installerPackage); mInstallObserver.waitForCompletion(); if (mInstallObserver.getResult() != PackageManager.INSTALL_SUCCEEDED) { if (mPackagePolicies.get(info.packageName) != RestorePolicy.ACCEPT) { okay=false; } }  else { boolean uninstall=false; if (!mInstallObserver.mPackageName.equals(info.packageName)) { Slog.w(TAG,"Restore stream claimed to include apk for " + info.packageName + " but apk was really "+ mInstallObserver.mPackageName); okay=false; uninstall=true; }  else { try { PackageInfo pkg=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); if ((pkg.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) { Slog.w(TAG,"Restore stream contains apk of package " + info.packageName + " but it disallows backup/restore"); okay=false; }  else { Signature[] sigs=mManifestSignatures.get(info.packageName); if (signaturesMatch(sigs,pkg)) { if ((pkg.applicationInfo.uid < Process.FIRST_APPLICATION_UID) && (pkg.applicationInfo.backupAgentName == null)) { Slog.w(TAG,"Installed app " + info.packageName + " has restricted uid and no agent"); okay=false; } }  else { Slog.w(TAG,"Installed app " + info.packageName + " signatures do not match restore manifest"); okay=false; uninstall=true; } } }  catch (NameNotFoundException e) { Slog.w(TAG,"Install of package " + info.packageName + " succeeded but now not found"); okay=false; } } if (uninstall) { mDeleteObserver.reset(); mPackageManager.deletePackage(mInstallObserver.mPackageName,mDeleteObserver,0); mDeleteObserver.waitForCompletion(); } } }  catch (IOException e) { Slog.e(TAG,"Unable to transcribe restored apk for install"); okay=false; }  finally { apkFile.delete(); } return okay; } void skipTarPadding(long size,InputStream instream) throws IOException { long partial=(size + 512) % 512; if (partial > 0) { final int needed=512 - (int)partial; byte[] buffer=new byte[needed]; if (readExactly(instream,buffer,0,needed) == needed) { mBytes+=needed; }  else throw new IOException("Unexpected EOF in padding"); } } void readMetadata(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Metadata too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in widget data"); String[] str=new String[1]; int offset=extractLine(buffer,0,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); final String pkg=str[0]; if (info.packageName.equals(pkg)) { ByteArrayInputStream bin=new ByteArrayInputStream(buffer,offset,buffer.length - offset); DataInputStream in=new DataInputStream(bin); while (bin.available() > 0) { int token=in.readInt(); int size=in.readInt(); if (size > 64 * 1024) { throw new IOException("Datum " + Integer.toHexString(token) + " too big; corrupt? size="+ info.size); } switch (token) { case BACKUP_WIDGET_METADATA_TOKEN: { if (MORE_DEBUG) { Slog.i(TAG,"Got widget metadata for " + info.packageName); } mWidgetData=new byte[size]; in.read(mWidgetData); break; } default : { if (DEBUG) { Slog.i(TAG,"Ignoring metadata blob " + Integer.toHexString(token) + " for "+ info.packageName); } in.skipBytes(size); break; } } } }  else { Slog.w(TAG,"Metadata mismatch: package " + info.packageName + " but widget data for "+ pkg); } }  else { Slog.w(TAG,"Unsupported metadata version " + version); } } RestorePolicy readAppManifest(FileMetadata info,InputStream instream) throws IOException { if (info.size > 64 * 1024) { throw new IOException("Restore manifest too big; corrupt? size=" + info.size); } byte[] buffer=new byte[(int)info.size]; if (readExactly(instream,buffer,0,(int)info.size) == info.size) { mBytes+=info.size; }  else throw new IOException("Unexpected EOF in manifest"); RestorePolicy policy=RestorePolicy.IGNORE; String[] str=new String[1]; int offset=0; try { offset=extractLine(buffer,offset,str); int version=Integer.parseInt(str[0]); if (version == BACKUP_MANIFEST_VERSION) { offset=extractLine(buffer,offset,str); String manifestPackage=str[0]; if (manifestPackage.equals(info.packageName)) { offset=extractLine(buffer,offset,str); version=Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); Integer.parseInt(str[0]); offset=extractLine(buffer,offset,str); info.installerPackageName=(str[0].length() > 0) ? str[0] : null; offset=extractLine(buffer,offset,str); boolean hasApk=str[0].equals("1"); offset=extractLine(buffer,offset,str); int numSigs=Integer.parseInt(str[0]); if (numSigs > 0) { Signature[] sigs=new Signature[numSigs]; for (int i=0; i < numSigs; i++) { offset=extractLine(buffer,offset,str); sigs[i]=new Signature(str[0]); } mManifestSignatures.put(info.packageName,sigs); try { PackageInfo pkgInfo=mPackageManager.getPackageInfo(info.packageName,PackageManager.GET_SIGNATURES); final int flags=pkgInfo.applicationInfo.flags; if ((flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0) { if ((pkgInfo.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) || (pkgInfo.applicationInfo.backupAgentName != null)) { if (signaturesMatch(sigs,pkgInfo)) { if ((pkgInfo.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) != 0) { Slog.i(TAG,"Package has restoreAnyVersion; taking data"); policy=RestorePolicy.ACCEPT; }  else if (pkgInfo.versionCode >= version) { Slog.i(TAG,"Sig + version match; taking data"); policy=RestorePolicy.ACCEPT; }  else { Slog.d(TAG,"Data version " + version + " is newer than installed version "+ pkgInfo.versionCode+ " - requiring apk"); policy=RestorePolicy.ACCEPT_IF_APK; } }  else { Slog.w(TAG,"Restore manifest signatures do not match " + "installed application for " + info.packageName); } }  else { Slog.w(TAG,"Package " + info.packageName + " is system level with no agent"); } }  else { if (DEBUG) Slog.i(TAG,"Restore manifest from " + info.packageName + " but allowBackup=false"); } }  catch (NameNotFoundException e) { if (DEBUG) Slog.i(TAG,"Package " + info.packageName + " not installed; requiring apk in dataset"); policy=RestorePolicy.ACCEPT_IF_APK; } if (policy == RestorePolicy.ACCEPT_IF_APK && !hasApk) { Slog.i(TAG,"Cannot restore package " + info.packageName + " without the matching .apk"); } }  else { Slog.i(TAG,"Missing signature on backed-up package " + info.packageName); } }  else { Slog.i(TAG,"Expected package " + info.packageName + " but restore manifest claims "+ manifestPackage); } }  else { Slog.i(TAG,"Unknown restore manifest version " + version + " for package "+ info.packageName); } }  catch (NumberFormatException e) { Slog.w(TAG,"Corrupt restore manifest for package " + info.packageName); } catch (IllegalArgumentException e) { Slog.w(TAG,e.getMessage()); } return policy; } int extractLine(byte[] buffer,int offset,String[] outStr) throws IOException { final int end=buffer.length; if (offset >= end) throw new IOException("Incomplete data"); int pos; for (pos=offset; pos < end; pos++) { byte c=buffer[pos]; if (c == '\n') { break; } } outStr[0]=new String(buffer,offset,pos - offset); pos++; return pos; } void dumpFileMetadata(FileMetadata info){ if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append((info.type == BackupAgent.TYPE_DIRECTORY) ? 'd' : '-'); b.append(((info.mode & 0400) != 0) ? 'r' : '-'); b.append(((info.mode & 0200) != 0) ? 'w' : '-'); b.append(((info.mode & 0100) != 0) ? 'x' : '-'); b.append(((info.mode & 0040) != 0) ? 'r' : '-'); b.append(((info.mode & 0020) != 0) ? 'w' : '-'); b.append(((info.mode & 0010) != 0) ? 'x' : '-'); b.append(((info.mode & 0004) != 0) ? 'r' : '-'); b.append(((info.mode & 0002) != 0) ? 'w' : '-'); b.append(((info.mode & 0001) != 0) ? 'x' : '-'); b.append(String.format(" %9d ",info.size)); Date stamp=new Date(info.mtime); b.append(new SimpleDateFormat("MMM dd HH:mm:ss ").format(stamp)); b.append(info.packageName); b.append(" :: "); b.append(info.domain); b.append(" :: "); b.append(info.path); Slog.i(TAG,b.toString()); } } FileMetadata readTarHeaders(InputStream instream) throws IOException { byte[] block=new byte[512]; FileMetadata info=null; boolean gotHeader=readTarHeader(instream,block); if (gotHeader) { try { info=new FileMetadata(); info.size=extractRadix(block,124,12,8); info.mtime=extractRadix(block,136,12,8); info.mode=extractRadix(block,100,8,8); info.path=extractString(block,345,155); String path=extractString(block,0,100); if (path.length() > 0) { if (info.path.length() > 0) info.path+='/'; info.path+=path; } int typeChar=block[156]; if (typeChar == 'x') { gotHeader=readPaxExtendedHeader(instream,info); if (gotHeader) { gotHeader=readTarHeader(instream,block); } if (!gotHeader) throw new IOException("Bad or missing pax header"); typeChar=block[156]; } switch (typeChar) { case '0': info.type=BackupAgent.TYPE_FILE; break; case '5': { info.type=BackupAgent.TYPE_DIRECTORY; if (info.size != 0) { Slog.w(TAG,"Directory entry with nonzero size in header"); info.size=0; } break; } case 0: { if (DEBUG) Slog.w(TAG,"Saw type=0 in tar header block, info=" + info); return null; } default : { Slog.e(TAG,"Unknown tar entity type: " + typeChar); throw new IOException("Unknown entity type " + typeChar); } } if (FullBackup.SHARED_PREFIX.regionMatches(0,info.path,0,FullBackup.SHARED_PREFIX.length())) { info.path=info.path.substring(FullBackup.SHARED_PREFIX.length()); info.packageName=SHARED_BACKUP_AGENT_PACKAGE; info.domain=FullBackup.SHARED_STORAGE_TOKEN; if (DEBUG) Slog.i(TAG,"File in shared storage: " + info.path); }  else if (FullBackup.APPS_PREFIX.regionMatches(0,info.path,0,FullBackup.APPS_PREFIX.length())) { info.path=info.path.substring(FullBackup.APPS_PREFIX.length()); int slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in " + info.path); info.packageName=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); if (!info.path.equals(BACKUP_MANIFEST_FILENAME) && !info.path.equals(BACKUP_METADATA_FILENAME)) { slash=info.path.indexOf('/'); if (slash < 0) throw new IOException("Illegal semantic path in non-manifest " + info.path); info.domain=info.path.substring(0,slash); info.path=info.path.substring(slash + 1); } } }  catch (IOException e) { if (DEBUG) { Slog.e(TAG,"Parse error in header: " + e.getMessage()); HEXLOG(block); } throw e; } } return info; } private void HEXLOG(byte[] block){ int offset=0; int todo=block.length; StringBuilder buf=new StringBuilder(64); while (todo > 0) { buf.append(String.format("%04x   ",offset)); int numThisLine=(todo > 16) ? 16 : todo; for (int i=0; i < numThisLine; i++) { buf.append(String.format("%02x ",block[offset + i])); } Slog.i("hexdump",buf.toString()); buf.setLength(0); todo-=numThisLine; offset+=numThisLine; } } int readExactly(InputStream in,byte[] buffer,int offset,int size) throws IOException { if (size <= 0) throw new IllegalArgumentException("size must be > 0"); int soFar=0; while (soFar < size) { int nRead=in.read(buffer,offset + soFar,size - soFar); if (nRead <= 0) { if (MORE_DEBUG) Slog.w(TAG,"- wanted exactly " + size + " but got only "+ soFar); break; } soFar+=nRead; } return soFar; } boolean readTarHeader(InputStream instream,byte[] block) throws IOException { final int got=readExactly(instream,block,0,512); if (got == 0) return false; if (got < 512) throw new IOException("Unable to read full block header"); mBytes+=512; return true; } boolean readPaxExtendedHeader(InputStream instream,FileMetadata info) throws IOException { if (info.size > 32 * 1024) { Slog.w(TAG,"Suspiciously large pax header size " + info.size + " - aborting"); throw new IOException("Sanity failure: pax header size " + info.size); } int numBlocks=(int)((info.size + 511) >> 9); byte[] data=new byte[numBlocks * 512]; if (readExactly(instream,data,0,data.length) < data.length) { throw new IOException("Unable to read full pax header"); } mBytes+=data.length; final int contentSize=(int)info.size; int offset=0; do { int eol=offset + 1; while (eol < contentSize && data[eol] != ' ') eol++; if (eol >= contentSize) { throw new IOException("Invalid pax data"); } int linelen=(int)extractRadix(data,offset,eol - offset,10); int key=eol + 1; eol=offset + linelen - 1; int value; for (value=key + 1; data[value] != '=' && value <= eol; value++) ; if (value > eol) { throw new IOException("Invalid pax declaration"); } String keyStr=new String(data,key,value - key,"UTF-8"); String valStr=new String(data,value + 1,eol - value - 1,"UTF-8"); if ("path".equals(keyStr)) { info.path=valStr; }  else if ("size".equals(keyStr)) { info.size=Long.parseLong(valStr); }  else { if (DEBUG) Slog.i(TAG,"Unhandled pax key: " + key); } offset+=linelen; }  while (offset < contentSize); return true; } long extractRadix(byte[] data,int offset,int maxChars,int radix) throws IOException { long value=0; final int end=offset + maxChars; for (int i=offset; i < end; i++) { final byte b=data[i]; if (b == 0 || b == ' ') break; if (b < '0' || b > ('0' + radix - 1)) { throw new IOException("Invalid number in header: '" + (char)b + "' for radix "+ radix); } value=radix * value + (b - '0'); } return value; } String extractString(byte[] data,int offset,int maxChars) throws IOException { final int end=offset + maxChars; int eos=offset; while (eos < end && data[eos] != 0) eos++; return new String(data,offset,eos - offset,"US-ASCII"); } void sendStartRestore(){ if (mObserver != null) { try { mObserver.onStartRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { try { mObserver.onRestorePackage(name); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: restorePackage"); mObserver=null; } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.onEndRestore(); }  catch (RemoteException e) { Slog.w(TAG,"full restore observer went away: endRestore"); mObserver=null; } } } } static boolean signaturesMatch(Signature[] storedSigs,PackageInfo target){ if (target == null) { return false; } if ((target.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) { if (MORE_DEBUG) Slog.v(TAG,"System app " + target.packageName + " - skipping sig check"); return true; } Signature[] deviceSigs=target.signatures; if (MORE_DEBUG) Slog.v(TAG,"signaturesMatch(): stored=" + storedSigs + " device="+ deviceSigs); if ((storedSigs == null || storedSigs.length == 0) && (deviceSigs == null || deviceSigs.length == 0)) { return true; } if (storedSigs == null || deviceSigs == null) { return false; } int nStored=storedSigs.length; int nDevice=deviceSigs.length; for (int i=0; i < nStored; i++) { boolean match=false; for (int j=0; j < nDevice; j++) { if (storedSigs[i].equals(deviceSigs[j])) { match=true; break; } } if (!match) { return false; } } return true; } void restoreWidgetData(String packageName,byte[] widgetData){ if (MORE_DEBUG) { Slog.i(TAG,"Incorporating restored widget data"); } AppWidgetBackupBridge.restoreWidgetState(packageName,widgetData,UserHandle.USER_SYSTEM); } enum UnifiedRestoreState {INITIAL, RUNNING_QUEUE, RESTORE_KEYVALUE, RESTORE_FULL, RESTORE_FINISHED, FINAL} class PerformUnifiedRestoreTask implements BackupRestoreTask { private IBackupTransport mTransport; File mStateDir; private IRestoreObserver mObserver; private IBackupManagerMonitor mMonitor; private long mToken; private int mPmToken; private boolean mDidLaunch; private boolean mIsSystemRestore; private PackageInfo mTargetPackage; private List<PackageInfo> mAcceptSet; private PackageManagerBackupAgent mPmAgent; private IBackupAgent mAgent; private RestoreDescription mRestoreDescription; private PackageInfo mCurrentPackage; private byte[] mWidgetData; private int mCount; private long mStartRealtime; private UnifiedRestoreState mState; private int mStatus; private boolean mFinished; private File mBackupDataName; private File mStageName; private File mSavedStateName; private File mNewStateName; ParcelFileDescriptor mBackupData; ParcelFileDescriptor mNewState; private final int mEphemeralOpToken; PerformUnifiedRestoreTask(IBackupTransport transport,IRestoreObserver observer,IBackupManagerMonitor monitor,long restoreSetToken,PackageInfo targetPackage,int pmToken,boolean isFullSystemRestore,String[] filterSet){ mEphemeralOpToken=generateToken(); mState=UnifiedRestoreState.INITIAL; mStartRealtime=SystemClock.elapsedRealtime(); mTransport=transport; mObserver=observer; mMonitor=monitor; mToken=restoreSetToken; mPmToken=pmToken; mTargetPackage=targetPackage; mIsSystemRestore=isFullSystemRestore; mFinished=false; mDidLaunch=false; if (targetPackage != null) { mAcceptSet=new ArrayList<PackageInfo>(); mAcceptSet.add(targetPackage); }  else { if (filterSet == null) { List<PackageInfo> apps=PackageManagerBackupAgent.getStorableApplications(mPackageManager); filterSet=packagesToNames(apps); if (DEBUG) { Slog.i(TAG,"Full restore; asking about " + filterSet.length + " apps"); } } mAcceptSet=new ArrayList<PackageInfo>(filterSet.length); boolean hasSystem=false; boolean hasSettings=false; for (int i=0; i < filterSet.length; i++) { try { PackageInfo info=mPackageManager.getPackageInfo(filterSet[i],0); if ("android".equals(info.packageName)) { hasSystem=true; continue; } if (SETTINGS_PACKAGE.equals(info.packageName)) { hasSettings=true; continue; } if (appIsEligibleForBackup(info.applicationInfo)) { mAcceptSet.add(info); } }  catch (NameNotFoundException e) { } } if (hasSystem) { try { mAcceptSet.add(0,mPackageManager.getPackageInfo("android",0)); }  catch (NameNotFoundException e) { } } if (hasSettings) { try { mAcceptSet.add(mPackageManager.getPackageInfo(SETTINGS_PACKAGE,0)); }  catch (NameNotFoundException e) { } } } if (MORE_DEBUG) { Slog.v(TAG,"Restore; accept set size is " + mAcceptSet.size()); for (PackageInfo info : mAcceptSet) { Slog.v(TAG,"   " + info.packageName); } } } private String[] packagesToNames(List<PackageInfo> apps){ final int N=apps.size(); String[] names=new String[N]; for (int i=0; i < N; i++) { names[i]=apps.get(i).packageName; } return names; } @Override public void execute(){ if (MORE_DEBUG) Slog.v(TAG,"*** Executing restore step " + mState); switch (mState) { case INITIAL: startRestore(); break; case RUNNING_QUEUE: dispatchNextRestore(); break; case RESTORE_KEYVALUE: restoreKeyValue(); break; case RESTORE_FULL: restoreFull(); break; case RESTORE_FINISHED: restoreFinished(); break; case FINAL: if (!mFinished) finalizeRestore();  else { Slog.e(TAG,"Duplicate finish"); } mFinished=true; break; } } private void startRestore(){ sendStartRestore(mAcceptSet.size()); if (mIsSystemRestore) { AppWidgetBackupBridge.restoreStarting(UserHandle.USER_SYSTEM); } try { String transportDir=mTransport.transportDirName(); mStateDir=new File(mBaseStateDir,transportDir); PackageInfo pmPackage=new PackageInfo(); pmPackage.packageName=PACKAGE_MANAGER_SENTINEL; mAcceptSet.add(0,pmPackage); PackageInfo[] packages=mAcceptSet.toArray(new PackageInfo[0]); mStatus=mTransport.startRestore(mToken,packages); if (mStatus != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Transport error " + mStatus + "; no restore possible"); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } RestoreDescription desc=mTransport.nextRestorePackage(); if (desc == null) { Slog.e(TAG,"No restore metadata available; halting"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_RESTORE_METADATA_AVAILABLE,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } if (!PACKAGE_MANAGER_SENTINEL.equals(desc.getPackageName())) { Slog.e(TAG,"Required package metadata but got " + desc.getPackageName()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_NO_PM_METADATA_RECEIVED,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); mStatus=BackupTransport.TRANSPORT_ERROR; executeNextState(UnifiedRestoreState.FINAL); return; } mCurrentPackage=new PackageInfo(); mCurrentPackage.packageName=PACKAGE_MANAGER_SENTINEL; mPmAgent=new PackageManagerBackupAgent(mPackageManager,null); mAgent=IBackupAgent.Stub.asInterface(mPmAgent.onBind()); if (MORE_DEBUG) { Slog.v(TAG,"initiating restore for PMBA"); } initiateOneRestore(mCurrentPackage,0); mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT); if (!mPmAgent.hasMetadata()) { Slog.e(TAG,"PM agent has no metadata, so not restoring"); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PM_AGENT_HAS_NO_METADATA,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,PACKAGE_MANAGER_SENTINEL,"Package manager restore metadata missing"); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport for restore: " + e.getMessage()); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_LOST_TRANSPORT,null,BackupManagerMonitor.LOG_EVENT_CATEGORY_TRANSPORT,null); mStatus=BackupTransport.TRANSPORT_ERROR; mBackupHandler.removeMessages(MSG_BACKUP_RESTORE_STEP,this); executeNextState(UnifiedRestoreState.FINAL); return; } } private void dispatchNextRestore(){ UnifiedRestoreState nextState=UnifiedRestoreState.FINAL; try { mRestoreDescription=mTransport.nextRestorePackage(); final String pkgName=(mRestoreDescription != null) ? mRestoreDescription.getPackageName() : null; if (pkgName == null) { Slog.e(TAG,"Failure getting next package name"); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  else if (mRestoreDescription == RestoreDescription.NO_MORE_PACKAGES) { if (DEBUG) { Slog.v(TAG,"No more packages; finishing restore"); } int millis=(int)(SystemClock.elapsedRealtime() - mStartRealtime); EventLog.writeEvent(EventLogTags.RESTORE_SUCCESS,mCount,millis); nextState=UnifiedRestoreState.FINAL; return; } if (DEBUG) { Slog.i(TAG,"Next restore package: " + mRestoreDescription); } sendOnRestorePackage(pkgName); Metadata metaInfo=mPmAgent.getRestoredMetadata(pkgName); if (metaInfo == null) { Slog.e(TAG,"No metadata for " + pkgName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package metadata missing"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } try { mCurrentPackage=mPackageManager.getPackageInfo(pkgName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.e(TAG,"Package not present: " + pkgName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_PACKAGE_NOT_PRESENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,"Package missing on device"); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } if (metaInfo.versionCode > mCurrentPackage.versionCode) { if ((mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_RESTORE_ANY_VERSION) == 0) { String message="Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode; Slog.w(TAG,"Package " + pkgName + ": "+ message); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,false); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,pkgName,message); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; }  else { if (DEBUG) Slog.v(TAG,"Source version " + metaInfo.versionCode + " > installed version "+ mCurrentPackage.versionCode+ " but restoreAnyVersion"); Bundle monitoringExtras=putMonitoringExtra(null,BackupManagerMonitor.EXTRA_LOG_RESTORE_VERSION,metaInfo.versionCode); monitoringExtras=putMonitoringExtra(monitoringExtras,BackupManagerMonitor.EXTRA_LOG_RESTORE_ANYWAY,true); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_RESTORE_VERSION_HIGHER,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,monitoringExtras); } } if (MORE_DEBUG) Slog.v(TAG,"Package " + pkgName + " restore version ["+ metaInfo.versionCode+ "] is compatible with installed version ["+ mCurrentPackage.versionCode+ "]"); mWidgetData=null; final int type=mRestoreDescription.getDataType(); if (type == RestoreDescription.TYPE_KEY_VALUE) { nextState=UnifiedRestoreState.RESTORE_KEYVALUE; }  else if (type == RestoreDescription.TYPE_FULL_STREAM) { nextState=UnifiedRestoreState.RESTORE_FULL; }  else { Slog.e(TAG,"Unrecognized restore type " + type); nextState=UnifiedRestoreState.RUNNING_QUEUE; return; } }  catch (Exception e) { Slog.e(TAG,"Can't get next restore target from transport; halting: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); nextState=UnifiedRestoreState.FINAL; return; }  finally { executeNextState(nextState); } } private void restoreKeyValue(){ final String packageName=mCurrentPackage.packageName; if (mCurrentPackage.applicationInfo.backupAgentName == null || "".equals(mCurrentPackage.applicationInfo.backupAgentName)) { if (MORE_DEBUG) { Slog.i(TAG,"Data exists for package " + packageName + " but app has no agent; skipping"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_APP_HAS_NO_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Package has no agent"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } Metadata metaInfo=mPmAgent.getRestoredMetadata(packageName); if (!BackupUtils.signaturesMatch(metaInfo.sigHashes,mCurrentPackage)) { Slog.w(TAG,"Signature mismatch restoring " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_SIGNATURE_MISMATCH,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Signature mismatch"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mAgent=bindToAgentSynchronous(mCurrentPackage.applicationInfo,ApplicationThreadConstants.BACKUP_MODE_INCREMENTAL); if (mAgent == null) { Slog.w(TAG,"Can't find backup agent for " + packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_CANT_FIND_AGENT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_BACKUP_MANAGER_POLICY,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,"Restore agent missing"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); return; } mDidLaunch=true; try { initiateOneRestore(mCurrentPackage,metaInfo.versionCode); ++mCount; }  catch (Exception e) { Slog.e(TAG,"Error when attempting restore: " + e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } void initiateOneRestore(PackageInfo app,int appVersionCode){ final String packageName=app.packageName; if (DEBUG) Slog.d(TAG,"initiateOneRestore packageName=" + packageName); mBackupDataName=new File(mDataDir,packageName + ".restore"); mStageName=new File(mDataDir,packageName + ".stage"); mNewStateName=new File(mStateDir,packageName + ".new"); mSavedStateName=new File(mStateDir,packageName); boolean staging=!packageName.equals("android"); ParcelFileDescriptor stage; File downloadFile=(staging) ? mStageName : mBackupDataName; try { stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); if (mTransport.getRestoreData(stage) != BackupTransport.TRANSPORT_OK) { Slog.e(TAG,"Error getting restore data for " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); stage.close(); downloadFile.delete(); executeNextState(UnifiedRestoreState.FINAL); return; } if (staging) { stage.close(); stage=ParcelFileDescriptor.open(downloadFile,ParcelFileDescriptor.MODE_READ_ONLY); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); BackupDataInput in=new BackupDataInput(stage.getFileDescriptor()); BackupDataOutput out=new BackupDataOutput(mBackupData.getFileDescriptor()); byte[] buffer=new byte[8192]; while (in.readNextHeader()) { final String key=in.getKey(); final int size=in.getDataSize(); if (key.equals(KEY_WIDGET_STATE)) { if (DEBUG) { Slog.i(TAG,"Restoring widget state for " + packageName); } mWidgetData=new byte[size]; in.readEntityData(mWidgetData,0,size); }  else { if (size > buffer.length) { buffer=new byte[size]; } in.readEntityData(buffer,0,size); out.writeEntityHeader(key,size); out.writeEntityData(buffer,size); } } mBackupData.close(); } stage.close(); mBackupData=ParcelFileDescriptor.open(mBackupDataName,ParcelFileDescriptor.MODE_READ_ONLY); mNewState=ParcelFileDescriptor.open(mNewStateName,ParcelFileDescriptor.MODE_READ_WRITE | ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE); prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestore(mBackupData,appVersionCode,mNewState,mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { Slog.e(TAG,"Unable to call app for restore: " + packageName,e); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFull(){ try { StreamFeederThread feeder=new StreamFeederThread(); if (MORE_DEBUG) { Slog.i(TAG,"Spinning threads for stream restore of " + mCurrentPackage.packageName); } new Thread(feeder,"unified-stream-feeder").start(); }  catch (IOException e) { Slog.e(TAG,"Unable to construct pipes for stream restore!"); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } private void restoreFinished(){ try { prepareOperationTimeout(mEphemeralOpToken,TIMEOUT_RESTORE_FINISHED_INTERVAL,this,OP_TYPE_RESTORE_WAIT); mAgent.doRestoreFinished(mEphemeralOpToken,mBackupManagerBinder); }  catch (Exception e) { final String packageName=mCurrentPackage.packageName; Slog.e(TAG,"Unable to finalize restore of " + packageName); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,packageName,e.toString()); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } } class StreamFeederThread extends RestoreEngine implements Runnable, BackupRestoreTask { final String TAG="StreamFeederThread"; FullRestoreEngine mEngine; EngineThread mEngineThread; ParcelFileDescriptor[] mTransportPipes; ParcelFileDescriptor[] mEnginePipes; private final int mEphemeralOpToken; public StreamFeederThread() throws IOException { mEphemeralOpToken=generateToken(); mTransportPipes=ParcelFileDescriptor.createPipe(); mEnginePipes=ParcelFileDescriptor.createPipe(); setRunning(true); } @Override public void run(){ UnifiedRestoreState nextState=UnifiedRestoreState.RUNNING_QUEUE; int status=BackupTransport.TRANSPORT_OK; EventLog.writeEvent(EventLogTags.FULL_RESTORE_PACKAGE,mCurrentPackage.packageName); mEngine=new FullRestoreEngine(this,null,mMonitor,mCurrentPackage,false,false,mEphemeralOpToken); mEngineThread=new EngineThread(mEngine,mEnginePipes[0]); ParcelFileDescriptor eWriteEnd=mEnginePipes[1]; ParcelFileDescriptor tReadEnd=mTransportPipes[0]; ParcelFileDescriptor tWriteEnd=mTransportPipes[1]; int bufferSize=32 * 1024; byte[] buffer=new byte[bufferSize]; FileOutputStream engineOut=new FileOutputStream(eWriteEnd.getFileDescriptor()); FileInputStream transportIn=new FileInputStream(tReadEnd.getFileDescriptor()); new Thread(mEngineThread,"unified-restore-engine").start(); try { while (status == BackupTransport.TRANSPORT_OK) { int result=mTransport.getNextFullRestoreDataChunk(tWriteEnd); if (result > 0) { if (MORE_DEBUG) { Slog.v(TAG,"  <- transport provided chunk size " + result); } if (result > bufferSize) { bufferSize=result; buffer=new byte[bufferSize]; } int toCopy=result; while (toCopy > 0) { int n=transportIn.read(buffer,0,toCopy); engineOut.write(buffer,0,n); toCopy-=n; if (MORE_DEBUG) { Slog.v(TAG,"  -> wrote " + n + " to engine, left="+ toCopy); } } }  else if (result == BackupTransport.NO_MORE_DATA) { if (MORE_DEBUG) { Slog.i(TAG,"Got clean full-restore EOF for " + mCurrentPackage.packageName); } status=BackupTransport.TRANSPORT_OK; break; }  else { Slog.e(TAG,"Error " + result + " streaming restore for "+ mCurrentPackage.packageName); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=result; } } if (MORE_DEBUG) Slog.v(TAG,"Done copying to engine, falling through"); }  catch (IOException e) { Slog.e(TAG,"Unable to route data for restore"); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"I/O error on pipes"); status=BackupTransport.AGENT_ERROR; } catch (Exception e) { Slog.e(TAG,"Transport failed during restore: " + e.getMessage()); EventLog.writeEvent(EventLogTags.RESTORE_TRANSPORT_FAILURE); status=BackupTransport.TRANSPORT_ERROR; }  finally { IoUtils.closeQuietly(mEnginePipes[1]); IoUtils.closeQuietly(mTransportPipes[0]); IoUtils.closeQuietly(mTransportPipes[1]); mEngineThread.waitForResult(); IoUtils.closeQuietly(mEnginePipes[0]); mDidLaunch=(mEngine.getAgent() != null); if (status == BackupTransport.TRANSPORT_OK) { nextState=UnifiedRestoreState.RESTORE_FINISHED; mAgent=mEngine.getAgent(); mWidgetData=mEngine.getWidgetData(); }  else { try { mTransport.abortFullRestore(); }  catch (Exception e) { Slog.e(TAG,"Transport threw from abortFullRestore: " + e.getMessage()); status=BackupTransport.TRANSPORT_ERROR; } clearApplicationDataSynchronous(mCurrentPackage.packageName); if (status == BackupTransport.TRANSPORT_ERROR) { nextState=UnifiedRestoreState.FINAL; }  else { nextState=UnifiedRestoreState.RUNNING_QUEUE; } } executeNextState(nextState); setRunning(false); } } @Override public void execute(){ } @Override public void operationComplete(long result){ } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); if (DEBUG) { Slog.w(TAG,"Full-data restore target timed out; shutting down"); } mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_FULL_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); mEngineThread.handleTimeout(); IoUtils.closeQuietly(mEnginePipes[1]); mEnginePipes[1]=null; IoUtils.closeQuietly(mEnginePipes[0]); mEnginePipes[0]=null; } } class EngineThread implements Runnable { FullRestoreEngine mEngine; FileInputStream mEngineStream; EngineThread(FullRestoreEngine engine,ParcelFileDescriptor engineSocket){ mEngine=engine; engine.setRunning(true); mEngineStream=new FileInputStream(engineSocket.getFileDescriptor(),true); } public boolean isRunning(){ return mEngine.isRunning(); } public int waitForResult(){ return mEngine.waitForResult(); } @Override public void run(){ try { while (mEngine.isRunning()) { mEngine.restoreOneFile(mEngineStream,false); } }   finally { IoUtils.closeQuietly(mEngineStream); } } public void handleTimeout(){ IoUtils.closeQuietly(mEngineStream); mEngine.handleTimeout(); } } private void finalizeRestore(){ if (MORE_DEBUG) Slog.d(TAG,"finishing restore mObserver=" + mObserver); try { mTransport.finishRestore(); }  catch (Exception e) { Slog.e(TAG,"Error finishing restore",e); } if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died at restoreFinished"); } } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); if (mPmToken > 0) { if (MORE_DEBUG) Slog.v(TAG,"finishing PM token " + mPmToken); try { mPackageManagerBinder.finishPackageInstall(mPmToken,mDidLaunch); }  catch (RemoteException e) { } }  else { mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } AppWidgetBackupBridge.restoreFinished(UserHandle.USER_SYSTEM); if (mIsSystemRestore && mPmAgent != null) { mAncestralPackages=mPmAgent.getRestoredPackages(); mAncestralToken=mToken; writeRestoreTokens(); } Slog.i(TAG,"Restore complete."); synchronized (mPendingRestores) { if (mPendingRestores.size() > 0) { if (DEBUG) { Slog.d(TAG,"Starting next pending restore."); } PerformUnifiedRestoreTask task=mPendingRestores.remove(); mBackupHandler.sendMessage(mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,task)); }  else { mIsRestoreInProgress=false; if (MORE_DEBUG) { Slog.d(TAG,"No pending restores."); } } } mWakelock.release(); } void keyValueAgentErrorCleanup(){ clearApplicationDataSynchronous(mCurrentPackage.packageName); keyValueAgentCleanup(); } void keyValueAgentCleanup(){ mBackupDataName.delete(); mStageName.delete(); try { if (mBackupData != null) mBackupData.close(); }  catch (IOException e) { } try { if (mNewState != null) mNewState.close(); }  catch (IOException e) { } mBackupData=mNewState=null; mNewStateName.delete(); if (mCurrentPackage.applicationInfo != null) { try { mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo); final int appFlags=mCurrentPackage.applicationInfo.flags; final boolean killAfterRestore=(mCurrentPackage.applicationInfo.uid >= Process.FIRST_APPLICATION_UID) && ((mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0)); if (mTargetPackage == null && killAfterRestore) { if (DEBUG) Slog.d(TAG,"Restore complete, killing host process of " + mCurrentPackage.applicationInfo.processName); mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid); } }  catch (RemoteException e) { } } mBackupHandler.removeMessages(MSG_RESTORE_OPERATION_TIMEOUT,this); } @Override public void operationComplete(long unusedResult){ removeOperation(mEphemeralOpToken); if (MORE_DEBUG) { Slog.i(TAG,"operationComplete() during restore: target=" + mCurrentPackage.packageName + " state="+ mState); } final UnifiedRestoreState nextState; switch (mState) { case INITIAL: nextState=UnifiedRestoreState.RUNNING_QUEUE; break; case RESTORE_KEYVALUE: case RESTORE_FULL: { nextState=UnifiedRestoreState.RESTORE_FINISHED; break; } case RESTORE_FINISHED: { int size=(int)mBackupDataName.length(); EventLog.writeEvent(EventLogTags.RESTORE_PACKAGE,mCurrentPackage.packageName,size); keyValueAgentCleanup(); if (mWidgetData != null) { restoreWidgetData(mCurrentPackage.packageName,mWidgetData); } nextState=UnifiedRestoreState.RUNNING_QUEUE; break; } default : { Slog.e(TAG,"Unexpected restore callback into state " + mState); keyValueAgentErrorCleanup(); nextState=UnifiedRestoreState.FINAL; break; } } executeNextState(nextState); } @Override public void handleCancel(boolean cancelAll){ removeOperation(mEphemeralOpToken); Slog.e(TAG,"Timeout restoring application " + mCurrentPackage.packageName); mMonitor=monitorEvent(mMonitor,BackupManagerMonitor.LOG_EVENT_ID_KEY_VALUE_RESTORE_TIMEOUT,mCurrentPackage,BackupManagerMonitor.LOG_EVENT_CATEGORY_AGENT,null); EventLog.writeEvent(EventLogTags.RESTORE_AGENT_FAILURE,mCurrentPackage.packageName,"restore timeout"); keyValueAgentErrorCleanup(); executeNextState(UnifiedRestoreState.RUNNING_QUEUE); } void executeNextState(UnifiedRestoreState nextState){ if (MORE_DEBUG) Slog.i(TAG," => executing next step on " + this + " nextState="+ nextState); mState=nextState; Message msg=mBackupHandler.obtainMessage(MSG_BACKUP_RESTORE_STEP,this); mBackupHandler.sendMessage(msg); } void sendStartRestore(int numPackages){ if (mObserver != null) { try { mObserver.restoreStarting(numPackages); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: startRestore"); mObserver=null; } } } void sendOnRestorePackage(String name){ if (mObserver != null) { if (mObserver != null) { try { mObserver.onUpdate(mCount,name); }  catch (RemoteException e) { Slog.d(TAG,"Restore observer died in onUpdate"); mObserver=null; } } } } void sendEndRestore(){ if (mObserver != null) { try { mObserver.restoreFinished(mStatus); }  catch (RemoteException e) { Slog.w(TAG,"Restore observer went away: endRestore"); mObserver=null; } } } } class PerformClearTask implements Runnable { IBackupTransport mTransport; PackageInfo mPackage; PerformClearTask(IBackupTransport transport,PackageInfo packageInfo){ mTransport=transport; mPackage=packageInfo; } public void run(){ try { File stateDir=new File(mBaseStateDir,mTransport.transportDirName()); File stateFile=new File(stateDir,mPackage.packageName); stateFile.delete(); mTransport.clearBackupData(mPackage); }  catch (Exception e) { Slog.e(TAG,"Transport threw clearing data for " + mPackage + ": "+ e.getMessage()); }  finally { try { mTransport.finishBackup(); }  catch (Exception e) { Slog.e(TAG,"Unable to mark clear operation finished: " + e.getMessage()); } mWakelock.release(); } } } class PerformInitializeTask implements Runnable { HashSet<String> mQueue; PerformInitializeTask(HashSet<String> transportNames){ mQueue=transportNames; } public void run(){ try { for (String transportName : mQueue) { IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Slog.e(TAG,"Requested init for " + transportName + " but not found"); continue; } Slog.i(TAG,"Initializing (wiping) backup transport storage: " + transportName); EventLog.writeEvent(EventLogTags.BACKUP_START,transport.transportDirName()); long startRealtime=SystemClock.elapsedRealtime(); int status=transport.initializeDevice(); if (status == BackupTransport.TRANSPORT_OK) { status=transport.finishBackup(); } if (status == BackupTransport.TRANSPORT_OK) { Slog.i(TAG,"Device init successful"); int millis=(int)(SystemClock.elapsedRealtime() - startRealtime); EventLog.writeEvent(EventLogTags.BACKUP_INITIALIZE); resetBackupState(new File(mBaseStateDir,transport.transportDirName())); EventLog.writeEvent(EventLogTags.BACKUP_SUCCESS,0,millis); synchronized (mQueueLock) { recordInitPendingLocked(false,transportName); } }  else { Slog.e(TAG,"Transport error in initializeDevice()"); EventLog.writeEvent(EventLogTags.BACKUP_TRANSPORT_FAILURE,"(initialize)"); synchronized (mQueueLock) { recordInitPendingLocked(true,transportName); } long delay=transport.requestBackupTime(); Slog.w(TAG,"Init failed on " + transportName + " resched in "+ delay); mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis() + delay,mRunInitIntent); } } }  catch (Exception e) { Slog.e(TAG,"Unexpected error performing init",e); }  finally { mWakelock.release(); } } } private void dataChangedImpl(String packageName){ HashSet<String> targets=dataChangedTargets(packageName); dataChangedImpl(packageName,targets); } private void dataChangedImpl(String packageName,HashSet<String> targets){ if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } synchronized (mQueueLock) { if (targets.contains(packageName)) { BackupRequest req=new BackupRequest(packageName); if (mPendingBackups.put(packageName,req) == null) { if (MORE_DEBUG) Slog.d(TAG,"Now staging backup of " + packageName); writeToJournalLocked(packageName); } } } KeyValueBackupJob.schedule(mContext); } private HashSet<String> dataChangedTargets(String packageName){ if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { synchronized (mBackupParticipants) { return mBackupParticipants.get(Binder.getCallingUid()); } } HashSet<String> targets=new HashSet<String>(); if (PACKAGE_MANAGER_SENTINEL.equals(packageName)) { targets.add(PACKAGE_MANAGER_SENTINEL); }  else { synchronized (mBackupParticipants) { int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { targets.addAll(s); } } } } return targets; } private void writeToJournalLocked(String str){ RandomAccessFile out=null; try { if (mJournal == null) mJournal=File.createTempFile("journal",null,mJournalDir); out=new RandomAccessFile(mJournal,"rws"); out.seek(out.length()); out.writeUTF(str); }  catch (IOException e) { Slog.e(TAG,"Can't write " + str + " to backup journal",e); mJournal=null; }  finally { try { if (out != null) out.close(); }  catch (IOException e) { } } } @Override public void dataChanged(final String packageName){ final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { if (MORE_DEBUG) { Slog.v(TAG,"dataChanged(" + packageName + ") ignored because it's user "+ callingUserHandle); } return; } final HashSet<String> targets=dataChangedTargets(packageName); if (targets == null) { Slog.w(TAG,"dataChanged but no participant pkg='" + packageName + "'"+ " uid="+ Binder.getCallingUid()); return; } mBackupHandler.post(new Runnable(){ public void run(){ dataChangedImpl(packageName,targets); } } ); } @Override public void clearBackupData(String transportName,String packageName){ if (DEBUG) Slog.v(TAG,"clearBackupData() of " + packageName + " on "+ transportName); PackageInfo info; try { info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); }  catch (NameNotFoundException e) { Slog.d(TAG,"No such package '" + packageName + "' - not clearing backup data"); return; } HashSet<String> apps; if ((mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid())) == PackageManager.PERMISSION_DENIED) { apps=mBackupParticipants.get(Binder.getCallingUid()); }  else { if (MORE_DEBUG) Slog.v(TAG,"Privileged caller, allowing clear of other apps"); apps=new HashSet<String>(); int N=mBackupParticipants.size(); for (int i=0; i < N; i++) { HashSet<String> s=mBackupParticipants.valueAt(i); if (s != null) { apps.addAll(s); } } } if (apps.contains(packageName)) { if (MORE_DEBUG) Slog.v(TAG,"Found the app - running clear process"); mBackupHandler.removeMessages(MSG_RETRY_CLEAR); synchronized (mQueueLock) { final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport == null) { Message msg=mBackupHandler.obtainMessage(MSG_RETRY_CLEAR,new ClearRetryParams(transportName,packageName)); mBackupHandler.sendMessageDelayed(msg,TRANSPORT_RETRY_INTERVAL); return; } long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_CLEAR,new ClearParams(transport,info)); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); } } } @Override public void backupNow(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"backupNow"); final PowerSaveState result=mPowerManager.getPowerSaveState(ServiceType.KEYVALUE_BACKUP); if (result.batterySaverEnabled) { if (DEBUG) Slog.v(TAG,"Not running backup while in battery save mode"); KeyValueBackupJob.schedule(mContext); }  else { if (DEBUG) Slog.v(TAG,"Scheduling immediate backup pass"); synchronized (mQueueLock) { try { mRunBackupIntent.send(); }  catch (PendingIntent.CanceledException e) { Slog.e(TAG,"run-backup intent cancelled!"); } KeyValueBackupJob.cancel(mContext); } } } boolean deviceIsProvisioned(){ final ContentResolver resolver=mContext.getContentResolver(); return (Settings.Global.getInt(resolver,Settings.Global.DEVICE_PROVISIONED,0) != 0); } @Override public void adbBackup(ParcelFileDescriptor fd,boolean includeApks,boolean includeObbs,boolean includeShared,boolean doWidgets,boolean doAllApps,boolean includeSystem,boolean compress,boolean doKeyValue,String[] pkgList){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Backup supported only for the device owner"); } if (!doAllApps) { if (!includeShared) { if (pkgList == null || pkgList.length == 0) { throw new IllegalArgumentException("Backup requested but neither shared nor any apps named"); } } } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Backup not supported before setup"); return; } if (DEBUG) Slog.v(TAG,"Requesting backup: apks=" + includeApks + " obb="+ includeObbs+ " shared="+ includeShared+ " all="+ doAllApps+ " system="+ includeSystem+ " includekeyvalue="+ doKeyValue+ " pkgs="+ pkgList); Slog.i(TAG,"Beginning adb backup..."); AdbBackupParams params=new AdbBackupParams(fd,includeApks,includeObbs,includeShared,doWidgets,doAllApps,includeSystem,compress,doKeyValue,pkgList); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting backup confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_BACKUP_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch backup confirmation UI"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for backup completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { } Binder.restoreCallingIdentity(oldId); Slog.d(TAG,"Adb backup processing complete."); } } @Override public void fullTransportBackup(String[] pkgNames){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"fullTransportBackup"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } if (!fullBackupAllowable(mTransportManager.getCurrentTransportBinder())) { Slog.i(TAG,"Full backup not currently possible -- key/value backup not yet run?"); }  else { if (DEBUG) { Slog.d(TAG,"fullTransportBackup()"); } final long oldId=Binder.clearCallingIdentity(); try { CountDownLatch latch=new CountDownLatch(1); PerformFullTransportBackupTask task=new PerformFullTransportBackupTask(null,pkgNames,false,null,latch,null,null,false); mWakelock.acquire(); (new Thread(task,"full-transport-master")).start(); do { try { latch.await(); break; }  catch (InterruptedException e) { } }  while (true); final long now=System.currentTimeMillis(); for (String pkg : pkgNames) { enqueueFullBackup(pkg,now); } }   finally { Binder.restoreCallingIdentity(oldId); } } if (DEBUG) { Slog.d(TAG,"Done with full transport backup."); } } @Override public void adbRestore(ParcelFileDescriptor fd){ mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"adbRestore"); final int callingUserHandle=UserHandle.getCallingUserId(); if (callingUserHandle != UserHandle.USER_SYSTEM) { throw new IllegalStateException("Restore supported only for the device owner"); } long oldId=Binder.clearCallingIdentity(); try { if (!deviceIsProvisioned()) { Slog.i(TAG,"Full restore not permitted before setup"); return; } Slog.i(TAG,"Beginning restore..."); AdbRestoreParams params=new AdbRestoreParams(fd); final int token=generateToken(); synchronized (mAdbBackupRestoreConfirmations) { mAdbBackupRestoreConfirmations.put(token,params); } if (DEBUG) Slog.d(TAG,"Starting restore confirmation UI, token=" + token); if (!startConfirmationUi(token,FullBackup.FULL_RESTORE_INTENT_ACTION)) { Slog.e(TAG,"Unable to launch restore confirmation"); mAdbBackupRestoreConfirmations.delete(token); return; } mPowerManager.userActivity(SystemClock.uptimeMillis(),PowerManager.USER_ACTIVITY_EVENT_OTHER,0); startConfirmationTimeout(token,params); if (DEBUG) Slog.d(TAG,"Waiting for restore completion..."); waitForCompletion(params); }   finally { try { fd.close(); }  catch (IOException e) { Slog.w(TAG,"Error trying to close fd after adb restore: " + e); } Binder.restoreCallingIdentity(oldId); Slog.i(TAG,"adb restore processing complete."); } } boolean startConfirmationUi(int token,String action){ try { Intent confIntent=new Intent(action); confIntent.setClassName("com.android.backupconfirm","com.android.backupconfirm.BackupRestoreConfirmation"); confIntent.putExtra(FullBackup.CONF_TOKEN_INTENT_EXTRA,token); confIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivityAsUser(confIntent,UserHandle.SYSTEM); }  catch (ActivityNotFoundException e) { return false; } return true; } void startConfirmationTimeout(int token,AdbParams params){ if (MORE_DEBUG) Slog.d(TAG,"Posting conf timeout msg after " + TIMEOUT_FULL_CONFIRMATION + " millis"); Message msg=mBackupHandler.obtainMessage(MSG_FULL_CONFIRMATION_TIMEOUT,token,0,params); mBackupHandler.sendMessageDelayed(msg,TIMEOUT_FULL_CONFIRMATION); } void waitForCompletion(AdbParams params){ synchronized (params.latch) { while (params.latch.get() == false) { try { params.latch.wait(); }  catch (InterruptedException e) { } } } } void signalAdbBackupRestoreCompletion(AdbParams params){ synchronized (params.latch) { params.latch.set(true); params.latch.notifyAll(); } } @Override public void acknowledgeAdbBackupOrRestore(int token,boolean allow,String curPassword,String encPpassword,IFullBackupRestoreObserver observer){ if (DEBUG) Slog.d(TAG,"acknowledgeAdbBackupOrRestore : token=" + token + " allow="+ allow); mContext.enforceCallingPermission(android.Manifest.permission.BACKUP,"acknowledgeAdbBackupOrRestore"); long oldId=Binder.clearCallingIdentity(); try { AdbParams params; synchronized (mAdbBackupRestoreConfirmations) { params=mAdbBackupRestoreConfirmations.get(token); if (params != null) { mBackupHandler.removeMessages(MSG_FULL_CONFIRMATION_TIMEOUT,params); mAdbBackupRestoreConfirmations.delete(token); if (allow) { final int verb=params instanceof AdbBackupParams ? MSG_RUN_ADB_BACKUP : MSG_RUN_ADB_RESTORE; params.observer=observer; params.curPassword=curPassword; params.encryptPassword=encPpassword; if (MORE_DEBUG) Slog.d(TAG,"Sending conf message with verb " + verb); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(verb,params); mBackupHandler.sendMessage(msg); }  else { Slog.w(TAG,"User rejected full backup/restore operation"); signalAdbBackupRestoreCompletion(params); } }  else { Slog.w(TAG,"Attempted to ack full backup/restore with invalid token"); } } }   finally { Binder.restoreCallingIdentity(oldId); } } private static boolean backupSettingMigrated(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); return enableFile.exists(); } private static boolean readBackupEnableState(int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); if (enableFile.exists()) { try (FileInputStream fin=new FileInputStream(enableFile)){ int state=fin.read(); return state != 0; }  catch (IOException e) { Slog.e(TAG,"Cannot read enable state; assuming disabled"); } }  else { if (DEBUG) { Slog.i(TAG,"isBackupEnabled() => false due to absent settings file"); } } return false; } private static void writeBackupEnableState(boolean enable,int userId){ File base=new File(Environment.getDataDirectory(),"backup"); File enableFile=new File(base,BACKUP_ENABLE_FILE); File stage=new File(base,BACKUP_ENABLE_FILE + "-stage"); FileOutputStream fout=null; try { fout=new FileOutputStream(stage); fout.write(enable ? 1 : 0); fout.close(); stage.renameTo(enableFile); }  catch (IOException|RuntimeException e) { Slog.e(TAG,"Unable to record backup enable state; reverting to disabled: " + e.getMessage()); final ContentResolver r=sInstance.mContext.getContentResolver(); Settings.Secure.putStringForUser(r,Settings.Secure.BACKUP_ENABLED,null,userId); enableFile.delete(); stage.delete(); }  finally { IoUtils.closeQuietly(fout); } } @Override public void setBackupEnabled(boolean enable){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupEnabled"); Slog.i(TAG,"Backup enabled => " + enable); long oldId=Binder.clearCallingIdentity(); try { boolean wasEnabled=mEnabled; synchronized (this) { writeBackupEnableState(enable,UserHandle.USER_SYSTEM); mEnabled=enable; } synchronized (mQueueLock) { if (enable && !wasEnabled && mProvisioned) { KeyValueBackupJob.schedule(mContext); scheduleNextFullBackupJob(0); }  else if (!enable) { if (MORE_DEBUG) Slog.i(TAG,"Opting out of backup"); KeyValueBackupJob.cancel(mContext); if (wasEnabled && mProvisioned) { String[] allTransports=mTransportManager.getBoundTransportNames(); for (String transport : allTransports) { recordInitPendingLocked(true,transport); } mAlarmManager.set(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),mRunInitIntent); } } } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setAutoRestore(boolean doAutoRestore){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setAutoRestore"); Slog.i(TAG,"Auto restore => " + doAutoRestore); final long oldId=Binder.clearCallingIdentity(); try { synchronized (this) { Settings.Secure.putInt(mContext.getContentResolver(),Settings.Secure.BACKUP_AUTO_RESTORE,doAutoRestore ? 1 : 0); mAutoRestore=doAutoRestore; } }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void setBackupProvisioned(boolean available){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"setBackupProvisioned"); } @Override public boolean isBackupEnabled(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupEnabled"); return mEnabled; } @Override public String getCurrentTransport(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getCurrentTransport"); String currentTransport=mTransportManager.getCurrentTransportName(); if (MORE_DEBUG) Slog.v(TAG,"... getCurrentTransport() returning " + currentTransport); return currentTransport; } @Override public String[] listAllTransports(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransports"); return mTransportManager.getBoundTransportNames(); } @Override public ComponentName[] listAllTransportComponents(){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"listAllTransportComponents"); return mTransportManager.getAllTransportCompenents(); } @Override public String[] getTransportWhitelist(){ Set<ComponentName> whitelistedComponents=mTransportManager.getTransportWhitelist(); String[] whitelistedTransports=new String[whitelistedComponents.size()]; int i=0; for (ComponentName component : whitelistedComponents) { whitelistedTransports[i]=component.flattenToShortString(); i++; } return whitelistedTransports; } @Override public String selectBackupTransport(String transport){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransport"); final long oldId=Binder.clearCallingIdentity(); try { String prevTransport=mTransportManager.selectTransport(transport); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,transport); Slog.v(TAG,"selectBackupTransport() set " + mTransportManager.getCurrentTransportName() + " returning "+ prevTransport); return prevTransport; }   finally { Binder.restoreCallingIdentity(oldId); } } @Override public void selectBackupTransportAsync(final ComponentName transport,final ISelectBackupTransportCallback listener){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"selectBackupTransportAsync"); final long oldId=Binder.clearCallingIdentity(); Slog.v(TAG,"selectBackupTransportAsync() called with transport " + transport.flattenToShortString()); mTransportManager.ensureTransportReady(transport,new SelectBackupTransportCallback(){ @Override public void onSuccess(String transportName){ mTransportManager.selectTransport(transportName); Settings.Secure.putString(mContext.getContentResolver(),Settings.Secure.BACKUP_TRANSPORT,mTransportManager.getCurrentTransportName()); Slog.v(TAG,"Transport successfully selected: " + transport.flattenToShortString()); try { listener.onSuccess(transportName); }  catch (RemoteException e) { } } @Override public void onFailure(int reason){ Slog.v(TAG,"Failed to select transport: " + transport.flattenToShortString()); try { listener.onFailure(reason); }  catch (RemoteException e) { } } } ); Binder.restoreCallingIdentity(oldId); } @Override public Intent getConfigurationIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getConfigurationIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.configurationIntent(); if (MORE_DEBUG) Slog.d(TAG,"getConfigurationIntent() returning config intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get configuration intent from transport: " + e.getMessage()); } } return null; } @Override public String getDestinationString(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDestinationString"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.currentDestinationString(); if (MORE_DEBUG) Slog.d(TAG,"getDestinationString() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get string from transport: " + e.getMessage()); } } return null; } @Override public Intent getDataManagementIntent(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementIntent"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final Intent intent=transport.dataManagementIntent(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementIntent() returning intent " + intent); return intent; }  catch (Exception e) { Slog.e(TAG,"Unable to get management intent from transport: " + e.getMessage()); } } return null; } @Override public String getDataManagementLabel(String transportName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getDataManagementLabel"); final IBackupTransport transport=mTransportManager.getTransportBinder(transportName); if (transport != null) { try { final String text=transport.dataManagementLabel(); if (MORE_DEBUG) Slog.d(TAG,"getDataManagementLabel() returning " + text); return text; }  catch (Exception e) { Slog.e(TAG,"Unable to get management label from transport: " + e.getMessage()); } } return null; } @Override public void agentConnected(String packageName,IBinder agentBinder){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { Slog.d(TAG,"agentConnected pkg=" + packageName + " agent="+ agentBinder); IBackupAgent agent=IBackupAgent.Stub.asInterface(agentBinder); mConnectedAgent=agent; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent connected"); } mAgentConnectLock.notifyAll(); } } @Override public void agentDisconnected(String packageName){ synchronized (mAgentConnectLock) { if (Binder.getCallingUid() == Process.SYSTEM_UID) { mConnectedAgent=null; mConnecting=false; }  else { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " claiming agent disconnected"); } mAgentConnectLock.notifyAll(); } } @Override public void restoreAtInstall(String packageName,int token){ if (Binder.getCallingUid() != Process.SYSTEM_UID) { Slog.w(TAG,"Non-system process uid=" + Binder.getCallingUid() + " attemping install-time restore"); return; } boolean skip=false; long restoreSet=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restoreAtInstall pkg=" + packageName + " token="+ Integer.toHexString(token)+ " restoreSet="+ Long.toHexString(restoreSet)); if (restoreSet == 0) { if (MORE_DEBUG) Slog.i(TAG,"No restore set"); skip=true; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport == null) { if (DEBUG) Slog.w(TAG,"No transport"); skip=true; } if (!mAutoRestore) { if (DEBUG) { Slog.w(TAG,"Non-restorable state: auto=" + mAutoRestore); } skip=true; } if (!skip) { try { String dirName=transport.transportDirName(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"Restore at install of " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(transport,dirName,null,null,restoreSet,packageName,token); mBackupHandler.sendMessage(msg); }  catch (Exception e) { Slog.e(TAG,"Unable to contact transport: " + e.getMessage()); skip=true; } } if (skip) { if (DEBUG) Slog.v(TAG,"Finishing install immediately"); try { mPackageManagerBinder.finishPackageInstall(token,false); }  catch (RemoteException e) { } } } @Override public IRestoreSession beginRestoreSession(String packageName,String transport){ if (DEBUG) Slog.v(TAG,"beginRestoreSession: pkg=" + packageName + " transport="+ transport); boolean needPermission=true; if (transport == null) { transport=mTransportManager.getCurrentTransportName(); if (packageName != null) { PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); throw new IllegalArgumentException("Package " + packageName + " not found"); } if (app.applicationInfo.uid == Binder.getCallingUid()) { needPermission=false; } } } if (needPermission) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"beginRestoreSession"); }  else { if (DEBUG) Slog.d(TAG,"restoring self on current transport; no permission needed"); } synchronized (this) { if (mActiveRestoreSession != null) { Slog.i(TAG,"Restore session requested but one already active"); return null; } if (mBackupRunning) { Slog.i(TAG,"Restore session requested but currently running backups"); return null; } mActiveRestoreSession=new ActiveRestoreSession(packageName,transport); mBackupHandler.sendEmptyMessageDelayed(MSG_RESTORE_SESSION_TIMEOUT,TIMEOUT_RESTORE_INTERVAL); } return mActiveRestoreSession; } void clearRestoreSession(ActiveRestoreSession currentSession){ synchronized (this) { if (currentSession != mActiveRestoreSession) { Slog.e(TAG,"ending non-current restore session"); }  else { if (DEBUG) Slog.v(TAG,"Clearing restore session and halting timeout"); mActiveRestoreSession=null; mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); } } } @Override public void opComplete(int token,long result){ if (MORE_DEBUG) { Slog.v(TAG,"opComplete: " + Integer.toHexString(token) + " result="+ result); } Operation op=null; synchronized (mCurrentOpLock) { op=mCurrentOperations.get(token); if (op != null) { if (op.state == OP_TIMEOUT) { op=null; mCurrentOperations.delete(token); }  else if (op.state == OP_ACKNOWLEDGED) { if (DEBUG) { Slog.w(TAG,"Received duplicate ack for token=" + Integer.toHexString(token)); } op=null; mCurrentOperations.remove(token); }  else if (op.state == OP_PENDING) { op.state=OP_ACKNOWLEDGED; } } mCurrentOpLock.notifyAll(); } if (op != null && op.callback != null) { Pair<BackupRestoreTask,Long> callbackAndResult=Pair.create(op.callback,result); Message msg=mBackupHandler.obtainMessage(MSG_OP_COMPLETE,callbackAndResult); mBackupHandler.sendMessage(msg); } } @Override public boolean isAppEligibleForBackup(String packageName){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isAppEligibleForBackup"); try { PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_SIGNATURES); if (!appIsEligibleForBackup(packageInfo.applicationInfo) || appIsStopped(packageInfo.applicationInfo)) { return false; } IBackupTransport transport=mTransportManager.getCurrentTransportBinder(); if (transport != null) { try { return transport.isAppEligibleForBackup(packageInfo,appGetsFullBackup(packageInfo)); }  catch (Exception e) { Slog.e(TAG,"Unable to ask about eligibility: " + e.getMessage()); } } return true; }  catch (NameNotFoundException e) { return false; } } class ActiveRestoreSession extends IRestoreSession.Stub { private static final String TAG="RestoreSession"; private String mPackageName; private IBackupTransport mRestoreTransport=null; RestoreSet[] mRestoreSets=null; boolean mEnded=false; boolean mTimedOut=false; ActiveRestoreSession(String packageName,String transport){ mPackageName=packageName; mRestoreTransport=mTransportManager.getTransportBinder(transport); } public void markTimedOut(){ mTimedOut=true; } public synchronized int getAvailableRestoreSets(IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"getAvailableRestoreSets"); if (observer == null) { throw new IllegalArgumentException("Observer must not be null"); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } long oldId=Binder.clearCallingIdentity(); try { if (mRestoreTransport == null) { Slog.w(TAG,"Null transport getting restore sets"); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); Message msg=mBackupHandler.obtainMessage(MSG_RUN_GET_RESTORE_SETS,new RestoreGetSetsParams(mRestoreTransport,this,observer,monitor)); mBackupHandler.sendMessage(msg); return 0; }  catch (Exception e) { Slog.e(TAG,"Error in getAvailableRestoreSets",e); return -1; }  finally { Binder.restoreCallingIdentity(oldId); } } public synchronized int restoreAll(long token,IRestoreObserver observer,IBackupManagerMonitor monitor){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) Slog.d(TAG,"restoreAll token=" + Long.toHexString(token) + " observer="+ observer); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restore: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreAll() kicking off"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restoreSome(long token,IRestoreObserver observer,IBackupManagerMonitor monitor,String[] packages){ mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"performRestore"); if (DEBUG) { StringBuilder b=new StringBuilder(128); b.append("restoreSome token="); b.append(Long.toHexString(token)); b.append(" observer="); b.append(observer.toString()); b.append(" monitor="); if (monitor == null) { b.append("null"); }  else { b.append(monitor.toString()); } b.append(" packages="); if (packages == null) { b.append("null"); }  else { b.append('{'); boolean first=true; for (String s : packages) { if (!first) { b.append(", "); }  else first=false; b.append(s); } b.append('}'); } Slog.d(TAG,b.toString()); } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mRestoreTransport == null || mRestoreSets == null) { Slog.e(TAG,"Ignoring restoreAll() with no restore set"); return -1; } if (mPackageName != null) { Slog.e(TAG,"Ignoring restoreAll() on single-package session"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport name for restoreSome: " + e.getMessage()); return -1; } synchronized (mQueueLock) { for (int i=0; i < mRestoreSets.length; i++) { if (token == mRestoreSets[i].token) { mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); long oldId=Binder.clearCallingIdentity(); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restoreSome() of " + packages.length + " packages"); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,packages,packages.length > 1); mBackupHandler.sendMessage(msg); Binder.restoreCallingIdentity(oldId); return 0; } } } Slog.w(TAG,"Restore token " + Long.toHexString(token) + " not found"); return -1; } public synchronized int restorePackage(String packageName,IRestoreObserver observer,IBackupManagerMonitor monitor){ if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " obs="+ observer+ "monitor="+ monitor); if (mEnded) { throw new IllegalStateException("Restore session already ended"); } if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return -1; } if (mPackageName != null) { if (!mPackageName.equals(packageName)) { Slog.e(TAG,"Ignoring attempt to restore pkg=" + packageName + " on session for package "+ mPackageName); return -1; } } PackageInfo app=null; try { app=mPackageManager.getPackageInfo(packageName,0); }  catch (NameNotFoundException nnf) { Slog.w(TAG,"Asked to restore nonexistent pkg " + packageName); return -1; } int perm=mContext.checkPermission(android.Manifest.permission.BACKUP,Binder.getCallingPid(),Binder.getCallingUid()); if ((perm == PackageManager.PERMISSION_DENIED) && (app.applicationInfo.uid != Binder.getCallingUid())) { Slog.w(TAG,"restorePackage: bad packageName=" + packageName + " or calling uid="+ Binder.getCallingUid()); throw new SecurityException("No permission to restore other packages"); } long oldId=Binder.clearCallingIdentity(); try { long token=getAvailableRestoreToken(packageName); if (DEBUG) Slog.v(TAG,"restorePackage pkg=" + packageName + " token="+ Long.toHexString(token)); if (token == 0) { if (DEBUG) Slog.w(TAG,"No data available for this package; not restoring"); return -1; } String dirName; try { dirName=mRestoreTransport.transportDirName(); }  catch (Exception e) { Slog.e(TAG,"Unable to get transport dir for restorePackage: " + e.getMessage()); return -1; } mBackupHandler.removeMessages(MSG_RESTORE_SESSION_TIMEOUT); mWakelock.acquire(); if (MORE_DEBUG) { Slog.d(TAG,"restorePackage() : " + packageName); } Message msg=mBackupHandler.obtainMessage(MSG_RUN_RESTORE); msg.obj=new RestoreParams(mRestoreTransport,dirName,observer,monitor,token,app); mBackupHandler.sendMessage(msg); }   finally { Binder.restoreCallingIdentity(oldId); } return 0; } class EndRestoreRunnable implements Runnable { BackupManagerService mBackupManager; ActiveRestoreSession mSession; EndRestoreRunnable(BackupManagerService manager,ActiveRestoreSession session){ mBackupManager=manager; mSession=session; } public void run(){ synchronized (mSession) { mSession.mRestoreTransport=null; mSession.mEnded=true; } mBackupManager.clearRestoreSession(mSession); } } public synchronized void endRestoreSession(){ if (DEBUG) Slog.d(TAG,"endRestoreSession"); if (mTimedOut) { Slog.i(TAG,"Session already timed out"); return; } if (mEnded) { throw new IllegalStateException("Restore session already ended"); } mBackupHandler.post(new EndRestoreRunnable(BackupManagerService.this,this)); } } @Override public void dump(FileDescriptor fd,PrintWriter pw,String[] args){ if (!DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)) return; long identityToken=Binder.clearCallingIdentity(); try { if (args != null) { for (String arg : args) { if ("-h".equals(arg)) { pw.println("'dumpsys backup' optional arguments:"); pw.println("  -h       : this help text"); pw.println("  a[gents] : dump information about defined backup agents"); return; }  else if ("agents".startsWith(arg)) { dumpAgents(pw); return; } } } dumpInternal(pw); }   finally { Binder.restoreCallingIdentity(identityToken); } } private void dumpAgents(PrintWriter pw){ List<PackageInfo> agentPackages=allAgentPackages(); pw.println("Defined backup agents:"); for (PackageInfo pkg : agentPackages) { pw.print("  "); pw.print(pkg.packageName); pw.println(':'); pw.print("      "); pw.println(pkg.applicationInfo.backupAgentName); } } private void dumpInternal(PrintWriter pw){ synchronized (mQueueLock) { pw.println("Backup Manager is " + (mEnabled ? "enabled" : "disabled") + " / "+ (!mProvisioned ? "not " : "")+ "provisioned / "+ (this.mPendingInits.size() == 0 ? "not " : "")+ "pending init"); pw.println("Auto-restore is " + (mAutoRestore ? "enabled" : "disabled")); if (mBackupRunning) pw.println("Backup currently running"); pw.println("Last backup pass started: " + mLastBackupPass + " (now = "+ System.currentTimeMillis()+ ')'); pw.println("  next scheduled: " + KeyValueBackupJob.nextScheduled()); pw.println("Transport whitelist:"); for (ComponentName transport : mTransportManager.getTransportWhitelist()) { pw.print("    "); pw.println(transport.flattenToShortString()); } pw.println("Available transports:"); final String[] transports=listAllTransports(); if (transports != null) { for (String t : listAllTransports()) { pw.println((t.equals(mTransportManager.getCurrentTransportName()) ? "  * " : "    ") + t); try { IBackupTransport transport=mTransportManager.getTransportBinder(t); File dir=new File(mBaseStateDir,transport.transportDirName()); pw.println("       destination: " + transport.currentDestinationString()); pw.println("       intent: " + transport.configurationIntent()); for (File f : dir.listFiles()) { pw.println("       " + f.getName() + " - "+ f.length()+ " state bytes"); } }  catch (Exception e) { Slog.e(TAG,"Error in transport",e); pw.println("        Error: " + e); } } } pw.println("Pending init: " + mPendingInits.size()); for (String s : mPendingInits) { pw.println("    " + s); } if (DEBUG_BACKUP_TRACE) { synchronized (mBackupTrace) { if (!mBackupTrace.isEmpty()) { pw.println("Most recent backup trace:"); for (String s : mBackupTrace) { pw.println("   " + s); } } } } pw.print("Ancestral: "); pw.println(Long.toHexString(mAncestralToken)); pw.print("Current:   "); pw.println(Long.toHexString(mCurrentToken)); int N=mBackupParticipants.size(); pw.println("Participants:"); for (int i=0; i < N; i++) { int uid=mBackupParticipants.keyAt(i); pw.print("  uid: "); pw.println(uid); HashSet<String> participants=mBackupParticipants.valueAt(i); for (String app : participants) { pw.println("    " + app); } } pw.println("Ancestral packages: " + (mAncestralPackages == null ? "none" : mAncestralPackages.size())); if (mAncestralPackages != null) { for (String pkg : mAncestralPackages) { pw.println("    " + pkg); } } pw.println("Ever backed up: " + mEverStoredApps.size()); for (String pkg : mEverStoredApps) { pw.println("    " + pkg); } pw.println("Pending key/value backup: " + mPendingBackups.size()); for (BackupRequest req : mPendingBackups.values()) { pw.println("    " + req); } pw.println("Full backup queue:" + mFullBackupQueue.size()); for (FullBackupEntry entry : mFullBackupQueue) { pw.print("    "); pw.print(entry.lastBackup); pw.print(" : "); pw.println(entry.packageName); } } } private static void sendBackupOnUpdate(IBackupObserver observer,String packageName,BackupProgress progress){ if (observer != null) { try { observer.onUpdate(packageName,progress); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onUpdate"); } } } } private static void sendBackupOnPackageResult(IBackupObserver observer,String packageName,int status){ if (observer != null) { try { observer.onResult(packageName,status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: onResult"); } } } } private static void sendBackupFinished(IBackupObserver observer,int status){ if (observer != null) { try { observer.backupFinished(status); }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"Backup observer went away: backupFinished"); } } } } private Bundle putMonitoringExtra(Bundle extras,String key,String value){ if (extras == null) { extras=new Bundle(); } extras.putString(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,int value){ if (extras == null) { extras=new Bundle(); } extras.putInt(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,long value){ if (extras == null) { extras=new Bundle(); } extras.putLong(key,value); return extras; } private Bundle putMonitoringExtra(Bundle extras,String key,boolean value){ if (extras == null) { extras=new Bundle(); } extras.putBoolean(key,value); return extras; } private static IBackupManagerMonitor monitorEvent(IBackupManagerMonitor monitor,int id,PackageInfo pkg,int category,Bundle extras){ if (monitor != null) { try { Bundle bundle=new Bundle(); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_ID,id); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_CATEGORY,category); if (pkg != null) { bundle.putString(EXTRA_LOG_EVENT_PACKAGE_NAME,pkg.packageName); bundle.putInt(BackupManagerMonitor.EXTRA_LOG_EVENT_PACKAGE_VERSION,pkg.versionCode); } if (extras != null) { bundle.putAll(extras); } monitor.onEvent(bundle); return monitor; }  catch (RemoteException e) { if (DEBUG) { Slog.w(TAG,"backup manager monitor went away"); } } } return null; } } 
equalTo(4)
numberOfIntercept.incrementAndGet() == 2
new Requirement(Skill.FARMING,63)
edge.getDownNode()
bindService(serviceIntent,conn,BIND_AUTO_CREATE | BIND_NOT_FOREGROUND)
new HeadlessEnvironment()
connectionTimeout / 4
new OverflowPanelViewHelper(mContext,mIconTextSpacing)
exclBuilder.grow(numExcludedDocs)
public class PublicKeyJwsSignatureVerifier implements JwsSignatureVerifier {   private PublicKey key;   private AlgorithmParameterSpec signatureSpec;   public PublicKeyJwsSignatureVerifier(  PublicKey key){     this(key,null);   }   public PublicKeyJwsSignatureVerifier(  PublicKey key,  AlgorithmParameterSpec spec){     this.key=key;     this.signatureSpec=spec;   }   @Override public boolean verify(  JwtHeaders headers,  String unsignedText,  byte[] signature){     try {       return CryptoUtils.verifySignature(unsignedText.getBytes("UTF-8"),signature,key,Algorithm.toJavaName(headers.getAlgorithm()),signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
headers.get(ROLLBACK_ON_RUNTIME_FAILURE)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(looperThread.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
/**   * Change the permission of a file or directory specified by args recursively.  */ public final class ChmodRecursiveCommand extends AbstractAclCommand {   public ChmodRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmodr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,true);   }   @Override public String getUsage(){     return "chmodr <mode> <path>";   } } 
artifact.getId()
cursorMove=0
/**   * How to handle a missing part. By default, if no part matches, the  {@link org.apache.cxf.jaxrs.provider.MultipartProvider} throws a  {@link javax.ws.rs.WebApplicationException}with status 400. If this option is set to <strong>false</strong>, the parameter is set to <strong>null</strong>.  */ boolean required() default true; 
a.getNameSelected(null)
mm.tryLock(key,10,TimeUnit.SECONDS)
Extensions.getExtensions(FileBreadcrumbsCollector.EP_NAME,myProject)
deleteCondition.isInternal()
in2 >= 0x7f
id=10872
latch.await(10000,TimeUnit.MILLISECONDS)
substitutor.substituteAndCapture(parameters[i].getType())
hook.step(program,opcode)
a.length >= size
packageName.equals(shortName)
UIPasteboard.getGeneralPasteboard()
readIntPref(FONTSIZE_KEY,mFontSize,288)
testWarning(LINE_JOINER.join("goog.module('m');","","var d = goog.require('a.b.d');","var c = goog.require('a.c');","","alert(1);"),REQUIRES_NOT_SORTED)
channel.disconnect()
public WhitespaceTokenizer create(Reader input){   return new WhitespaceTokenizer(input); } 
context.getLogger().logAttributeWarning(address,MESSAGES.invalidJSFSlotValue(slot.asString()),SLOT_ATTRIBUTE_NAME)
addPortletPreferences(portletPreferencesRow)
basicGraph.getShortestPath(root,t,false)
ch == '|' && JdbcConstants.POSTGRESQL.equals(dbType)
config.setPort(25668)
dependency.getManifestEntry("Export-Service")
RandomStringUtils.randomAscii(20)
addDaysAndCheckForCompletion(4,NextEvent.PAYMENT_ERROR)
InetAddress.getLocalHost()
this.httpHeaderNames.put(KEYCLOAK_USERNAME,new HttpString(getOrDefault(headerNames,"keycloak-username",KEYCLOAK_USERNAME)))
p.isFeaturedProduct()
expect(cluster.getClusterName()).andReturn("cluster").times(1)
sDefaults.putBoolean(KEY_HIDE_LTE_PLUS_DATA_ICON_BOOL,true)
readdirCacheBuilder.maximumSize(maxReaddirs)
product.encode()
JmsSendReceiveWithMessageExpirationTest.class
checkResultByText(null,"dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}")
-1003613275
assertClusterSizeEventually(2,data2,data3)
logger.debug("Cannot update media data for group member ({})",e.getMessage())
factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)
configureCluster(2)
removeUser != UserHandle.USER_ALL
video_st != null && video_st.metadata() != null
return loadBefore; 
_constructor.newInstance(0,tempFileEntry.getFileEntryId(),tempFileEntry.getFileEntryId() + 1,_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
asList(HSQLDB)
parseSitemapXml=true
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,true)
nameDefinitionMultimap.keys()
effectColor=myWaveColor
assertEquals(6,scannedBeanCount)
LOG.fine("received message " + (TopologyMaster.PublishMetrics)message)
w.getStart() >= oldEndOffsetInLine
toArrayWithTransform(input,new Function<PriceList,DefaultPriceList>(){   @Override public DefaultPriceList apply(  final PriceList input){     return toDefaultPriceList(input);   } } ,true)
msgLog.warn("Exception occurred while setting up store modules. Attempting to close things down.",e)
public JobsV3 cancel(int version,JobsV3 c){   Job j=DKV.getGet(c.job_id.key());   if (j == null) {     throw new IllegalArgumentException("No job with key " + c.job_id.key());   }   j.cancel();   return c; } 
getLogger().warn("Unknown classloader [CNFE]: " + loader.getClass().getName())
HEADER=234243482
jsonObject.get("error").toString()
GatheringByteChannel.class
WINDOW_FREEZE_TIMEOUT_DURATION=2000
GL20.glUniform3iv(location,v)
heartbeatTimeoutIntervalMs > 0L
@ConditionalOnEnabledHealthIndicator("rabbit")
new RelationshipLinkbackStage("Test",Configuration.DEFAULT,store,newCache(),0,highId,false)
value.getMajorType()
LOG.error(exception,"Unexpected failure when handling parsing error. This is likely a bug in the implementation")
mVibratorService.vibratePattern(null,new long[]{0},0,new Binder())
checkIfDestroyed()
ldapContexts.put(getThreadName(),ctx)
ViewWebContentAssignedToMyRolesDueDateDetailsTest.class
PyTokenTypes.ADDITIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(expression.getOperator()) || PyTokenTypes.SHIFT_OPERATIONS.contains(expression.getOperator())
new WorldPoint(2715,3689,0)
i <= message.length()
getLogger().warn("Unknown classloader [IAE]: " + e.getMessage())
/**   * {@inheritDoc}   */ @Override public void stop() throws IgniteException { } 
log.warn("Couldn't get font " + fontName)
mHandlerCaller == null
eventListeners != null
/**   * The invoker component.  */ private final Component invoker; 
nodeId.equals(message.getToNode()) || nodeId.equals(message.getRouteId())
newName.putProp(Node.ORIGINALNAME_PROP,qName)
log.warn("You did not add unauthenticated() nor session() but also don't have a current user. You probably meant unauthenticated(). This is a bug!",new Throwable())
StringBuilder buffer
new V(8,new BooleanSetting(true))
showSyncLogDialog(joinSyncMessages(dialogMessage,syncMessage),false)
final P testedPrototype
routeController != null
public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedIfDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={"10:17: " + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new WorldPoint(2975,3811,0)
Long2 v
public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
i + randomIntBetween(2,10)
lockForRescale()
tw.close()
RowSqlType.builder().withIntegerField("f_int").withVarcharField("sub_string")
mBackdrop.animate().alpha(0.002f)
i < size
path.lastIndexOf(Constants.JAR_EXT)
range.getEndOffset()
contribution[LIGHT_AMBIENT_B]
buf.writerIndex()
digester.parse(fis)
ReplicationList.class
json.length() - 1
i < 1000
getPlayerPosition().y
Toolkit.class
(QMMetaEvent)items[i].getData()
queryIds.remove(deadQuery)
GL20.glUniform1iv(location,v)
cachedIntentions.getEditor()
InputMethodManager.getInstance()
private PostgreServerPostgreSQL serverExtension; 
activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient) != null && activeCols(_lambda,_taskInfo._lambda,_taskInfo._gradient).length > _taskInfo._params.maxActivePredictors
LUMBRIDGE_HOME_TELEPORT=4
reply.getJMSMessageID()
clusterService.getIndexerFailures(1,0)
checkNotNullOrEmpty(jsonText,"Json should not be null")
new JAXWSHttpSpiTransportFactory(context)
LOG.debug("ServiceComponent {} doesn't advertise version, " + "however ServiceHostComponent {} on host {} advertised version as {}. Skipping version update",sc.getName(),sch.getServiceComponentName(),sch.getHostName(),newVersion)
validateHasRequiredPropertyElements(element,filePath)
String.format(SCOPED_AUTHORIZE_URL,config.getApiKey(),formURLEncode(config.getCallback()),formURLEncode(config.getScope()))
this.mWidth != this.mBaseWidth || this.mHeight != this.mBaseHeight
checkArgument(prestoTypeParameters.size() == fieldTypes.size(),"Schema mismatch, metastore schema for row column %s has %s fields but parquet schema has %s fields",columnName,prestoTypeParameters.size(),fieldTypes.size())
Optional.fromNullable(resourceManagementScheduler)
Assert.packageNotEmpty(mainCls,"your main class is empty of package.")
not(equalTo(tcp22.getPort()))
logger.error("NODE {}: DeleteReturnRoute command failed.",nodeId)
new KadaneResult(max,maxStart,maxEnd)
LinkageError e
msg.nextOffset()
scheduler.getTriggerState(trigger.getName(),trigger.getGroup()) == Trigger.STATE_PAUSED
button.setTextViewCompoundDrawablesRelative(R.id.action0,action.icon,0,0,0)
sendTo("bar")
DuplexConnectionPool connectionPool=destination.getConnectionPool(); 
newUiPrefs.enableStyleDiagnostics()
new S_Command("00FE30",1,20.0)
"Interrupted when attempting to close writer for end point: " + eldest
new SecretKeySpec(randomBytes,MAC_ALG)
_valid.remove(_parms._offset_column)
mgr.mergeSegments(cube,0,2000,false)
((HotSpotResolvedObjectType)(type.getElementalType())).getFingerprint() != 0
16 * 60000
new ModelContextImpl.Properties(ApplicationId.defaultId(),true,Collections.emptyList(),null,false,Zone.defaultZone(),rotations)
@Nullable Object value
new BitmapDrawable(mTextView.getResources(),holder.getValue())
this.artifactServerFactory=artifactServerFactory
response.setStatus(500)
Observable.concatEager(_getCachedData(),_getFreshData())
"WPA".equals(networkTypeString) || "WPA2".equals(networkTypeString)
generateRandomStringArray(2,4,false,false)
Color.fromRGB(0xABABAB)
new BufferedOutputStream(new FileOutputStream(newState.getFileDescriptor()))
@ConditionalOnEnabledHealthIndicator("solr")
myIpythonInputPromptCount=1
secondaryInputBind.setDescription(bind.description())
TestPropsValues.getUserId()
verify(issueUpdater).setManualSeverity(eq(issue),eq(severity),any(IssueChangeContext.class))
zController.enqueue(doRequestStop())
m.getContent(InputStream.class)
new Max(0)
(BeanDefinitionRegistry)beanFactory
getAsText(get(instant),locale)
(Long)card[15]
mLocalDirtyRect.set(0,0,width,height)
info != null && parameterType.isAssignableFrom(info.getDefaultType())
this.decoder.decode(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
editor == null || editor.getComponent().getRootPane() == null
toDiscard > 0 && i >= rows.size()
targetProject.ensureEvaluated()
new ImportResults(globalSettingsImported,importedAccounts,erroneousAccounts)
progress == 100 && task.getTimerStart() != null
loadAnimator(fragment,transition,false,transitionStyle)
group.isCompany()
config instanceof UnknownRunConfiguration
@Nullable Exception cause
upload1.getUploadEndTimestamp() == 0 || upload2.getUploadEndTimestamp() == 0
(short)0777
public SuggestedFix build(){   return new SuggestedFix(fixes,importsToAdd,importsToRemove); } 
getTaskWriterCount(session) > 1 && !node.getPartitioningScheme().isPresent()
id=10868
updater.myComponent.isVisible()
UpgradeStepRegistrator.class
Mockito.verify(mRMClient).stop()
assertThat(t).isEqualTo(e)
mImageManager.load(postHolder.mImgDiscoverAvatar,GravatarUtils.fixGravatarUrl(discoverData.getAvatarUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp)
fragmentEntryPersistence.findByG_FCI(groupId,fragmentCollectionId,start,end)
resourceTableStream.readFully(tableBytes,0,(int)alignedSize)
handleImpl.getObject()
random().nextInt(9) + 2
FileUtil.loadFileText(ioFile,"UTF-8")
passCodeIsEnabled()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_TOGGLE_FUNCTION,false)
compound.getTag("tile_pos")
shardDao.insertShard(shard,tableId,null,0,0,0,0)
waitUntil(() -> externalNodesStarted.get() == NODE_COUNT,60_000)
new EmbeddedDatabaseRule()
searchUICore.getSearchSettings().setEmptyQueryAllowed(true).setAddressSearch(true).setSortByName(false)
public Long getMeasureId(){   return measureId; } 
new HashMap<String,Object>()
appView.canGoBack()
assertEquals(13,handler.getErrors().size())
PsiElement scope=context.getScope(); 
USE_DISPLAY_LIST_PROPERTIES=true
myStorage.isMapped() || isDirty()
message.getLine() != lineNumbers.get(i) && message.getLine() - 1 != lineNumbers.get(i)
(DataProvider)object
MapUtil.getBoolean(parameterMap,_IMPORT_BLOGS_DATA)
new IllegalArgumentException("'level' cannot be null")
UpgradeStepRegistrator.class
new WebSocketServerHandshakerFactory(getWebSocketLocation(req),null,true)
@Override public Response schema(Property property){   this.setSchema(property);   return this; } 
sides < 3
TokenSet.create(JavaTokenType.LT,JavaTokenType.LTLT,JavaTokenType.LTLTEQ,JavaTokenType.GT,JavaTokenType.GTGT,JavaTokenType.GTGTEQ,JavaTokenType.GTGTGTEQ,JavaTokenType.AND,JavaTokenType.ANDAND,JavaTokenType.ANDEQ,JavaTokenType.STRING_LITERAL)
setWindowingMode(windowingMode,false,false,false)
(xmin > x && xmin < x + width) && (xmax > x && xmax < x + width)
tag != null && tag.isPhysical()
createTextAttributesKey("KOTLIN_ANNOTATION")
targetDescription.getDeclaredValueClassName()
block.useSourceInfoIfMissingFromForTree(exprRoot)
Lists.newArrayList('*','[',']','(',')',',')
reportDrawNeeded=true
Box.createHorizontalGlue()
ConfiguredTargetValue.key(label,defaultTargetConfiguration)
throwable.getMessage()
InternalDecorator.this.isFocused()
builder.field(Fields.LARGEST,largest)
new SubtasksFilterUpdater()
public FileFilter getFileFilterFromFileTypes(String fileTypes){   String glob;   if (fileTypes.equals("*"))   glob=".*";  else   glob="^.*\\.(" + fileTypes.replace(",","|") + ")$";   return new GlobFileFilter(glob,true); } 
new IllegalArgumentException("No value for parameter named '" + name + "'.")
mediaItemsNotUploaded <= sNotificationData.currentMediaItem
Library.class
previousResultRsmSet.getFirst()
CodeStyleSettings.class.getField(value)
logger.fine(String.format("calling ack %s with %s",packet.id,packet.data))
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,false,"isAppInactive",null)
SystemProperties.getBoolean("persist.demo.hdmirotationlock",false)
private static JDialog getNullDialog(){   return null; } 
@Override public final DivideByOnConditionStep on(String sql,QueryPart... parts){   and(sql,parts);   return this; } 
metadata.addHaving(new BooleanBuilder())
(parentRestricted && !restricted) || (!parentAsked && asked) || hook.isDangerous()|| !clear
!isAlsoJar && childFolder.getType() != FileType.FOLDER
mIsScrollableViewHandlingTouch || !isTouchEnabled()
useCustomAapt=true
socket.getSocket() == null || !connections.containsKey(socket)
uiAclHandler.permit(reqContext,op,topoConf)
mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,TAG)
gzipHandler.addIncludedMimeTypes("text/html,text/plain,text/xml,application/xhtml+xml,text/css,application/javascript,image/svg+xml,application/vnd.go.cd.v1+json,application/json")
NbBundle.getMessage(ImporterGEXF.class,"importerGEXF_error_pid",id)
mContainerActivity.getStorageManager() != null && getFile() != null
MIN_HEART_RATE_VALUE=10
new IllegalStateException(sm.getString("coyoteResponse.sendRedirect.ise"))
Preconditions.checkNotNull(hostname,"hostname")
p.containsKey("gt06.timezone")
writeSource.setWriteCount()
ColorProperties.getColor("controlColor")
text.substring(idx + 1)
factory.get(mResultWildcard,NO_ANNOTATIONS,retrofit)
processNonPersistent=false
index < next
newChain.getText()
ids1.size()
privObj.getObjectName().equals("masking_test_subq") || privObj.getObjectName().startsWith("masking_test_subq_n")
rowSelected >= 0 && rowSelected < table.getRowCount() - 1
checkOrderItemOfferAppliedCount(order) == 2
id=10996
!threads.isEmpty()
mService.addOrUpdateNetwork(config,mContext.getOpPackageName())
session.users().getServiceAccount(client)
presentation.setEnabled(true)
anchor != null && anchor.getElementType() == GroovyTokenTypes.mSH_COMMENT
@Override public CharsRefBuilder append(CharSequence csq){   if (csq == null) {     return append(NULL_STRING);   }   return append(csq,0,csq.length()); } 
setterVisibility=Visibility.NONE
service.handlePinMmiForPhoneAccount(accountHandle,dialString,mContext.getOpPackageName())
FileChannel.open(indexFile.toPath(),CREATE,READ,WRITE)
bagEntry.getState() == STATE_NOT_IN_USE
new RoutingControlAction(this,newPath,true,callback)
privateJDBCClassDetermine jdbcClassDetermine=new JDBCClassDetermine(); 
ApplicationManager.getApplication().executeOnPooledThread(new Callable<Void>(){   @Override public Void call() throws Exception {     tester.test(file,xmlFile,originalVFile);     return null;   } } ).get(8888,TimeUnit.SECONDS)
sender.getHostString()
timeFormatter.format(value)
enclosingHeight - height - insetBottom
bindingGroup.get(PORT_OFFSET).asInt() > 0
driverFile.getFile()
new IndexWriter(indexStoreB,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
adjustedEndTimeUs=endTimeUs
sslPrincipal.getName()
for (VirtualFile root : myRoots) {   Color color;   if (i >= ROOT_COLORS.length) {     color=getDefaultRootColor();   }  else {     color=ROOT_COLORS[i];     i++;   }   myRoots2Colors.put(root,color); } 
!this.bukkitName.isEmpty()
Nd4j.zeros(1,size)
options.get(option).perform()
nextRow > lastRow
for (EventListener listener : eventListeners) addEventListener(listener); 
bindingGroup.hasDefined(PORT_OFFSET)
(Number)array[this.index]
new JobMeta(space,(space != null ? space.environmentSubstitute(getFilename()) : getFilename()),rep,metaStore,null)
SolidityType.Bytes32Type.decodeBytes32(topicBytes,0)
registrar.checkExisting(added)
BuildConfigSpec parameters
removeTopicTask(this.message.getMessageId())
role instanceof String
new RuntimeException("TEST")
this.cusolverDnDsyevd.invoke(null,solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asDoublePointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
LanguageLevel.JDK_1_5.compareTo(field.getManager().getEffectiveLanguageLevel()) <= 0
new SimpleDateFormat(format,Locale.US)
maxLevel <= levelFloor
maxTryTime=100
Integer.parseInt(this.getOptional("kylin.restclient.connection.max-total","200"))
accountData.setIsNotifiedForInvoices(Objects.firstNonNull(isNotifiedForInvoices,delegate.isNotifiedForInvoices()))
(System.currentTimeMillis() - startTime) < 30
Thread.sleep(2000)
MethodFlatteningResolver methodFlatteningResolver
assertEquals(0.31643071339946,mse,1e-8)
@InputMagicNumberIntMethodAnnotation(42)
System.currentTimeMillis() + syncDelta
new AnalyzedToken(word,currTag,lemma,pos)
new AtomicInteger(0)
opcode >= 0
instance instanceof FluidTank
CacheManagerCheck.class
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THREADS))
actionButton.setRolloverIcon(new ImageIcon(ca.getRolloverIcon()).getImage())
new SimpleProxyPool(httpProxyList,false)
ContainerUtil.newHashSet("AddToFavoritesPopup","RemoveFromFavorites","DatabaseView.ImportDataSources","CompileDirty","Compile","AddNewFavoritesList","EditFavorites","RenameFavoritesList","RemoveFavoritesList")
logger.info("--> checking snapshot status for all currently running and snapshot with empty repository")
!thisMatched && !elem.isInflected() && elem.getPOStag() == null && (prevElement != null && prevElement.getExceptionList() == null)
uri.substring(2,pathend)
retVal.setProperty(p.getKey(),p.getValue())
final Throwable e
options.getJvmOpts() != null
intsScratch.values[0]=ordinal
new StringBundler(9)
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Preconditions.checkNotNull(thirdOperand)
QuartzHelper.class
getPath("InputGenericWhitespaceEndsTheLine.java")
Collections.singletonList(ItemStack.EMPTY)
mAuth.createUserWithEmailAndPassword(email,password).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"createUser:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign Up Failed",Toast.LENGTH_SHORT).show();     }   } } )
stop("background",ServiceSinkhole.this,true)
0 <= ai && ai < a.myWords.length ? a.myWords[ai] : 0L
member.getType()
groupVM.getIsCanEditAdministration().get() || groupVM.getIsCanDelete().get()
ZONE3_SOURCE_INTERNETRADIO(154)
mColumn + (x - 0.5f) * 4 + 1.25f
srTree != null && srTree.Result != mySearchResult
contentType.startsWith(PresContentClient.CONTENT_TYPE)
indexData.rewind()
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(refElement).descriptionAndTooltip(message)
UpgradeStepRegistrator.class
LOGGER.info("Attaching API Key: " + apiKey)
JSError.make(REPORT_PATH_IO_ERROR,reportPath,e.getMessage())
Map<JsName,JsFunction>
IntrospectionSupport.setProperty(exchange.getContext().getTypeConverter(),jpa,"timestamp",msg.getTimestamp())
receiverStatusListener.waitForEvent(12000,3)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class)
@Override public Variable emitBitScanForward(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   append(new SPARCBitManipulationOp(BSF,result,asAllocatable(operand),this));   return result; } 
new SnippetInstaller(runtime,assumptions,runtime.getGraalRuntime().getTarget())
absolutePath.contains("/test/") || fileName.endsWith("DBUpgrader.java") || fileName.endsWith("Test.java")|| fileName.endsWith("UpgradeTableListener.java")|| content.contains("Callable<Void>")
device == AudioSystem.DEVICE_OUT_HDMI || device == AudioSystem.DEVICE_OUT_HDMI_ARC
new WebDriverWait(driver,30)
state == null && obj.fieldsCount() > 0
theirs=theirIterator.next()
new AudioMediaDeviceSession(this,oldSession)
new IndexingStats.Stats(0L,0L,0L,0L,0L,0L,0L,0L,true,randomLong())
!state.isFrameTypePermitted(FrameType.DATA)
t.isFreeformTask() || targetStackId == FREEFORM_WORKSPACE_STACK_ID
maker.getTaggedData(RESERVED_FOR_LOGBUILDER_LATENCY_MILLIS)
new Tree(new ChangesBrowserNode("root")){   public Dimension getPreferredScrollableViewportSize(){     Dimension size=super.getPreferredScrollableViewportSize();     size=new Dimension(size.width + 10,size.height);     return size;   }   protected void processMouseEvent(  MouseEvent e){     if (e.getID() == MouseEvent.MOUSE_PRESSED) {       int row=myTree.getRowForLocation(e.getX(),e.getY());       if (row >= 0) {         final Rectangle baseRect=myTree.getRowBounds(row);         baseRect.setSize(checkboxWidth,baseRect.height);         if (baseRect.contains(e.getPoint())) {           myTree.setSelectionRow(row);           toggleSelection();         }       }     }     super.processMouseEvent(e);   }   public int getToggleClickCount(){     return -1;   } } 
sendMessageAtFrontOfQueue(CMD_STOP_AP)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,40000L,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
Helpers.msgLong(OpenCellIdActivity.this,getString(R.string.ocid_api_error) + e.getClass().getName() + " - "+ e.getMessage())
client.completion(className,buf,cursor)
maxSegmentSize > numHits
return true; 
canWrite(clazz,mediaType)
Pair.newPair(1,"Killed")
int year() default 2008; 
ImmutableMap<String,String>
InheritableThreadLocal<JMeterContext>
in.markReaderIndex().readByte()
getLock(target)
assertEquals(129,blockHashesMessage.getBlockHashes().size())
ESLoggerFactory.getLogger(component)
i < 30
new CollectionAdminRequest.CreateAlias().setAliasName(reindex.getDefaultCollection()).setAliasedCollections(primaryCollectionName).process(reindex)
/**   * {@link Builder#prefixWith(Tree,String)}    */ public static SuggestedFix prefixWith(Tree node,String prefix){   return builder().prefixWith(node,prefix).build(); } 
getCol().getDecks().id(deckName,false)
updateSubtreeNow(node)
ZonedDateTime.parse("1956-10-04T19:28:34.123+01:00[Europe/Paris]")
messageParts[4]
minBukkitBuildVersion=711
hasDefaultConstructor(superClass,true)
n2
model.getStatus() == FileDownloadStatus.pending && model.getSoFar() <= 0
app.isDispatchThread() || app.isHeadlessEnvironment()
UIUtils.getFontHeight(group) * 15
ScriptingUtil.exec(null,portletObjects,language,script,new String[0])
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,toNode,direction.reverse(),relTypes)
Assert.assertEquals(1,results.size())
!StringUtil.isNullOrEmpty(websiteDir)
!war.startsWith("file:")
table != null && table.columns != null
line.split(HgChangesetUtil.ITEM_SEPARATOR,-1)
CategoryTranslationImpl.class
PUSHING_SECTION(1)
logger.debug("Calimero library version {}",Settings.getLibraryVersion())
nearCache.invalidate(key)
bs.max() < 32
ApplicationManager.getApplication().invokeLater(() -> {   project.getMessageBus().connect().subscribe(ToolWindowManagerListener.TOPIC,myPostponedEventsListener);   installContentListener(); } ,project.getDisposed())
previousPhaseName != null
(byte)201
attributeMap.get(attributeName)
transformations.isEmpty()
new RuntimeException("Could not create TypeInformation for type " + first.getClass() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
new String(actual,0,i + 1,"UTF-8")
mListUrlBuilder.reset()
range.myStartLine <= start
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,2,3,3,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,0,0,1,1,1,1,1,1,3,3,3,3,3,3,3,5,0,3,2,3,1,1,3,3,1,1,0,4,3,3,5,5}
!tour.getStageInformation().isEmpty()
offset < text.length()
_assertAttibutes(sourcesJSONArray.getJSONObject(1),200,50)
(mGroupFlags & FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED) == 0 && type == ActionMode.TYPE_PRIMARY
(opcode == TEXT.getOpCode()) || (opcode == BINARY.getOpCode())
checkAndDisplayMatrix()
out.readFully(compressed,0,chunkSize)
Context.getEncounterService().saveEncounter(encounter)
RECONNECT_DELAY_MAX=5
i >= 0
(Long)123L
id=10805
new StringBuilder(259)
synchronized (this) {   this.conn=conn;   this.stream=stream;   stream.beginRequest(this);   if (pendingMaxSize != -1) {     this.stream.doSetWriteQueueMaxSize(pendingMaxSize);   }   if (pendingChunks != null) {     ByteBuf pending=pendingChunks;     pendingChunks=null;     if (completed) {       writeHeadWithContent(pending,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       writeHeadWithContent(pending,false);       if (headersCompletionHandler != null) {         headersCompletionHandler.handle(stream.version());       }     }   }  else {     if (completed) {       writeHeadWithContent(Unpooled.EMPTY_BUFFER,true);       conn.reportBytesWritten(written);       if (respHandler != null) {         this.stream.endRequest();       }     }  else {       if (writeHead) {         writeHead();         if (headersCompletionHandler != null) {           headersCompletionHandler.handle(stream.version());         }       }     }   } } 
Boolean.parseBoolean(indexOptions.get(INDEX_ANALYZED_OPTION))
copyFileEntryMetadata(dlFileVersion.getCompanyId(),dlFileVersion.getFileEntryTypeId(),fileEntryId,dlFileVersion.getFileVersionId(),newDlFileVersion.getFileVersionId(),serviceContext)
chart != null && !chart.isEmpty()
m.getDeclaringClass()
FavouritesWs.class
!r1
enums.size()
revokingStore.disable()
cluster.restartDataNode(dnIdxToDie)
logger.isInfoEnabled()
new File(helpersPath)
RuntimeVersion.isAtLeast11()
mDrawerItems.size() > position
!_assetCategories.isEmpty()
this.acquireCameraInstance(cameraType)
LocalFileSystem.getInstance().refreshAndFindFileByPath(libPath)
openSession.closeAndClearTokenInformation()
virtualFile != null && !myProject.isDefault()
new Notification(R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24),"(453) 123-2328","",null)
demoted.getPolicyWeight()
SupervisedModel rawModel=makeSupervisedModel(); 
out.write(manifest)
log.warn("The TGT cannot be renewed beyond the next expiry date: {}." + "This process will not be able to authenticate new SASL connections after that " + "time (for example, it will not be able to authenticate a new connection with a Kafka "+ "Broker).  Ask your system administrator to either increase the "+ "'renew until' time by doing : 'modprinc -maxrenewlife {} ' within "+ "kadmin, or instead, to generate a keytab for {}. Because the TGT's "+ "expiry cannot be further extended by refreshing, exiting refresh thread now.",expiryDate,principal,principal)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0.1).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
TopNCondition.isTopNHostCondition(metricNames,hostnames) ^ TopNCondition.isTopNMetricCondition(metricNames,hostnames)
return maxPagePartitioningBufferSize; 
LOG.warn("OpenTracing: Failed to capture tracing data",t)
!subAdded || !added
{189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691}
logger.error("Error getting value for expression " + expressionField.getExpression() + " "+ e.getMessage(),e)
owner == null || resultType instanceof PsiPrimitiveType
public String getRequestRequiredAcks(){   return requestRequiredAcks; } 
mock.setResultWaitTime(4000)
anyAreSet(state,FLAG_SHOULD_RESUME_READS)
mBackgroundScaledBitmap == null
AudioFormat.isEncodingLinearFrames(mAudioFormat)
new AccountInfo(mtGoxAccountInfo.getLogin(),mtGoxAccountInfo.getTradeFee(),MtGoxAdapters.adaptWallets(mtGoxAccountInfo.getWallets()))
getList().getSize() == 0 && getActivity() != null
new Fault(e)
wagonManager.getArtifact(artifact,repo,null,true)
player.teleport(playerLocation,TeleportCause.COMMAND)
!sameActivity || !sameIntent
new org.deeplearning4j.nn.graph.vertex.impl.NormalizeVertex(graph,name,idx,dimension,eps)
return threadHasRun; 
new SnippetInstaller(runtime,new Assumptions(false),target)
new ParentObserver(synchronizedObserver)
m.getName().startsWith("test") && Modifier.isPublic(m.getModifiers()) && m.getParameterCount() == 0
getWebElement(locator)
LensPositionSelectors.lensPosition(LensPosition.EXTERNAL)
public class AbstractSerializationsTester extends CleanupHelper {   protected static final String CUR_VER=System.getProperty("cassandra.version","0.7");   protected static final Map<String,Integer> VERSION_MAP=new HashMap<String,Integer>(){ {       put("0.7",1);     }   } ;   protected static final boolean EXECUTE_WRITES=new Boolean(System.getProperty("cassandra.test-serialization-writes","False")).booleanValue();   protected final int getVersion(){     return VERSION_MAP.get(CUR_VER);   }   protected static DataInputStream getInput(  String name) throws IOException {     File f=new File("test/data/serialization/" + CUR_VER + "/"+ name);     assert f.exists() : f.getPath();     return new DataInputStream(new FileInputStream(f));   }   protected static DataOutputStream getOutput(  String name) throws IOException {     File f=new File("test/data/serialization/" + CUR_VER + "/"+ name);     f.getParentFile().mkdirs();     return new DataOutputStream(new FileOutputStream(f));   } } 
bar.setResultWaitTime(3500)
PRIORITY_MAX=3
!sourceEdgeTextData.getText().isEmpty()
return RES_OK; 
AvailabilityRequirement requirement
JMeterUtils.getPropDefault("httpsampler.max_redirects",20)
classes.size()
availScrollRange != 0
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refElement).descriptionAndTooltip(message)
RegionRegistry.class
data.batchBuffer.add(outputRowData)
regUser * trusteeWeightValue * trusteeFactorValue* trusteeFactorValue
_connector.getResponse("GET //bad/foo?data=1 HTTP/1.0\n\n")
mAlarmManager.set(eq(AlarmManager.ELAPSED_REALTIME),anyLong(),anyLong(),isA(PendingIntent.class),false)
appInfo.uid
new GitException("Invalid reference to commit for merge " + request.getCommit())
RuntimeException ex
new byte[12]
prefsWriter.apply()
lan
pathParts[1] != null && pathParts[1].length() > 1
getContext().enforceCallingPermission(android.Manifest.permission.DUMP,message)
ctxt.getServletContext()
contentBitmap == null
jobsLogs.jobsLog()
TextUtils.isEmpty(number)
YMLSourceUtil.getDefinitions(definition,nestedDefinitionIndent)
stagingTypeSettingsProperties.toSortedString()
TimeUnit.SECONDS.toMillis(timeoutSeconds)
currentBuilder.getRootImmediately()
eventFunc.equals("conf_api_sub_mute") || eventFunc.equals("conference_api_sub_mute")
evaluationText.getText().indexOf('\n') == -1 && singleLine.indexOf(evaluationText) == -1
Strings.splitStringByCommaToArray(Util.expr2Object(sqlExpr.getRight()).toString())
namespaces.isDefined()
20000 * 4 * 4
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/smart/SuperMembers.kt")
new InputStreamReader(fileObject.getInputStream(),"UTF-8")
field != null && !(field instanceof PsiEnumConstant)
!metaInjectMeta.isNoExecution()
!getLocationEnabled()
StatList.getObjectUseStats(itemstack.getItem())
DvcsUtil.guessRepositoryForFile(project,GitUtil.getRepositoryManager(project),file,GitVcsSettings.getInstance(project).getRecentRootPath())
mListener.onFragmentInteraction(shouldSendMagicLink)
new StringBundler(9)
webSocketProcessor.close(webSocket,1000)
drawerLayout.closeDrawers()
sleepAtLeastMillis(1000)
private FallbackPathSettings _fallbackKeySettings; 
timer.isActive() || (!timer.isActive() && timer.getState() == TimerState.ACTIVE)
websocketComponent.setMaxThreads(20)
Executors.newSingleThreadExecutor(new ThreadFactory(){   private AtomicInteger count=new AtomicInteger();   @Override public Thread newThread(  final Runnable runnable){     return new Thread(runnable,"Atmosphere-BroadcasterConfig-" + count.getAndIncrement());   } } )
Thread.sleep(1000)
index >= 0
completion.onErrorResume(ex -> handler.handle(exchange,ex))
StringBundler.concat("select companyId, preferences from PortletPreferences ","where portletId = '",_PORTLET_ID,"' AND ownerType = ",PortletKeys.PREFS_OWNER_TYPE_COMPANY)
new LayerVisitor(asFlatRegion(region),minimumBlockY(region),maximumBlockY(region),ground)
entry.getCiteKeyOptional()
targetClassLoader == null || targetClassLoader.getClass().getName().equals("jdk.internal.loader.ClassLoaders$PlatformClassLoader")
new AffineTransform(mTextScaleX,mTextSkewX,0,1,0,0)
SmartEnterProcessors.INSTANCE.allForLanguage(fixture.getFile().getLanguage())
Exception ignored
nativeLibraryDir.getPath()
GL.glBindTexture(target,texture)
t1.setToUpperCase(false)
context.isPersistentField(f) && getMappedByFromAnnotation(f).equals(persistentField.getName()) && isAssignable(persistentField.getDeclaringClass(),inferFieldTypeName(f))
Thread.sleep(2500)
type == VertexDataType.VertexBufferObject || Mesh.forceVBO
dockedBounds.top - dockDividerWidth
event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)
Assert.assertEquals("Unexpected token type: methodStub",msg)
header.findViewById(R.id.avatar_bgrnd)
case 5: 
waitLatch.await(1000,TimeUnit.MILLISECONDS)
SetUtil.class
element instanceof ZLTextWord || element instanceof ZLTextFixedHSpaceElement
typeName.equals(java.util.Collection.class.getName()) || typeName.equals(java.util.Set.class.getName()) || typeName.equals(java.util.SortedSet.class.getName())
AnonymousCanBeLambdaInspection.replacePsiElementWithLambda(expression,true,false)
StringBuilder buffer=new StringBuilder("{ "); 
textLanguage.getShortName()
assertRemoveSubsystemResources(servicesB)
fields.getOrDefault("last_seen",0)
new DefaultAgentOption(agentArgs,instrumentation,profilerConfig,pluginJars,bootStrapJarCorePath,serviceTypeRegistryService,annotationKeyRegistryService)
CRASH_AT_SIZE=20_000
instructionStart + 6
getSessionTimeout().getSeconds()
new StringBuilder(560)
assertEquals(invoicesAfterClose.size(),2)
createMaterializedFrame(arguments,new FrameDescriptor())
getDestroyClosure()
LOGGER.lifecycle(msg.apply())
LOG.debug("Looking for service: " + service + ". Current token is "+ token)
dlg.setNegativeButton(fButtons[0],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,1),callbackId);   } } )
textEditor != null && state instanceof TextEditorState
new Request(picasso,CONTENT_1_URL,0,mock(ImageView.class),null,transformations,null,Type.CONTENT,0,null)
INDEX_VERSION=16
index.getUUID()
Collections.sort(scheduledJobs,njec)
(theme().getValue() == null) || AceThemes.TEXTMATE.equals(theme().getValue())
new ConnectionException(sm.getString("http2Parser.headers.wrongStream",connectionId,Integer.toString(headersCurrentStream),Integer.toString(streamId)),Http2Error.COMPRESSION_ERROR)
sender.waitForClose(1000)
addOrReplace(feedbackPanel)
-1321767651
LOG.error("Cannot create writer for app " + this.applicationId + ". Skip log upload this time. ",e1)
ByteBuffer.allocate(mPreviewWidth * mPreviewHeight * 4)
new IndexWriter(d,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
rats.getConf()
CHECKIN_VERSION=30
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
db.qualityProfiles().activateRule(builtInProfile,rule,ar -> ar.setSeverity(Severity.MINOR))
synchronized (mService) {   mService.mStackSupervisor.startActivityFromRecents(callingPid,callingUid,mTaskId,null); } 
Assert.assertEquals(0,stringNumber)
assertFalse(createFactoryPage.isCreateFactoryButtonEnabled())
-markerHeight
s.charAt(0) == 'z' || s.charAt(0) == 'Z'
Integer id
new GrammaticalRelation(Language.UniversalChinese,"nummod","numeric modifier",MODIFIER,"QP|NP|DP",tregexCompiler,"NP|QP < ( QP  =target << M $++ NN|NP|QP)")
params.get(key)
AtmosphereResponse.newInstance()
unlockForRescale()
MIN_NET_ID=100
logger.debug("Favorite '{}' not found",favorite)
battery.addPowerChecking(64 * MjAPI.MJ,false)
KeyValueHolder<String,Processor>
event.isCancelled()
entry.getValue()
klass.getDeclaredMethodsUnchecked(false,declaredMethods)
proxyHTTPSPort.getText()
String.class
getLogger().debug("Checking " + model.getId() + " for extensions.")
new MaterialDialog.Builder(getActivity()).title(R.string.about).positiveText(R.string.dismiss).content(R.string.about_body,true)
case WRITE_OUT: 
getConversionByClass(value.getClass())
longValue != 0
0f
ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath")
mContext.checkCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())
new Boundary(true)
Assert.assertSame(_ehcache,_ehcachePortalCache.ehcache)
Long.decode(str)
myProject.isDisposed() || !myVirtualFile.isValid()
server.getState()
mWM.removeViewImmediate(mView)
GL20.glUniform3fv(location,v)
compoundResult.isSuccess()
downNode <= myDownIndex
mTarget != null && target == null
sampleFormat != null
StringBuilder buffer=new StringBuilder(sericeCounterName.toString()); 
jobIds == null || jobIds.isEmpty()
BuildRule buildRule
builder.createStructureViewModel(editor)
appBundle != null && appBundle.exists() == false
marshallerCache().context().preloader().syncFuture().listen(new CI1<IgniteInternalFuture<?>>(){   @Override public void apply(  IgniteInternalFuture<?> f){     ctx.marshallerContext().onMarshallerCacheReady(ctx);   } } )
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),createCommandDecoder(),connection,binding.getReadPreference(),transformer(source))
AndroidResourceUtil.findResourceFieldsForValueResource((XmlTag)element,true)
fieldNameMaps.containsKey(parentThing)
_desc(value)
final LongAdder8 cnt=new LongAdder8(); 
assertEquals(7250,peer.getPingTime())
Metadata metadata=cluster.getMetadata(); 
i < 10000000
ContactModel::getTwitterSn
ssid == null || !SSID_PATTERN.matcher(ssid).matches()
si != null && si.username != null && si.username.length() > 0
new GridException("Failed to deserialize task attributes [taskName=" + req.getTaskName() + ", taskClsName="+ req.getTaskClassName()+ ", codeVer="+ req.getUserVersion()+ ", taskClsLdr="+ dep.classLoader()+ ']',e)
model.getProductOptionValidationType()
GradleDistributionLocator createGradleDistributionLocator(){   return new DefaultGradleDistributionLocator(); } 
LOG.warn("Could not parse syslog message. Not further handling.",e)
assertThat(new EmailNotificationsPlugin().getExtensions()).hasSize(7)
buffer.put(indices,offset,count)
MethodCallUtils.isCallToMethod(expression,"java.util.Formatter",null,"format",null) || MethodCallUtils.isCallToMethod(expression,"java.io.Writer",null,"append",null) || MethodCallUtils.isCallToMethod(expression,"com.google.common.base.Preconditions",null,"checkNotNull",null)|| MethodCallUtils.isCallToMethod(expression,"org.hibernate.Session",null,"close")
tryRIforRelationshipsPart(m)
c == Long.class || c == Long.TYPE
element instanceof FakePsiElement
assertEquals(14,md.references().size())
f.isHidden()
new AssertionError("already exists: " + topic)
-819961245
create.fetch(meta().getTables(null,getName(),"%",types),SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR)
new UnsupportedOperationException("Work in progress: DefaultDependencyMetadata is not really a DependencyMetadata")
mesh.getLineWidth() != 1f && context.lineWidth != mesh.getLineWidth()
private void _compareManifestFiles(File expected,File actual) throws IOException {   Manifest expectedManifest=new Manifest(new FileInputStream(expected));   Manifest actualManifest=new Manifest(new FileInputStream(actual));   Attributes expectedAttributes=expectedManifest.getMainAttributes();   Attributes actualAttributes=actualManifest.getMainAttributes();   for (  Object name : expectedAttributes.keySet()) {     if (_ignoredAttributes.contains(String.valueOf(name))) {       continue;     }     String expectedValue=(String)expectedAttributes.get(name);     String actualValue=(String)actualAttributes.get(name);     Assert.assertEquals(expectedValue,actualValue);   } } 
distance(bottomLeft,topLeft)
actionHandler.execute(editor,null,DataManager.getInstance().getDataContext())
originalValue != null && !originalValue.equals("-1")
assertEquals(14,beanCount)
footerRow != null
timeout=1800000
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_INVALIDPASS)
mSelector.setHotspot(x,y)
material.getMaxDurability() < 1
connection.psubscribe(jedisPubSub,patterns)
assertEquals(70008,exchange.getIn().getBody().toString().length())
ptexture=new Texture(this,pixelWidth,pixelHeight,texture.getParameters())
JComponent fragmentComponent=EditorFragmentComponent.createEditorFragmentComponent(uEditor,range.getVcsLine1(),range.getVcsLine2(),false,false); 
cs[0].set(r,_createFrame.real_range * rng.nextDouble())
runTasks & 0x3F
mSurfaceView != null && mSurfaceView.getHolder() != null
JID jid
ReflectionUtils.invokeMethod(generateViewMethod,scaffoldingTemplateGenerator,domainClass,scaffoldedtemplateName,sw)
StringUtil.first(oldDefaultList.getName(),30,true)
Lists.newArrayList(condaExecutable,"create","-p",destinationDir,"-y","python=" + version)
contentType.split("charset=",2)
DateUtils.parseDateStrictly(source,iso8601Patterns)
registerForAllMatchingVersions(level -> UnsupportedFeaturesUtil.raiseHasNoArgsUnderFinally(node,level)," not support this syntax. Raise with no arguments can only be used in an except block",node,null)
new ApiException(ApiException.Type.BAD_TYPE,e)
UIUtil.isActionClick(e,MouseEvent.MOUSE_RELEASED)
mWm.setAppStartingWindow(null,"foo",0,null,null,0,0,0,0,null,false)
mCurrentFirstVisiblePosition >= 0
(opCode & 0x08) != 0
-.12
rootView.getId()
assertEquals(0,ginfo._val.residualDeviance(),1e-3)
StyleConstants.setFontSize(style,13)
metaContact.getDefaultContact(OperationSetBasicInstantMessaging.class)
setDiskPersistent(Boolean.valueOf((String)cacheSettings.get("diskPersistent")))
methodType(Void.TYPE,StringBuilder.class,Request.class,Response.class)
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),false,true,createdBy,reason,comment)
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","two","three")
new MarketOrder(orderType,tradeableAmount,tradableIdentifier,transactionCurrency)
mRefreshView.getBottom() >= mRefreshViewHeight + 20
telephony.isIdle(getOpPackageName())
setHasStableIds(false)
selection.getFiles()
new ExceptionInInitializerError("Unable to access to system bundle")
MainApp.getAccountType(mContext)
homeListView.smoothScrollToPosition(0)
SHOW_ON_APP_LAUNCH=2
smsHeader != null && smsHeader.portAddrs != null
getGpx().getColor()
@Override public final DivideByOnConditionStep and(String sql,QueryPart... parts){   return and(condition(sql,parts)); } 
state.getTypeMapper().mapType(type)
MAX_INDEX_NAME_BYTES=255
operand instanceof PsiLiteralExpression
(getSource().y() + getTarget().y()) / 3f
new ProtoFile("descriptor.proto",null,Arrays.asList("src/test/resources/unittest_import.proto"),NO_STRINGS,NO_TYPES,NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
_log.error(e,e)
new StringBuilder(194)
getIndexes().hasIndex() && OBJECT.equals(mapConfig.getInMemoryFormat())
shard.applyIndexOperationOnReplica(3,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id2",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
JsPeerInfo.create(JsPeer.create(src.getPeer()),src.getDialogTitle(),null,fileUrl,Placeholders.getPlaceholder(src.getPeer().getPeerId()))
textView.getBottom()
logger.debug("[{}]: Websocket error: {}",connection.getHost(),e.getMessage())
fileSystem.renameFile(tempFile,recordsFile,ATOMIC_MOVE,REPLACE_EXISTING)
consumerPort=9123
iter.nextLine()
PersistentTask<P>
/**   * This is  {@link GroovySurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.3.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class GroovySurrogateRegisteredServiceAccessStrategy extends BaseSurrogateRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-3998531629984937388L;   private String groovyScript;   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> principalAttributes){     if (isSurrogateAuthenticationSession(principalAttributes)) {       try {         final Object[] args={principal,principalAttributes,LOGGER};         final Resource resource=ResourceUtils.getResourceFrom(this.groovyScript);         return ScriptingUtils.executeGroovyScript(resource,args,Boolean.class);       }  catch (      final Exception e) {         LOGGER.error(e.getMessage(),e);       }       return false;     }     return super.doPrincipalAttributesAllowServiceAccess(principal,principalAttributes);   } } 
constr.ipadx=5
RegisteredService::getId
mock(ExampleService.class)
DirectoryReader.open(writer)
mCollapseOffset > 0
wizardModel.databaseConnection.contains("localhost") || wizardModel.databaseConnection.contains("127.0.0.1")
return re; 
commandLineConverter == null
new StoreFile(this.fs,linkFilePath,testConf,cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE)
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json"))
return 524288; 
Assert.assertEquals(new InetSocketAddress("RemoteMaster3",defaultPort),masterAddress)
PositiveDurationValidator.class
serializer.serializeInsert(metadata,entity,batches.get(0).getColumns(),batches.get(0).getValues(),batches.get(0).getSubQuery())
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.1100,10.7530,ef),currIdx.findClosest(49.6500,10.3410,ef),73530,1462)
/**   * Represents the formatter for log message which is used in UTs. Message format is: filePath:lineNo:columnNo: message.  * @author Andrei Selkin  */ public class AuditEventUtFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=4;   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final int bufLen=event.getFileName().length() + event.getMessage().length() + LENGTH_OF_ALL_SEPARATORS;     final StringBuilder sb=new StringBuilder(bufLen);     sb.append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     return sb.toString();   } } 
graphStack.push(lockingTx)
DiagnosticType.disabled("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
getMapNearCacheManager(nearCacheMember)
result.setUseBufferedWriter(true)
subscriber.next(String.valueOf(i))
t + 1000
private KeyValueBinding attributeBinding; 
Arrays.asList(MimeTypes.VIDEO_MP4,MimeTypes.VIDEO_WEBM,MimeTypes.VIDEO_H263,MimeTypes.AUDIO_MP4,MimeTypes.AUDIO_MPEG)
((DartRunConfigurationBase)runConfiguration).getRunnerParameters().getDartFileOrDirectory()
this.col=column
new NotifyBuilder(context).whenDone(2)
public ArabicLetterTokenizer create(Reader input){   return new ArabicLetterTokenizer(input); } 
ByteBuffer.allocate(DEFAULT_NET_BUFFER_SIZE)
/**   * Represents a dependency on another Eclipse project.  */ public interface EclipseProjectDependency extends ProjectDependency, HasClasspathAttributes {   /**   * Returns the target of this dependency.  * @return The target project, or null for a dependency on a different build within a composite.  */   HierarchicalEclipseProject getTargetProject();   /**   * Returns the project directory of the target eclipse project.  * @return The target project directory, never null.  * @since 2.14  */   @Incubating File getTargetProjectDirectory();   /**   * Returns the path to use for this project dependency.  */   String getPath();   /**   * Marks this dependency as exported.  * @return whether this dependency needs to be exported.  * @since 2.5  */   boolean isExported(); } 
Slog.d(TAG,"Unable to bind FLP Geofence proxy.")
storeSettings(actionRequest,themeDisplay)
@NonNull Uri uri
location.getAccuracy() > precision
filesToDownload.size() <= 1
method.getReturnType().getName()
loopButton.isActivated()
_buildTemplateWithGradle("simulation-panel-entry","simulator-dependency-management","--dependency-management-enabled")
Messages.getString("BaseStep.SafeMode.Exception.MixingLayout","" + (i + 1),referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
Arrays.asList("jacocoant","sonarqube-ant-task","hsqldb","activemq-all","mina-core","ftplet-api","ftpserver-core")
GL20.glGetUniformiv(program,location,params)
DEFAULT_ROW_FLUSH_BOUNDARY=75000
new OptiqSemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: field " + field + ":"+ " appears on the left side of the UNION at column position: "+ getPositionFromInternalName(lInfo.getInternalName())+ ", and on the right side of the UNION at column position: "+ getPositionFromInternalName(rInfo.getInternalName())+ ". Column positions should match for a UNION"))
StringUtils.isEmpty(value) ? false : Boolean.parseBoolean(value)
!mTranslucentStatusBar || mTranslucentActionBarCompatibility
AnticompactionTask.class
/**   * set if this item is selectable  * @param selectable true if this item is selectable  * @return  */ @Override public Item withSelectable(boolean selectable){   this.mSelectable=selectable;   return (T)this; } 
Long.parseLong(this.getOptional("kylin.server.sequence-sql.expire-time","86400000"))
waitForDownWithWait(CCMBridge.IP_PREFIX + '2',c.cluster,10)
System.arraycopy(objectArray,0,newObjectArray,0,4)
prefix == null
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(15)
new ChooseCallAccountPopupMenu(tree,detail.getAddress(),providers)
!this.isStompConnected || conn == null
Boolean.parseBoolean(this.getOptional("kylin.query.security.table-acl-enabled","true"))
logger.info("--> checking that _current no longer returns the snapshot")
materialScrollBar.addIndicator(new CustomIndicator(this),true)
public KeepWordFilter create(TokenStream input){   return new KeepWordFilter(input,words,ignoreCase); } 
TypeMismatchException e
old.getScore()
TicketGrantingTicket.class
result=60
src.copy(src.getConfig(),true)
mappingData.wrapperPath.setString("")
String message
fragmentEntryPersistence.countByG_FCI(groupId,fragmentCollectionId)
(newContent == null) || content.equals(newContent)
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,paging.asPostParameterList(),true))
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/ImportsFromObjectNoDuplicates.kt")
ImmutableSet.of("superconsole","thread_line_output_max_columns")
copy.add(name)
bop.getBindingOutput()
Queue<long[]>
target.toString()
obj != null
i >= 1000
HTREEMAP_DIR_SHIFT=6
executeSimpleCommand(STLS_COMMAND)
e2.addSuppressed(e1)
new EclipseWtpmodulesWriter(getLog()).write(outputDir,project,reactorArtifacts,sourceDirs,localRepository)
n.getValue().getKey() == null
Criterion.and(MetadataCriteria.withKey(TagMetadata.KEY),Metadata.DELETION_DATE.eq(0),TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.in(tagUuids))
logger.debug("policy [" + policy + "] for index ["+ index.getName()+ "] failed on step ["+ currentStepKey+ "]. Moving to ERROR step.",e)
CollectionUtils.filter(filteredUpSales,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((UpSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
VMDebug.attachAgent(library + "=" + options,classLoader)
case WRITE_ERR: 
new TableView(shell,SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI,cPreviewSteps,executedSteps.size(),false,null,props)
MAGIC=0xCAFEBABE
Time.getDescription(milliseconds,approximate)
Localization.lang("Look up document identifier")
theFeatures.muli(maxRange - minRange + Nd4j.EPS_THRESHOLD)
row == null || row.size() == 0
app.getSettings().SHOW_CAMERAS
FLAG_USE_MAGNIFIER=true
return myDataPack; 
inserter.close()
IndexReader.open(ramDir)
new StringRepresentation(ret.toString(),MediaType.APPLICATION_JSON)
assertEquals("Incorrect number of commits in history",myRevisions.size(),revisions.size())
new CsvFilter(lines)
U
DataManager.getInstance().getDataContext(editor.getComponent())
EnumMap<K,? extends V>
size=6
tablelist == null || tablelist.getItems() == null
vb.getData().limit()
new HostAddress(host,port)
mavenRepoLocal == null && activeProfile != null
!Character.isLetter((char)c) && (c != '_') && (c != '-')
port=8081
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_DISABLED,0,null,false)
new DefaultPropertyNamePatternsMatcher(delimiters,"aaa","bbbb","ccccc")
LOG.error("An exception was caught while attempting to handle an activity generated exception",e)
connections.get(target)
services.add(ClassLoaderScope.class,baseScope)
ChannelBufferHolders.messageBuffer(queue)
new Button("submit"){   private static final long serialVersionUID=4149741045073254811L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setCoverageAccess((CoverageAccessInfo)coverageModel.getObject());     gs.save(global);     doReturn();   } } 
mgr.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN,new UserHandle(mUserHandle))
near.getAndRemove(1)
obj.getFileName()
itemMatches(target,itemStack,false)
data == null || method.toLowerCase().equals("get") || method.toLowerCase().equals("head")
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000),0).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
((getAdditionalInformation() != null) && ((database instanceof PostgresDatabase) || (database instanceof OracleDatabase))) || (database instanceof HsqlDatabase) || (database instanceof H2Database)
Set<String>
pendingCommit.createBackupSegmentInfos(true)
poiParentCategory != null && poiParentCategory.length() > 0
JMeterUtils.getPropDefault("backend_graphite.send_interval",1)
files != null && changesList.isEmpty()
null != m_isJUnit && !m_isJUnit.equals(XmlSuite.DEFAULT_JUNIT)
b.entrySet()
AbstractInstrumenter instrumenter
RIGHT_ID=3533
mStorageManager.triggerMediaScan(file.getStoragePath())
status.getRole()
PsiTreeUtil.isAncestor(elsePart,e,false)
log.error("Unable to save data for operation '" + op + "'",ex)
statement.addPrimaryKeyColumn(column.getName(),database.getColumnType(column.getType(),isAutoIncrement),constraints.getPrimaryKeyName())
first != null && first.getIndexInFile() == j - 2
plan0.getPriceListName().equals(plan1.getPriceListName()) && plan0.getProductName().equals(plan1.getProductName()) && plan0.getBillingPeriod() == plan1.getBillingPeriod()
createScopePanel(true)
_buildTemplateWithGradle("service","service-dependency-management","--service","com.liferay.portal.kernel.events.LifecycleAction","--dependency-management-enabled")
charArray.length * 6
sendKeyUp()
/**   * Loads the import control file from a file.  * @param uri the uri of the file to load.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ public static ImportControl load(final URI uri) throws CheckstyleException {   final InputStream inputStream;   try {     inputStream=uri.toURL().openStream();   }  catch (  final MalformedURLException ex) {     throw new CheckstyleException("syntax error in url " + uri,ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to find " + uri,ex);   }   final InputSource source=new InputSource(inputStream);   return load(source,uri); } 
visible=true
actor.addListener(listener)
DvcsUtil.guessRepositoryForFile(project,getRepositoryManager(project),DvcsUtil.getSelectedFile(project),HgProjectSettings.getInstance(project).getRecentRootPath())
pathParts[0] != null && pathParts[0].length() > 1
activityPointList.size() - 1
proxyHTTPSServer.getText()
FloatingReadNode result=graph.add(new FloatingReadNode(klassOop,null,LocationNode.create(LocationNode.FINAL_LOCATION,CiKind.Int,config.klassModifierFlagsOffset,graph),StampFactory.forKind(CiKind.Int))); 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedWouldBeOverwrittenDetector.getFiles(),"rebase",null)
logger.error("Failed to load config file {}, falling back on default config",configPath)
analysis.primaryKeyLiterals() != null && analysis.primaryKeyLiterals().size() > 1
case USER_ID_CONFIRMED: 
startMediaTimeState != START_NOT_SET
_connector.getResponse("METHOD /foo HTTP/9\n\n")
logger.warn("Couldn't read file: " + file)
assertLeftRightCategory(5,category1c)
searchContext & UsageSearchContext.IN_PLAIN_TEXT
mMediaRouter.addCallback(MediaRouter.ROUTE_TYPE_REMOTE_DISPLAY,mMediaRouterCallback,MediaRouter.CALLBACK_FLAG_PASSIVE_DISCOVERY)
CacheDataRow row=dataTree.findOne(new SearchRow(key)); 
Void ignored
Long.parseLong(strings[i])
createSequence(crs,(Point)data.get(i),(Point)data.get(i))
inputChars == null
checkArgument(partitionColumns.size() == values.size(),"Partition value count does not match the partition column count")
Throwable e
setMode(RIGHT)
new MediaSize("UNKNOWN_LANDSCAPE","android",R.string.mediasize_unknown_landscape,Integer.MAX_VALUE,1)
total()
position < -1f || position > 1f ? 0f : 1f - (scale - 1f)
add(food(10),TUNA,CRAB_MEAT,CHOPPED_TUNA,COOKED_CHOMPY)
new MockNode(nodeSettings,Version.CURRENT,Arrays.asList(ShieldPlugin.class,licensePluginClass()))
options.put(engineKey,System.getProperty(key))
Map<String,Object>
Object[]
doSubstitute(TypeSubstitutor.EMPTY,newOwner,modality,visibility,isOperator(),isInfix(),isExternal(),isInline(),isTailrec(),hasStableParameterNames(),hasSynthesizedParameterNames(),null,copyOverrides,kind)
msg.containsKey(SECURITY_PROCESSED) || isGET(msg) || msg.getExchange() == null
format.width * format.height <= MediaCodecUtil.maxH264DecodableFrameSize()
deploymentUnit.getParent() != null
StringUtil.equalsIgnoreCase(packageName,filter)
loadBeanDefinitions("mvc-config-content-negotiation-manager.xml",15)
new IndexWriter(indexDir,ANALYZER,!add,IndexWriter.MaxFieldLength.LIMITED)
new SystemAudioActionFromTv(tv(),mAvrAddress,true,null)
logger.trace("{} error while performing pre synced flush on [{}], skipping",exp,shardId,shard)
recoveryDescs.putIfAbsent(id,recovery=new GridNioRecoveryDescriptor(queueLimit,node,log))
new AmazfitCorFWHelper(uri,context)
layout.createFolder(BOTTOM_BOTTOM_LEFT,IPageLayout.BOTTOM,0.7f,FOLDER_NAVIGATION)
LOGGER.error(message,e)
Predicates.or(Predicates.containsPattern("storm-compatibility-examples.src.java"),Predicates.containsPattern("storm-compatibility.src.java"),Predicates.containsPattern("tools/test/LcovMerger"),Predicates.containsPattern("contrib"),Predicates.containsPattern("external"))
SettingsNewActivity.class
mDownloadXtraDataPending=true
CryptoUtils.loadCertificate(is,new char[]{'p','a','s','s','w','o','r','d'},"morpit",null)
chatButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_PRESSED))
minPriority == null ? 0 : minPriority
public AfterWatermarkEarlyAndLate withLateFirings(OnceTrigger lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
IllegalArgumentException.class
newValue.getReceivedNumber() >= Integer.valueOf(SettingUtility.getMsgCount())
(uptime - days) * 24
InheritableThreadLocal<Map<String,CacheEntry>>
name.isEmpty() || entries == null
Assert.fail("createDirectory was expected to fail with FileAlreadyExistsException")
case 14: 
!u.equals(user)
s1.isStrictlyNegative()
selector.select(10)
decoder.readNullableString()
val=2
in.getAttribute("name")
ts.getJobId() == jobId
type != EventType.QUERY && type != EventType.INSERT && type != EventType.UPDATE && type != EventType.DELETE
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage())
curThread instanceof IgniteDiscoveryThread || (curThread != null && curThread.isForbiddenToRequestBinaryMetadata())
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_FRIST),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_FRIST)),AccountType.Normal,200_000_000_000L)
size=500
id=16506
!client && !disabled && !tribeNodeClient&& complianceConfig.logExternalConfig()
String.format(Locale.US,"(\\d{0,%d})(\\.\\d{1,%d})?",integer,fraction)
final Exception x
info == null || info.transactionStatus == null
columns.size() == 1 && expression.getType().getValueType() != Value.ROW
!TextUtils.isEmpty(library.getLibraryWebsite()) || !TextUtils.isEmpty(library.getRepositoryLink())
mInjector.getUserManager().removeUserEvenWhenDisallowed(userId)
psiTypeParameter.getName()
this.connectTo(vertex,null,null,-1,-1,DistributionPattern.BIPARTITE,true)
dataOffset >= data.length
testOffset=4875454L
super(1); 
is(204)
new ProtoFile("search.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
assertThat(client).replicationController("fabric8-console-controller").hasName("fabric8-console-controller")
storeRepo.getAllNodeStores()
((GrReferenceList)e).getReferenceElementsGroovy()
convertImportsToSingleLine=false
calendar.set(Calendar.YEAR,2030)
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_JUMP_TO,true)
dockerClient.waitContainerCmd(container.getId())
response.getRawStatusCode()
new StreamException(sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),Http2Error.PROTOCOL_ERROR,streamId)
expiresOn.getTime()
mService.disableEphemeralNetwork(SSID)
targetElement != null && targetElement != file
((aLatitudeE6 < this.mLatNorthE6) && (aLatitudeE6 > this.mLatSouthE6)) && ((aLongitudeE6 < this.mLonEastE6) && (aLongitudeE6 > this.mLonWestE6))
audioSink.getId()
args[4]
list != null && list.getTextLength() > 0
public static IdeaTitledBorder createTitledBorderBoldWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),18,1,new Insets(5,0,10,0)); } 
input.getName().toLowerCase().startsWith(partialName.toLowerCase())
zip(srcPath,zipPath,false)
new LinkedHashMap()
injectionConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,context,managedReferenceFactoryValue)
TEST_UTIL.getAdmin()
!swipeVertical
members == null || members.isEmpty()
new IOException("should execute connector.connect() first")
!rrdFile.exists() || rrdFile.length() == 0
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
mRefreshView.getBottom() >= mRefreshViewHeight
final StatefulSession workingMemory=ruleBase.newStatefulSession(); 
case UPGRADE_TASKS: 
id=24
syncedFolderItem.isEnabled()
IOException ex
twitter1.getRetweets(1021608606934822912L)
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),OsProbe.getInstance().osStats(),ProcessProbe.getInstance().processStats(),JvmStats.jvmStats(),new ThreadPoolStats(threadPoolStats),new FsInfo(0,pathInfo),null,null,null,null,null,null)
Constant.isDailyBuild(progVersionStr)
IoUtils.safeClose(connection)
new RuntimeException("Unable to load lock file",e)
proxyRequest.getRegion()
BorderFactory.createEmptyBorder(5,10,0,0)
src.getPlatformKind() == Kind.Int || src.getPlatformKind() == Kind.Char || src.getPlatformKind() == Kind.Short || src.getPlatformKind() == Kind.Byte
logger.debug("reading file from {}, repairedAt = {}",session.peer,repairedAt)
@Override public String call() throws Exception {   if (distribution.getBaseName() == null || distribution.getBaseName().equals("")) {     throw new GradleException("Distribution baseName must not be null or empty! Check your configuration of the distribution plugin.");   }   return distribution.getBaseName(); } 
super.getRealtimeSegmentFlushSize(useLlc) * 100
new TypeList.Explicit(enterTypes)
commitBatchSize=100
new SQLException("Unknown error","00000",-1)
new PictureSelectDialog()
docsInSegment.get() >= 7
timeout / 50
saveAnswersForCurrentScreen(complete)
original.getScreenName().endsWith("new") || original.getName().endsWith("new")
taskFile == null || taskFile.getAnswerPlaceholders().isEmpty()
new WrappedEpoxyModelClickListener(this,listener)
GL.glDrawArrays(mode,first,count)
logger.warn("Operation failed for accountId='{}' accountExternalKey='{}' error='{}'",paymentStateContext.getAccount().getId(),paymentStateContext.getAccount().getExternalKey(),e.getMessage())
c.writeAndFlush("[" + ctx.channel().remoteAddress() + "] "+ msg+ '\n')
(PrivateDataProvider)privateDataProviders.get(key)
resultEndpoint.assertIsSatisfied()
pubSubDomain=false
32 + (int)(10000 * new Random().nextDouble())
GL.glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height)
new Tag(line,column,text,on,this)
ev.mDataSamples.length >= ND
getEditor().getDocument().addDocumentListener(this,myEditor.getDisposable())
addSkyNodes(renderGraph)
final String clientSecret="your client secret"; 
5L * 60 * 1000
!detectionHandler.isErrorDetected()
i - sizeDifference >= 0
toCal.get(Calendar.ERA)
view != null && view.getParent() == this
type.toLowerCase(ENGLISH)
mLayoutParams != null && mLayoutParams.width >= 0
this.setBuffer(VertexBuffer.Type.Index,2,indices)
Log.d(TAG,"Got null argument for a signing keyset, ignoring!")
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
new PeepholeSubstituteAlternateSyntax(false)
getConfig().getBoolean(SPIDER_PARSE_SITEMAP_XML,true)
LOG.debug("Exception: ",e)
++polled < maxResults
Mockito.any(WorkerNetAddress.class)
FileSystem.getLocal(conf).delete(localScratchDir,true)
prop.getParamValue()
maxMergeAtOnceExplicit != TieredMergePolicyProvider.this.maxMergeAtOnceExplicit
TurnPathHelper.getBitmapFromTurnType(ctx.getResources(),bitmapCache,TurnType.C,0,0,TurnPathHelper.FIRST_TURN,scaleCoefficient / miniCoeff,leftSide)
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0 && template.getSegmentsCount() == 0
new AsyncTask<Object,Object,Long>(){   @Override protected Long doInBackground(  Object... objects){     return DatabaseHelper.getInstance(context).getHostCount(rule.info.applicationInfo.uid,false);   }   @Override protected void onPostExecute(  Long hosts){     rule.hosts=hosts;     notifyDataSetChanged();   } } .execute()
setBackground(null)
!requestsPolicy.isValid(count)
-13276483
this(parameters,new StringBuilder(),true); 
!firstIteration
myDisposed
config.getMapConfig(mapName).setTimeToLiveSeconds(10)
new StringBuilder(740)
randomValueOtherThan(maxDocs,() -> randomNonNegativeLong())
log.warn(sm.getString("contextConfig.role.auth",roles[j]))
(short)0777
keyPattern.getDefaultValue() == null || keyPattern.getDefaultValue().isEmpty()
myProblemElements.isEmpty()
Lists.newArrayList("timestamp")
EvictionScheduler.class
this.setRemoveOperationIdPrefix(Boolean.valueOf(additionalProperties.get(CodegenConstants.REMOVE_OPERATION_ID_PREFIX).toString()))
public static IdeaTitledBorder createTitledBorderBoldWithoutIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont().deriveFont(Font.BOLD),UIUtil.getBorderColor(),0,1,new Insets(5,0,10,0)); } 
DEFAULT_MAX_UNION_SIZE=30
!returnElements.isEmpty()
final DirectoryReader r=w.getReader(); 
new SimpleMongoDbFactory(mongo(),getDatabaseName(),credentials)
block.blockMaterial.isToolNotRequired()
unsafe.compareAndExchangeObject(container,objectOffset,container,dummyValue)
ColorProperties.getColor("inactiveTextColor")
greaterThanOrEqualTo(1)
final ActivityStack pinnedStack=createStackForShouldBeVisibleTest(mDefaultDisplay,WINDOWING_MODE_PINNED,ACTIVITY_TYPE_STANDARD,true); 
frontendHandler.wait()
probability(LIKELY_PROBABILITY,hintHub.equal(objectHub))
factory.get(mBodyClass,NO_ANNOTATIONS,retrofit)
recall(classLabel)
new NoSuchMethodError("indexOf is not supported on RealmResults")
processAssignment(substitutor.substitute(targetType),initializer,parameter.getNameIdentifierGroovy(),parameter)
DarkIconDispatcher.getTint(mTintArea,mWifiActivity,mIconTint)
sendGetBlockHashes()
evaluate("value = read_config('foo', 'bar')").moduleLookup("value")
longValue() & 0xFFFF
BufferUtil.zeroBuffer(1)
formsFound=false
rs.getInt(1) > 0
proposalController.processProposals()
((Activity)getContext()).finish()
AbstractAppleNativeTargetBuildRule buildRule
new UnsupportedOperationException(String.format("Cannot apply plugin of class '%s' to '%s' (class: %s) as it is not a Project",pluginClass.getName(),target.toString(),target.getClass().getName()))
temp_descs.get(j)
LocalDateTimeUtils.getLocalDateTimeClass()
/**   * Returns the next pseudorandom  {@link ArrayValue} of duration elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of duration elements.  */ public DurationArray nextDurationArray(){   return Values.durationArray(nextDurationArrayRaw(minArray(),maxArray())); } 
new NotSupportedException("getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3")
amp*=0.9
moveInputMethodWindowsIfNeededLocked(false) || displayed
logger.warn("Writing large partition {}/{}:{} ({}) to sstable {}",metadata.ksName,metadata.cfName,keyString,FBUtilities.prettyPrintMemory(rowSize),getFilename())
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),context)
BIG_ENOUGH_INT + 0.99999999
Assert.assertEquals(1630,md.getMetrics().size())
"SELECT id, factId, combinedDue FROM cards WHERE type = 1 AND combinedDue > " + mDueCutoff + " ORDER BY combinedDue LIMIT "+ mQueueLimit
V2=true
0 * ONE_HOUR
DirectoryReader newReader; 
new ThreadPool(getClass().getName())
ctx.isSwapOrOffheapEnabled()
"http".equals(protocol) || "ws".equals(protocol)
props.setProperty(JdbcConnectionParams.PROPERTY_URL,saveUrl)
hsbPolicy=HORIZONTAL_SCROLLBAR_ALWAYS
{BOOLEAN,BOOLEAN_ARRAY,DATE,DATE_ARRAY,DOUBLE,DOUBLE_ARRAY,FLOAT,FLOAT_ARRAY,INTEGER,INTEGER_ARRAY,LONG,LONG_ARRAY,NUMBER,NUMBER_ARRAY,SHORT,SHORT_ARRAY,STRING,STRING_ARRAY,STRING_ARRAY_LOCALIZED,STRING_LOCALIZED}
this.reader.comparator.compare(reader.blockIndex.blockKeys[b],0,reader.blockIndex.blockKeys[b].length,key,offset,length)
conn.getResponseCode() == HttpURLConnection.HTTP_OK || conn.getResponseCode() == HttpURLConnection.HTTP_BAD_REQUEST
needRefresh || !isAllSized()
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SELECT_SPLASH_SCREEN,true)
mContext.startActivityAsUser(intent,null,UserHandle.CURRENT)
ENERGY_COUNTER=5
ServerError.getCode(res)
new DefaultPropertyNamePatternsMatcher(TARGET_NAME_DELIMITERS,this.targetName)
new ConstructorInjectionComponentAdapter(implClass,implClass,null,true)
pluginClasspathUrl.toString()
client.getData()
new LocalizationEntity(_packagePath,_apiPackagePath,_portletName,_portletShortName,_name.concat("Localization"),_humanName.concat(" localization"),_table.concat("Localization"),_alias.concat("Localization"),persistenceClass,_dataSource,_sessionFactory,_txManager,_cacheEnabled,_dynamicUpdateEnabled,_deprecated,Collections.singletonList(entityLocalizationIDColumn),regularColList,Collections.<EntityColumn>emptyList(),Collections.<EntityColumn>emptyList(),columnList,finderList,Collections.singletonList(this),_txRequiredList)
MAX_MODULES=97
timeout=10000
wrapped.equals(pongMessageHandler)
this.optimizedDispatch || isSlave()
TIME_SCALE=600
SSL.getErrorString(stackError)
newHeight - BORDER_THICKNESS
Validator.isNotNull(PropsValues.USERS_PROFILE_FRIENDLY_URL)
node1.isEquivalentTo(node1)
isInitialized() && lastFilterIndex == -1
TopAndRecentlyPlayedTracksLoader.getTopTracks(getApplicationContext())
new Window(window,windowSize,begin,end)
logger.warn("license [{}] - invalid",license.uid())
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Cluster.DoesNotExists.Message",clusterSchemaName)
lexer.token() == (Token.SELECT) || lexer.token() == (Token.SEL)
printType(out,type)
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_configuration,_templateContextHelper,false)
parent instanceof AppWidgetHostView || parent == null
preparedStatement.setNCharacterStream(paramIndex,tmpReader)
items[24]
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(1,Duration.ofMillis(100),Duration.ofMillis(2000),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 1/1").hasCause(exception))
rightExpression == null || rightExpression instanceof PyBinaryExpression || node.getLeftExpression() instanceof PyBinaryExpression
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } )
versionDeterminer.getGccMetaData(candidate,Collections.<String>emptyList())
skipDoc != 0 && skipDoc >= doc
mock(IMethods.class)
private static HeadlessEnvironment env; 
/**   * Created by Marcin on 2015-12-19.  */ public class Chip extends LinearLayout {   private ImageView icon;   private TextView title;   private ImageView close;   private OnRemoveListener onRemoveListener; public interface OnRemoveListener {     void onDismiss();   }   public Chip(  Context context){     super(context,null,R.attr.carbon_chipStyle);     initChip(null,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs){     super(context,attrs,R.attr.carbon_chipStyle);     initChip(attrs,R.attr.carbon_chipStyle);   }   public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr){     super(context,attrs,defStyleAttr);     initChip(attrs,defStyleAttr);   }   @TargetApi(Build.VERSION_CODES.LOLLIPOP) public Chip(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){     super(context,attrs,defStyleAttr,defStyleRes);     initChip(attrs,defStyleAttr);   }   private void initChip(  AttributeSet attrs,  int defStyleAttr){     inflate(getContext(),R.layout.carbon_chip,this);     title=(TextView)findViewById(R.id.carbon_chipText);     icon=(ImageView)findViewById(R.id.carbon_chipIcon);     close=(ImageView)findViewById(R.id.carbon_chipClose);     close.setOnClickListener(new OnClickListener(){       @Override public void onClick(      View v){         if (onRemoveListener != null)         onRemoveListener.onDismiss();       }     } );     if (attrs != null) {       TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.Chip,defStyleAttr,0);       setCornerRadius((int)a.getDimension(R.styleable.Chip_carbon_cornerRadius,0));       setText(a.getString(R.styleable.Chip_android_text));       int iconRes=a.getResourceId(R.styleable.Chip_carbon_icon,0);       if (iconRes != 0) {         setIcon(iconRes);       }  else {         setIconVisible(false);       }       int color=a.getColor(R.styleable.Chip_android_background,0);       setBackgroundColor(color);       a.recycle();       Carbon.initElevation(this,attrs,defStyleAttr);     }   }   public void setText(  String text){     if (text != null) {       title.setText(text);       title.setVisibility(View.VISIBLE);     }  else {       title.setVisibility(View.GONE);     }   }   public void setText(  int resId){     setText(getResources().getString(resId));   }   public String getText(){     return (String)title.getText();   }   public View getTitleView(){     return title;   }   public void setIcon(  int iconRes){     icon.setImageResource(iconRes);     setIconVisible(iconRes != 0);   }   public void setIcon(  Drawable drawable){     icon.setImageDrawable(drawable);     setIconVisible(drawable != null);   }   public void setIcon(  Bitmap bitmap){     icon.setImageBitmap(bitmap);     setIconVisible(bitmap != null);   }   public Drawable getIcon(){     return icon.getDrawable();   }   public View getIconView(){     return icon;   }   public void setIconVisible(  boolean visible){     icon.setVisibility(visible ? VISIBLE : GONE);     setPadding(visible ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingTop(),getPaddingRight(),getPaddingBottom());   }   public void setRemovable(  boolean removable){     close.setVisibility(removable ? VISIBLE : GONE);     setPadding(getPaddingLeft(),getPaddingTop(),removable ? 0 : (int)getResources().getDimension(R.dimen.carbon_chipPadding),getPaddingBottom());   }   public boolean isRemovable(){     return close.getVisibility() == VISIBLE;   }   public void setOnRemoveListener(  OnRemoveListener onRemoveListener){     this.onRemoveListener=onRemoveListener;   } } 
IndexReader.open(userindex)
CollectionItemInfo.obtain(position,1,0,1,isHeading,isSelected)
LOGGER.warn("Could not execute delete",ex)
new GenericDynamicProperty(MODEL_AND_VIEW_PROPERTY,ModelAndView.class,null,false)
Collection<T>
Assert.assertFalse(provider.checkValid("SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"))
_log.warn(sb.toString())
mAppToken.isVisible()
new LinkedList<>()
onCreateView(context,appWidgetId,appWidget)
typeInfoList[type.ordinal()].toArray(new BiomeGenBase[0])
ENABLED.get()
FileUtils.getFilesDir(targetContext,"test-screenshots")
inverseCopy.set(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33)
((ExecutorService)executor).isTerminated()
new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())
id=38
USER_UFS_DELEGATION_ENABLED(Name.USER_UFS_DELEGATION_ENABLED,true)
executeRunnableDismissingKeyguard(runnable,null,false,false)
args.putInt(ProgressScene.KEY_PAGE,result2.page)
mContext.getString(R.string.branded_monitoring_description_app_personal,primaryVpn)
type.equalsIgnoreCase("boolean") || type.equalsIgnoreCase("bool")
ex.getLocalizedMessage().equals("no source files") || ex.getLocalizedMessage().equals("error: no source files")
@InputIntMethodAnnotation(-44)
settings.getInteger(Keys.git.packedGitOpenFiles,cfg.getPackedGitOpenFiles())
Assert.assertEquals(expected,result)
new ModelNode().set(17500L)
serverId >= 0
o2.getPriority()
Integer.parseInt(options.getMaxKeys())
return mAppearingDelay; 
ProxyHelper.createProxy(endpoint,false,ISay.class)
type != null
new RedissonSession(keyPrefix)
new FileStructurePresenter(view,javaNavigationService,context,editorAgent)
!algo.equals(alloc.algo)
rootReference.root.isComplete()
line < 0
mProfileCursor == null || mProfileCursor.getCount() == 0
id=10997
new SegmentReader(infos.info(i),newReaders[i].core)
new DashboardServiceImpl(mongoRule.getMongoConnection(),dashboardWidgetCreator)
out.writeInt(this.connectionAddress.getPort())
GL11.glGetTexParameterfv(target,pname,params)
NODE_START_CHECK_LIMIT=15
new FsInfo(0,null,pathInfo)
boundary != null && boundary.getCenterPoint() != null
atLeast(100)
row.getInt(6)
Arrays.asList("Hidschāb/S","Dvořák/S","Erdoğan/S","Ångström","µg","µl","µm","'Ndrangheta","McDonald's","V&D","P&O","C&A","S&P")
mObsoleteAgents.remove(info)
target.setField(0,edge)
phys.sync()
new Error("failure")
makeInteractions(test,false,InteractionPair.generatePairwiseInteractionsFromList(interactionIndexes),true,true,false)
s2.isUnsubscribed()
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
is(true)
modified | f.updateField()
@Override public void put(@Nonnull SchedulerQueryContext query) throws OutOfCapacityException {   Preconditions.checkNotNull(query);   queueLock.lock();   String groupName=groupSelector.getSchedulerGroupName(query);   try {     SchedulerGroup groupContext=getOrCreateGroupContext(groupName);     checkGroupHasCapacity(groupContext);     query.setSchedulerGroupContext(groupContext);     groupContext.addLast(query);     queryReaderCondition.signal();   }   finally {     queueLock.unlock();   } } 
LAST_VERSION=1001
Flux.from(publisher).handle((message,sink) -> sink.next(send(message))).onErrorContinue()
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING,Binder.getCallingUserHandle())
accountSettings.isSynchronization() || SettingsManager.isSyncAllAccounts()
o.getRate()
case UNKNOWN: 
35 + (PersistentHashMapValueStorage.COMPRESSION_ENABLED ? 1 : 0)
modelNode.toString()
PermanentGraph<Id>
snapshot != null && isForPlayback
colors.getThemeAttributeId(i,0)
optimize()
grid.context().cache().dynamicDestroyCache(cache.getName(),true,true,false)
logger.info(String.format("Submitting %s metric for metric emission pool",metric.getName()))
treePrev.getTextLength() == 0 && !treePrev.getElementType().isLeftBound()
list.add(0,parameter)
mService.mDisplayContents.valueAt(displayNdx)
new ProtoFile("exotic.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
PipelineLabel.create(labelTemplate)
(Compound)locationStrategy
(portletId == null) || !portletId.startsWith(PortletKeys.WIKI_DISPLAY)
parcel.writeString(mViewIdResourceName)
assertEquals(4,ti.nrOfInvocations)
logger.trace("NODE {}: App version requested but Version class not supported",this.getNodeId())
this.gatewayDelegate.setReplyChannel(replyChannel)
assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
View newView; 
new GenericAggregationFunction(name,inputTypes,intermediateType,outputType,true,aggregationAnnotation.approximate(),factory)
List<DelayedEntry>
latch.await(25,TimeUnit.SECONDS)
!mgr.isToolWindowRegistered(((ToolWindowImpl)myWindow).getId())
w.unlock()
new NativeAllocationRegistry(Bitmap.class.getClassLoader(),nativeGetNativeFinalizer(),nativeSize)
Collection.class
Timber.v(negativeResponseFromNewToken,"Authentication exception for new token, permanent error assumed")
activityOptions != null && activityOptions.getAnimationType() == ActivityOptions.ANIM_SCENE_TRANSITION
storeField(field,isAttributeExpression,pexp,current,visitor,receiver.getData())
shard.idCache().onRemoval(readerCache.sizeInBytes())
IRON_SWORD(267,1,250)
!annotations.isEmpty()
List<BottomEntity>
isPut(request)
Slog.e(TAG,"Starting rect for task: " + taskId + " requested, but not available",new Throwable())
volume.getMtpReserveSpace() * 1024L * 1024L
logLine <= 0
policyResources.stream()
verify(mWifiService).stopLocalOnlyHotspot(TEST_PACKAGE_NAME)
T v
isDoubleA && isIntB
IDLE_TIMEOUT_MS=240000
"Python packaging tools and " + frameworkName + " will be installed on the selected interpreter"
model == null
tfs.createFile(new TachyonURI("/root/testFile1"))
file.getPath()
st.setNCharacterStream(index,characterStream.asReader(),characterStream.getLength())
args.add(mActivity)
"Surface(native-token=" + mSurfaceControl + ")"
packetId == 0x18 && !BungeeCord.getInstance().getConfig().isIpForward()
maxWidth > 0 && fm.stringWidth(fullText) > maxWidth
cacheConfig.isUseCache()
new SourceMapParseException("Unexpected number of values for entry:" + entryValues)
kl.getAvailableKiosks()
mockResultSet.getInt(1)
Resources.getApplicationProperty("defaultGroupName")
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
List<Number>
choices.size()
typesToMatch.length > 1
amenity.getName(preferredLanguage)
AsyncHttpClientConfig.class
new ServerData("Command Line",host + ":" + port,false)
SESSIONS_ROOM_AFTER(412,"sessions/room/*/after/*",ScheduleContract.Sessions.CONTENT_TYPE_ID,false,null)
new KettleException("There was an error during transformation split",e)
this.spiceServiceListenerSet.remove(spiceServiceServiceListener)
o2.getParameterTypes()
UpgradeStepRegistrator.class
isBetween(10500,12000,alt.getDistance())
public class PrivateKeyJwsSignatureProvider implements JwsSignatureProvider {   private PrivateKey key;   private SecureRandom random;   private AlgorithmParameterSpec signatureSpec;   public PrivateKeyJwsSignatureProvider(  PrivateKey key){     this(key,null);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  AlgorithmParameterSpec spec){     this(key,null,spec);   }   public PrivateKeyJwsSignatureProvider(  PrivateKey key,  SecureRandom random,  AlgorithmParameterSpec spec){     this.key=key;     this.random=random;     this.signatureSpec=spec;   }   @Override public byte[] sign(  JwtHeaders headers,  String unsignedText){     try {       return CryptoUtils.signData(unsignedText.getBytes("UTF-8"),key,Algorithm.toJavaName(headers.getAlgorithm()),random,signatureSpec);     }  catch (    Exception ex) {       throw new SecurityException(ex);     }   } } 
val & 0xFFFFFFFFL
user instanceof String
refreshList(true)
LOG.debug("Retrieving location for state={} of job={} from the cache.",queryableStateName,jobId)
LOG.trace("data:" + StringUtils.byteToHexString(data))
this.registry.getValue().removeXAResourceRecovery(recovery)
getEndPoint().tryFillInterested(_blockingReadCallback)
new KsqlEngine(kafkaTopicClient,schemaRegistryClientFactory,clientSupplier,metaStore,ksqlConfig,adminClient)
5 * Bytes.SIZEOF_BOOLEAN
convert(pkgAnnotation)
new CompletionPhase.AutoPopupAlarm(true,hostEditor)
connection.remote().incrementAndGetNextStreamId()
__logger.warn("Unable to set 'this.bundle.install' " + " for the bundle " + bundle.getSymbolicName(),t)
buildTools.isPresent()
motherTongue.getShortName()
responseHeaderRegex == null || responseHeaderRegex.length() == 0
activity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,fragment,FirstUsageWizardFragment.TAG).commitAllowingStateLoss()
FUNCTION4=14
logger.fine("Normalizing")
lookup="java:/topic/myAwesomeTopic"
val == null || fetch(obj.getClass(),Cnd.where(mf.getName(),"=",val)) == null
_log.debug("Skipping undecodable parameter " + param,iae)
CvsVfsUtil.findFileByIoFile(targetFile)
layer1.initializer().numParams(c)
@Override public T dependsOn(Map<String,?> attributes,Module module){   backingModule.dependsOn(attributes,module);   return t(); } 
getNullDialog()
AtmosphereResourceLifecycleInterceptor.class
_wsum > 0
TokenSet.create(JetNodeTypes.BLOCK,JetNodeTypes.CLASS_BODY,JetNodeTypes.FUNCTION_LITERAL_EXPRESSION,JetNodeTypes.FUNCTION_LITERAL)
ImmutableSet.of("TABLE_SCHEMA=hive_test.default; TABLE_NAME=readtest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=empty_table","TABLE_SCHEMA=hive_test.default; TABLE_NAME=infoschematest","TABLE_SCHEMA=hive_test.default; TABLE_NAME=hiveview","TABLE_SCHEMA=hive_test.default; TABLE_NAME=kv","TABLE_SCHEMA=hive_test.default; TABLE_NAME=foodate","TABLE_SCHEMA=hive_test.default; TABLE_NAME=partition_pruning_test")
profilesXml.isFile()
downloadFragment == null || downloadFragment.getDownloadActivity() == null
MessagingService.instance().sendOneWay(message,destination)
bucket.isExists()
project.getTestDirs()
ImmutableList.of(base)
new NotificationCompat.Builder(this)
executorService == null || executorService.isShutdown()
smallIcon != null && smallIcon.getType() == Icon.TYPE_RESOURCE
new MBeansObjectNameQueryFilter(jmxConnection)
weight * (yreal * Math.log(ymodel) - logfactorial - ymodel)
mavenBundle("info.cukes","cucumber-jvm-deps")
tempPinnedTaskBounds != null && stack.isAnimatingBoundsToFullscreen()
jsonFactory.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES,false)
con.serverSentScoreboard.addTeam(t)
t.join(0)
version.onOrBefore(Version.V_1_0_0_Beta2) || version.onOrAfter(Version.V_2_0_0_beta1)
required + "pt"
VERBOSE=false
mFollowersWPCOM != null || mFollowersEmail != null
new JavaScriptAggregatorFactory(input,Arrays.asList(input),fnAggregate,fnReset,fnCombine)
parameters.substring(x + 1,y)
!Arrays.equals(oldVal,val)
orgReplica.applyIndexOperationOnReplica(3,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id2",new BytesArray("{}"),XContentType.JSON),u -> { } )
Wt.getSlice(slice).plus(Wt.getSlice(slice).transpose())
cs[c].set(r,(int)(rng.nextDouble() * _createFrame.factors))
new StackManager(new File(upgradeCycle),null,osFamily,false,metaInfoDao,actionMetadata,stackDao)
GitWorkingDirectoryFactory.newGitWorkingDirectory(portalGitWorkingDirectory.getUpstreamBranchName(),JenkinsResultsParserUtil.getProperty(portalReleaseProperties,"lp.plugins.dir"),"liferay-plugins-ee")
level.equals("ERROR") || level.equals("FATAL")
ChannelOption<Boolean>
app.getSettings().AVOID_TOLL_ROADS.getModeValue(params.mode)
info.getRegionNameAsString()
ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())
GlobalSearchScope.allScope(getProject())
wrapper != null && wrapper.root != null
HashMap<String,CstType>
UpgradeStepRegistrator.class
LOG.error(component.toString(),e)
Tomcat.addServlet(ctx,"myServlet",new HelloWorld())
password.length() > 8
@Specialization protected LLVMBoxedPrimitive fromBoolean(boolean value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new HashMap<>(256)
ensureExpectedToken(XContentParser.Token.FIELD_NAME,parser.currentToken(),parser::getTokenLocation)
sm.getString("standardRoot.startInvalidMain",f.getAbsolutePath())
32 * 1024
Pair<SimpleMatch,PsiElement>
LOGGER.warn("Caught exception while updating segment status for table {}",tableNameWithType,e)
new ForgeCommand()
Period.months(lExpr.getIntervalYear())
locations.get(0).distanceTo(start) > 50
!(!relaxLocality && (racks == null || racks.length == 0) && (nodes == null || nodes.length == 0))
utf.length + 32
Long.valueOf(2)
4 + uids.length
heartBeatTimerTask != null && heartBeatTimerTask instanceof MysqlDetectingTimeTask
C extends Capability
root.waitThis().size() > 0
_isPosInf(text)
docsUpperBound > 0 && docsSinceCommit > docsUpperBound
DirectoryReader reader=IndexReader.open(dir); 
softmax.get(point(i),point(box),all(),point(y),point(x))
expected == short.class || expected == Short.class
height <= 0
new LanczosState(L,overshoot,DistributedLanczosSolver.getInitialVector(L))
attribute.equals("\\Spam") || attribute.equals("\\Junk")
assertFalse(predicate.apply(pickleEvent))
Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
secondsElapsedRemaining > 0 && !this.mFinished
symbolUsageValidator.validateCall(resolvedCall,functionDescriptor,context.trace,loopRangeExpression)
buttonWidth.setPrefSize(300,30)
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(new ForwardingLoggerInterceptor(memoryDatabase)).appendParameterBinder(Pipe.Binder.install(Forwarder.class))).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
Context.getVisitService().getAllVisitTypes(true)
allocator.getFlowController().prepareActionAllWrite(input,epsilon,nextEpsilon,gamma,dGammaView,dBetaView)
Session.getDefaultInstance(mailServerProperties)
mJobs.valueAt(i)
unkn_parts.addAll(Hive.get().getPartitions(tab))
query.components().toArray()
_label == null
oppositeWindow == w || oppositeWindow != null && oppositeWindow.getOwner() == w
builder.toString()
getResource(GROOVY_AUTOCONFIG_FILE,myClassLoader,updateStatus)
updatedLocation != null
localAddress != null && getParent() == null
abstract protected MavenPublishAction createDeployTask(File pomFile,LocalMavenRepositoryLocator mavenRepositoryLocator,MavenArtifactRepository artifactRepository); 
settings.get(INDEX_STORE_THROTTLE_TYPE,AbstractIndexStore.this.rateLimitingType)
LARGE_SIZE=40
s.createTextMessage()
ctx.sendUpstream(e)
myEditor.getBackgroundColor()
OutOfMemoryError e
certGen.addExtension(X509Extension.subjectKeyIdentifier,false,new SubjectKeyIdentifierStructure(pubKey))
new TreePath(rootPath,importTree)
out.writeOptionalUTF(type)
assembledServletDefinitions.put(servletName,entry.getValue())
converterLookup.addCustomConverter(NUMBER_ITEM_NAME,IntegerDecimalConverter.class)
RELAX_TIMING ? 2000 : 100
new DeadCodeEliminationPhase(Optional)
LOG.warn("Failed to get files from " + baseDirectory.getAbsolutePath())
ImmutableList.of("/bin/bash","-e","-c",command)
new ArrayList<>(0)
headers != null && headers.size() == 1
new SolrException(500,"analyzer without class or tokenizer & filter list")
new DataCompletenessScheduler(collection)
new JedisClusterCommand<Long>(connectionHandler,maxRedirections){   @Override public Long execute(  Jedis connection){     return connection.persist(key);   } } 
ConfigurationThreadLocal.class
masterComponents.length > 1
data != null && !RenderResources.REFERENCE_NULL.equals(data.getValue())
@JsonProperty("id") Long id
(ZWaveWakeUpCommandClass)node.getCommandClass(CommandClass.WAKE_UP)
log.debug("munlocking " + file + " with length "+ length)
croutonDurationEdit.setVisibility(View.GONE)
mask.length()
n < colP.getInt(i)
Drawable.scaleFromDensity(sourcePadding.left,sourceDensity,targetDensity,true)
appleConfiguration.getSingleArchPlatform()
fileFactory.createFileFromText("dummy.html",HTMLLanguage.INSTANCE,xmlFile.getText(),false,true)
pa.getStore().getJournal().getFileMap().size() == 2
z / vz
contactImpl == null
valueElement != null && valueElement.getTextLength() > 0
win.isWinVisibleLw() && !winAnimator.isAnimationSet() && winAnimator.applyAnimationLocked(transit,false)
crPluggableScmMaterial.getFilterIgnores()
new IOException(msg,e)
optionsOverride.getLambdaRole()
partStore.finishSave()
prefs.getBoolean(AUTO_START,true)
scheduler.getJobNames(groupName)
ACRA.log.w(LOG_TAG,"Could not send crash Toast",e)
fluid != null && FluidRegistry.isFluidRegistered(fluid)
Assert.assertEquals(account.getBillCycleDayLocal().intValue(),0)
addEnum(ArmorMaterial.class,name,textureName,durability,reductionAmounts,enchantability)
!ib.isBlocking()
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").nIn(4).nOut(3).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(3).backward(true).hiddenLayerSizes(new int[]{3,2}).override(2,new ClassifierOverride(2))
tab[index]=newArr
new Fault("COULD_NOT_WRITE_XML_STREAM_CAUSED_BY",LOG,e,e.getClass().getCanonicalName(),e.getMessage())
strippedQuotesLine.contains(" throws ")
verify(mockHttpClient,timeout(1000).times(3))
/**   * Controls tesselation factor (e.g how often a input patch should be subdivided)  */ TessellationControl
boosted - base <= config.boostThreshold()
--remainingReleaseCount == 0 && loader != null
zoom - Math.floor(zoom) < 0.001f
this.getAuthorities() != null && !this.getAuthorities().isEmpty()
SCROLL_BAR_SIZE=4
new HazelcastProperty("hazelcast.invalidation.min.reconciliation.interval.seconds",30,SECONDS)
options.removeUnusedVars || options.removeUnusedLocalVars
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,String mapSignalFile,String reduceSignalFile,int replication) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(mapSignalFile),(short)replication);   writeFile(dfs.getNameNode(),fileSys.getConf(),new Path(reduceSignalFile),(short)replication); } 
new IllegalArgumentException(format("Component of scope '%s' is not allowed",component.scope()))
source.getAllEditors(file)
channel.write(buf,remoteAddress)
ReflectUtil.isTypeOf(type,Number.class)
public class XpathRegressionImportControlTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlOne.xml"));     final String[] expectedViolation={"3:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlTwo.xml"));     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_UNKNOWN_PKG)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     final String[] expectedViolation={"1:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_MISSING_FILE)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=ImportControlCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionImportControlFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ImportControlCheck.class);     moduleConfig.addAttribute("file",getPath(checkName,"SuppressionXpathRegressionImportControlFour.xml"));     final String[] expectedViolation={"4:1: " + getCheckMessage(ImportControlCheck.class,ImportControlCheck.MSG_DISALLOWED,"java.util.Scanner")};     final List<String> expectedXpathQueries=Collections.singletonList("/IMPORT[./DOT[@text='Scanner']]");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
x instanceof ISeq || x instanceof IPersistentList
LOG.debug("Terminating channel to the remote gRPC server")
logger.debug("Cannot play line-in ({})",e.getMessage())
BUKKIT_VERSION=2624
fileList == null || fileList.isEmpty()
mMountTable.resolve(getPath(dir)).toString()
new SetExchangePatternType(exchangePattern)
!channel.isOpen()
lpNameBuffer.getValue()
/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; 
CommonUtils.truncateString(query.getQuery(),512)
assertEquals(10,view.getEnqueueCount())
-2026370166
inOrder.verify(mockAwareService).publish(any(),eq(clientId),eq(publishConfig),any())
createUrl(Url.append(myRepositoryRoot,path),false)
new SubscriptionUsageInArrear(account.getId(),invoiceId,curEvents,rawUsageOptimizerResult.getRawUsage(),targetDate,rawUsageOptimizerResult.getRawUsageStartDate(),invoiceConfig,internalCallContext)
ActivityRecord r=(ActivityRecord)it.next(); 
Assert.assertEquals(120L,assetCapsuleNew.getNetUsage())
dstCursor == null
attribute.generatedSetterName()
version.getId()
mAdapter == null || !mIsAttached
Assert.isTrue(UrlUtils.isValidRedirectUrl(defaultFailureUrl),"'" + defaultFailureUrl + "' is not a valid redirect URL")
myNameSuggestionsField.getFocusableComponent()
0.3 / Math.sqrt(N)
new GLMModel(args.dest,model._parms,new GLMOutput(model._output._names,model._output._domains,names,beta,.5f,model._output._binomial),model.dinfo(),Double.NaN,Double.NaN,-1)
times(8)
new Duration(endsMillis,System.currentTimeMillis())
JavaSourceCodehausPackagesSuite.suite()
ensureStableCluster(4)
new IllegalStateException(e)
mFileLength - mPos >= mBlockSize
v == BlockingSubscriber.TERMINATED
app.getTargetPointsHelper().getPointToNavigate() != null || loc.getLocationSimulation().isRouteAnimating()
SOCKET_TIMEOUT_MILLIS=10000
request.getManager().loadMaterial(text)
topMBMessage.getMessageId()
new RuntimeException("to length:" + to.length + " from length:"+ from.length)
portalBatchBuildData.getWorkspaceDir()
attributeValue.endsWith(type)
new StackManager(new File(stackRoot),new File(commonServicesRoot),osFamily,false,metaInfoDao,actionMetadata,stackDao)
StringUtils.isBlank(cert)
appOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
makeString(list,",","(",")",-1)
new InverseSchedule(ScheduleType.ITERATION,1,scheduleDecay,1)
userGroupMember.getUserGroupId()
logger.debug("mmap address is: " + Pointer.nativeValue(addr))
@Specialization protected LLVMBoxedPrimitive fromByte(byte value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
new StringBundler(5)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(myProject,"Updating OSGi indices",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         if (!myProject.isOpen())         return;         indicator.setIndeterminate(true);         indicator.setText("Updating OSGi indices");         myBundleManager.reindexAll();       }     } .queue();   } } ,myProject.getDisposed())
new StackManager(new File(singleStack.replace(StackManager.PATH_DELIMITER,File.separator)),null,osFamily,false,metaInfoDao,actionMetadata,stackDao)
stopwatch.elapsed(MILLISECONDS)
!OsmandPlugin.onDestinationReached()
TypeEvalContext.fastStubOnly(null)
-Float.parseFloat(position.getChildByName("Y").getText())
offset > 0
return 2; 
getImportRootPath()
sharedLibrary != null
Files.deleteIfExists(file.toPath())
simpleRecyclerViewAdapter.insertFirst("rand added item")
LayoutSet.class
tokenLength >= 1
setComplete(mLength)
MapsForgeTileSource.createFromFiles(new File[]{new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/osmdroid/world.map")})
outputDirectory="."
g.cluster().localNode()
PrintAttributes.enforceValidDuplexMode(currentMode)
!blockDismiss
restrictedListeners.load(is)
ALIASES.addResourceAttributeDescription(resources,keyPrefix,container)
new Long(94)
interactor.startCommand(packageName,callback,mCommand,mArgs)
domain == null ? 0 : domain.length
new ArrayList<Data>(entries.size())
AbstractDynamoDbConfigurationSource.class
matrix != null && applyMatrix
SafeUsagesExt2Kt.foo(a,1,"1","!")
sstable.markObsolete()
synchronized (mLock) {   mScreenOnTime=readScreenOnTimeLocked(); } 
Slog.e(TAG,"Unknown restriction: " + restriction)
id=10834
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Symbol recoverInline(BaseRecognizer<Symbol> recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
Log.v(TAG,msg)
value.startsWith("npm WARN ") || value.startsWith("warning ")
BinaryFile.class
return type; 
ReferencesSearch.search(method,method.getUseScope().intersectWith(myRules.getSearchScope()),false)
HiveConf.setLongVar(jobConf,HiveConf.ConfVars.MAPREDMINSPLITSIZE,preferredSplitSize)
mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(),0L)
adminClient.describeConsumerGroup(APP_ID + testNo,0)
collector.getRangeCounters(range)
b0.divide(b1,MathContext.DECIMAL64)
/**   * This is the primary connection pool class that provides the basic pooling behavior for HikariCP.  * @author Brett Wooldridge  */ public abstract class BaseHikariPool implements HikariPoolMXBean, IBagStateListener {   protected final Logger LOGGER=LoggerFactory.getLogger(getClass());   private static final long ALIVE_BYPASS_WINDOW=Long.getLong("com.zaxxer.hikari.aliveBypassWindow",1000L);   protected static final int POOL_RUNNING=0;   protected static final int POOL_SUSPENDED=1;   protected static final int POOL_SHUTDOWN=2;   public final String catalog;   public final boolean isReadOnly;   public final boolean isAutoCommit;   public int transactionIsolation;   protected final PoolUtilities poolUtils;   protected final HikariConfig configuration;   protected final AtomicInteger totalConnections;   protected final ConcurrentBag<PoolBagEntry> connectionBag;   protected final ThreadPoolExecutor addConnectionExecutor;   protected final ThreadPoolExecutor closeConnectionExecutor;   protected final ScheduledThreadPoolExecutor houseKeepingExecutorService;   protected final boolean isUseJdbc4Validation;   protected final boolean isIsolateInternalQueries;   protected volatile int poolState;   protected volatile long connectionTimeout;   protected volatile long validationTimeout;   private final LeakTask leakTask;   private final DataSource dataSource;   private final GlobalPoolLock suspendResumeLock;   private final IConnectionCustomizer connectionCustomizer;   private final AtomicReference<Throwable> lastConnectionFailure;   private final String username;   private final String password;   private volatile MetricsTracker metricsTracker;   private volatile boolean isRecordMetrics;   /**   * Construct a HikariPool with the specified configuration.  * @param configuration a HikariConfig instance  */   public BaseHikariPool(  HikariConfig configuration){     this(configuration,configuration.getUsername(),configuration.getPassword());   }   /**   * Construct a HikariPool with the specified configuration.  We cache lots of configuration items in class-local final members for speed.  * @param configuration a HikariConfig instance  * @param username authentication username  * @param password authentication password  */   public BaseHikariPool(  HikariConfig configuration,  String username,  String password){     this.username=username;     this.password=password;     this.configuration=configuration;     this.poolUtils=new PoolUtilities(configuration);     this.connectionBag=createConcurrentBag(this);     this.totalConnections=new AtomicInteger();     this.connectionTimeout=configuration.getConnectionTimeout();     this.validationTimeout=configuration.getValidationTimeout();     this.lastConnectionFailure=new AtomicReference<Throwable>();     this.isReadOnly=configuration.isReadOnly();     this.isAutoCommit=configuration.isAutoCommit();     this.suspendResumeLock=configuration.isAllowPoolSuspension() ? new GlobalPoolLock(true) : GlobalPoolLock.FAUX_LOCK;     this.catalog=configuration.getCatalog();     this.connectionCustomizer=initializeCustomizer();     this.transactionIsolation=getTransactionIsolation(configuration.getTransactionIsolation());     this.isIsolateInternalQueries=configuration.isIsolateInternalQueries();     this.isUseJdbc4Validation=configuration.getConnectionTestQuery() == null;     setMetricRegistry(configuration.getMetricRegistry());     setHealthCheckRegistry(configuration.getHealthCheckRegistry());     this.dataSource=poolUtils.initializeDataSource(configuration.getDataSourceClassName(),configuration.getDataSource(),configuration.getDataSourceProperties(),configuration.getDriverClassName(),configuration.getJdbcUrl(),username,password);     this.addConnectionExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),"HikariCP connection filler (pool " + configuration.getPoolName() + ")",configuration.getThreadFactory(),new ThreadPoolExecutor.DiscardPolicy());     this.closeConnectionExecutor=createThreadPoolExecutor(4,"HikariCP connection closer (pool " + configuration.getPoolName() + ")",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());     long delayPeriod=Long.getLong("com.zaxxer.hikari.housekeeping.periodMs",TimeUnit.SECONDS.toMillis(30L));     ThreadFactory threadFactory=configuration.getThreadFactory() != null ? configuration.getThreadFactory() : new DefaultThreadFactory("Hikari Housekeeping Timer (pool " + configuration.getPoolName() + ")",true);     this.houseKeepingExecutorService=new ScheduledThreadPoolExecutor(1,threadFactory,new ThreadPoolExecutor.DiscardPolicy());     this.houseKeepingExecutorService.scheduleAtFixedRate(getHouseKeeper(),delayPeriod,delayPeriod,TimeUnit.MILLISECONDS);     this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);     this.leakTask=(configuration.getLeakDetectionThreshold() == 0) ? LeakTask.NO_LEAK : new LeakTask(configuration.getLeakDetectionThreshold(),houseKeepingExecutorService);     setRemoveOnCancelPolicy(houseKeepingExecutorService);     poolUtils.setLoginTimeout(dataSource,connectionTimeout);     registerMBeans(configuration,this);     initializeConnections();   }   /**   * Get a connection from the pool, or timeout after connectionTimeout milliseconds.  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection() throws SQLException {     return getConnection(connectionTimeout);   }   /**   * Get a connection from the pool, or timeout after the specified number of milliseconds.  * @param hardTimeout the maximum time to wait for a connection from the pool  * @return a java.sql.Connection instance  * @throws SQLException thrown if a timeout occurs trying to obtain a connection  */   public final Connection getConnection(  final long hardTimeout) throws SQLException {     suspendResumeLock.acquire();     long timeout=hardTimeout;     final long start=System.currentTimeMillis();     final MetricsContext metricsContext=(isRecordMetrics ? metricsTracker.recordConnectionRequest(start) : MetricsTracker.NO_CONTEXT);     try {       do {         final PoolBagEntry bagEntry=connectionBag.borrow(timeout,TimeUnit.MILLISECONDS);         if (bagEntry == null) {           break;         }         final long now=System.currentTimeMillis();         if (bagEntry.evicted || (now - bagEntry.lastAccess > ALIVE_BYPASS_WINDOW && !isConnectionAlive(bagEntry.connection))) {           closeConnection(bagEntry,"(connection evicted or dead)");           timeout=hardTimeout - elapsedTimeMs(start);         }  else {           metricsContext.setConnectionLastOpen(bagEntry,now);           metricsContext.stop();           return ProxyFactory.getProxyConnection((HikariPool)this,bagEntry,leakTask.start(bagEntry));         }       }  while (timeout > 0L);     }  catch (    InterruptedException e) {       throw new SQLException("Interrupted during connection acquisition",e);     }  finally {       suspendResumeLock.release();     }     logPoolState("Timeout failure ");     throw new SQLTimeoutException(String.format("Timeout after %dms of waiting for a connection.",elapsedTimeMs(start)),lastConnectionFailure.getAndSet(null));   }   /**   * Release a connection back to the pool, or permanently close it if it is broken.  * @param bagEntry the PoolBagEntry to release back to the pool  */   public final void releaseConnection(  final PoolBagEntry bagEntry){     metricsTracker.recordConnectionUsage(bagEntry);     if (bagEntry.evicted) {       LOGGER.debug("Connection returned to pool {} is broken or evicted.  Closing connection.",configuration.getPoolName());       closeConnection(bagEntry,"(connection broken or evicted)");     }  else {       connectionBag.requite(bagEntry);     }   }   /**   * Shutdown the pool, closing all idle connections and aborting or closing active connections.  * @throws InterruptedException thrown if the thread is interrupted during shutdown  */   public final void shutdown() throws InterruptedException {     if (poolState != POOL_SHUTDOWN) {       poolState=POOL_SHUTDOWN;       LOGGER.info("HikariCP pool {} is shutting down.",configuration.getPoolName());       logPoolState("Before shutdown ");       connectionBag.close();       softEvictConnections();       houseKeepingExecutorService.shutdown();       addConnectionExecutor.shutdownNow();       houseKeepingExecutorService.awaitTermination(5L,TimeUnit.SECONDS);       addConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       final ExecutorService assassinExecutor=createThreadPoolExecutor(configuration.getMaximumPoolSize(),"HikariCP connection assassin",configuration.getThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy());       final long start=System.currentTimeMillis();       do {         softEvictConnections();         abortActiveConnections(assassinExecutor);       }  while (getTotalConnections() > 0 && elapsedTimeMs(start) < TimeUnit.SECONDS.toMillis(5));       assassinExecutor.shutdown();       assassinExecutor.awaitTermination(5L,TimeUnit.SECONDS);       closeConnectionExecutor.shutdown();       closeConnectionExecutor.awaitTermination(5L,TimeUnit.SECONDS);       logPoolState("After shutdown ");       unregisterMBeans(configuration,this);       metricsTracker.close();     }   }   /**   * Evict a connection from the pool.  * @param proxyConnection the connection to evict  */   public final void evictConnection(  IHikariConnectionProxy proxyConnection){     closeConnection(proxyConnection.getPoolBagEntry(),"(connection evicted by user)");   }   /**   * Get the wrapped DataSource.  * @return the wrapped DataSource  */   public final DataSource getDataSource(){     return dataSource;   }   /**   * Get the pool configuration object.  * @return the {@link HikariConfig} for this pool  */   public final HikariConfig getConfiguration(){     return configuration;   }   @Override public String toString(){     return configuration.getPoolName();   }   /**   * {@inheritDoc}   */   @Override public final int getActiveConnections(){     return connectionBag.getCount(STATE_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getIdleConnections(){     return connectionBag.getCount(STATE_NOT_IN_USE);   }   /**   * {@inheritDoc}   */   @Override public final int getTotalConnections(){     return connectionBag.size() - connectionBag.getCount(STATE_REMOVED);   }   /**   * {@inheritDoc}   */   @Override public final int getThreadsAwaitingConnection(){     return connectionBag.getPendingQueue();   }   /**   * {@inheritDoc}   */   @Override public final void suspendPool(){     if (suspendResumeLock == GlobalPoolLock.FAUX_LOCK) {       throw new IllegalStateException("Pool " + configuration.getPoolName() + " is not suspendable");     }  else     if (poolState != POOL_SUSPENDED) {       suspendResumeLock.suspend();       poolState=POOL_SUSPENDED;     }   }   /**   * {@inheritDoc}   */   @Override public final void resumePool(){     if (poolState == POOL_SUSPENDED) {       poolState=POOL_RUNNING;       addBagItem();       suspendResumeLock.resume();     }   }   public void setMetricRegistry(  Object metricRegistry){     this.isRecordMetrics=metricRegistry != null;     if (isRecordMetrics) {       this.metricsTracker=new CodaHaleMetricsTracker(this,(MetricRegistry)metricRegistry);     }  else {       this.metricsTracker=new MetricsTracker(this);     }   }   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       CodahaleHealthChecker.registerHealthChecks(this,(HealthCheckRegistry)healthCheckRegistry);     }   }   /**   * {@inheritDoc}   */   @Override public Future<Boolean> addBagItem(){     FutureTask<Boolean> future=new FutureTask<Boolean>(new Runnable(){       public void run(){         long sleepBackoff=200L;         final int minimumIdle=configuration.getMinimumIdle();         final int maxPoolSize=configuration.getMaximumPoolSize();         while (poolState == POOL_RUNNING && totalConnections.get() < maxPoolSize && getIdleConnections() <= minimumIdle && !addConnection()) {           quietlySleep(sleepBackoff);           sleepBackoff=Math.min(connectionTimeout / 2,(long)((double)sleepBackoff * 1.5));         }       }     } ,true);     addConnectionExecutor.execute(future);     return future;   }   /**   * Create and add a single connection to the pool.  */   protected final boolean addConnection(){     if (totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()) {       Connection connection=null;       try {         connection=(username == null && password == null) ? dataSource.getConnection() : dataSource.getConnection(username,password);         if (isUseJdbc4Validation && !poolUtils.isJdbc4ValidationSupported(connection)) {           throw new SQLException("JDBC4 Connection.isValid() method not supported, connection test query must be configured");         }         final int originalTimeout=poolUtils.getAndSetNetworkTimeout(connection,connectionTimeout);         transactionIsolation=(transactionIsolation < 0 ? connection.getTransactionIsolation() : transactionIsolation);         poolUtils.setupConnection(connection,isAutoCommit,isReadOnly,transactionIsolation,catalog);         connectionCustomizer.customize(connection);         poolUtils.executeSql(connection,configuration.getConnectionInitSql(),isAutoCommit);         poolUtils.setNetworkTimeout(connection,originalTimeout);         connectionBag.add(new PoolBagEntry(connection,this));         lastConnectionFailure.set(null);         return true;       }  catch (      Exception e) {         lastConnectionFailure.set(e);         if (poolState == POOL_RUNNING) {           LOGGER.debug("Connection attempt to database {} failed: {}",configuration.getPoolName(),e.getMessage(),e);         }         poolUtils.quietlyCloseConnection(connection,"(exception during connection creation)");       }     }     totalConnections.decrementAndGet();     return false;   }   /**   * Fill pool up from current idle connections (as they are perceived at the point of execution) to minimumIdle connections.  */   protected void fillPool(){     final int connectionsToAdd=configuration.getMinimumIdle() - getIdleConnections();     for (int i=0; i < connectionsToAdd; i++) {       addBagItem();     }     if (connectionsToAdd > 0 && LOGGER.isDebugEnabled()) {       addConnectionExecutor.execute(new Runnable(){         public void run(){           logPoolState("After fill ");         }       } );     }   }   /**   * Permanently close the real (underlying) connection (eat any exception).  * @param connectionProxy the connection to actually close  */   protected abstract void closeConnection(  final PoolBagEntry bagEntry,  final String closureReason);   /**   * Check whether the connection is alive or not.  * @param connection the connection to test  * @return true if the connection is alive, false if it is not alive or we timed out  */   protected abstract boolean isConnectionAlive(  final Connection connection);   /**   * Attempt to abort() active connections on Java7+, or close() them on Java6.  * @param assassinExecutor   * @throws InterruptedException   */   protected abstract void abortActiveConnections(  final ExecutorService assassinExecutor) throws InterruptedException ;   /**   * Create the JVM version-specific ConcurrentBag instance used by the pool.  * @param listener the IBagStateListener instance  * @return a ConcurrentBag instance  */   protected abstract ConcurrentBag<PoolBagEntry> createConcurrentBag(  IBagStateListener listener);   /**   * Create the JVM version-specific Housekeeping runnable instance used by the pool.  * @return the HouseKeeper instance  */   protected abstract Runnable getHouseKeeper();   /**   * Fill the pool up to the minimum size.  */   private void initializeConnections(){     if (configuration.isInitializationFailFast()) {       try {         try {           if (!addConnection()) {             shutdown();             throw new PoolInitializationException(lastConnectionFailure.getAndSet(null));           }           ConnectionProxy connection=(ConnectionProxy)getConnection();           connection.getPoolBagEntry().evicted=(configuration.getMinimumIdle() == 0);           connection.close();         }  catch (        SQLException e) {           shutdown();           throw new PoolInitializationException(e);         }       }  catch (      InterruptedException ie) {         throw new PoolInitializationException(ie);       }     }     fillPool();   }   /**   * Construct the user's connection customizer, if specified.  * @return an IConnectionCustomizer instance  */   @SuppressWarnings("deprecation") private IConnectionCustomizer initializeCustomizer(){     if (configuration.getConnectionCustomizerClassName() != null) {       return createInstance(configuration.getConnectionCustomizerClassName(),IConnectionCustomizer.class);     }     return configuration.getConnectionCustomizer();   }   public final void logPoolState(  String... prefix){     if (LOGGER.isDebugEnabled()) {       LOGGER.debug("{}pool stats {} (total={}, inUse={}, avail={}, waiting={})",(prefix.length > 0 ? prefix[0] : ""),configuration.getPoolName(),getTotalConnections(),getActiveConnections(),getIdleConnections(),getThreadsAwaitingConnection());     }   } } 
assertEquals("throughput",94.17869828,model.getThroughput(),0.00000001)
heartbeatIntervalSeconds < 0
log.getParent()
startNextLoop.setSelected(true)
assertTrue("#threadState() was: " + metadata.threadState() + "; expected either RUNNING or CREATED",Utils.mkList("RUNNING","CREATED").contains(metadata.threadState()))
GridCacheEntry<String,String>
params.length >= 8
SchematicsLoader.INSTANCE.load(ProjectManager.getInstance().getDefaultProject(),localFile,true,false)
taskService.createTaskQuery().orderByExecutionId()
startTemplate(editor,null,template,listener,null,true)
assertThat(provider.fetchCount,is(3))
tags != null && tags.length > 0
logger.debug("Cannot update channel for group member ({})",e.getMessage())
VERSION=3
other.getClass().getName()
placeInfo == null && acceptPlaceFromFocus
ParserUtils.eatElement(builder,PARAMETER)
left + width
Utils.field(value)
!mRenderNode.isPivotExplicitlySet()
MessageBodyWriter<DummyObject>
receivedAcks > 0
setServiceForegroundInnerLocked(r,id,notification,0)
addTest(AB_NEW_LOGIN_YES_GOOGLE,new int[]{1,1,1},new int[]{1,0,0},new String[]{"old-welcome","new-welcome","new-quick-welcome"},true)
Slog.w(TAG,"Could not read " + path,e)
handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED
Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0)
new Origin(origin,nativeGetQuotaForOrigin(origin),nativeGetUsageForOrigin(origin))
IndexerRegistryUtil.nullSafeGetIndexer(className)
Void value
new ArrayList<>(childCount)
(showcaseX != 1000000 && showcaseY != 1000000) && !hasNoTarget
Build.VERSION.SDK_INT >= Build.VERSION_CODES.N || !autoConnect
log.debug("Double activation of SQL context")
isBusy()
counter < max
ConstantNode.forConstant(newMethod.getEncoding(),tool.getMetaAccess())
Exception err
cppFile.writeString(buffer.toString(),false,"UTF-8")
gatt.setPeriodicAdvertisingEnable(this.advertiserId,enable)
new SpacingBuilder(settings,JetLanguage.INSTANCE)
checkpointPath.toString()
NettyCometSupport.class
format.getShape() == JsonFormat.Shape.STRING || format.hasPattern() || format.hasLocale() || format.hasTimeZone()
splits.length <= i
deltao.mmul(Nd4j.diag(wOO))
/**   */ private final LongAdder8 mapPubSize=new LongAdder8(); 
isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)
connectionManager.markOwnerConnectionAsClosed()
log.makeAlert(e,"Failed to remove segment")
Messages.getString(key,param1,param2,param3,param4)
new BufferedImage(50,height,BufferedImage.TYPE_INT_RGB)
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureHeight,this.mTextureWidth,this.mScale,this.mRotated)
new PlotFiltersIterationListener(null,variables,0)
a.getLocalName()
testWarning(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new IndexWriter(mDirectory,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
!reportWhenNoStatementFollow
currentResponse != null && currentResponse.getAuthentication() != null
parameters != null && parameters.size() > 0
Integer.parseInt(stackIdStr)
-1
(sysUiFl & View.SYSTEM_UI_FLAG_TRANSPARENT_NAVIGATION) == 0 && (sysUiFl & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0
ast != null && ast.getNextSibling() != null
LOG.error("Failed to install vim keymap.\n" + e)
compressedSliceInput.getRetainedSize()
printf(") at %p (",exceptionPc.rawValue())
document != null && myOnTheFly
globalSecurityDomain != null && !globalSecurityDomain.isEmpty()
logger.error("Endpoint {} not found on node {}. Cannot set command classes.",endpointId,this.getNode().getNodeId())
TransMeta.addStep(deletedStep)
case 8: 
assertEquals(CodecFactory.deflateCodec(9).toString(),serdeWrite.getCodec().toString())
offset + i
localFilteredData.addAccessRestrictedResource(absoluteChildAddr)
pv.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_bg_selector))
new InitialThreadLocal<Boolean>(PortletPreferencesThreadLocal.class + "._strict",false)
_buildTemplateWithGradle("npm-vuejs-portlet","vuejs-portlet-dependency-management","--dependency-management-enabled")
auxString2.lastIndexOf(",")
RecentsVerticalScrollView.super.removeView(view)
sendMsg(mAudioHandler,MSG_SET_DEVICE_VOLUME,SENDMSG_QUEUE,device,0,streamState,0)
ctx.cache().dynamicStartCaches(cacheCfgs,true,true,false)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
Set paramNames
endFunction("write_partition_column_statistics: ",ret != false,null)
2.0f * zFar * zNear* rangeReciprocal
resultEndpoint.setResultWaitTime(5000)
private Stream createRemoteStream(int streamId) throws ConnectionException {   Integer key=Integer.valueOf(streamId);   if (streamId % 2 != 1) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR);   }   if (streamId <= maxRemoteStreamId) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR);   }   Stream result=new Stream(key,this);   streams.put(key,result);   maxRemoteStreamId=streamId;   return result; } 
assertEquals(flowerVocab.getIndex(),2)
peopleListFromJSON(jsonArray,localTableBlogId,false,false,true)
assertEquals(1,results.size())
ASHMEM_SIZE=296
XContentType.YAML.mediaType()
sqlType == Types.NUMERIC || sqlType == Types.DECIMAL
null == Configuration.getResource(dataSourceName)
name != null && name.contains(parent)
Exception e
session.setOffline(false)
new DefaultMemoryManager(totalMemory,numSlots,pageSize,true)
HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).range(ref).descriptionAndTooltip(message)
new EngineConfig(shardId,"allocation-id",threadPool,indexSettings,null,store,newMergePolicy(),indexWriterConfig.getAnalyzer(),indexWriterConfig.getSimilarity(),new CodecService(null,logger),new Engine.EventListener(){   @Override public void onFailedEngine(  String reason,  Exception e){   } } ,IndexSearcher.getDefaultQueryCache(),IndexSearcher.getDefaultQueryCachingPolicy(),translogConfig,TimeValue.timeValueMinutes(5),Collections.emptyList(),Collections.emptyList(),null,new TranslogHandler(xContentRegistry,IndexSettingsModule.newIndexSettings(shardId.getIndexName(),indexSettings.getSettings())),new NoneCircuitBreakerService(),() -> SequenceNumbers.NO_OPS_PERFORMED,() -> primaryTerm.get(),EngineTestCase::createTombstoneDoc)
targetSdkVersion != -1
public static TutorialSupportFragment newInstance(@NonNull TutorialOptions tutorialOptions){   return new TutorialSupportFragmentImpl(tutorialOptions); } 
this instanceof ScatterData || this instanceof CombinedData
new DefaultQueryOptions(consistency,values,false,SpecificOptions.DEFAULT,3)
channelIdle(ctx,IdleState.WRITER_IDLE,lastWriteTime)
commander.downloadAvatar(imageView,accountList.get(i).getAvatar_url(),i,listView)
LinkedHashMap<String,Account[]>
ExceptionUtils.handleThrowable(t2)
new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0)
value > 180
type.getActualTypeArguments()[1]
new CrypticClue("Search the crates in the Barbarian Village helmet shop.",CRATES_11600,new WorldPoint(3073,3430,0),"Peska's Helmet Shop in Barbarian Village.")
DEFAULT_MAX_DHCP_RETRIES=9
public static DateArray dateArray(LocalDate[] values){   return new DateArray(values); } 
IOUtils.toString(classpathUrl,UTF_8)
parent != null && ProjectFileIndex.getInstance(project).isInContent(parent)
Collection<FunctionDesc>
Item.itemsList[item.itemID].getColorFromItemStack(item,0)
softWrapsIndex < softWraps.size() && line < lineCount
TagsAssetLocalServiceUtil.updateAsset(userId,article.getGroupId(),className,article.getResourcePrimKey(),categoriesEntries,tagsEntries,true,null,null,null,null,ContentTypes.TEXT_HTML,article.getTitle(),null,null,null,0,0,null,false)
Status.createStatuseList(get(getBaseURL() + "favorites.json","page",String.valueOf(page),true))
Collections.addAll(result,"十二星座","成功学","不转不是中国人","经典语录")
NetworkAddressUtils.assertValidPort(Preconditions.checkNotNull(address))
uri.indexOf("http://") == -1 && uri.indexOf("https://") == -1
new StyleChart.Builder().width(CHART_WIDTH_PX,LengthUnit.Px).height(CHART_HEIGHT_PX,LengthUnit.Px).margin(LengthUnit.Px,60,60,75,10)
case PLAYER_JOIN: 
log.info("Hooking new default : onNextDropped")
assertEquals("integer",model.getProperties().get(COUNT).getType())
Vector<Servlet>
rangeOffset <= thisEnd
E
UpgradeStepRegistrator.class
new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)
getInstalledCode("queueTest",Object.class,Object.class)
XMLInputFactory.newInstance()
this(60_000L); 
modelCache.put(key,model)
filePath == null || context == null
resultCode != RESULT_OK
assertEquals(2,yubiKeyAccountRegistry.getAccounts().size())
v[3]
this.getClass().getSimpleName()
keyed=true
"Second position set to " + pos2 + "."
is.read(buffer)
List<PsiElement>
this.messageService.fluxPreAuthorizeBeanFindById(2L).subscriberContext(withAdmin)
Arrays.asList(ProjectUri.PluginRepositories.PluginRepository.xUri,ProjectUri.Repositories.Repository.xUri,ProjectUri.Profiles.Profile.xUri)
pathToFileInProject.lastIndexOf("error-prone")
t.replace(R.id.frame,new SampleListFragment())
Bytes.toBytes(regionname)
0.99f * mainUnitInMeters
logger.trace("observer: timeout notification from cluster service. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
rc != null && rc.zoom == tileBox.getZoom()
COUNT=3000
m.getContent(OutputStream.class)
new Location(importStack.peek().getResource(),metadata)
o instanceof SpanRegexQuery
logger.trace("using stable discover node UUIDs with seed: [{}]",seed)
Integer.parseInt(val)
ensureGreen()
synchronized (runningZKTasks) {   runningZKTasks.remove(id); } 
ImmutableList<ManyValues>
Collections.singletonMap(ATTR_NODE_CONSISTENT_ID,consistentId)
jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName,Integer.class)
configureWebDotXmlAtmosphereHandler(scFacade)
resultEndpoint.expectedBodiesReceivedInAnyOrder("one","three")
CompilerTestUtil.disableExternalCompiler(myProject)
new WorldPoint(3106,3369,2)
log.info("activitiy or FailedJobRetryTimerCycleValue is null in job " + jobId + "'. only decrementing retries.")
SubscriberBarrier<IN,IN>
/**   * Something that can be called, passed parameters to, and return something back.  * @author dcheryasov  */ public interface Callable extends PyTypedElement {   /**   * @return a list of parameters passed to this callable, possibly empty.  */   @NotNull PyParameterList getParameterList();   /**   * @return the type of returned value.  */   @Nullable PyType getReturnType(  @NotNull TypeEvalContext context,  @Nullable PyQualifiedExpression callSite);   /**   * @return a methods returns itself, non-method callables return null.  */   @Nullable PyFunction asMethod();   /**   * Returns the qualified name of the function.  * @return the qualified name of the function, or null for a lambda expression.  */   @Nullable String getQualifiedName(); } 
expect(clusterRequest.getClusterName()).andReturn("clusterNew").times(3)
mIsLongClickable=false
QueryCursor<Cache.Entry<Integer,Person>>
LOG.info("Found spell checking wrapper is not local " + spellCheckingWrapper)
krakenDepth.getBids()
mThumbPosition >= getThumbScrollRange() / 2
false || DEBUG_WALLPAPER
new IllegalArgumentException("pAssetBasePath must end with '/' or be lenght zero.")
items[15]
url == null
DynamicCounter.increment(filterName,"status","unknown","type",filter.filterType())
sm.getString("http." + statusCode)
w1.getGradient(target,(label - 1),this.alpha)
myParameterIndex >= value
stream.filter(blogPostingModel -> {   Long creatorId=blogPostingModel.getCreatorId();   return creatorId.equals(rating.getCreatorId()); } ).map(BlogPostingConverter::toBlogPosting).collect(Collectors.toList())
getCategoriesAndThreads(category.getGroupId(),category.getCategoryId(),WorkflowConstants.STATUS_IN_TRASH)
PlatformTestUtil.startPerformanceTest("VF.getPath() performance failed",4000,new ThrowableRunnable(){   @Override public void run(){     for (int i=0; i < 1000000; ++i) {       file.getPath();     }   } } )
!messageReference.equals(account.getUuid(),folder,uid)
pull(local)
String dateObject=firstMessageElement.getAttributes().getAttribute("date").toString(); 
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent
cxxDeps.get(ruleResolverInner,cxxPlatform)
backupFile(w,true)
_instanceDataManagerConfiguration.getBoolean(DIRECT_REALTIME_OFFHEAP_ALLOCATION,false)
@UriParam(label="producer",defaultValue="true")
FastMath.min(origin,num.doubleValue())
LoopContextStateRetrieval retrievalToAdapt
range.endsWith("^.." + _latestHASH) && ticketIds.isEmpty() && (relengChangeLogEntries.size() > 1)
MacMessages.showYesNoDialog(title,message,YES_BUTTON,NO_BUTTON,SwingUtilities.getWindowAncestor(parent))
concreteInterface.getInterfaces()
Message.throwInternalError(storage.getDiskFile() + " != " + file)
procedures.registerProcedure(org.neo4j.kernel.enterprise.builtinprocs.BuiltInProcedures.class,true)
!FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning()
new HTTPHC3Impl(this)
singleType != null && resolvedType.isAssignableFrom(singleType)
Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN
@DELETE
@Override protected Block getBlock(){   return blockBuilder; } 
super(project,root); 
_fragmentEntryLocalService.addFragmentEntry(userId,fragmentEntry.getGroupId(),fragmentEntry.getFragmentCollectionId(),fragmentEntry.getName(),fragmentEntry.getCss(),fragmentEntry.getHtml(),fragmentEntry.getJs(),fragmentEntry.getPreviewFileEntryId(),fragmentEntry.getType(),fragmentEntry.getStatus(),serviceContext)
Resolvable<ResolvedType>
id=50
artifacts.size()
entry.maximumAmount - entry.freeConnectionsCounter.get() + entry.connections.size() > entry.minimumAmount
SPACE_BEFORE_TYPE_COLON=false
offlineTableConfig == null || offlineTableConfig.getValidationConfig() == null
mSeekBar.setProgress(mLastAudibleStreamVolume,true)
substringBox.setSelected(true)
postAgg.getName().equalsIgnoreCase(metricName)
componentTree == null || componentTree.isReleased()
map_keys=new RapidsStringsV3(fr.keySet().toArray(new String[]{}))
case IGNITE_HANDSHAKE: 
mainSize <= size
(int)step + 4
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e)
navigateToUri("https://www.google.com/accounts/Logout")
numThreads.get() >= MAX_THREADS
c <= values.length()
this.appView
dexFile.readOptionalUint(out.getCursor())
quoineTicker.getLastTradedPrice()
Float.parseFloat(strings[i])
host1.getSocketAddress()
ByteBufferUtil.string(value)
mHeadsUpNotificationView.releaseAndClose()
new InternalSearchResponse(new InternalSearchHits(new InternalSearchHit[]{hit},1l,1f),null,null,null,false,false)
assertEquals(4933401l,received.get(0)[1])
new AndroidInstrumentationInfo(targetApk,instrumentationApk)
List<MediaDescription>
new PyStringLiteralLexer(PyElementTypes.STRING_LITERAL_EXPRESSION)
preferences.getBoolean("forceQuickUpdate",true)
logger.debug("NODE {}: Retry timout: Can't advance",node.getNodeId())
plugin.isEnabled()
new RuntimeException("Error during multilang processing",e)
getOriginUrl()
traceIds.isEmpty()
new ChronicleEngineEndpoint(uri,this,configuration)
mAppOpsManager.noteOpNoThrow(opCode,uid,packageName)
mStackSupervisor.anyTaskForIdLocked(taskId)
DEBUG_GESTURES=false
weekRange.add(Calendar.DATE,6)
public class BuildOperationFiringBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private final BuildOperationExecutor buildOperationExecutor;   private final RoleAwareBuildCacheService delegate;   public BuildOperationFiringBuildCacheServiceDecorator(  BuildOperationExecutor buildOperationExecutor,  RoleAwareBuildCacheService delegate){     this.buildOperationExecutor=buildOperationExecutor;     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  final BuildCacheKey key,  final BuildCacheEntryReader reader) throws BuildCacheException {     return super.load(key,new BuildOperationFiringBuildCacheEntryReader(reader,key));   }   @Override public void store(  final BuildCacheKey key,  final BuildCacheEntryWriter writer) throws BuildCacheException {     super.store(key,new BuildOperationFiringBuildCacheEntryWriter(writer,key));   } private class BuildOperationFiringBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryReader(    BuildCacheEntryReader delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void readFrom(    final InputStream input) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Loading entry " + key + " from "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.readFrom(input);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } private class BuildOperationFiringBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter delegate;     private final BuildCacheKey key;     private BuildOperationFiringBuildCacheEntryWriter(    BuildCacheEntryWriter delegate,    BuildCacheKey key){       this.delegate=delegate;       this.key=key;     }     @Override public void writeTo(    final OutputStream output) throws IOException {       buildOperationExecutor.run(BuildOperationDetails.displayName("Storing entry " + key + " in "+ getRole()+ " build cache").build(),new Action<BuildOperationContext>(){         @Override public void execute(        BuildOperationContext buildOperationContext){           try {             delegate.writeTo(output);           }  catch (          IOException e) {             buildOperationContext.failed(e);           }         }       } );     }   } } 
meta.isUsingSecureAuthentication()
ReplacementsImpl.class.getDeclaredMethod("makeGraph",rjm,rjm,SnippetInliningPolicy.class,boolean.class)
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Http401AuthSample.class
@Override
super(pDuration,pFromValueA,pToValueA,pModiferListener); 
implementation != null && instanceMethod.getDeclaringClass() == implementation.getClass()
PROGRESS_DATA_MESSAGE=7
Assert.assertEquals(200,statusCode)
logger.warn("{} {}",errorCode,message)
relevant && canSetPlaceholder() && errorDrawable != null
getJavaType(keyColumns.get(0).getType(resolver()),Mode.POJO)
createFromResourceStream(res,value,is,srcName,null)
Assert.assertEquals(6,latch.getCount())
con.getClass().getSimpleName()
softReboot()
queryBuilder.append(columnAliases[i].getAliasName())
V_5_6_10_ID=5061099
new AndroidFiles(this.getService().getAssets(),this.getService().getFilesDir().getAbsolutePath())
qdgraphics=new QDGraphics(QDGraphics.kDefaultPixelFormat,qdrect)
ctx.grid().forCacheNodes(name())
mappedSuperclass.getMetadataComplete()
outboundRequest("localhost",port,"",httpRequest)
!export && !Const.isEmpty(beforeFilename) && !beforeFilename.equals(fname)
id=32
new ParameterSpec("executedValue",types.toArray(new TypeMirror[types.size()]),false,Cardinality.ONE)
!MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity,src,amount))
Assert.assertEquals(10L,v2)
Object maxFractDigits=properties.get(NumberFormatSample.PROP_MAX_FRACT_DIGITS); 
PullBufferStream.class
new Thread[5]
getOptionalLong(singletonMap("long","Apio"),list)
!mNavigationBarView.isQuickScrubEnabled()
ormEntity.getMetadataComplete()
configInstance.getIntProperty(namespace + "eurekaServer.connectTimeout",5)
Assertions.assertThrows(EmptyStackException.class,() -> stack.pop())
VERSION=19
j.hasNext()
Variable emitLoad(LIRKind kind,Value address,LIRFrameState state); 
fragmentEntryPersistence.findByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status,start,end,orderByComparator)
!deferEnsuringVisibility
gapExpression != null
protected abstract ResolvedReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration); 
Rule.DEFAULT_WEIGHT * 1.1
booleanPreference(preference,value,R.string.p_end_at_deadline,R.string.EPr_cal_end_at_due_time,R.string.EPr_cal_start_at_due_time)
TYPE_20(ACCURATE,CONTROLLED,null,DEFENSIVE)
public void set(int parameterId,long value) throws ConnectionException {   if (log.isDebugEnabled()) {     log.debug(sm.getString("connectionSettings.debug",Integer.toString(parameterId),Long.toString(value)));   } switch (parameterId) { case 1:     setHeaderTableSize(value);   break; case 2: setEnablePush(value); break; case 3: setMaxConcurrentStreams(value); break; case 4: setInitialWindowSize(value); break; case 5: setMaxFrameSize(value); break; case 6: setMaxHeaderListSize(value); break; default : log.warn(sm.getString("connectionSettings.unknown",Integer.toString(parameterId),Long.toString(value))); } } 
expected.size() != actual.size()
minY + maxY
contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)
public class XpathRegressionHiddenFieldTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"10:34: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"value")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS" + "/PARAMETER_DEF[@text='value']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=HiddenFieldCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(HiddenFieldCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(HiddenFieldCheck.class,HiddenFieldCheck.MSG_KEY,"other")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method']/PARAMETERS/PARAMETER_DEF[@text='other']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
LOG.error("Failed to reconfigure vim keymap.\n" + e)
logger.debug("Trying to map {} to {}",t,path)
final ImportControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
new NameAlias(nameAlias)
new MapVectorLayer(null,true)
new AMQPProducer(metricRegistry,configuration,serverStatus)
yx*=ly
state == ApplicationState.STATUS || state == ApplicationState.STATUS_WITH_PORT
AvatarManager.getInstance().getUserAvatar(user + "/" + resource)
platformVersion < M
event.getServletContext().getAttribute(SERVER_KEY)
el.classNames()
bm.createAshmemBitmap()
factory.get(mBodyWildcard,NO_ANNOTATIONS,retrofit)
Map<String,FilterBuilder>
NameTable.getSpecificObjCType(var.getType())
log.warn(String.format("Could not process payment for account %s, invoice %s, error = %s",account.getId(),invoice.getId(),paymentPluginInfo.getGatewayError()))
killBillClient.createExternalCharge(externalCharge,clock.getUTCToday(),true,true,createdBy,reason,comment)
isDisposed() || myProject.isDisposed() || !fileEditor.isValid()
byteBuffer == null || !(byteBuffer instanceof DirectBuffer)
NetworkAddress.formatAddress(inet.address().getAddress())
fourCC.equalsIgnoreCase("TTML") || fourCC.equalsIgnoreCase("DFXP")
new SyncDateFormat[2]
assertLeftRightCategory(9,category2b)
file.name().endsWith(".etc1")
processDefinition.getTenantId() == null || ProcessEngineConfiguration.NO_TENANT_ID.equals(processDefinition.getTenantId())
add(nm)
error || status == SocketStatus.STOP
new DateTime(2007,1,1,0,0,0,0)
state == AsyncState.DISPATCHING || state == AsyncState.MUST_DISPATCH
error(log,e.getMessage())
artifact.getName().getType()
((MapType)toCheck).getValuesType()
mActivity.getSupportFragmentManager()
Integer.parseInt(parts[1],16)
int retries() default 2; 
lookup="org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3"
temp.reAddLeft()
mChildren.get(i).render(camera,vpMatrix,projMatrix,vMatrix,mMMatrix,pickerInfo)
assertEquals("total runtime",119.859,model.getRunningTime(),0.000001)
page.getMembersByIdx(0).shouldBeNamed("admin","Administrator").shouldHaveGroups(2)
OPEN_FUNCTIONS.contains(qname) && callSite != null
MINOR_ALPHA=.42f
logicalExpressionStack.remove(logicalExpressionStack.size() - 1)
offset >= leftParen.getTextRange().getEndOffset()
mLastNotificationMillis=-rateLimitMillis
order=13
ex.getClass().equals(ClassNotFoundException.class) || ex.getClass().equals(NoClassDefFoundError.class)
private final ExecutorService compileQueue; 
!((ExchangeIdempotentRepository<String>)idempotentRepository).contains(exchange,messageId)
waitYieldLatch.await(1000,TimeUnit.MILLISECONDS)
validatorHelper.enclosingElementHasEActivity(element,validatedElements,valid)
logException(exception)
firstPostObject.optJSONObject("discussion")
new LFWLoader(imgDim,imageTransform,normalizeValue,useSubset).getRecordReader(batchSize,numExamples,imgDim,numLabels,labelGenerator,train,splitTrainTest,rng)
cmd.append("upsert",upsert)
Stream.of(null,null)
ContainerUtil.newHashSet("<br>","</br>","<br/>","<p>","</p>","<p/>","<pre>","</pre>")
context.revertReloadRequired()
new Scanner(f,"UTF-8")
visibleTerminal.getCaption()
new InternalTestCluster(randomLong(),2,2,cluster2Name,cluster2SettingsSource,0,false,CHILD_JVM_ID,SECOND_CLUSTER_NODE_PREFIX)
primaryKey == null || primaryKey.cardinality() == 0
logger.debug("Cannot play sound ({})",e.getMessage())
ImmutableSortedMap.naturalOrder()
ONBOARDING_ENABLED=true
!TextUtils.isEmpty(defaultRingtoneName)
offsets[i + 1] - offsets[i] == 1 || !Character.isWhitespace(unescapedText.charAt(i))
Algorithms.isEmpty(pd.getName()) && !Algorithms.isEmpty(nameStr) && !nameStr.equals(PointDescription.getAddressNotFoundStr(mapActivity))
assertModel(MODEL).query("select state, city from zips where state = 'CA'").limit(3)
log.warn("Query failed to parse : '{}'",executionInput.getQuery())
edge.setDirection(EdgeDirection.UNDIRECTED)
fLines.addElement(st.nextToken())
job.build()
input.getOutputPropertyName()
@Override protected LeafBlockWrapper getPreviousBlock(){   if (myChildren == null || myChildren.isEmpty()) {     return null;   }   return myChildren.get(0).getPreviousBlock(); } 
StagingServiceHttp.createStagingRequest(httpPrincipal,remoteGroupId,checksum)
TokenSet.create(PyTokenTypes.OR_KEYWORD,PyTokenTypes.AND_KEYWORD,PyTokenTypes.LT,PyTokenTypes.GT,PyTokenTypes.OR,PyTokenTypes.XOR,PyTokenTypes.AND,PyTokenTypes.LTLT,PyTokenTypes.GTGT,PyTokenTypes.EQEQ,PyTokenTypes.GE,PyTokenTypes.LE,PyTokenTypes.NE,PyTokenTypes.NE_OLD,PyTokenTypes.IN_KEYWORD,PyTokenTypes.IS_KEYWORD,PyTokenTypes.NOT_KEYWORD,PyTokenTypes.PLUS,PyTokenTypes.MINUS,PyTokenTypes.MULT,PyTokenTypes.FLOORDIV,PyTokenTypes.DIV,PyTokenTypes.PERC,PyTokenTypes.EXP)
SettingsBaseActivity.getRoutingStringPropertyDescription(this,p.getId(),p.getDescription())
new IndexOutOfBoundsException()
StringUtils.isNotBlank(value) && WebUtils.isRememberMeAuthenticationEnabled(requestContext)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local date-time elements.  */ public DateTimeArray nextDateTimeArray(){   ZonedDateTime[] array=nextDateTimeArrayRaw(minArray(),maxArray());   return Values.dateTimeArray(array); } 
U.sleep(20000)
Mutation rm; 
(outputFolder + File.separator + apiFolder).replace("/",File.separator)
assertEquals(11,beanCount)
tok.getToken()
ConfigPropertyVetoException exception=null; 
rowMeta.size()
new Whitelist().addTags("a","b","blockquote","br","cite","code","dd","dl","dt","em","i","li","ol","p","pre","q","small","span","strike","strong","sub","sup","u","ul")
new ScriptC_errorCalculator(mRS)
!info.getInfo().getHeadToBranchCommits(myGitRepository).isEmpty()
ScriptingUtil.exec(null,inputObjects,language,script,new String[0])
mf.filter(popup.getMenu(),false)
IntentFactory.create(mContext,type,classifiedText)
@ApiEndpointPreference final @NonNull StringPreferenceType apiEndpointPreference
new Runtime(mContext)
synchronized (this) {   classCache.remove(name); } 
Slog.d(TAG,"FLP HAL not supported")
/**   * Callback that is invoked <em>before</em> all  {@code @BeforeAll} methods have been invoked.  * @param context the current container extension context  */ void beforeAll(ContainerExtensionContext context) throws Exception ; 
new CamelNodeState(endpoint.getSingletonId())
message.processMessage(null)
jitter=0.6
stat.st_mode.intValue()
info.getOldName()
expression.substring(0,pathSeparator)
getBoldStatus(elements[0])
!hasViewPagerIndicator
equalTo(30171.0)
new TaskStatusUpdateEvent(counters,progress,stats,true)
MESSAGES.persistenceUnitNotFound(absolutePath,puName,current)
MAX_TOOLTIP_SHOWN_COUNT=2
new ExportDBTask(targetContext,filename -> {   assertThat(filename,is(not(nullValue())));   File f=new File(filename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,null,primary,state,version,null,AllocationId.newInitializing(),true)
DpmTestUtils.newRestrictions(UserManager.DISALLOW_ADD_USER,UserManager.DISALLOW_ADD_MANAGED_PROFILE)
ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining("AutoFactory does not support generic types").in(file).onLine(21)
assertNotNull("Failed to trigger savepoint",savepointPath)
logger.warn("Couldn't calculate the target package! Using default: " + DEFAULT_PACKAGE)
BaseBinaryFixtures.create(type,type,name,component,taskFactory)
context.registerReceiver(mBroadcastReceiver,broadcastFilter,null,mHandler)
mMetaDb.isOpen()
LOGGER.debug(msg.apply())
Exception e
d.setDefaultEncoding(servletContainer.getDefaultEncoding())
!Model.getSingleton().getSession().isNewState()
new RemoveSubscriptionCmd(destination,channelId)
aInfo != null && (aInfo.flags & ActivityInfo.FLAG_ALLOW_EMBEDDED) == 0
new PBEKeySpec(secretKey.toCharArray(),char2byte(salt),65536,128)
new Entry(p.hash,p.key,p.value,head)
BufferUtils.disposeUnsafeByteBuffer(bytebuffer)
myExcludedFileIndex.isExcludedFile(validParent)
EqualsBuilder.class
Preconditions.checkNotNull(root)
powerManager.isDeviceIdleMode()
metaData.getData(SaveActions.META_KEY) != null
getOwnerAddress()
Build.VERSION.SDK_INT < Build.VERSION_CODES.O
hasRows(newTableName)
ASSET buildAsset(AssetUri uri,DATA data); 
nodeVersion.onOrAfter(Version.V_5_3_0_UNRELEASED)
lastGoodQuery.getOriginalQuery()
createMessage(7,"ABC",3,3,replyChannel,null)
value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double|| value instanceof UUID|| value instanceof Boolean
!mIsPipRecentsOverlayShown || !mIsRecentsShown || mIsPipFocusedInRecent
listener.wait(1000)
c == Integer.class || c == Integer.TYPE
FileUtil.join(portalConfiguration,compileOnlyConfiguration,sourceSet.getRuntimeClasspath(),portalTestConfiguration)
builder().experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true).incompatibleDisallowDataTransition(false).incompatibleDisallowDictPlus(false).incompatibleDisallowFileType(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(false).incompatibleDisallowSlashOperator(true).incompatibleExpandDirectories(false).incompatibleGenerateJavaCommonSourceJar(false).incompatibleNewActionsApi(false).incompatibleNoAttrLicense(false).incompatibleNoOutputAttrDefault(false).incompatibleNoSupportToolsInActionInputs(false).incompatibleNoTargetOutputGroup(false).incompatibleNoTransitiveLoads(false).incompatiblePackageNameIsAFunction(false)
mapper.writerFor(planType)
listener == null
getModifiableRootModelProxy()
new BindException(newConcept,"concept")
diskThresholdSettings.getFreeDiskThresholdFloodStage()
maxResults <= 0
this.rightLabel
!nm.matches(sr.localeName) && !nm.matches(sr.otherNames)
model != null && model.getSelectedLayout() != null
globalMappings.differentiate(delta,removedPaths,filesToCompile,allCompiledFiles,allAffectedFiles)
TOUCHEVENT_POOL.recyclePoolItem(pTouchEvent)
new AlertDialog.Builder(context,AlertDialog.THEME_TRADITIONAL)
logger.warn("failed to close node {} on failed start",t,otherNode)
diff >= 86100
rj.reduceProgress()
1000.0 * FILE_BYTES
result == null || result.getAttack() == null
PATH_ITERATIONS * 10
PUBLIC_STATUS_BAR_VISIBILITY_MASK
kv.getValue() >= minMatch
assertEquals(10,query().from(employee).select(Wildcard.count.as(rowCount)).fetchOne().intValue())
shape.getMin().y
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(LoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
sNotificationData.currentMediaItem > sNotificationData.totalMediaItems
UnsupportedOperationException.class
new SonarException(String.format("Project [%s] doesn't exist on server",projectKey),e)
rejectRemoteInitiatedRenegotiation && !isDestroyed() && SSL.getHandshakeCount(ssl) > 1
context.createTaskContext().addPipelineContext(0,true,true,false)
mSlideOffset > 0
sa.getBoolean(com.android.internal.R.styleable.AndroidManifestApplication_testOnly,false)
h / 2
getJSDocType(cm,var)
phoneDisplayHeight == actionBarOverlayLayoutHeight && actionBarOverlayLayout.getPaddingTop() == 0
parent != mHostView && parent.getParent() != null && parent.mAttachInfo != null
FloatList list
h.addParameters("--name-status","--first-parent","--no-abbrev","-M","--pretty=format:" + COMMITTED_CHANGELIST_FORMAT,"--encoding=UTF-8",revisionName,"--")
if (b) { } 
U.error(log,"Message can't be consumed from stream. Retry after " + retryTimeout + " ms.",e)
i.getName().toString()
this.repositories.add(0,repository)
ByteArray.fromString(assetId)
new ImmutableAssertion(CoreAuthenticationTestUtils.getAuthentication(),list,fromNewLogin,RegisteredServiceTestUtils.getService())
Preferences.navigationVibrationEnabled(context)
getColors(which,TYPE_DARK)
varDeclaration instanceof GoRecvStatement || varDeclaration instanceof GoRangeClause
new NoSuchFileEntryException()
agentInstances.findAgentAndRefreshStatus(uuid)
parseJavaCodeReference(builder,false,true,false,false)
ZipUtil.unzip(null,courseDir,file,null,null,true)
new IntRangeValidator(0,true,true)
nodeConfig.setExecutorServiceWorkers(Collections.singletonMap("test",1))
mController.setRingerMode(AudioManager.RINGER_MODE_VIBRATE,false)
returnValue
LinkedHashMap<String,Operator<? extends Serializable>>
operation.get(OPERATION_HEADERS,ALLOW_RESOURCE_SERVICE_RESTART).set(false)
/**   * Represents an invalid default audience value, can be used when only reading.  */ NONE(null)
formatTimeMs(fullWifiLockOnTime / 1000)
RetryHandlingBlockMasterClient.class
id=20
code == 10
status != null
new IndexWriter(directory,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
result == null && ioe != null
new IllegalArgumentException("the ast is null")
i < 17
new InterruptSingleSignOnParticipationStrategy(mock(ServicesManager.class),true,true)
speed < 33
@Override
singleLanguageProfile.getLanguage()
STANDALONE
new StringBuilder(256)
request.getRelaxLocality() == true
jndiName == null
computeRealHorizontalScrollRange()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
new int[3168]
startErrPos <= endPos
LOGGER.warn("No access to path {}",input,e)
nsDescriptor.getAttributeImpl(localName,namespace)
assertContainsParams(CollectionAdminRequest.createCollection("foo",null,1,1).getParams(),ACTION,NAME,ZkStateReader.NUM_SHARDS_PROP,ZkStateReader.NRT_REPLICAS)
info.getGroupIdLevel1(mContext.getOpPackageName())
TimeUnit.SECONDS.sleep(4)
fileSizeKb / 1024
w.mBaseLayer <= myLayer && w.mAttrs.type != TYPE_DOCK_DIVIDER
cacheSize >= 0
clusterType == UNKNOWN && newDescription.getType() != REPLICA_SET_GHOST
input.getDeltaMs()
Arrays.asList(0L,1L,2L,3L,4L)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_POWER_OFF_FUNCTION,false)
drawable != mBackgroundDrawable || mBackgroundResource != 0
BasicContext.class
new InputStreamReader(this.getClass().getResourceAsStream(tokens[0]),"UTF-8")
size > maxListFill
newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(MockTokenizer.WHITESPACE,true,false)).setRAMBufferSizeMB(1.0)
ColorProperties.getColor("selectionBackground")
Exception e
previousParameterName.compareToIgnoreCase(parameterName)
new ClusterConfiguration(name,Collections.singleton(boundAt))
Throwable exception
a.getLayoutDimension(com.android.internal.R.styleable.Spinner_dropDownWidth,ViewGroup.LayoutParams.WRAP_CONTENT)
ChromeTraceBuildListener.class
min1 <= min2
detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)
return ctx; 
private Throwable exception; 
T
EntityCacheUtil.putResult(CheckoutModelImpl.ENTITY_CACHE_ENABLED,CheckoutImpl.class,checkout.getPrimaryKey(),checkout)
mOverviewOpenedCountSinceQuickScrubTipDismiss >= QUICK_SCRUB_SHOW_ON_OVERVIEW_OPENED_COUNT
setExpression(expressions.get(myHistoryIndex))
KEEP_ALIVE_LENGTH=8
new EnumValidator<TransactionMode>(TransactionMode.class,true,true)
gapBlock.getHash()
port >= 21000
ReflectUtils.getBeanSetters(target)
Boolean.parseBoolean(child.getAttributeValue(ATTRIBUTE_ENABLED,"true"))
Boolean.parseBoolean(System.getProperty("cassandra.consistent.rangemovement","true"))
new ReflectionsException("could not create class object from file " + file.getRelativePath(),e)
stall_till_cloudsize(3)
new String(decryptCipher.doFinal(Base64.decode(ciphertext)),"UTF-8")
curr != null
conn.getResponseCode() == 302 || conn.getResponseCode() == 301
Collection<InspectionToolWrapper>
cfg.entrySet()
new SpannedString(new CustomSpanned(first),true)
ConfigPropertyVetoException e
assertEquals(CodecFactory.xzCodec(i).toString(),serdeC.getCodec().toString())
StringUtils.isNoneEmpty(runtime.getRuntimeError())
JSONUtilities.safePut(options,"guessCellValueTypes",false)
entry.getCheckName().equalsIgnoreCase(checkAlias)
new ByteBuddy().subclass(Object.class).method(named("toString")).intercept(MethodDelegation.to(ToStringInterceptor.class).defineParameterBinder(StringValueBinder.INSTANCE)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
new WorldPoint(1428,3866,0)
featureNum=123
SessionErrors.add(actionRequest,e.getClass().getName(),e)
new KeyEvent(event.getDownTime(),event.getEventTime(),event.getAction(),keyCode,event.getRepeatCount(),event.getMetaState(),event.getDeviceId(),event.getScanCode(),event.getFlags() | KeyEvent.FLAG_FALLBACK,event.getSource())
new ConnectionException(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR)
Log_OC.d(TAG,"onCreateView")
mIsCustomPubDate && pubDate.equals(getResources().getText(R.string.immediately)) && !post.isLocalDraft()
stateUpdateQueue.getStats()
client.getStatusCodeReply()
Double.parseDouble(m.group(2))
id=19907
myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),classesFilteredView)
rows[1].getLock().writeLock().unlock()
GenericUDFEnforceConstraint.class
console.getStdErr()
(i - blockStart) > 0
new PeepholeSubstituteAlternateSyntax(true)
(CounterCell)cell
new StringBuilder()
_cacheRegistryItems.remove(cacheRegistryItem.getRegistryName())
length <= 0L
Preconditions.checkState(!binary.equals(output),BINARY_OPTION + " must be different from " + OUTPUT_OPTION)
editable=false
firstExc == null
applicationStatistics.incrListUserTimes()
3 * 60 * 1000L
worldRenderer.getChunkProvider().addRegionEntity(spawnZoneEntity,4)
new CopyableValueComparator(sortOrderAscending,type)
handleIncomingUser(callingPid,callingUid,userId,false,ALLOW_NON_FULL,"checkContentProviderPermissionLocked " + cpi.authority,null)
String.format(Locale.ROOT,"%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",nf(counter),updateCounter,nf(sortedNodes.getSize()),nf(nodeContractor.getAddedShortcutsCount()),nf(nodeContractor.getDijkstraCount()),getTimesAsString(),(long)meanDegree,nodeContractor.getPrepareAlgoMemoryUsage(),Helper.getMemInfo())
SecurityActions.getModuleClassLoader(module)
when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(4)
pubnub.unsubscribePresence(channel)
bfd.singularData.getSingularizer().appendBuildCode(bfd.singularData,type,statements,bfd.name,"this")
new File(JMETER_INSTALLATION_DIRECTORY,"bin" + File.separator + "log4j.conf")
asyncResult.cause()
new EnterSelectionDialog(shell,files,Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("ExcelOutputDialog.SelectOutputFiles.DialogMessage"))
(flags & 0x08) != 0
_state.getState() == HttpChannelState.State.IDLE
!isFault && !allowWrapperOperations && op.isUnwrappedCapable()&& !op.isUnwrapped()
out.writeByte(CLASS_CONSTANT_VALUE_TAG)
!material.getUseTickets()
databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive") || databaseProductName.startsWith("sql server")
topNProjector.finish()
checkCallerIsSystemOrShell()
timeFieldSpec.getOutGoingTimeColumnName()
this.notifyItemChanged(getItemCount())
object == null
layer.setLayerPaint(mLayerPaint)
super(position,message,cause); 
exclusiveConsumer2.receive(1000)
profile.getActiveRules(true)
commands_.vcsRevert()
AMQ6000Test.class
(int)value <= 0
given().content(bytes).when().put("/file")
KeyValue<String,Integer>
main.call(args)
writeString(writer,fieldName,String.valueOf(reader.getDouble()))
mClipboard != null && mClipboard.getText() != null && mClipboard.getText().length() != 0
public Builder setSSLContext(final SSLContext sslContext){   configBuilder.setSSLContext(sslContext);   return this; } 
sb.append(modifiedURI)
new MaterialDialog.Builder(this).title(R.string.socialNetworks).items(R.array.socialNetworks).itemsCallback(new MaterialDialog.ListCallback(){   @Override public void onSelection(  MaterialDialog dialog,  View view,  int which,  String text){     Toast.makeText(getApplicationContext(),which + ": " + text,Toast.LENGTH_SHORT).show();   } } ).itemProcessor(new ButtonItemProcessor(this))
loadMetadataSuceeded=false
Proxy.getInvocationHandler(proxy).getClass().getName()
mPanProfile.isProfileReady()
UADExporter.exportApplicationDataInBackground(applicationName,selUserId,themeDisplay.getScopeGroupId())
new OsMoControlDevice(app,service,tracker)
init || !accountInfoEdited()
JvmDeclarationOriginKt.OtherOriginFromPure(aClass,descriptor)
CsvReporter.forRegistry(registry).convertDurationsTo(getDurationUnit()).convertRatesTo(getRateUnit())
ImmutableMap.of(BuildInfo.BUILD_EMBED_LABEL,Key.of(KeyType.STRING,options.embedLabel,"redacted"),BuildInfo.BUILD_HOST,Key.of(KeyType.STRING,"hostname","redacted"),BuildInfo.BUILD_USER,Key.of(KeyType.STRING,"username","redacted"))
scanner.acceptsInput(fqn)
randomIntBetween(2,8)
debug(Log.IGNORED,ignored)
for (BooleanClause<Filter> booleanClause : booleanClauses) {   sb.append(booleanClause);   sb.append(StringPool.COMMA_AND_SPACE); } 
byteBuffer.get((SIZEOFLONG - 1) - i) & 0xffL
Beans.newDuration(rtProps.getTimeToKillInSeconds()).getSeconds()
setVisibility(GONE)
new RedisCommand<String>("PING")
obj.getIss()
ZONE2_SOURCE_INTERNETRADIO(120)
hasColumn("KBTemplate","engineType")
Q.row(j).minus(delta_qj.scale(lRate))
lastInsert != null && (lastInsert.getFlags() & Command.FLAG_NO_REPEAT) != 0
public SubType on(Expr.EBoolean o){   query.on(o);   return self; } 
dcEndpoints.get(dc).get() < responses.get(dc).get()
StorageService.instance.getTokenMetadata().invalidateCachedRings()
assertFalse(model.getUniqueItems())
Integer.parseInt(taskIdStr)
session.initBounds(context,param)
_parms._export_native_model_prefix != null && _parms._export_native_model_prefix != ""
pathEditor.reset(sdk != null ? sdkModificator : null)
new int[1]
nsDescriptor.getAttribute(localName,namespace,visited)
Integer.parseInt(System.getProperty("cassandra.wait_for_tracing_events_timeout_secs","1"))
isTestOnReturn()
baseURI != null && systemId != null
requestFocusInWindow()
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_label_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR),"")
isNavBarVirtKey && !down && !canceled
assertTrue(String.format("contents or modification time of %s have not changed",this),now.modTime != snapshot.modTime || !Arrays.equals(now.hash,snapshot.hash))
LOG.assertTrue(!myDisposed,"Access to psi files should not be performed after disposal")
new java.util.Date(System.currentTimeMillis() - 3600 * 24)
Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR1 && mCamera != null
resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET
GraphDatabaseSetting<Long>
StringUtil.trimEnd(goExecutablePath,GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH)
loc != null
backups != null && backups.length == 0
DirectoryReader r=IndexReader.open(d); 
mStartActivity.task == null || mStartActivity.task == parent
i <= maxIndex - match.length()
NullPointerException e
link.bone.getWorldBindPosition()
new CompoundShelfFileProcessor("shelf")
args.length != 3
(dir == null) || baseDir.equals(dir)
width / 2.0f
e.getMessage().indexOf(":") + 1
JsonWriteContext.createRootContext(null)
_buildTemplateWithGradle("npm-billboardjs-portlet","billboardjs-dependency-management","--dependency-management-enabled")
ft.commitAllowingStateLoss()
new ProtocolException(sm.getString("upgradeHandler.invalidPreface",connectionId))
new IfNode(currentGraph.unique(new IsNullNode(receiver)),trueSucc,falseSucc,0.1)
listToUpdate.add(attrs.getValue("data-wpid"))
value == null || value.equals("")
mHasSurface && !isGoneForLayoutLw() && !resizingWindows.contains(this)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_TEMPLATE_FILE_NAME),null,_configuration,_templateContextHelper,false)
UIUtils.setBackground(mSliderLayout,mSliderBackgroundDrawableRes)
container.getTimeFormat().equals(TimeFormat.DATE) || container.getTimeFormat().equals(TimeFormat.DATETIME)
RenderingRuleProperty.createOutputIntProperty(OBJECT_TYPE)
mSearchFab.setScaleY(1.0f)
warningBytes > limitBytes && limitBytes != LIMIT_DISABLED
ENABLE_COPY_OPTIMIZATIONS=true
new GenericAggregationFunction(NAME,inputTypes,intermediateType,BIGINT,true,false,factory)
logger.debug("running policy with current-step[" + currentStep.getKey() + "]")
new ELResolver[8]
avatar != null && avatar.getSmallImage() != null && avatar.getSmallImage().getFileReference() != null
@Parameter(names="-usedefaultlisteners",description="Whether to use the default listeners") public String useDefaultListeners="true"; 
!filePath.endsWith(".jpg") && !filePath.endsWith(".gif")
return limit; 
FBUtilities.getLocalAddress()
tx.getOutputs().size() > uxtoIndex
new Dimension(500,400)
path(14)
infos == null || infos.length == 0
p.getDependencies()
file.flushAndForce()
assertEquals(response.getStatusCode(),302)
setupFillPaint(paint,opacity)
wasLoaded && !myStreamProvider.isVersioningRequired() && !(myStreamProvider instanceof OldStreamProviderAdapter || myStreamProvider instanceof CurrentUserHolder)
functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null
mSupportView != null && mSupportView.getLayoutParams() != null
proxyHTTPSServer.setText(Preferences.get("proxy.https.server"))
public abstract class AbstractHikariConfig implements HikariConfigMXBean {   private static final Logger LOGGER=LoggerFactory.getLogger(HikariConfig.class);   private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis(30);   private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis(5);   private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis(10);   private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis(30);   private static int poolNumber;   private static boolean unitTest;   private volatile long connectionTimeout;   private volatile long validationTimeout;   private volatile long idleTimeout;   private volatile long leakDetectionThreshold;   private volatile long maxLifetime;   private volatile int maxPoolSize;   private volatile int minIdle;   private String catalog;   private String connectionCustomizerClassName;   private String connectionInitSql;   private String connectionTestQuery;   private String dataSourceClassName;   private String dataSourceJndiName;   private String driverClassName;   private String jdbcUrl;   private String password;   private String poolName;   private String transactionIsolationName;   private String username;   private boolean isAutoCommit;   private boolean isReadOnly;   private boolean isInitializationFailFast;   private boolean isIsolateInternalQueries;   private boolean isRegisterMbeans;   private boolean isAllowPoolSuspension;   private DataSource dataSource;   private Properties dataSourceProperties;   private IConnectionCustomizer customizer;   private ThreadFactory threadFactory;   private Object metricRegistry;   private Object healthCheckRegistry;   private Properties healthCheckProperties;   /**   * Default constructor  */   public AbstractHikariConfig(){     dataSourceProperties=new Properties();     healthCheckProperties=new Properties();     connectionTimeout=CONNECTION_TIMEOUT;     validationTimeout=VALIDATION_TIMEOUT;     idleTimeout=IDLE_TIMEOUT;     isAutoCommit=true;     isInitializationFailFast=true;     minIdle=-1;     maxPoolSize=10;     maxLifetime=MAX_LIFETIME;     customizer=new IConnectionCustomizer(){       @Override public void customize(      Connection connection) throws SQLException {       }     } ;     String systemProp=System.getProperty("hikaricp.configurationFile");     if (systemProp != null) {       loadProperties(systemProp);     }   }   /**   * Construct a HikariConfig from the specified properties object.  * @param properties the name of the property file  */   public AbstractHikariConfig(  Properties properties){     this();     PropertyBeanSetter.setTargetFromProperties(this,properties);   }   /**   * Construct a HikariConfig from the specified property file name.  <code>propertyFileName</code> will first be treated as a path in the file-system, and if that fails the  ClassLoader.getResourceAsStream(propertyFileName) will be tried.  * @param propertyFileName the name of the property file  */   public AbstractHikariConfig(  String propertyFileName){     this();     loadProperties(propertyFileName);   }   /**   * Get the default catalog name to be set on connections.  * @return the default catalog name  */   public String getCatalog(){     return catalog;   }   /**   * Set the default catalog name to be set on connections.  * @param catalog the catalog name, or null  */   public void setCatalog(  String catalog){     this.catalog=catalog;   }   /**   * Get the name of the connection customizer class to instantiate and execute on all new connections.  * @return the name of the customizer class, or null  */   @Deprecated public String getConnectionCustomizerClassName(){     return connectionCustomizerClassName;   }   /**   * Set the name of the connection customizer class to instantiate and execute on all new connections.  * @param connectionCustomizerClassName the name of the customizer class  */   @Deprecated public void setConnectionCustomizerClassName(  String connectionCustomizerClassName){     this.connectionCustomizerClassName=connectionCustomizerClassName;     LOGGER.warn("The connectionCustomizerClassName property has been deprecated and may be removed in a future release");   }   /**   * Get the customizer instance specified by the user.  * @return an instance of IConnectionCustomizer  */   @Deprecated public IConnectionCustomizer getConnectionCustomizer(){     return customizer;   }   /**   * Set the connection customizer to be used by the pool.  * @param customizer an instance of IConnectionCustomizer  */   @Deprecated public void setConnectionCustomizer(  IConnectionCustomizer customizer){     this.customizer=customizer;     LOGGER.warn("The connectionCustomizer property has been deprecated and may be removed in a future release");   }   /**   * Get the SQL query to be executed to test the validity of connections.  * @return the SQL query string, or null   */   public String getConnectionTestQuery(){     return connectionTestQuery;   }   /**   * Set the SQL query to be executed to test the validity of connections. Using the JDBC4 <code>Connection.isValid()</code> method to test connection validity can be more efficient on some databases and is recommended.  See  {@link HikariConfig#setJdbc4ConnectionTest(boolean)}.  * @param connectionTestQuery a SQL query string  */   public void setConnectionTestQuery(  String connectionTestQuery){     this.connectionTestQuery=connectionTestQuery;   }   /**   * Get the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  * @return the SQL to execute on new connections, or null  */   public String getConnectionInitSql(){     return connectionInitSql;   }   /**   * Set the SQL string that will be executed on all new connections when they are created, before they are added to the pool.  If this query fails, it will be treated as a failed connection attempt.  * @param connectionInitSql the SQL to execute on new connections  */   public void setConnectionInitSql(  String connectionInitSql){     this.connectionInitSql=connectionInitSql;   }   /**   * {@inheritDoc}   */   @Override public long getConnectionTimeout(){     return connectionTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setConnectionTimeout(  long connectionTimeoutMs){     if (connectionTimeoutMs == 0) {       this.connectionTimeout=Integer.MAX_VALUE;     }  else     if (connectionTimeoutMs < 1000) {       throw new IllegalArgumentException("connectionTimeout cannot be less than 1000ms");     }  else {       this.connectionTimeout=connectionTimeoutMs;     }   }   /**   * {@inheritDoc}   */   @Override public long getValidationTimeout(){     return validationTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setValidationTimeout(  long validationTimeoutMs){     if (validationTimeoutMs < 1000) {       throw new IllegalArgumentException("validationTimeout cannot be less than 1000ms");     }  else {       this.validationTimeout=validationTimeoutMs;     }   }   /**   * Get the  {@link DataSource} that has been explicitly specified to be wrapped by thepool.  * @return the {@link DataSource} instance, or null  */   public DataSource getDataSource(){     return dataSource;   }   /**   * Set a  {@link DataSource} for the pool to explicitly wrap.  This setter is notavailable through property file based initialization.  * @param dataSource a specific {@link DataSource} to be wrapped by the pool  */   public void setDataSource(  DataSource dataSource){     this.dataSource=dataSource;   }   public String getDataSourceClassName(){     return dataSourceClassName;   }   public void setDataSourceClassName(  String className){     this.dataSourceClassName=className;   }   public void addDataSourceProperty(  String propertyName,  Object value){     dataSourceProperties.put(propertyName,value);   }   public String getDataSourceJNDI(){     return this.dataSourceJndiName;   }   public void setDataSourceJNDI(  String jndiDataSource){     this.dataSourceJndiName=jndiDataSource;   }   public Properties getDataSourceProperties(){     return dataSourceProperties;   }   public void setDataSourceProperties(  Properties dsProperties){     dataSourceProperties.putAll(dsProperties);   }   public String getDriverClassName(){     return driverClassName;   }   public void setDriverClassName(  String driverClassName){     try {       Class<?> driverClass=this.getClass().getClassLoader().loadClass(driverClassName);       driverClass.newInstance();       this.driverClassName=driverClassName;     }  catch (    Exception e) {       throw new RuntimeException("driverClassName specified class '" + driverClassName + "' could not be loaded",e);     }   }   /**   * {@inheritDoc}   */   @Override public long getIdleTimeout(){     return idleTimeout;   }   /**   * {@inheritDoc}   */   @Override public void setIdleTimeout(  long idleTimeoutMs){     if (idleTimeoutMs < 0) {       throw new IllegalArgumentException("idleTimeout cannot be negative");     }     this.idleTimeout=idleTimeoutMs;   }   public String getJdbcUrl(){     return jdbcUrl;   }   public void setJdbcUrl(  String jdbcUrl){     this.jdbcUrl=jdbcUrl;   }   /**   * Get the default auto-commit behavior of connections in the pool.  * @return the default auto-commit behavior of connections  */   public boolean isAutoCommit(){     return isAutoCommit;   }   /**   * Set the default auto-commit behavior of connections in the pool.  * @param isAutoCommit the desired auto-commit default for connections  */   public void setAutoCommit(  boolean isAutoCommit){     this.isAutoCommit=isAutoCommit;   }   /**   * Get the pool suspension behavior (allowed or disallowed).  * @return the pool suspension behavior  */   public boolean isAllowPoolSuspension(){     return isAllowPoolSuspension;   }   /**   * Set whether or not pool suspension is allowed.  There is a performance impact when pool suspension is enabled.  Unless you need it (for a redundancy system for example) do not enable it.  * @param isAllowPoolSuspension the desired pool suspension allowance  */   public void setAllowPoolSuspension(  boolean isAllowPoolSuspension){     this.isAllowPoolSuspension=isAllowPoolSuspension;   }   /**   * Get whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @return whether or not initialization should fail on error immediately  */   public boolean isInitializationFailFast(){     return isInitializationFailFast;   }   /**   * Set whether or not the construction of the pool should throw an exception if the minimum number of connections cannot be created.  * @param failFast true if the pool should fail if the minimum connections cannot be created  */   public void setInitializationFailFast(  boolean failFast){     isInitializationFailFast=failFast;   }   public boolean isIsolateInternalQueries(){     return isIsolateInternalQueries;   }   public void setIsolateInternalQueries(  boolean isolate){     this.isIsolateInternalQueries=isolate;   }   @Deprecated public boolean isJdbc4ConnectionTest(){     return false;   }   @Deprecated public void setJdbc4ConnectionTest(  boolean useIsValid){     LOGGER.warn("The jdbcConnectionTest property is now deprecated, see the documentation for connectionTestQuery");   }   /**   * Get the Codahale MetricRegistry, could be null.  * @return the codahale MetricRegistry instance  */   public Object getMetricRegistry(){     return metricRegistry;   }   /**   * Set a Codahale MetricRegistry to use for HikariCP.  * @param metricRegistry the Codahale MetricRegistry to set  */   public void setMetricRegistry(  Object metricRegistry){     if (metricRegistry != null) {       if (metricRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           metricRegistry=(MetricRegistry)initCtx.lookup((String)metricRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(metricRegistry instanceof MetricRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.MetricRegistry");       }     }     this.metricRegistry=metricRegistry;   }   /**   * Get the Codahale HealthCheckRegistry, could be null.  * @return the Codahale HealthCheckRegistry instance  */   public Object getHealthCheckRegistry(){     return healthCheckRegistry;   }   /**   * Set a Codahale HealthCheckRegistry to use for HikariCP.  * @param healthCheckRegistry the Codahale HealthCheckRegistry to set  */   public void setHealthCheckRegistry(  Object healthCheckRegistry){     if (healthCheckRegistry != null) {       if (healthCheckRegistry instanceof String) {         try {           InitialContext initCtx=new InitialContext();           healthCheckRegistry=(HealthCheckRegistry)initCtx.lookup((String)healthCheckRegistry);         }  catch (        NamingException e) {           throw new IllegalArgumentException(e);         }       }       if (!(healthCheckRegistry instanceof HealthCheckRegistry)) {         throw new IllegalArgumentException("Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry");       }     }     this.healthCheckRegistry=healthCheckRegistry;   }   public Properties getHealthCheckProperties(){     return healthCheckProperties;   }   public void setHealthCheckProperties(  Properties healthCheckProperties){     this.healthCheckProperties.putAll(healthCheckProperties);   }   public void addHealthCheckProperty(  String key,  String value){     healthCheckProperties.setProperty(key,value);   }   public boolean isReadOnly(){     return isReadOnly;   }   public void setReadOnly(  boolean readOnly){     this.isReadOnly=readOnly;   }   public boolean isRegisterMbeans(){     return isRegisterMbeans;   }   public void setRegisterMbeans(  boolean register){     this.isRegisterMbeans=register;   }   /**   * {@inheritDoc}   */   @Override public long getLeakDetectionThreshold(){     return leakDetectionThreshold;   }   /**   * {@inheritDoc}   */   @Override public void setLeakDetectionThreshold(  long leakDetectionThresholdMs){     this.leakDetectionThreshold=leakDetectionThresholdMs;   }   /**   * {@inheritDoc}   */   @Override public long getMaxLifetime(){     return maxLifetime;   }   /**   * {@inheritDoc}   */   @Override public void setMaxLifetime(  long maxLifetimeMs){     this.maxLifetime=maxLifetimeMs;   }   /**   * {@inheritDoc}   */   @Override public int getMaximumPoolSize(){     return maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public void setMaximumPoolSize(  int maxPoolSize){     if (maxPoolSize < 1) {       throw new IllegalArgumentException("maxPoolSize cannot be less than 1");     }     this.maxPoolSize=maxPoolSize;   }   /**   * {@inheritDoc}   */   @Override public int getMinimumIdle(){     return minIdle;   }   /**   * {@inheritDoc}   */   @Override public void setMinimumIdle(  int minIdle){     if (minIdle < 0) {       throw new IllegalArgumentException("minimumIdle cannot be negative");     }     this.minIdle=minIdle;   }   /**   * Get the default password to use for DataSource.getConnection(username, password) calls.  * @return the password  */   public String getPassword(){     return password;   }   /**   * Set the default password to use for DataSource.getConnection(username, password) calls.  * @param password the password  */   public void setPassword(  String password){     this.password=password;   }   /**   * {@inheritDoc}   */   @Override public String getPoolName(){     return poolName;   }   /**   * Set the name of the connection pool.  This is primarily used for the MBean to uniquely identify the pool configuration.  * @param poolName the name of the connection pool to use  */   public void setPoolName(  String poolName){     this.poolName=poolName;   }   public String getTransactionIsolation(){     return transactionIsolationName;   }   /**   * Set the default transaction isolation level.  The specified value is the constant name from the <code>Connection</code> class, eg.  <code>TRANSACTION_REPEATABLE_READ</code>.  * @param isolationLevel the name of the isolation level  */   public void setTransactionIsolation(  String isolationLevel){     this.transactionIsolationName=isolationLevel;   }   /**   * Get the default username used for DataSource.getConnection(username, password) calls.  * @return the username  */   public String getUsername(){     return username;   }   /**   * Set the default username used for DataSource.getConnection(username, password) calls.  * @param username the username  */   public void setUsername(  String username){     this.username=username;   }   /**   * Get the thread factory used to create threads.  * @return the thread factory (may be null, in which case the default thread factory is used)  */   public ThreadFactory getThreadFactory(){     return threadFactory;   }   /**   * Set the thread factory to be used to create threads.  * @param threadFactory the thread factory (setting to null causes the default thread factory to be used)  */   public void setThreadFactory(  ThreadFactory threadFactory){     this.threadFactory=threadFactory;   }   public void validate(){     Logger logger=LoggerFactory.getLogger(getClass());     validateNumerics();     if (connectionCustomizerClassName != null) {       try {         getClass().getClassLoader().loadClass(connectionCustomizerClassName);       }  catch (      Exception e) {         logger.warn("connectionCustomizationClass specified class '" + connectionCustomizerClassName + "' could not be loaded",e);         connectionCustomizerClassName=null;       }     }     if (driverClassName != null && jdbcUrl == null) {       logger.error("when specifying driverClassName, jdbcUrl must also be specified");       throw new IllegalStateException("when specifying driverClassName, jdbcUrl must also be specified");     }  else     if (driverClassName != null && dataSourceClassName != null) {       logger.error("both driverClassName and dataSourceClassName are specified, one or the other should be used");       throw new IllegalStateException("both driverClassName and dataSourceClassName are specified, one or the other should be used");     }  else     if (jdbcUrl != null) {     }  else     if (dataSource == null && dataSourceClassName == null) {       logger.error("one of either dataSource, dataSourceClassName, or jdbcUrl and driverClassName must be specified");       throw new IllegalArgumentException("one of either dataSource or dataSourceClassName must be specified");     }  else     if (dataSource != null && dataSourceClassName != null) {       logger.warn("both dataSource and dataSourceClassName are specified, ignoring dataSourceClassName");     }     if (transactionIsolationName != null) {       UtilityElf.getTransactionIsolation(transactionIsolationName);     }     if (poolName == null) {       poolName="HikariPool-" + poolNumber++;     }     if (LOGGER.isDebugEnabled() || unitTest) {       logConfiguration();     }   }   private void validateNumerics(){     Logger logger=LoggerFactory.getLogger(getClass());     if (validationTimeout > connectionTimeout && connectionTimeout != 0) {       logger.warn("validationTimeout is greater than connectionTimeout, setting validationTimeout to connectionTimeout.");       validationTimeout=connectionTimeout;     }     if (minIdle < 0 || minIdle > maxPoolSize) {       minIdle=maxPoolSize;     }     if (maxLifetime < 0) {       logger.error("maxLifetime cannot be negative.");       throw new IllegalArgumentException("maxLifetime cannot be negative.");     }  else     if (maxLifetime > 0 && maxLifetime < TimeUnit.SECONDS.toMillis(30)) {       logger.warn("maxLifetime is less than 30000ms, using default {}ms.",MAX_LIFETIME);       maxLifetime=MAX_LIFETIME;     }     if (idleTimeout != 0 && idleTimeout < TimeUnit.SECONDS.toMillis(10)) {       logger.warn("idleTimeout is less than 10000ms, using default {}ms.",IDLE_TIMEOUT);       idleTimeout=IDLE_TIMEOUT;     }  else     if (idleTimeout > maxLifetime && maxLifetime > 0) {       logger.warn("idleTimeout is greater than maxLifetime, setting to maxLifetime.");       idleTimeout=maxLifetime;     }     if (leakDetectionThreshold != 0 && leakDetectionThreshold < TimeUnit.SECONDS.toMillis(2) && !unitTest) {       logger.warn("leakDetectionThreshold is less than 2000ms, setting to minimum 2000ms.");       leakDetectionThreshold=2000L;     }   }   private void logConfiguration(){     LOGGER.debug("HikariCP pool {} configuration:",poolName);     final Set<String> propertyNames=new TreeSet<String>(PropertyBeanSetter.getPropertyNames(HikariConfig.class));     for (    String prop : propertyNames) {       try {         Object value=PropertyBeanSetter.getProperty(prop,this);         if ("dataSourceProperties".equals(prop)) {           Properties dsProps=PropertyBeanSetter.copyProperties(dataSourceProperties);           dsProps.setProperty("password","<masked>");           value=dsProps;         }         value=(prop.contains("password") ? "<masked>" : value);         LOGGER.debug((prop + "................................................").substring(0,32) + (value != null ? value : ""));       }  catch (      Exception e) {         continue;       }     }   }   abstract protected void loadProperties(  String propertyFileName);   public void copyState(  AbstractHikariConfig other){     for (    Field field : AbstractHikariConfig.class.getDeclaredFields()) {       if (!Modifier.isFinal(field.getModifiers())) {         field.setAccessible(true);         try {           field.set(other,field.get(this));         }  catch (        Exception e) {           throw new RuntimeException("Exception copying HikariConfig state: " + e.getMessage(),e);         }       }     }   } } 
currentBlog.getLocalTableBlogId()
new JLabel(GroovyBundle.message("dynamic.toolwindow.search.elements"))
shadowSize <= 0
!isEnabled() || listener == null
esVersion.onOrAfter(Version.V_5_3_0_UNRELEASED)
retVal=(constValue + constValue2 == x)
_connector.getResponse("GET /foo HTTP/1.0\n\n")
PrivacyManager.getRestricted(holder.row.getContext(),xAppInfo.getUid(),true)
receiverUserId != mCurrentUserId && !isUidALocationProvider(receiver.mUid)
ThemeUtils.primaryColor(getContext())
uri == null || LauncherActivity.isLaunchUri(uri)
createTestBlockCapsule(1533529947843L + 9000,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
id=34
Ordered.LOWEST_PRECEDENCE - 5
new ClusterStateUpdateResponse(false)
singleValueAggregation.has(String.valueOf(VALUE)) && !singleValueAggregation.get(String.valueOf(VALUE)).isJsonNull()
new ListenerInfo("ajp",server.getLocalAddress(),openListener,null,server)
new IndexWriter(directory,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
return 1906861161L; 
curArticle.getResourcePrimKey()
collectionRecords != null && !collectionRecords.isEmpty()
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadUrl.Null"))
new ClassPathResource("word2vecserialization/google_news_30.bin.gz").getFile(".gz")
userSession.addComponentUuidPermission(UserRole.ADMIN,"PROJECT_1","PROJECT_1")
out.writeInt(mProgress)
removeModelSpecificMarkup(base,namePattern)
new SslContextBuilder(true)
output.isEmpty()
Metric<Long>
currentFileContext.get(BindingContext.FILE_TO_NAMESPACE,currentFile)
itemView.getScaleY()
!"".equals(callRingtone.canPlayType("audio/mpeg;"))
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS))
new JBossServerCapabilities()
Util.SDK_INT <= 25
createHandlerResult(tokenCredential,p)
LOGGER.debug("Application {} refreshed",newApp)
tiClus.setText(STRING_CLUSTERS)
getServiceForUserLocked(userId)
updateTransitLocked(TRANSIT_TASK_TO_FRONT,starting,options)
GraphAnswer<Id>
new CsvFilter(columns)
StringBuilder sb=new StringBuilder("["); 
String.valueOf(0xFL)
constructors.length > 0 && list != null
getStartPeriod() + offset * getPeriodLength()
/**   * Transforms the given object, and returns the transformed value.  * @param original The object to transform.  * @return The transformed object.  */ OUT transform(IN original); 
OptionalIdentifiedDefinition<FromDefinition>
public PhotoSize getThumb(){   return thumb; } 
query.resolutions().toArray()
constants.size() != 1
new DatabaseExplorerDialog(shell,SWT.NONE,dbinfo,transMeta.getDatabases(),true)
(operations.byteAt(contractType / 8) & (1 << (contractType % 8))) != 0
"-" + COLLECTION + " and -"+ CONFNAME+ " are required for "+ LINKCONFIG
SAVE_TRACK_INTERVAL.setModeDefaultValue(ApplicationMode.BICYCLE,5000)
LineHashKey that=(LineHashKey)o; 
contentLength <= 0
id=25
items[16]
ruleContext.throwWithRuleError("Xcode version must be specified to use an Apple CROSSTOOL")
groupPersistence.countByC_P_S(group.getCompanyId(),group.getGroupId(),true)
are("resource1-reflections.xml","resource2-reflections.xml")
columnType.equalsIgnoreCase("date") || columnType.equalsIgnoreCase("timestamp")
appOps.checkOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
Element[]
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","impersonation")
Arrays.asList("SuppressWithNearbyCommentFilter.fileContents","SuppressionCommentFilter.fileContents")
ConditionalOnEnabledHealthIndicator.class
Math.min(1.0,type.getProbability() / (1.0 - probabilityB))
new InetSocketAddress(configuration.getRestListenUri().getHost(),configuration.getRestListenUri().getPort())
JMeterUtils.getPropDefault("proxy.cert.validity",7)
url.addEncodedArgument(selectName,value)
fields.put(PERMISSIONS,perms)
channel.write(response,remoteAddress)
logger.debug("Error connecting to Plex",e)
++length >= maxFieldLength
new ModelNode(40)
logger.debug("Cannot paly favorite ({})",e.getMessage())
ExecutionStrategyParameters parameters
assertEquals(ChronicleEngineMapEventType.REMOVE,mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))
new EnterSelectionDialog(shell,procs,Messages.getString("DBProcDialog.EnterSelection.DialogTitle"),Messages.getString("DBProcDialog.EnterSelection.DialogMessage"))
new TextSelection(queryStartOffset + pos.position,0)
returnTypeElement == null || returnType == null
queryUpdateLatestPosition=new NamedParameterStatement(globalConnection,query)
dockedBounds.left - dockDividerWidth
Helpers.exec(j4p,"setProfileFeatures(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
LOGGER.warn("Found legacy attribute value [{}] which will be converted to [{}] as part of a service multifactor authentication policy." + "The definition SHOULD manually be upgraded to the new supported syntax",valueToConvert,RegisteredServiceMultifactorPolicy.FailureModes.UNDEFINED)
message.get(Message.REQUESTOR_ROLE)
new IllegalArgumentException(e.getMessage(),e)
LOG.debug("Date could not be parsed. Was set to NOW because {} is true.",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE)
d.addWelcomePages(file)
new Xrb28ProtocolDecoder(Xrb28Protocol.this)
pos.getInputType(usage) == type && pos.get(usage) == this
me.showWebPage(errorUrl,false,true,null)
public void setMaxFrameSize(long maxFrameSize) throws ConnectionException {   if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",Long.toString(maxFrameSize),Integer.toString(MIN_MAX_FRAME_SIZE),Integer.toString(MAX_MAX_FRAME_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.maxFrameSize=(int)maxFrameSize; } 
displayAttachmentSavedMessage(file.toString())
maskArray != null && maskArray.isAttached()
mTask != null && mTask.icon != null
new SystemException("Company id should never be " + UserImpl.DEFAULT)
node.getLocalName()
MAX_DISMISSAL_ON_SWIPE_UP_SHOW=2
public static ScaleTo $(float scaleX,float scaleY,float duration){   ScaleTo action=pool.obtain();   action.scaleX=scaleX;   action.scaleY=scaleY;   action.duration=duration;   action.invDuration=1 / duration;   return action; } 
zone5.equals(zone4)
getClientConfig().getAddresses()
logger.debug("An exception occurred while parsing a date : '{}'",e.getMessage())
destCharset=StandardCharsets.UTF_8
Arrays.asList(gA0,gA1,gB2,gB3,gC1,gC2)
Boolean.parseBoolean(this.getOptional("kylin.query.escape-default-keyword","false"))
new SubjectSearchEmitterFragment()
fieldTree.isStandalone()
properties.get(logslow)
old + 19
new String[13]
target.getClass().getMethod(getterName,EMPTY_CLASS_ARRAY)
assertEquals(5,body.size())
!isValid(payloadJSONObject)
myPromptHooksExtensionFile == null || !myPromptHooksExtensionFile.exists()
FitNesseRunner.initContext(new File(ContextConfigurator.DEFAULT_CONFIG_FILE),fitNesseRootPath,ContextConfigurator.DEFAULT_ROOT,port)
EMOJI_SMALL=0.90
dataType.toString()
setChangePincodeView(true)
new BalloonImpl(new JLabel("FUCK"),Color.black,MessageType.ERROR.getPopupBackground(),true,true,true,true,true,0,true,null,false,500,25,0,0,false,"This is the title",new Insets(2,2,2,2),true,false,Layer.normal)
config != null && !config.isEmpty()
uuid.replace("-","").substring(0,7)
"Error: Could not get/register id for this client: " + client + " caused by "+ e
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages.json",null,paging.asPostParameterList(),true))
new SpriteBatch(5460)
asDoubleReg(input)
HazelcastClient.newHazelcastClient(clientConfig)
plus > 0
map.tryPut(key,value,60,TimeUnit.SECONDS)
/**   * Get the <em>required</em>  {@link Method} associated with the current testor container. <p>Use this method as an alternative to  {@link #getTestMethod()} for usecases in which the test method is required to be present.  * @return the test method; never {@code null}  * @throws PreconditionViolationException if the test method is not presentin this  {@code ExtensionContext}  */ default Method getRequiredTestMethod(){   return Preconditions.notNull(getTestMethod().orElse(null),"Illegal state: required test method is not present in the current ExtensionContext"); } 
assertEquals(row.getField(0),3L)
sourceString=Html.fromHtml(this.source).toString()
display.equals(taskRect) || taskRect.isEmpty()
flowParameters.putAll(flowParam)
!note.isLocked() && showThumbnails && note.getAttachmentsList().size() > 0
IOUtil.readUTF(in)
new SdkListCellRenderer("<Project Default>",myInterpreterComboBox.getRenderer())
SIPCommCheckBox formatPhoneNumber=new SIPCommCheckBox("",ConfigurationManager.isNormalizePhoneNumber()); 
getRepoUrl().equals(gitHubRepo.getRepoUrl()) && getBranch().equals(gitHubRepo.getBranch())
final ClientState clientState=(ClientState)msg.obj; 
type == Sensor.TYPE_TEMPERATURE || type == Sensor.TYPE_AMBIENT_TEMPERATURE
inflater.inflate(R.layout.mainfrag,container,false)
AuditEventFormatter messageFormatter
connectPromise.tryFailure(t)
mCryptConnector.execute("cryptfs","deleteuserkey",userHandle)
assertThat(lastTrade.getFeeAmount()).isEqualTo("0.001")
!availableLocale.equals(defaultLocale)
w.applyTo(myNode)
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo(java.lang.Class...)","foo(java.lang.Class<?>...)","foo-java.lang.Class...-","foo-java.lang.Class<?>...-")
modelCalcinator.renderPart("Calcinator")
plugin.processPayment(account.getId(),directPaymentId,account.getPaymentMethodId(),amount,currency,properties,callContext)
ScanFilterAndProjectOperator.class
new WordToSentenceProcessor<IN>(WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS)
obj == proxiedObj
new StringBundler(5)
expirationPeriod * 60L * 1000L
recipient.toShortString()
System.getProperty(key)
new ImportControl(stack.peek(),name,regex)
LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,true,progress)
bssid == null || !BSSID_PATTERN.matcher(bssid).matches()
addView(mTitleLayout)
height > 0
fieldType.equals(SupportedFieldType.DECIMAL.toString()) || fieldType.equals(SupportedFieldType.MONEY.toString())
client.replicationControllers()
TransitiveInfoCollection current
schemas == null || schemas.size() == 0
mMediaPlayer.isPlaying()
name.toString()
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:11500}")
frag.addElement("status")
new StringBuilder("Unexpected cipher suites: ")
group.getGroupId()
mState == StatusBarState.SHADE_LOCKED && !isCollapsing()
new GroupDialog(frame,oldGroup)
resultsJSONObject.put("results",jsonObject)
UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {   PsiDocumentManager.getInstance(myFixture.getProject()).commitAllDocuments();   final String intentionName=PyBundle.message("sdk.gen.stubs.for.binary.modules",myUseQuickFixWithThisModuleOnly);   IntentionAction intention=myFixture.findSingleIntention(intentionName);   if (intention instanceof IntentionActionDelegate) {     intention=((IntentionActionDelegate)intention).getDelegate();   }   Assert.assertNotNull("No intention found to generate skeletons!",intention);   Assert.assertThat("Intention should be quick fix to run",intention,Matchers.instanceOf(QuickFixWrapper.class));   final LocalQuickFix quickFix=((QuickFixWrapper)intention).getFix();   Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run",quickFix,Matchers.instanceOf(GenerateBinaryStubsFix.class));   final Task fixTask=((GenerateBinaryStubsFix)quickFix).getFixTask(myFixture.getFile());   fixTask.run(new AbstractProgressIndicatorBase()); } ,ModalityState.defaultModalityState())
new V(9,new BooleanSetting(Account.DEFAULT_SORT_ASCENDING))
Assert.assertEquals(3,autoPartition.getPartitionNum())
COLUMNS=6
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=6
new PrintWriter(deprecationPrinter,true)
fieldExpression != null
internedParseStringCharacters(innerText)
!active || nameSuggestionContext == null
mUserPaddingStart > 0
isSupportsAlterColumnType()
hex.length()
Ddeml.INSTANCE.DdeFreeDataHandle(hData)
file.toURI()
SAM<Integer>
RuntimeContext.class
assertEquals(2,r.getProperties().size())
e.getMessage().startsWith("fields stored in the db can't have . in them")
StringUtil.isEmpty(name)
PersistenceManagerImpl.class
Assert.assertEquals("Message key '" + retrievedMessage + "' is not valid","unable.open.cause",retrievedMessage)
halfTextureSize != 0 && scaleX > 0 && scaleY > 0
Collections.shuffle(builders,random)
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     associatedTask.setUpdated(new Date());     activateTask(associatedTask,true,false);   } } ,myProject.getDisposed())
!debuggerSettings.equals(currentSettings) || Registry.is("debugger.mayBringFrameToFrontOnBreakpoint") != myFocusAppCheckBox.isSelected()
maxCards[i]=maxCardinality
ParallelStreams::iterativeSum
deprecated.getActiveRules(true)
file != null && file.isValid()
metric instanceof MetricsRate || metric instanceof MetricsString || metric instanceof MetricsHistogram|| metric instanceof ExactCounterMetric
mode.getFormattedName().toLowerCase(Locale.ENGLISH)
getAncestors()
allOf(withContentDescription("drawer open"),withParent(withId(R.id.toolbar)))
sendCommand(CLIENT,Keyword.GETNAME.raw)
sDefaults.putBoolean(KEY_PERSIST_LPP_MODE_BOOL,true)
Assert.assertEquals(new InetSocketAddress(defaultHostname,20000),masterAddress)
generateRandomStringArray(20,20,false,false)
Integer.parseInt(nextArgRequired())
origin.realComponent().doubleValue() <= other
new GeneratorException("Error writing " + file.getAbsolutePath(),e)
mContext.startActivityAsUser(intent,UserHandle.of(mCurrentUserId))
!isSite()
string.toLowerCase(Locale.US)
@Override public CDATA setText(String str){   throw ImmutableElement.immutableError(this); } 
String... pathParams
jsonObject.put("displayStyle",displayStyleFacet)
new IllegalStateException(String.format("File \"%1$s\" has incorrect indentation in comment." + "Line %2$d: comment:%3$d, actual:%4$d.",aFileName,lineNumber,indentInComment,actualIndent))
registerProblem(exceptClassRef,"Too broad exception clause")
!COMMENTS.contains(type2) && BLOCKS.contains(parentType) && !(node1.getTreeNext() instanceof PsiErrorElement)&& !(node1.getLastChildNode() instanceof PsiErrorElement)
cursor > consumer.get()
height >= seaLevel
createClient(addr.getHost(),addr.getPort(),cfg.getTimeout())
result=90
tagService.getTagsAsString(task.getId(),true)
String.format("%n%s after %d ms\n" + "[%10d tests found     ]\n" + "[%10d tests started   ]\n"+ "[%10d tests skipped   ]\n"+ "[%10d tests aborted   ]\n"+ "[%10d tests successful]\n"+ "[%10d tests failed    ]\n",msg,(this.timeFinished - this.timeStarted),this.testsFound.get(),this.testsStarted.get(),this.testsSkipped.get(),this.testsAborted.get(),this.testsSucceeded.get(),this.testsFailed.get())
(ResourceAdapterXmlDeploymentService)controller.getService()
ConfigPropertyVetoException ex1
ethLog.getError()
findAllAndRemove(query,null,collectionName)
new BranchedDataException("Unable to perform a mandatory sanity check due to an IO error.",e)
counter > max
trimmedLine.startsWith("catch (") || trimmedLine.startsWith("if (") || trimmedLine.startsWith("else if (")|| trimmedLine.startsWith("while (")|| Validator.isNotNull(ifClause)
@NotNull protected abstract T createNewStatement(@NotNull PsiElementFactory factory,@NotNull PsiElement expression,@NotNull PsiElement context); 
new StepMeta("SelectValues",stepName,svm)
Flux.fromIterable(this.handlerMappings).concatMap(mapping -> mapping.getHandler(exchange)).next().switchIfEmpty(Mono.error(HANDLER_NOT_FOUND_EXCEPTION))
getBaseVersion()
updateElement != GROUPS && lastUpdateIdx < firstUpdateIdx
this.file.maxContentLength >= 0
LinkedHashMap<String,ASTNode>
chart.createBufferedImage(bounds.width,bounds.height,BufferedImage.TYPE_INT_RGB,null)
CacheProjection<K,V>
this.transactionsRepository.getTransaction(this.xidTransactionID)
ArraySet<UidRange>
destroy.isInternal()
sendTo("direct:foo")
sm.getString("standardContext.startingContext",logName())
randomIntBetween(1,2000)
super((JFrame)null,JMeterUtils.getResString("search_tree_title"),false); 
getJndiString(JNDI_JMX_PASSWORD)
i <= end
delegate.writeStartElement(prefix,localName,namespaceURI)
io.getCount(buf) < idx
mWindowingMode != WINDOWING_MODE_PINNED
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostname,streamId){   @Override public void execute(){     try {       writeSynReset(streamId,errorCode);     }  catch (    IOException ignored) {     }   } } )
Control.getSingleton().getExtensionLoader().addonFilesRemoved()
Byte.toUnsignedLong(seed[0])
createContractFromJson(contractName,json)
op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(false)
Slog.e(TAG,"couldn't inflate view for notification " + ident,exception)
_sumsqe / _wsum
useOsmandKeyboard || !orientationPortrait
energyProcessor.calculateGlobalEnergyLimit(account)
PORT_2=8180
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFUser,true,false)
referencedDomainClass.getFullName()
level <= 0
Long contentLength=ctx.getOriginContentLength(); 
AnnotatedElementUtils.findAnnotationAttributes(method,annotationType)
sm.getString("standardSession.setAttribute.ise",getIdInternal())
JSError.make(AbstractCompiler.READ_ERROR,getName(),e.getMessage())
getPlayer(server,args,0,true,false)
getLogger().warn("Unknown classloader: " + loader.getClass().getName())
ssl.hasDefined(CommonAttributes.PROTOCOL)
query.from(employee).distinctOn(employee.datefield,employee.timefield)
Arrays.hashCode(mData)
this.logger.isDebugEnabled()
decoder.decode(null,null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf1)))
new KMLNetworkLinkTransformer(wms,mapContent)
getShortName()
mappers.mapper().searchQuoteAnalyzer()
fragmentEntryPersistence.findByG_FCI(groupId,fragmentCollectionId,start,end,orderByComparator)
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],convolutionMode == ConvolutionMode.Same,Pooling2D.Pooling2DType.PNORM,Pooling2D.Divisor.INCLUDE_PADDING,(double)pnorm,outH,outW,output)
System.out.println(hostResult)
oauth20AuthenticationRequestServiceSelectionStrategy()
FastMath.min(origin,num.floatValue())
BufferUtil.zeroBuffer(1)
CHATTY=false
new Prepared(implementations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),finding)
mDrawBitmap == null || mDrawBitmap.getWidth() != mViewPortHandler.getChartWidth() || mDrawBitmap.getHeight() != mViewPortHandler.getChartHeight()
prevFolding != null
new GSPSitemeshPage()
queryBuilder.append(FlowManager.getTableName(table))
parser.getBoolean(KEY_ANIMATION_DISABLED,false)
OverrideResolver.generateOverridesInFunctionGroup(propertyName,null,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
u1.version() == 1 && u2.version() == 1
nodePath != null && nodePath.size() > 0
id=16509
new PooledCFAttribute(LOAD_BALANCING_CLASS_NAME,LOAD_BALANCING_POLICY_CLASS_NAME_METHOD)
ArrayUtil.isEmpty(groupIds)
event instanceof ArtifactCacheConnectEvent
cursor.checkAndClearBoundsFlag()
this.dataType()
secConn != null && secConn.size() > 0
lastConnectionFailure.get()
childParams.viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER && childParams instanceof GridLayoutParams
new ShardRouting(index,shardId,currentNodeId,null,null,primary,state,version,null,AllocationId.newInitializing(),true)
new PaymentApiException(e,ErrorCode.PAYMENT_PLUGIN_EXCEPTION,e.getErrorMessage())
new ImmutableInstruction3rc(Opcode.INVOKE_DIRECT_RANGE,instruction.getStartRegister(),instruction.getRegisterCount(),instruction.getReference())
executeWrappedCommandProtocol(databaseName,getCommand(),createCommandDecoder(),connection,binding.getReadPreference(),commandTransformer(source))
mUiHandler.postDelayed(pae,timeout)
log.debug("Testing debug(msg,null)")
Flux.fromStream(viewResolverStream).concatMap(viewResolver -> viewResolver.resolveViewName(name(),locale)).next().switchIfEmpty(Mono.error(new IllegalArgumentException("Could not resolve view with name '" + name() + "'")))
pressedView.post(new Runnable(){   @Override public void run(){     if (pressedView != null) {       pressedView.setPressed(false);     }   } } ,100)
setRestitution(objectId,restitution)
mBluetoothHeadset.disconnectAudio()
Futures.transform(executionClients.getRemoteExecutionService().execute(actionDigest),result -> {   executingScope.close();   return result; } ,MoreExecutors.directExecutor())
entry != null && !DropboxUploadMode.force.equals(mode)
hintedMessage.getMessageId()
slash < 0 || resource.exists()
compress ? COMPRESS_FLAG_MASK : 0
new IndexWriter(rd,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
ParamUtil.getLong(actionRequest,"nodeId")
name.equals("getSimOperator") || name.equals("gsm.sim.operator.numeric")
new Alarm(Alarm.ThreadToUse.SWING_THREAD,this)
new CrypticClue("Search the crates near a cart in Varrock.",CRATE_5107,new WorldPoint(3226,3452,0),"South east of Varrock Palace, south of the tree farming patch.")
serialVersionUID=639716205
EnumSet.of(Scope.JAVA_FILE,Scope.TEST_SOURCES)
mRS.nMeshGetIndices(mID,idxIDs,primitives,idxCount)
returnTypeOfGetMethod != null && !TypeUtils.noExpectedType(expectedType)
note.get_id() == 0 && !noteTmp.isChanged(note)
mPipeManager.writeDocument(getContext(),mtpManager,new Identifier(0,0,1))
new HgSetExecutableDialog(myProject)
new RuntimeException("Downloading Gradle distributions with HTTP Basic Authentication is not supported on your JVM.",ex)
BluetoothConnectReceiver.class
entry.getHeader().getEventLength() * 6
InetAddress.getByName("localhost")
Aria.download(this).getTaskList()
new IndexWriter(storeDirectory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
block.getX() + 1
!this.sslHostnameValidationEnabled
sum > 1
discoveredFileCollectionSnapshotter.registerSerializers(serializerRegistry)
registryCache.put(channel.getName(),registry)
compressedProto.length < 391000
getType().isWildcard()
b.getMessage()
element != null && element.getKind() != ElementKind.CONSTRUCTOR
response.getStatus() < 400 && !(t instanceof IOException)
!exported
ZWaveSwitchAllCommandClass.class
object=bean
Character[]
IllegalStateException nsee
id >= holdingColor.length
!byteBuf.readable()
((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) && (featureId != FEATURE_CUSTOM_TITLE) && (featureId != FEATURE_ACTION_MODE_OVERLAY)
ServiceLoader.load(ReportSenderFactory.class,getClass().getClassLoader())
checkBoxView.setButtonDrawable(R.drawable.btn_check)
cr.session_timeout_ms != null && cr.session_timeout_ms != 0
state.isFrameTypePermitted(FrameType.DATA)
Trans != NO_TRANSPOSE
logger.warn("Channel error",cause)
format.getName()
DEFAULT_PACKAGE_PARSER_CACHE_ENABLED=true
Response schema(Property property); 
getInt(DISPLAY_OPTION,1)
/**   * An action to create an implementation of  {@link ExecutingTransformer} that support Java 9 modules.  */ protected enum FactoryCreationOption implements PrivilegedAction<Factory> {/**   * The singleton instance.  */ INSTANCE; @Override @SuppressFBWarnings(value="REC_CATCH_EXCEPTION",justification="Exception should not be rethrown but trigger a fallback") public Factory run(){   try {     return new Factory.ForJava9CapableVm(new ByteBuddy().subclass(ExecutingTransformer.class).name(ExecutingTransformer.class.getName() + "$ByteBuddy$ModuleSupport").method(named("transform").and(takesArgument(0,JavaType.MODULE.load()))).intercept(MethodCall.invoke(ExecutingTransformer.class.getDeclaredMethod("transform",Object.class,String.class,Class.class,ProtectionDomain.class,byte[].class)).onSuper().withAllArguments()).make().load(ExecutingTransformer.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER_PERSISTENT.with(ExecutingTransformer.class.getProtectionDomain())).getLoaded().getDeclaredConstructor(ByteBuddy.class,TypeLocator.class,TypeStrategy.class,LocationStrategy.class,Listener.class,NativeMethodStrategy.class,InitializationStrategy.class,BootstrapInjectionStrategy.class,DescriptionStrategy.class,RawMatcher.class,Transformation.class));   }  catch (  Exception ignored) {     return Factory.ForLegacyVm.INSTANCE;   } } @Override public String toString(){   return "AgentBuilder.Default.ExecutingTransformer.InheritanceAction." + name(); } } 
ContainerUtil.newHashSet(EDITOR_TOOLBAR,PROJECT_VIEW_TOOLBAR,TESTTREE_VIEW_TOOLBAR,MAIN_TOOLBAR,TOOLBAR,RUNNER_TOOLBAR,ANT_EXPLORER_TOOLBAR,ANT_MESSAGES_TOOLBAR,COMPILER_MESSAGES_TOOLBAR,TODO_VIEW_TOOLBAR,STRUCTURE_VIEW_TOOLBAR,USAGE_VIEW_TOOLBAR,DEBUGGER_TOOLBAR,CALL_HIERARCHY_VIEW_TOOLBAR,METHOD_HIERARCHY_VIEW_TOOLBAR,TYPE_HIERARCHY_VIEW_TOOLBAR,JAVADOC_TOOLBAR,FILE_HISTORY_TOOLBAR,FILEHISTORY_VIEW_TOOLBAR,LVCS_DIRECTORY_HISTORY_TOOLBAR,CHANGES_VIEW_TOOLBAR,PHING_EXPLORER_TOOLBAR,PHING_MESSAGES_TOOLBAR,ANALYZE_STACKTRACE_PANEL_TOOLBAR,DIFF_TOOLBAR)
Files.exists(start,LinkOption.NOFOLLOW_LINKS)
collection.setLazy(false)
replicatedMapService.getReplicatedRecordStore(mapName,true)
IRON_GOLEM("VillagerGolem",IronGolem.class,99)
getSupportActionBar()
getAffiliatesByAdmin("owner")
mFrustum.update(mTmpMatrix)
ImmutableList.of("/bin/bash","-e","-c","python signer.py $APK key.properties > $OUT")
SPACE_BEFORE_COLON_IN_FOREACH=true
probability=0.5
beforeCaret.getText().indexOf('\\') >= 0
this.thrown.expect(IllegalStateException.class)
tokens.length - 1
Object shooter=((Projectile)event.getDamager()).getShooter(); 
entry.lastModified()
Math.floor(internalPower[in] / totalPowerContained * totalPowerConsumed)
Collections.emptyList()
new WorldPoint(3026,3628,0)
new Resource(url,name,wrapper.isParserRestricted())
getMeasuredWidth()
cascadeValidationToOne(errors,bean,associatedObject,persistentProperty,propertyName + "[" + (idx++)+ "]",idx)
"jar".equals(url.getProtocol()) || url.toString().endsWith(".jar")
Thread.sleep(1100)
msgInfoHolder != null && msgInfoHolder.selected != selected
matcher.replaceFirst(replacementQuoted)
ExamplesUtils.classLoader().getResource(HIBERNATE_CFG)
new JBHiDPIScaledImage(myScale,newUserWidth,newUserHeight,getType(),RoundingMode.ROUND)
config.setSslProtocol(ssl.get(CommonAttributes.PROTOCOL).asString())
pixmap.fillCircle(x,y,radius,color)
shouldBackup=true
i % dictionarySize
new NullPointerException("Emitter got a null value. Null values are generally not allowed in 2.x operators and sources.")
LOG.info(title + "; " + prefix+ highlight+ postfix+ "; "+ url)
mRepeat > 0
masterAddress.split(":").length == 2
t <= _to
assertThat(filter.getColumns()).hasSize(8)
assertEquals(2,preIndex.get())
idx >= biomes.length
public T withArguments(String... arguments){   operationParamsBuilder.setArguments(arguments);   return getThis(); } 
!FilenameIndex.processFilesByName(PubspecYamlUtil.PUBSPEC_YAML,false,falseProcessor,module.getModuleContentScope(),project,null)
p + "." + M_GET_KEYS+ "."+ M_ITERATOR
new PatreonRealm("1")
commit.getAuthorTime()
Messages.getString(key,param1,param2,param3,param4,param5,param6)
f.getTp()
end < 0
elapsed >= config.getConnectionTimeout()
new InvalidPluginRequestException("No artifacts in maven layout found for plugin id" + pluginId)
new AgentTemplate(this,true)
text.split("\\n",-1)
!isCorrect
!m.containsNonNullValue(TagMetadata.TASK_UUID) || m.getValue(TagMetadata.TASK_UUID) == 0
config.getStrategyImpl()
format == null || "".equals(format)
height / 2.0f
ViewCompat.getScaleY(itemView)
auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN","USER","ACTUATOR")
64 * 4
DirectoryReader.openIfChanged(oldReader)
!"none".equals(max_items)
@Test
!mShouldTranslateContents
ActivityManager.getService().handleIncomingUser(Binder.getCallingPid(),callingUid,userId,false,false,"getAppStandbyBucket",null)
assertEquals("The bus id should be changed","test",bus.getId())
c == Float.class || c == Float.TYPE
newConfiguration.getOutputType()
SavedSearch.createSavedSearchList(get(getBaseURL() + "saved_searches.json",true))
psiElement().afterLeaf(".",PsiKeyword.RETURN)
Integer.valueOf(compressionLevel)
mAllowUndeclaredRTE=aFlag
/**   * Returns last child <b>element</b> with given name or <code>null</code> if no such child node exist.  */ public Element getLastChildElement(String elementName){   if (childNodes == null) {     return null;   }   int from=childNodes.size() - 1;   for (int i=from; i >= 0; i--) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
oldestUnflushedStoreSequenceIds.putIfAbsent(encodedRegionName,oldestUnflushedStoreSequenceIdsOfRegion)
amfOut.getByteArrayOut().writeTo(out)
AbstractHadoopJob.loadKylinPropsAndMetadata()
theme
assertNotNull(stubTree)
random().nextInt(999) + 2
source.getCharacters()
final StringBuilder sb=new StringBuilder("PluginInfo{"); 
cctx.mvccEnabled() || !readThrough || skipVals|| (key != null && !cctx.affinity().backupsByKey(key,topVer).contains(cctx.localNode()))
diagnostic.getCode().equals("compiler.err.cant.access") || diagnostic.getCode().equals("compiler.err.proc.messager")
account.getWebAddress()
targets.length > 0
window != null && myRestoreWindowSize != null
mCurrentDate.get(Calendar.MONTH) != month
private StackPane container; 
logger.info(getName() + " has been started")
targetInfo != null && targetInfo.metaData != null
mHiddenForOtherReasons=true
ConsistencyChecker.class
id=19910
connection.setConnectTimeout(1000)
PreferenceManager.instantVideoUploadEnabled(this)
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_GRANTED,0,null,false)
Class[]
!"true".equalsIgnoreCase(value)
Arrays.sort(hyperParamNames2)
OPEN_READ
T exception
seriesInfo.Index.toPlainString()
((-t + 2) * t - 1) * t / 2.0
feedEntryStatusDAO.findUnreadByCategories(children,null,0,1,ReadingOrder.desc,true)
new IllegalStateException("Redefining custom proto adapter is illegal.")
s.length() - 1
new ToolTip(new ToolTipLine(StringUtils.localize("tip.tool.add")))
result.getProject()
res.getContentType().toLowerCase().indexOf("text/html") != -1 && res.getResponseData().length > 0
ProcessBundleDescriptors.fromExecutableStage("my_stage",stage,dataServer.getApiServiceDescriptor())
10 * 1000
id=13107
KeySequenceNumber.class
IoUtil.delete(dir,true)
assertEquals(expected.length,actual.length)
new Tuple(label,name,type,ddmStructure.getStructureId())
GL.glCopyTexImage2D(target,level,internalformat,x,y,width,height,border)
player.getDisplayName()
new InTransformReader(reader,Collections.singletonMap("{http://bar}test","test2"),null,null,null,false)
initial=100
new MockNode(Settings.builder().put(SETTINGS).put("node.data",false).build(),Version.CURRENT,Arrays.asList(WatcherBenchmarkPlugin.class,LicensePlugin.class))
DISPLAY_TASKS_PORTRAIT=7
realIndex < columns.size() && columns.get(realIndex).getColumn() != null
LinkedHashSet<Test>
ServiceAnnouncingChatHandlerProvider.class
@Override public Variable emitBitScanForward(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   append(new AMD64BitManipulationOp(BSF,result,asAllocatable(value)));   return result; } 
position.setAltitude(buf.readShort())
0.15 * VALUE_RANGE
mRilDataRadioTechnology=m.getInt("dataRadioTechnology")
if (VDBG) loge("Exception trying to remove a route: " + e); 
ActivityManager.handleIncomingUser(callingPid,callingUid,userId,true,false,"enqueueNotification",pkg)
_mtime(getDir())
logger.info("Failed to register block {} - no id",block)
new TransactionBroadcast(peerGroup,blockChain.getContext(),tx)
DEFAULT_DISMISS_TO_VIEW_RATIO_LIMIT=.8f
LocalFileSystem.getInstance().refreshAndFindFileByPath(fullPath.replace(File.separatorChar,'/'))
signature.getFile()
scope.getVariable(name)
entry == null || entry.get() == null
new IOException(sm.getString("frame.readFailed",Integer.valueOf(read)))
StringUtils.containsIgnoreCase(userAgentStr,"Iframely") || StringUtils.containsIgnoreCase(userAgentStr,"Google") || StringUtils.containsIgnoreCase(userAgentStr,"B3log")|| StringUtils.containsIgnoreCase(userAgentStr,"BUbiNG")|| StringUtils.containsIgnoreCase(userAgentStr,"ltx71")
DebuggerUtilsEx.collectLambdas(original,true)
/**   * Titan graph database implementation of the Blueprint's interface. Use  {@link TitanFactory} to open and configure TitanGraph instances.  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  * @see TitanFactory  * @see TitanTransaction  */ @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_STRUCTURE_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_PROCESS_PERFORMANCE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_STANDARD) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_PROCESS_COMPUTER) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_INTEGRATE) @Graph.OptIn(Graph.OptIn.SUITE_GROOVY_ENVIRONMENT_PERFORMANCE) @Graph.OptIn("org.janusgraph.blueprints.process.traversal.strategy.TitanStrategySuite") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.structure.VertexPropertyTest$VertexPropertyAddition",method="shouldHandleSetVertexProperties",reason="Titan can only handle SET cardinality for properties when defined in the schema.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldOnlyAllowReadingVertexPropertiesInMapReduce",reason="Titan simply throws the wrong exception -- should not be a ReadOnly transaction exception but a specific one for MapReduce. This is too cumbersome to refactor in Titan.") @Graph.OptOut(test="org.apache.tinkerpop.gremlin.process.computer.GraphComputerTest",method="shouldProcessResultGraphNewWithPersistVertexProperties",reason="The result graph should return an empty iterator when vertex.edges() or vertex.vertices() is called.") public interface TitanGraph extends Transaction {   /**   * Opens a new thread-independent  {@link TitanTransaction}. <p/> The transaction is open when it is returned but MUST be explicitly closed by calling  {@link org.janusgraph.core.TitanTransaction#commit()}or  {@link org.janusgraph.core.TitanTransaction#rollback()} when it is no longer needed.<p/> Note, that this returns a thread independent transaction object. It is not necessary to call this method to use Blueprint's standard transaction framework which will automatically start a transaction with the first operation on the graph.  * @return Transaction object representing a transactional context.  */   public TitanTransaction newTransaction();   /**   * Returns a  {@link TransactionBuilder} to construct a new thread-independent {@link TitanTransaction}.  * @return a new TransactionBuilder  * @see TransactionBuilder  * @see #newTransaction()  */   public TransactionBuilder buildTransaction();   /**   * Returns the management system for this graph instance. The management system provides functionality to change global configuration options, install indexes and inspect the graph schema. <p /> The management system operates in its own transactional context which must be explicitly closed.  * @return  */   public TitanManagement openManagement();   /**   * Checks whether the graph is open.  * @return true, if the graph is open, else false.  * @see #close()  */   public boolean isOpen();   /**   * Checks whether the graph is closed.  * @return true, if the graph has been closed, else false  */   public boolean isClosed();   /**   * Closes the graph database. <p/> Closing the graph database causes a disconnect and possible closing of the underlying storage backend and a release of all occupied resources by this graph database. Closing a graph database requires that all open thread-independent transactions have been closed - otherwise they will be left abandoned.  * @throws TitanException if closing the graph database caused errors in the storage backend  */   @Override public void close() throws TitanException ;   /**   * The version of this Titan graph database  * @return  */   public static String version(){     return TitanConstants.VERSION;   }   public static void main(  String[] args){     System.out.println("Titan " + Titan.version() + ", Apache TinkerPop "+ Gremlin.version());   } } 
keychainLock.unlock()
public AuthenticationType authentication() default AuthenticationType.CONTAINER; 
id=19908
MetricRegistry localRegistry
dep instanceof PythonPackagable
si.deliveryCount > 1
distDir.getAbsolutePath()
DexFile.getDexOptNeeded(classPathElement,instructionSet,systemServerFilter,null,false,false)
getScheduledThreadPoolExecutor().scheduleWithFixedDelay(new Runnable(){   public void run(){     cleanup();   } } ,cleanupPeriod,cleanupPeriod,TimeUnit.MILLISECONDS)
new SpockTimeoutError(seconds,msg,e)
String.class
DiagnosticGroups.registerGroup("functionParams",FunctionTypeBuilder.INEXISTENT_PARAM,FunctionTypeBuilder.OPTIONAL_ARG_AT_END)
Object other
id=10
name.length() > 0 && name.charAt(name.length() - 1) != '.'
ret0 != null && ret0 != TOMBSTONE
installProgressBar.setIndeterminate(false)
dist >= maxDist
CompletableFuture<Void>
assertEquals(0,tempDir.listFiles().length)
s == null && req != null
/**   * Returns a result of type  {@code T} if the operation succeeds; otherwisethrows an exception.  * @return a result of type {@code T} if the operation succeeds; anexception otherwise  */ public R get() throws Exception ; 
new InvalidTopologyException("Unable to retrieve cluster topology for cluster. This is most likely a " + "result of trying to scale a cluster via the API which was created using " + "the Ambari UI. At this time only clusters created via the API using a "+ "blueprint can be scaled with this API.  If the cluster was originally created "+ "via the API as described above, please file a Jira for this matter.")
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
getReplicaProps(collection,shardId,thisCoreNodeName,null)
addInactiveSubscription(subscriptionKey,info,(brokerService.isKeepDurableSubsActive() ? view.subscription : null))
messages.size()
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
@Override public Number reduce(List<Number> combinedResultList){   long reducedValue=0;   for (  MutableLongValue value : combinedResultList) {     reducedValue+=value.longValue();   }   return new MutableLongValue(reducedValue); } 
new ShingleFilter(tokenStream,minShingleSize,maxShingleSize)
database instanceof AbstractDb2Database
logger.warn("[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed",shardRouting.index(),shardId,nodes.masterNode())
List<Id>
new StringBuilder(50)
anyObject(Grouped.class)
Expression.ge(this.propertyName,arguments[0])
status == 404
Validator.isNotNull(value) && value.equalsIgnoreCase("assetCategories") && name.startsWith(prefix)
requestFiles == null
/**   * Creates a ClassLoader implementation which has, by default, only the classes from the Java API visible, but which can allow access to selected classes from the given parent ClassLoader.  * @param parent the parent ClassLoader  * @param spec the filtering spec for the classloader  * @return The ClassLoader  */ ClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec); 
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE))
AUTH_BYTE=0x00
sDefaults.putBoolean(KEY_SUPPORT_ENHANCED_CALL_BLOCKING_BOOL,true)
origin >= other
pipe != null && coreState.gateKind != GateKind.None.ordinal()
localHosts[i]
new Dimension(800,600)
new Pair<>(name,expressions().values().iterator().next())
leftExpression.getText()
this.setTouchAreaBindingOnActionDownEnabled(true)
new File(parent,inoName)
LOGGER.error("Error with XML parser configuration",e1)
g.events().localListen(lsnr,EventType.EVT_NODE_LEFT,EventType.EVT_NODE_FAILED)
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted)
endpoints.addAll(entry.getValue())
assertThat(countWithAllDateFieldsNull).isEqualTo(2)
documents.get(docNum).getCheckResults(paraText,paRes,footnotePositions,isParallelThread)
INDEX_VERSION=18
BatchQuickFix<CommonProblemDescriptor>
public Builder setRequestCompressionLevel(int requestCompressionLevel){   configBuilder.setRequestCompressionLevel(requestCompressionLevel);   return this; } 
LOG.warn("The given country from the response: " + shipToDTO.getAddressCountryCode() + " could not be found"+ " as a country abbreviation in BLC_COUNTRY")
routine != null && routine.handler().isForQuery()
elapsedMillis < 300
ConstantNode firstMethodConstantNode=ConstantNode.forConstant(firstMethodConstant,metaAccess,graph); 
!HighlightUtil.Feature.ENHANCED_SWITCH.isAvailable(block)
SSOTestBase.executeFormAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
consoles.waitJDTLSStartedMessage()
bindings.or(ImmutableMap.<ColumnHandle,Object>of())
filter != null && !filter.isAccept(field) || field.getDeclaringClass().getAnnotation(Transient.class) != null
dest.writeStringList(userIds)
!BlockStoreContext.INSTANCE.hasLocalWorker()
SERVLET_MINOR_VERSION=1
{1,0,0,0,0,0,0,0,0,0}
annotations == null || annotations.isEmpty()
isSelected(node)
/**   * Run the stemmer against all strings in voc.txt The output should be the same as the string in output.txt  */ public void testPorterStemFilter() throws Exception {   Tokenizer tokenizer=new KeywordTokenizer(new StringReader(""));   TokenStream filter=new PorterStemFilter(tokenizer);   ZipFile zipFile=new ZipFile(new File(getClass().getResource("porterTestData.zip").getFile()));   InputStream voc=zipFile.getInputStream(zipFile.getEntry("voc.txt"));   InputStream out=zipFile.getInputStream(zipFile.getEntry("output.txt"));   BufferedReader vocReader=new BufferedReader(new InputStreamReader(voc,"UTF-8"));   BufferedReader outputReader=new BufferedReader(new InputStreamReader(out,"UTF-8"));   String inputWord=null;   while ((inputWord=vocReader.readLine()) != null) {     String expectedWord=outputReader.readLine();     assertNotNull(expectedWord);     tokenizer.reset(new StringReader(inputWord));     filter.reset();     assertTokenStreamContents(filter,new String[]{expectedWord});   }   vocReader.close();   outputReader.close();   zipFile.close(); } 
out.writeFloat(mProgress)
reportError(context,"encoding %s as an ARRAY was unexpected",type)
ExecuteJobsRunnable.class
new HashMap(61)
ig0.context().query().dynamicTableCreate(SCHEMA_NAME,getEntity(),TMPL_NAME,null,1,true)
GenericsUtil.eliminateWildcards(psiType,false)
!isDistinct(child)
trueNegatives.incrementCount(classLabel,1.0)
-0.5f
!mQuietEnable
max() >= 32
Nd4j.pullRows(weights,1,indexes,'c')
GL.glDeleteTextures(n,textures,Memory.getPosition(textures))
StringBuilder buffer=(StringBuilder)TransactionSynchronizationManager.getResource(bufferKey); 
iconSize * DisplayMetrics.DENSITY_HIGH >= availableHeight
testAllocation("test2snippet",2,0,0)
fragmentManager1.beginTransaction().replace(R.id.quickcontrols_container,fragment1).commitAllowingStateLoss()
ScrollUtil.findScrollPane(myContent)
RECONNECT_DELAY_MIN=2
loadingSegments.get(segment.getIdentifier(),server.getTier())
HashSet<>
battery.addPower(MjAPI.MJ,false)
data.eachX=4
UpgradeStepRegistrator.class
re != null && re.getResponse().getStatus() == 404
currentUser.loggedInUser()
IOUtils.toInputStream(responseString,"UTF-8")
assertCompletionVariants(myProjectPom,"org.codehaus.plexus","intellij.test","test","org.apache.maven.plugins","org.codehaus.mojo")
region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),delete,true)
checkTables("purgeSnapshots","snapshots","project_measures","measure_data","rule_failures","snapshot_sources","dependencies","events","duplications_index")
Preconditions.checkNotNull(pinnedInodes)
settingOptional.get().getGroup()
SC_FILE_EXTENSION_EXCEPTION=491
r.getRequest(true)
CellUtil.estimatedHeapSizeOfWithoutTags(c)
this.httpHandler.handle(request,response).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
response.location()
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
IndicesOptions.fromOptions(true,false,true,false)
Utility.isWifi(context)
tsr.getReturnCode() != AbstractTaskResult.ReturnCode.SUCCESS && tsr.getReturnCode() != AbstractTaskResult.ReturnCode.TASK_NOT_FOUND
query.getSliceStart()
super.reopen()
new CommandLineException("Parsed request isn't available.")
addVault(file.toPath(),true)
stmt.execute(sqlQuery)
output.writeStartElement(part.getConcreteName().getLocalPart())
FORBIDDEN_INDEX_SETTING.equals(name)
openSparkInterpreter(false)
this.mPlatformBitmapFactory=platformBitmapFactory
api != null
w.closeException() != null
new UnsupportedOperationException("Deprecated: should not be called")
boneIndexes.size() > 0 && vertexGroups.size() > 0
!((AbstractDrawerItem)drawerItem).isExpanded()
Class.forName("java.lang.invoke.CallSite",false,ClassLoader.getSystemClassLoader())
List<Class<?>>
(!url.startsWith("http://")) && (!url.startsWith("https://")) && (!url.startsWith("file://"))&& (!url.startsWith("data:"))&& (!url.startsWith("error:"))
FileDownloadUtils.formatString("range[%d-)",currentOffset)
!mandatory
new StringLengthValidator(1,Integer.MAX_VALUE,true,false)
dragNode.isNodeDescendant(target)
SecureRandom.getInstance("SHA1PRNG")
this.followingKeychains
message.getMessageId().getEntryLocator()
/**   * @author Hugo Huijser  */ @RunWith(LiferayIntegrationJUnitTestRunner.class) public class JavaSourceProcessorTest extends BaseSourceProcessorTestCase {   @Test public void testExceedMaxLineLength() throws Exception {     test("ExceedMaxLineLength.testjava","> 80:",22);   }   @Test public void testUnusedImport() throws Exception {     test("UnusedImport.testjava");   } } 
interval * 1000L
new Interval(timeList.get(0).getValue().getMinTime().getMillis(),timeList.get(0).getValue().getMaxTime().getMillis(),ISOChronology.getInstanceUTC())
protected Task createTaskGenerate(File wsdlFile,File tmpDir){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Generate",wsdlFile);   JavaExec javaExec=GradleUtil.addTask(_project,taskName,JavaExec.class);   File tmpSrcDir=new File(tmpDir,"src");   javaExec.args("--output=" + FileUtil.getAbsolutePath(tmpSrcDir));   javaExec.args(FileUtil.getAbsolutePath(wsdlFile));   javaExec.setClasspath(getConfiguration());   javaExec.setMain("org.apache.axis.wsdl.WSDL2Java");   TaskInputs taskInputs=javaExec.getInputs();   taskInputs.file(wsdlFile);   TaskOutputs taskOutputs=javaExec.getOutputs();   taskOutputs.dir(tmpSrcDir);   return javaExec; } 
mConnector.executeForList("volume","list","broadcast")
logger.trace("Error while matching regex [" + matched.toLowerCase() + "] for string ["+ matcher.toLowerCase()+ "] "+ pse.getMessage())
dialect.supportsQuotedMixedCase() || dialect.supportsUnquotedMixedCase()
typeDefinition.isEnum() || typeDefinition.isInterface() || typeDefinition.isAnonymous()|| typeDefinition instanceof GrTypeParameter
new SparkRuntimeContext(p,options)
showPasswordFieldAndFocus()
null == iobj.getType() && Strings.isBlank(iobj.getFactory())
velocity / flingThreshold
JSInheritanceUtil.iterateMethodsDown((JSFunction)element,new Processor<JSFunction>(){   @Override public synchronized boolean process(  final JSFunction jsFunction){     allRenames.put(jsFunction,newName);     return true;   } } ,true)
errorPos + 32
options != null && options.getChildCount() > 0
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_CONNECTED)
styles_.command()
Thread.sleep(2000)
cached.get(key)
Cleaner.create(mFileDescriptor,new Closer(mFileDescriptor,mMemoryRegistration))
cls.getAccessFlags().isSynthetic() && cls.getFields().isEmpty() && cls.getMethods().isEmpty()&& cls.getInnerClasses().isEmpty()
(new OpenEphyraCorpus()).commandLine("")
incomingEdges.containsKey(dest)
logger.finest("Future response is already set! Current response: " + response + ", Offered response: "+ offeredResponse+ ", Invocation: "+ invocation)
Number[]
resultSet.put("start",group_offset)
method.isRequestSent() && method.getStatusCode() == HttpStatus.SC_NOT_FOUND
BaseMessages.getString(PKG,"Spoon.Dialog.PromptToSave.Message",fileName)
Utils.isRawValue(value)
treeStyles.treeStylesCss()
(lo + hi) >>> 1
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
getKeyDesc(keyRowMeta,keyNrs,two)
indexOfSlashNSlashR != -1
LanguageLevel.forElement(element)
accountApi.setEmailNotificationsForAccount(accountId,invoiceEmailJsonWithoutNotifications,requestOptions)
contentType + "; boundary=" + getBoundary()
Integer.parseInt(_ANALYTICS_GATEWAY_PORT)
toEventData(key)
logError(BaseMessages.getString(PKG,"Abort.Log.DefaultAbortMessage","" + nrInputRows))
CheckEmptyTagInspection.class
super.onAttachedToWindow()
InsertReturningStep<R>
Media.class
!Objects.isNull(value)
connect(monitor,null,null,false,true)
new Location(user.getWorld(),x,y,z,user.getLocation().getYaw(),user.getLocation().getPitch())
index >= capacity()
n.doubleValue()
new QueryException(e,"Could not parse build targets.\n%s",e.getMessage())
!Files.isReadable(file)
(CallRenderer)callPanel
fdm.getCachedDocument(file) != null
recurrence != null && recurrence.length() > 0
Collections.singletonList(new IntPair(0,data.getLines()))
idfr.identify(this.getClass().getResourceAsStream(tokens[0]),"UTF-8")
data.getTestPassed()
!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()
serverEnvironment != null
LOGGER.error("Something went wront : {}",element,errorMessage)
new OwnCloudVersion(0x040004)
AssertionError e
ranges != null
stores.next().getIdentityMap()
id=8
aProject.getTasks().configureEach(captureReportingTasks)
eventsByTypeAndTestDescriptor(DYNAMIC_TEST_REGISTERED,descriptor -> true)
!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY) && !ConnectivityUtils.isInternetWalled(context)
message.getCounterpart().split("/",2)
keyBindings.checkSearchResultKeyBinding("open",5)
new Vector2i(areaHint.x,availableHeight)
homeListView.setSelection(0)
data.lineBuffer.size() < meta.getNrFooterLines()
mChoiceMode == CHOICE_MODE_MULTIPLE_MODAL && mCheckedItemCount > 0
maxRowsPerFrame=5000
globalDisplay_.showHtmlFile(result_.getOutputFile())
ConfigPropertyVetoException ex
targetDatabase.getObjectQuotingStrategy()
PatchedRouteInfo r; 
System.nanoTime()
new IllegalArgumentException("Attempting to send sliced reindex-style request to a node that doesn't support " + "it. Version is [" + out.getVersion() + "] but must be ["+ BulkByScrollTask.V_5_1_0_UNRELEASED+ "]")
elementName=options.get(ELEMENT_NAME)
messenger.requestSmsObsolete(res)
MergeNotMatchedSetMoreStep<R>
RIGHT_ID_T=3535
!dockerConfigPath.isEmpty()
UpgradeStepRegistrator.class
DecimalUtility.getDecimal9FromBigDecimal(bigDecimal,scale,precision)
state != null && state.mTint != null
it.setJavadocComment("Cool this annotation!")
file.contentsToByteArray()
logger.warn("couldn't execute commandLine '" + commandLine + "'",e)
sqlRouteResult.getSqlParsedResult().getType()
restrictions[name.position]
XContentType.fromMediaTypeOrFormat(template.substring(2,endOfContentName))
new AlertDialog.Builder(this)
data.indexOfFilterField >= 0
isAllowed()
_TestUtil.nextInt(random(),11,256)
DurationType.getAverageYearMonthType()
!_propertyComments.isEmpty()
insertAfter != null && firstMissing != null
details.setProperty(fileName,Long.toString(timestamp))
service.handlePinMmi(dialString,mContext.getOpPackageName())
i <= 1
!blockchain.isBlockExist(hash)
Results.xml()
mFlexItemInEdit.setAlignSelf(AlignItems.FLEX_START)
httpClient.getSSLSocketMiddleware()
getUriBuilderFactory().expand(uriTemplate,uriVariables)
UpgradeStepRegistrator.class
executeMethodAndConvertExceptions(httpPost)
ObjectTypeAttributeDefinition.Builder.of(ModelKeys.REMOTE_SERVER,OUTBOUND_SOCKET_BINDING).setAllowNull(false)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CUBE))
CompilerDirectives.inInterpreterOrLowTier()
/**   * Include the name of each field when printing it. <strong>default: false</strong>  */ boolean includeFieldNames() default true; 
toBeContained == null || !toBeContained.initialized
session.getRemote().sendStringByFuture(command.format())
value == null && properties != null
new byte[4]
new DuplicateOrganizationException("There is another organization named " + name)
mNotificationsUtilsWrapper.mapJsonToFormattableContent(headerArray.getJSONObject(i))
Beans.newDuration(casProperties.getMetrics().getRefreshInterval()).getSeconds()
defaultDMLFilename()
DfsSearchResult.subOne(in.readVLong())
VtexApis.REPLIES_URL + topicId
instance.startAction_New(getDefaultTitle(),null,false)
serialVersionUID=215521212534239L
subProtocol != null && subProtocol.length() > 0
clusterProperties.getMaxRedirects()
log.d(LOG_TAG,"ACRA processName='" + processName + "'")
(byte)0xe2
dbIdsRepository.getSnapshotId(component)
new Bitmap(nativeInt,null,isMutable,null,density)
getPreferences().getBoolean(SIGNAL_PREF,false)
new QueryException(e,"Error in resolving targets matching %s",pattern)
mulNegLong(x,y) | mulZeroSubLong(y,x) | mulSubZeroLong(x,y)
val != null && val != targetObject
ccfg1.setWriteBehindFlushFrequency(60_000)
c.getRemovedMessageStatement()
newBase.hasNoEntries()
substitutor.substituteTemplate(file,caretOffset,template)
className.getValue()
A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION=1000
index=1
StringUtils.subString(url,"weburi-",".json",true)
(socketRef != 0) && Socket.sendbb(socketRef,0,outputBuffer.position()) < 0
SHOW_DISABLE_FOREGROUND=false
testerAnnotation.annotationType()
cfg.setExternalExecution(false)
mncStr.isEmpty() || mncStr.equals(String.valueOf(Integer.MAX_VALUE))
" firstActiveTime=" + firstActiveTime
case AUTOGENERATED: 
onlinePlayer.sendMessage(_("playerBanIpAddress",senderName,ipAddress))
jdbcTemplate.queryForObject(sql,int.class)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,distributionPattern,true)
id=13
createShrinkFadeOutFromBottomAnimation(mContentContainer,150,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();     mContentContainer.removeAllViews();   } } )
opened != -1
t.getDeclaredConstructors()
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id)
si.intent == null && N > 1
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(MethodDelegation.to(ByteBuddyInterceptor.class)).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
selenium.waitForVisible("//iframe[contains(@title,'Rich Text Editor')]")
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,REAL,DOUBLE,VARCHAR)
Native.ffi_prep_cif(1,1,Structure.FFIType.get(double.class).peer,types)
FISHING_ROD(346,1,32)
LOG.finest("Client: segment " + segments[j] + " at "+ addr)
parseBlockPos(sender,args,0,false)
options.getGroupByInstances()
margin=2
!fr.isExists()
new XXssProtectionHeaderWriter()
overlookOuterLimit || BackdoorToggles.getStatementMaxRows() == null
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).iterations(100).weightInit(WeightInit.VI).stepFunction(new GradientStepFunction()).activationFunction("tanh").filterSize(5,1,2,2).nIn(4).nOut(3).batchSize(batchSize).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(2).backward(true).preProcessor(0,new ConvolutionPostProcessor()).hiddenLayerSizes(new int[]{9}).override(1,new ClassifierOverride(1))
lastPull == node && !node.hasNoUsages()
new HazelcastInstance[nodeCount]
new ROC(32)
N node
new HttpParameter("retweets",retweets)
in.readVInt()
case PLAYER_QUIT: 
Class.forName(className)
script_params.addParametersString(myConfig.getParams())
DATABASE_TYPE_MSSQL.equals(databaseType)
visibleOnly=true
/**   * Ignore binary payloads by default  */ boolean logMultipart() default true; 
SERVICELOG.warn("Async error occurred: " + e,e)
revisionVersion=1
mTouchMode == TOUCH_INIT_MODE && (canZoomIn() || canZoomOut())
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())
stack.stackSize > 0 && successful
WrapAlloyTemplateMojoTest.class
GL.glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels,Memory.getPosition(pixels))
super.onDetachedFromWindow()
doTest("class UserProfile:\n" + "    pass\n" + "\n"+ "#noinspection PyUnusedLocal\n"+ "def foo(sender):\n"+ "    pass","Py:CLASS_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK","Py:DEDENT","Py:LINE_BREAK","Py:END_OF_LINE_COMMENT","Py:LINE_BREAK","Py:DEF_KEYWORD","Py:SPACE","Py:IDENTIFIER","Py:LPAR","Py:IDENTIFIER","Py:RPAR","Py:COLON","Py:STATEMENT_BREAK","Py:LINE_BREAK","Py:INDENT","Py:PASS_KEYWORD","Py:STATEMENT_BREAK")
assertEquals("deflate",dataFileStream.getMetaString("avro.codec"))
store.delete(key,message.getHeaders().getId())
new ModelNode(512)
LOGGER.debug("Following side pane could not be found: " + componentName,e)
tickEnd
List<Library>
ReactiveHelper.schedule(runnable,"Multicast next step")
compressed.limit()
getAsText(fieldValue,locale)
ExecutionStrategyParameters oldParameters
PsiElement file=null; 
updateRotation(0)
_constructor.newInstance(0,0,0,StringPool.BLANK,_IMAGE_URL,_IMAGE_URL)
resource == null || resource.length() == 0
super.endPass(n)
test("MissingAuthor.testjava","Missing author",20)
targetApi
TextUtils.isEmpty(title)
Color.fromRGB(0xF0F0F0)
ClassLoader filteredGroovy=classLoaderFactory.createFilteringClassLoader(groovyClassLoader,filteredGroovySpec); 
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots),false,true)
assertEquals("stream",server.mode())
DLFileEntry dlFileEntry=(DLFileEntry)fileEntry.getModel(); 
NUM_PUBLISHERS=2
ObjectAnimator.ofFloat(target,ALPHA,INVISIBLE,VISIBLE)
row - 0.5f
timeMs <= 0 || timeMs >= 24 * 60 * 60* 1000
new CountDownLatch(2)
XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),true)
!isInitialized
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,0,UserHandle.USER_CURRENT)
new EqualsWithEps(arrayX,arrayY,Nd4j.EPS_THRESHOLD)
value == null || clazz.isAssignableFrom(value.getClass())
getPreferences().save(fos,"")
assertEquals(9775l,(long)sourceStats.get("warcNovelContentBytes"))
resolve(jsUsers)
mContext.getPackageManager().getUserBadgedIcon(icon,new UserHandle(td.userId))
!user.canAfford(money)
config.setClientMappingCache(model.get(EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE).asString())
mHandler.dispatchMessage(msg)
arg1 == 1
mSmallBatteryDevice ? 15 : 30
timeoutMs=1000
ImmutableSortedSet.of("br","li","dt","dd","hr","img","p","td","tr","th")
new DSXOrder(pair,type,new BigDecimal("0.01"),new BigDecimal("900"),0,DSXOrder.OrderType.limit)
Validator.isNull(className) && Validator.isNull(classPK) && !User.isDefaultUser(userId)
Arrays.equals(delta,pending.delta)
setAttributeInternal(inodePath,false,opTimeMs,options)
typeName.contains("CHAR") || typeName.contains("char")
subColumn.getLocalDeletionTime() < gcBefore
!isMute
id=16505
!Values.WEBSOCKET.equalsIgnoreCase(upgrade)
@ManyToOne(optional=false) private MiddleEntity middle; 
setop.getIDLName()
EventLog.writeEvent(EventLogTags.NOTIFICATION_ENQUEUE,pkg,id,tag,notification.toString())
Long.valueOf(value)
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(2000)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
getContent(files,".obf",".zip",".zip-1",".zip-2",".zip-3",".zip-4")
deployOneTaskTestProcess()
SystemInfo.isMac ? 5 : 8
tileBox.getDensity()
var(b) > 1e-6
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
Collections.singletonList(new PartitionInfo(topic,0,null,null,null))
!TextUtils.isEmpty(addresses)
assertEquals(response.getStatusCode(),200)
propertyIterator.hasNext()
!enu.hasMoreElements()
getLoaderManager().restartLoader(LOADER,null,mLoaderCallbacks)
n == stringLength || n == -1
mService.addOrUpdatePasspointConfiguration(config)
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_MID,true)
Network.connectToServer("localhost",5110)
getPath("checks/javadoc/Input_02.java")
DISMISS_TO_VIEW_RATIO_LIMIT=.4
info.getVoiceMailNumberForSubscriber(subId,mContext.getOpPackageName())
cfs.getMemtableThroughputInMB() * 1024L * 1024L
Beans.newDuration(session.getLockTimeout()).getSeconds()
Address mainAddressCopy=(Address)new ObjectInputStream(new ByteArrayInputStream(os.toByteArray())).readObject(); 
new CacheConfiguration<>(DEFAULT_CACHE_NAME)
OCDirId >= 0
PlatformUtils.isIntelliJ() || PlatformUtils.isRubyMine()
fOnDemand && ondemand
ShrinkWrap.create(JavaArchive.class).addAsManifestResource("beans.xml")
Preconditions.checkNotNull(timer,"timer")
if (dockOnTopOrLeft) {   if (splitHorizontally) {     outBounds.right=displayRect.centerX() - adjustment;   }  else {     outBounds.bottom=displayRect.centerY() - adjustment;   } }  else {   if (splitHorizontally) {     outBounds.left=displayRect.centerX() + adjustment;   }  else {     outBounds.top=displayRect.centerY() + adjustment;   } } 
new HashSet<RecordReplicationInfo>()
toShort(bytes,0,SIZEOF_SHORT)
LOGGER.debug("Application registered itself as {}",response.getBody())
private BigDecimal location; 
getCluster().getDescription().getAny()
Cache.getTableName(type)
line >= document.getLineCount()
new ALPNServerConnectionFactory()
questionMark >= 0 && !url.contains("?databaseName=")
position + dockDividerWidth
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2)
curTime == 0 || totalTime / curTime == curOps
future.isDone()
holder.addCallback(callback)
localVideoEnabled && !audioManager.isSpeakerphoneOn() && !audioManager.isBluetoothScoOn()&& !audioManager.isWiredHeadsetOn()
new WriteConcern(getSecondaryCount(testHosts) + 1,10000)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_CURRENT | PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
TestShardRouting.newShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED)
executionJobVertex.getMaxParallelism()
storeProperty(propertyNode,pexp,current,visitor,receiver.getData())
config != null && config.servers() != null
SQLite.delete(modelAdapter.getModelClass()).where(modelAdapter.getPrimaryConditionClause(model)).executeUpdateDelete(wrapper)
logger.debug("Cannot play playlist ({})",e.getMessage())
lowByte.equals("")
settings.setTextSize(WebSettings.TextSize.SMALLEST)
descriptors[i].getPropertyType().isAssignableFrom(propertyType)
case SEND_STATUS: 
Map<String,Object>
BigInteger.valueOf(13)
ImmutableList<E>
grantRuntimePermissionsLPw(pkg,permissions,permissionGrant.fixed,userId)
methods.put(name,closure)
TagViewWrapperActivity.class
contents.getBytes("UTF-8")
CompositeType.isStaticName(c.name())
applyDefaultViewName(processedRequest,mv)
loader.start()
appendElementReference(buf,refElement,false)
assertEquals(CodecFactory.xzCodec(9).toString(),serdeWrite.getCodec().toString())
state.mBitmap == null && (state.mThemeAttrs == null || state.mThemeAttrs[R.styleable.BitmapDrawable_src] == 0)
ContainerUtil.newLinkedHashSet(actions)
new ClusterRule()
_connector.getResponse("GET http://[:1]/foo HTTP/1.1\nReferer: http://other.site\n\n")
((VarcharType)type).getLengthSafe()
above
protected Task createTaskCompile(File wsdlFile,File tmpDir,Task generateTask){   String taskName=GradleUtil.getTaskName(LiferayJavaPlugin.BUILD_WSDL_TASK_NAME + "Compile",wsdlFile);   JavaCompile javaCompile=GradleUtil.addTask(_project,taskName,JavaCompile.class);   javaCompile.setClasspath(getConfiguration());   File tmpBinDir=new File(tmpDir,"bin");   javaCompile.setDestinationDir(tmpBinDir);   javaCompile.setSource(generateTask.getOutputs());   return javaCompile; } 
new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(),ex)
getSharedLocalInspectionTool() == null
sb.getParts() != null && sb.getParts().size() == 1
annotation.authentication()
getAnonID() != null && getWordPressComUserName() != null
processor.process(tempReq)
Assert.fail("Known issue https://github.com/eclipse/che/issues/8031",ex)
loc == null
DefaultCacheKeysFactory.staticGetEntityId(cacheKey)
writer.writeLongArray("arr",arr,idx)
cCurrentVersion=466
new CharacterDelimiterFrameDecoder(1024,'\0')
id=16511
t != null && t.length() > 0
assertEquals(2480,res.getTime(0,1) / 1000,30)
RevisionVersion=3
jsonObject.get(ERROR_KEY).toString()
KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME)
TargetMinSubTotal=4000
mCol != null && mCol.getDb() != null
treeView.group(empColumn)
new Insets(6,0,0,4)
new MalformedException("Unused message placeholder: " + phName,node)
desktopSharingButton.setPressedIcon(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_PRESSED))
decode(getCanonicalText())
getOccurrence() <= count
notifyAccessibilityStateChanged(AccessibilityEvent.CONTENT_CHANGE_TYPE_PANE_TITLE)
expectation.getTimes()
new IndexWriter(directory,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
eventDispatcher.loadCanceled(loadable.dataSpec,loadable.type,elapsedRealtimeMs,loadDurationMs,loadable.bytesLoaded())
mService.addOrUpdatePasspointConfiguration(config,mContext.getOpPackageName())
getDegreesFromXY(x,y,true)
MILLISECONDS.toNanos(30)
PathUtilRt.getFileName(moduleDir)
new BuildSecondHashMatchIterator(this.inputs[0],this.inputs[1],keyPositions2,keyPositions1,keyClasses,memoryManager,ioManager,this,availableMemory)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-date-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-date-time elements.  */ public LocalDateTimeArray nextLocalDateTimeArray(){   return Values.localDateTimeArray(nextLocalDateTimeArrayRaw(minArray(),maxArray())); } 
!(topicParts.length > 2) || !topicParts[0].equals(TOPIC_PREFIX)
threadPerHost=2
fireDataChanged()
buf.readIntLE() * 0.1
broadcasterFactoryClassName != null && broadcasterFactory == null
addMenuItem(menu,R.string.actfm_TVA_menu_refresh,ThemeService.getDrawable(R.drawable.icn_menu_refresh,themeFlags),MENU_REFRESH_ID,true)
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)|| (getStatus().getState() == OperationState.FINISHED)
Number value
moduleProperties.setProperty(FAB_MODULE_DESCRIPTION,model.getDescription())
FORCE_LOGGING=false
new BooleanPreference("use_high_res_maps",false,true,true)
mSizeOnTier.containsKey(tierAlias) ? mSizeOnTier.get(tierAlias) : 0L
appearance.getPreference(3)
isDirect=false
input.floatValue() != value.floatValue()
getItemsFromModel(modelName)
swap instanceof FileSwapSpaceSpi
LOG.warn("Can't find serializer for language: " + language.getDisplayName() + "("+ language.getID()+ ")")
recyclerView.getChildAdapterPosition(view)
LLVMArgNodeGen.create(2)
matcher.group(12)
new PostgreSQLCommandExecutor(context,message,this)
_masterVec != null
comparePartitionOwnership(true,localMember,partition)
assertEquals(1,tabGenerator.getInitialValue())
new IndexWriter(indexDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
uri == null || uri.equals("/")
assertThat(messages).isNotNull().isNotEmpty().hasSize(53)
pos == -1 || pos >= end
Utils.addMenuItem(menu,Menu.NONE,MENU_ROTATE,Menu.NONE,R.string.menu_rotate,android.R.drawable.ic_menu_always_landscape_portrait)
loginWindow.setVisible(true)
DEBUG_FOCUS=true
!getUnwrapDescription(file).showOptionsDialog() || ApplicationManager.getApplication().isUnitTestMode()
jobDataMap.put(SchedulerEngine.JOB_STATE,jobStateClone)
typeTreeStruct.embedded(true)
s.equalsIgnoreCase(s2)
i.getTouchIconUrl() == null
getExecutorService("hz.initialization")
DEFAULT_MOVE_COST=7
StringBuffer sb=new StringBuffer(); 
!StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField._TAGS.field())
cs[0].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
Log.e(TAG,"Stats: Failed to get summary",error)
RequestTokenFactory.createOAuth2Request(null,"foo",null,false,Collections.singleton("ns_admin:read"),null,null,null,null)
execute("DROP INDEX " + indexName)
StageManager.getStage(Stage.READ).execute(new LocalRangeSliceRunnable(nodeCmd,handler),Tracing.instance.get())
Integer.parseInt(topStr)
matcher.group(1)
qux.getDeclaredConstructor()
in.readOptionalUTF()
-10
assertEquals("to",13,sr.getToInt())
SameValueContextualRule<ConfirmPassword,Password,String>
response.writeWith(Flux.error(error)).switchOnError(ex -> Mono.empty())
group.getGroupId()
stat.st_mtim.tv_nsec.longValue()
sashSize.y > 0 && foldersSize.y > sashSize.y / 2
balloon.getShadowBorderSize()
new GZIPOutputStream(outputStream)
new DateMathParser(formatDateTimeFormatter)
Double.doubleToRawLongBits(v)
mListView.getListChildAt(index)
replacePsiElementWithLambda(element,false,false)
initBounds(myContext,copy[i])
style[j] instanceof WPImageSpan
mNetd.setDnsConfigurationForNetwork(netId,NetworkUtils.makeStrings(dnses),newLp.getDomains())
logger.verbose("RuleKey %s=%s",totalRuleKey,Joiner.on("").join(logElms))
text != null && text.length() != 0
!isImmutable(element)
ConverterRegistry.getInstance().convert(type,value)
inetAddresses == null || inetAddresses.isEmpty()
super.getView(position,contextualUndoView.getContentView(),contextualUndoView)
UIHelper.getContactPicture(contact,90,this.getContext())
logger.fine(String.format("sending ack %s",args))
v > 65535
services=9
completeBox.setButtonDrawable(R.drawable.btn_check)
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),0,0,0,0,settings.useStereo3D())
log.error("Failed to transfer file from TaskExecutor {}.",taskManagerId,throwable)
new BindFBO(SCENE_OPAQUE_FBO)
i <= maxIndex
new ArrayList<>(IgniteCacheTestSuite3.suite(ignoredTests))
l != null
assertEquals(8,tool.check("I can give you more a detailed description").size())
Thread.sleep(500L)
super.dismiss()
desktopSharingButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.DESKTOP_BUTTON_SMALL_ROLLOVER))
PluginServices.getTaskService().fetchById(t,Task.NOTES,Task.ID,Task.UUID,Task.TITLE,Task.HISTORY_FETCH_DATE,Task.PUSHED_AT)
ResolvedJavaType accessingClass
new ApiHelper.RefreshBlogContentTask(this,WordPress.currentBlog).execute(false)
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_BLACKBERRY_10,PLATFORM_FIREFOXOS,PLATFORM_WP_8,PLATFORM_WINDOWS_8)
new SAXException(Localizer.getMessage("jsp.error.loadclass.taghandler",handlerClassName,qName),locator,e)
isFinishing() || (isFinalState(mState) && !mPrintedDocument.isUpdating())
@Override protected ContentEntryEditor createContentEntryEditor(String contentEntryUrl){   myContentEntryEditor=new MyContentEntryEditor(contentEntryUrl,getEditHandlers());   return myContentEntryEditor; } 
redefinesClasses=true
String whitelistArray=mJpSettings.jetpackProtectWhitelist.toString().replace("[","").replace("]",""); 
param.args.length > 0 && param.thisObject instanceof WebView
PrivateDataProvider provider
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL,pkg,id,tag,mustHaveFlags,mustNotHaveFlags)
LOGGER.error("Wrong client secret for service {}",service)
result.indexOf('}',pos_start)
/**   * @author Vitaliy.Bibaev  */ public interface ProducerStreamCall extends StreamCall, TypeAfterAware { } 
callContactItem.setText(detail.getContactAddress())
callTimeout=5000
IllegalStateException e
Messages.getString("BaseStep.SafeMode.Exception.MixingTypes","" + (i + 1),referenceValue.getName() + " " + referenceValue.toStringMeta(),compareValue.getName() + " " + compareValue.toStringMeta())
oldObject=event.getOldObject()
new Status(severity,ModelPreferences.PLUGIN_ID,getExceptionMessage(error))
IOException e
new VisorCacheV4()
UndertowLogger.REQUEST_LOGGER.tracef("Timing out channel %s due to inactivity",connection.getSourceChannel())
factory.getDestination(getEndpointInfo("sna","foo","https://localhost:9002"),bus)
disjPred.isAlwaysTrue()
checkNotNullOrEmpty(uri,"URI should not be null")
BuildConfigSpecBuilder parametersBuilder=new BuildConfigSpecBuilder(); 
new ArrayList<PhysicsJoint>(4)
XmppStringUtils.parseBareJid(address)
S3DataSegmentMover.class
buffer.flip()
new BroadcastAction(message)
new LinkedHashMap<String,JdbcSqlStat>(maxSize,0.75f,false)
getConcept() != null && getConcept().getDescription() != null
new BadRequestException(null,null,null,errors)
format == DecodeFormat.ALWAYS_ARGB_8888 || Build.VERSION.SDK_INT == Build.VERSION_CODES.JELLY_BEAN
relativePath.length() > 0 && relativePath.charAt(0) == '/'
methods[i].getParameterTypes().length == 0 && !methods[i].isBridge()
Ints.min(completedSplits.get(),startedSplits.get(),splits)
Objects.requireNonNull(value,"value should not be null")
String value
Set<PyRequirement>
appearance.getInt(attr,0)
LOG.info("Unable to read HTTP response content",e)
CommonUtils.randomAlphaNumString(random.nextInt(10))
viewGroup == null || viewGroup.getChildCount() == 0
PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME,sql,"DEFAULT",results,columnMetas,sqlException)
timeout=20000
handshakeFuture == null
rv.length >= 4
fragmentCollectionPersistence.findByGroupId(groupId,start,end)
boardPort.getPrefs().getOrExcept("iserial")
origin.realComponent().doubleValue() > other
Color.fromRGB(0xC354CD)
mContext.getClass()
new JList()
logger.debug("NODE {}: BATTERY LOW!",this.getNode().getNodeId())
LOGGER.warn("Could not execute sendAsEmail",ex)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_USERNAME,true)
{26,31}
stream.rstStream()
_buildTemplateWithGradle("panel-app","panel-dependency-management","--dependency-management-enabled")
clazz.getConstructor(Long.TYPE,Long.TYPE,Long.TYPE,String.class,String.class,String.class)
hasExtension("GL_EXT_framebuffer_blit") || caps.contains(Caps.OpenGL30)
Integer.parseInt(this.getOptional("kylin.storage.hbase.max-visit-scanrange","1000000"))
8 * Constants.MB
expected == long.class || expected == Long.class
from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy(){   public Exchange aggregate(  Exchange oldExchange,  Exchange newExchange){     if (oldExchange == null) {       return newExchange;     }     String body=oldExchange.getIn().getBody(String.class);     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class));     return oldExchange;   } } ).parallelProcessing().timeout(1000)
nestedTuplesSchemaHelper(64)
values.put(Document.COLUMN_ICON,R.drawable.ic_root_mtp)
CharSequence text
edges.setInt(edgePointer + E_ADDITIONAL,value)
new StrutsSpringObjectFactory(null,null,null,new MockServletContext(),null,"false",null)
id=10873
state < 0
new ReplayOutstandingEntries<Task,TaskOutstanding>(Task.class,NameMaps.TABLE_ID_TASKS,taskDao,taskOutstandingDao,false)
docDeleted == false && lastFieldValue != null
serialVersionUID=1L
ArrayList<>
Component.isNestedTree(component) || node.hasNestedTree()
ThrowableFunction<A,V>
i < repeatCount
log.debug("Checking bounds key:[{}, {}) & col:[{}, {}) (expect {} keys)",new Object[]{keyStart,keyEnd,startCol,endCol,expected.size()})
sNotificationData.currentPostItem > sNotificationData.totalPostItems
name.substring(i + 1)
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
new TypeMismatchException("'" + toName(object.getClass()) + "."+ field.getName()+ "' can not refer to the value '"+ newValue+ "' (type "+ toName(newValue.getClass())+ "), because it is of the type "+ toName(field.getType()))
distance * MILES_KILOMETRES_RATIO
mHandler.obtainMessage(MSG_FINGERPRINT_AUTHENTICATED)
edgeClass.isEnabled() && vizConfig.isShowArrows() && dataBridge.isDirected()
log.error(sm.getString("hostConfig.deployDescriptor.error",xml),e)
services == null || services.size() == 0
assertEquals(conf,(Configuration)serializeDeserialize(conf))
Arrays.asList("Java","CSharp","Cpp")
LOG.debug("Datanode " + targets.length + " got response for connect ack "+ " from downstream datanode with firstbadlink as "+ firstBadLink)
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,false,"cancelNotificationWithTag",pkg)
mDark == dark || mContractedChild == null
changeSet.toString()
drs.setTotalRecords(0)
!file.exists() || !file.canRead()
canCacheErrors || hasErrors
LOG.debug("Couldn't run process with PTY",t,logContent)
connectionProperties.containsKey("oracle.password")
twitter1.checkUserListMembership(id1.screenName,userList.getId(),id2.id)
allowedIdentifiersCheckDigitsInts[i]
body.endsWith("6") || body.endsWith("10")
!isBottomRightVisible
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(path1))
vis.isChecked()
three.setAxisIndex(LEAF)
!application.isPresent()
logger.debug("Cannot play URI ({})",e.getMessage())
layouts.size()
propExcludedDimensions.getIntList()
commandExecutor.writeAsync(getName(),RedisCommands.DEL_OBJECTS,getName(),getTimeoutSetName(),getIdleSetName())
factCount=5000
tp.go(fd,opts.dumpUnreachable ? 30000 : 5000)
url.addEncodedArgument(getAttributeValue(nodeAtts,"name"),getAttributeValue(nodeAtts,"value"))
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),e)
contact.getAccount()
ultimateRecyclerView.enableDefaultSwipeRefresh(false)
deleteChildrenRecursively(child)
requestOptionsClassName.toString()
Map<String,TypeData>
lines[i].length() >= cutWidth
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/classObjectMethod.kt")
mock.expectedMinimumMessageCount(10)
returnCursor != null && returnCursor.getCount() > 0
new Field(_name,columns.getString(4),null,_class.getPackage().getName(),_class.getName(),_class.getSimpleName(),_type)
case 10: 
evaluate(123.5f,DataTypes.FLOAT)
RedissonMultimap.this.keySize()
size=1000
(0x0000000000000007L)
j.getConfiguration().get("pig.job.converted.fetch","").equals("") && j.getConfiguration().get("mapred.task.id","").equals("") && !("true".equals(j.getConfiguration().get("pig.illustrating")))
mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder
added.isEmpty()
executeConnectAsync=true
target.getContext().isInContext(nodeName)
new FavoriteImageDrawable(a,color,withShadow)
new ArrayList<FileInputSplit>()
assertEquals(2,verifier.getErrors().size())
serialVersionUID=1743486889
connector.getFilterChain()
usage.getUsed()
result.size() == 1
RowPosition.forKey(range.start_key,p).compareTo(stop) > 0 && !stop.isMinimum()
config.getInt("history.size",15)
declaration instanceof KtProperty || declaration instanceof KtNamedFunction || declaration instanceof KtTypeAlias
ignite.getOrCreateNearCache(VisorTaskUtils.unescapeName(arg.name()),nearCfg)
typTypeStr != null && !typTypeStr.isEmpty()
newPacked[j]
assertEquals(12,beanCount)
ret.message().get(0)
public void testWithDFS() throws Exception {   MiniDFSCluster dfs=null;   MiniMRCluster mr=null;   FileSystem fileSys=null;   try {     final int taskTrackers=4;     Configuration conf=new Configuration();     dfs=new MiniDFSCluster(conf,4,true,null);     fileSys=dfs.getFileSystem();     JobConf jtConf=new JobConf();     jtConf.setInt(TTConfig.TT_MAP_SLOTS,1);     jtConf.setInt(TTConfig.TT_REDUCE_SLOTS,1);     jtConf.setLong(JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000);     mr=new MiniMRCluster(taskTrackers,fileSys.getUri().toString(),1,null,null,jtConf);     testFailCommitter(CommitterWithFailSetup.class,mr.createJobConf());     testFailCommitter(CommitterWithFailCommit.class,mr.createJobConf());     testSetupAndCleanupKill(mr,dfs,true);     fileSys.delete(setupSignalFile,true);     fileSys.delete(cleanupSignalFile,true);     testSetupAndCleanupKill(mr,dfs,false);   }   finally {     if (dfs != null) {       dfs.shutdown();     }     if (mr != null) {       mr.shutdown();     }   } } 
assertEquals(Optional.of("abc"),result)
createQuery(jpaqlString)
OrderByComparator<V>
RecentsHorizontalScrollView.super.removeView(view)
JSParameterListElement parameter
parent.child(i)
super.getEqProvider(path)
rename.isInternal()
comboBox != myReplaceComboBox
writeString(writer,fieldName,reader.getDate().toDateStr())
m.nclasses()
from("timer://foo?fixedRate=true&delay=0&period=500").to("bean:myBean","mock:result")
allocator.getFlowController().prepareActionAllWrite(input,weights,weightGradView,biasGradView,delta,epsNext)
errorType != ApiHelper.ErrorType.NO_ERROR
Looper.prepareMainLooper()
format(arguments[i],false)
Native.getLibraryOptions(classes[i])
new InterpreterContext("","1","","",null,null,null,null,null)
channel.writeAndFlush(res)
myTools != null && scope != null
highlighterStart <= end
result != null && result.bitmap != null
Slog.d(TAG,"Unable to bind ActivityRecognitionProxy.")
@Override public CacheDataSource createDataSource(){   return new CacheDataSource(cache,upstreamFactory.createDataSource(),cacheReadDataSourceFactory.createDataSource(),cacheWriteDataSinkFactory.createDataSink(),flags,eventListener); } 
new FreeMarkerTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_configuration,_templateContextHelper,false)
mentionsListView.setSelection(0)
LogAdapter.createLog(name)
buildHistoryNewItem(sectionTitle)
VERSION_META_ARRAY=1
m.getVersioned()
private final ReloadAction reloadAction; 
@Nullable
sceneCam.getUp(vars.vect6)
new WorldPoint(2566,3461,0)
Validator.isNotNull(_uploadMessage)
assertEquals(512f,i,20f)
offset + blockSize < bytes.length
GUIManagerLwjgl.class
!cached && addFiltered && node.isFiltered()
patched != null && (patched.startOffset != patched.endOffset || info.startOffset == info.endOffset)
companyAssetCategory.getCategoryId()
m2.getName().equals("getAttributes") && !m1.getName().equals(m2.getName())
super.getDataEncodingWithDefault(DEFAULT_ENCODING)
invalidate(true)
parameters2.size()
hazelcastFactory.newHazelcastClient(newClientConfig())
VertexAttribute.ColorUnpacked()
buffer.rewind().forward((int)n).getFixString((int)str_len,charsetName)
g.getTarget().setDirectory("target/generated-sources/jooq")
cause.getMessage().contains("Relative Redirect detected on")
mediaDriverBroadcastReceiver.receive(this,activeCorrelationId)
IdeaTestUtil.bombExplodes(2006,Calendar.SEPTEMBER,15,15,0,"maxim.mossienko","next token after tag correctly becomes " + "a tag parameter even if located on next line." + "Leading asterisks should not be counted as well.")
InsertFromValuesAnalysis analysis=(InsertFromValuesAnalysis)analyze("insert into deeply_nested (tags) " + "values ([" + "           {\"name\"='cool', \"metadata\"=[{\"id\"=0}, {\"id\"=1}]}, "+ "           {\"name\"='fancy', \"metadata\"=[{\"id\"='2'}, {\"id\"=3}]}"+ "         ])"); 
new IllegalStateException("This method should not be used for any fields the DateBuilder or TimeBuilder can't handle")
Timber.v(negativeResponseFromOldToken,"Authentication exception, re-trying with new token")
new StaticStringValuesReferenceProvider(false,"input","button","image","submit")
endFunction("delete_column_statistics_by_table: ",ret != false,null)
wrappedBuffer(Integer.MAX_VALUE,byteBuffer)
parser.getBoolean(KEY_SEND_TRON_LOG,false)
verifyAttributes(decoder,text("[3G*4700186508*000B*LK,0,10,100"))
reactContext.runOnJSQueueThread(new Runnable(){   @Override public void run(){     Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);   } } )
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,AppleBuildRules.XCODE_TARGET_DESCRIPTION_CLASSES)
systemId.length()
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString())
new RuntimeIOException("Error opening output file",e)
pRegexMatch != null && regexReplace != null
SystemInfo.isWindows && (UIUtil.isUnderDarcula() || UIUtil.isUnderIntelliJLaF()) && frame instanceof IdeFrameImpl
@ConditionalOnEnabledHealthIndicator("jms")
answer == 0
r.getUri().getPath()
UpgradeStepRegistrator.class
this.heading=0
GitHandlerUtil.doSynchronously(h,GitBundle.getString("rebasing.title"),h.printableCommandLine(),false)
mapping.set(j,groupCount + indicatorCount + newAggCallList.size())
runner.run(1,true,false)
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(16)
getEnvironment().tryUpdateClasspath(Collections.singletonList(testDir))
AppLog.d(T.EDITOR,message)
!((TileGenericPipe)source.getTile()).isPipeConnected(direction)
dictionary.put(words[0],words[2])
waitFor(pin,mode,-1)
logger.info("defineClass pluginClass:{} cl:{}",className,classLoader)
setSort(3)
ContainerUtil.createConcurrentWeakMap(ContainerUtil.identityStrategy())
groupVM.getGroupType() == GroupType.GROUP && groupVM.isMember().get() && groupVM.getIsCanCall().get()
entry.getKey().contains("defaultProduct.") || entry.getKey().contains("product.")
logger.getLoggedInfo().contains("This stubbing was never used")
cached.get(group)
implementationMethodDescriptors.build()
getEndpoint().getConfig().getIndexType()
sentences.size() > 0 && sentences.get(0).entityMentions() != null
setProperty(IMPLEMENTATION,implementation,DEFAULT_IMPLEMENTATION)
log != null && log.isDebugEnabled()
Thread.currentThread().interrupted()
Formatter.getInstance().getNoneIndent()
configuration.family()
log.error("Cannot retrieve roles for {} from {} due to {}",authenticatedUser,ab.getType(),e.toString(),e)
String requestRequiredAcks
private static class TestException extends RuntimeException {   private static final long serialVersionUID=1L;   @Override public void printStackTrace(  PrintWriter printWriter){     printWriter.print("stackTrace");   } } 
connections[i] != null && connections[i].getRequestId() == request.getRequestId()
message.getFilteredFields()
assertTrue(dr.isFailure())
assertEquals(2,resources.size())
new IncrementalIndexSegment(index,null)
verify(client).atomicIncrement((AtomicIncrementRequest)any())
Throwable e
stream != null && stream.myStorage == this
am.getClass().getField("mContext")
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_RAW,streamInfo.bitRate(),Format.NO_VALUE,streamInfo.channels,streamInfo.sampleRate,null,null)
KeyManagerFactory.getDefaultAlgorithm()
myIsNotNull || myNotNullParams.size() > 0
defaultRowFlushBoundary == null ? 75000 : defaultRowFlushBoundary
Thread.sleep(1000)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_TUNE_FUNCTION,false)
1L << rem
new InputStreamReader(f,"UTF-8")
new EntryTitleException("Blogs entry title must be a non null string")
sequenceFileVersion != SEQUENCE_FILE_VERSION
objects.length() <= slots
new MergingUpdateQueue("EditorNotifications update merger",100,true,null,project)
new RuntimeException()
DEFAULT_PORT=1433
javaBeanSerializer.getFieldValues(javaObject,json)
addContactButton.setPressedIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_PRESSED))
this.methodResolver.getRequestMappingMethod(handlerMethod).invoke(exchange,bindingContext).doOnNext(result -> result.setExceptionHandler(exceptionHandler)).onErrorResume(exceptionHandler)
cannedReplies != null && cannedReplies.length > 0
pos == 0 && aggregator == null
/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } 
parameters == null || parameters.isEmpty()
new PortletDataContextImpl(layoutSet.getCompanyId(),groupId,parameterMap,null,zipReader)
role.getChatUser().getAddress().toString()
id=39
previousSelection - 1
Key.make(_file + DeepWaterModel.CACHE_MARKER)
ZonedDateTime.parse(date,DATE_FORMAT.get()).toInstant().toEpochMilli()
myEditor.visualLineToY(endLineNumber)
sDefaults.putBoolean(KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL,false)
!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals("bind")
this.conversation.getContactJid().split("/",2)
filter.getTickSize()
!JedisClusterHashTagUtil.isClusterCompliantMatchPattern(matchPattern)
DescriptorUtils.getContainingModule(fromOrModule)
logger.debug("munlocking region")
mService.mDisplayContents.valueAt(i)
SemanticGraphFactory.makeFromTree(tree,mode,useExtras ? GrammaticalStructure.Extras.MAXIMAL : GrammaticalStructure.Extras.NONE,true)
new IndexWriter(startDir,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new NameValuePair[4]
super.setProperty(property,newValue)
orgReplica.applyDeleteOperationOnReplica(1,2,"type","id",VersionType.EXTERNAL,u -> { } )
/**   * {@inheritDoc}  */ @Override public Broadcaster addAtmosphereResource(AtmosphereResource r){   try {     if (destroyed.get()) {       logger.debug(DESTROYED,getID(),"addAtmosphereResource(AtmosphereResource<?, ?> r");       return r;     }     start();     if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) {       throw new IllegalStateException("Broadcaster " + this + " cannot be used as its scope is set to REQUEST");     }     if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {       if (policy == POLICY.FIFO) {         AtmosphereResource resource=resources.poll();         try {           logger.warn("Too many resource. Forcing resume of {} ",resource);           resource.resume();         }  catch (        Throwable t) {           logger.warn("failed to resume resource {} ",resource,t);         }       }  else       if (policy == POLICY.REJECT) {         throw new RejectedExecutionException(String.format("Maximum suspended AtmosphereResources %s",maxSuspendResource));       }     }     if (resources.contains(r)) {       return r;     } synchronized (concurrentSuspendBroadcast) {       if (resources.isEmpty()) {         BroadcasterFactory.getDefault().add(this,name);       }       checkCachedAndPush(r,r.getAtmosphereResourceEvent());       if (isAtmosphereResourceValid(r)) {         resources.add(r);       }     }   }   finally {     if (resources.size() > 0) { synchronized (awaitBarrier) {         awaitBarrier.notifyAll();       }     }   }   return r; } 
from >= to
LOG.warn("Async Kafka commit failed.",cause)
String.format(mappingFormat,typeName,packageName,mappedPackageName)
MessagingService.instance().addCallback(handler,message,destination,message.getTimeout(),handler.consistencyLevel)
this.myHashMap.containsValue(o)
getStringList(true,true,false)
new Thread(new Runnable(){   @Override public void run(){     Realm realm=Realm.getInstance(RealmTests.this.realm.getConfiguration());     realm.beginTransaction();     realm.createObject(AllTypes.class);     realm.commitTransaction();     realm.close();     bgThreadDone.countDown();   } } ).start()
1 << 16
loadWallpaper(forDraw,false)
new IndexResponse(shardId,index.type(),index.id(),randomInt(20),randomIntBetween(0,Integer.MAX_VALUE),true)
null == mImage || shadow
TimeUnit.SECONDS.toMillis(5)
context.getLong("hdfs.callTimeout",30000L)
getSelectedTextColor(ctx)
event.getEffectiveTransitionTime()
rm.getColumnDisplaySize(i)
result.setAttributePrefix("")
PlatformDependent.getByte(array,index)
toUse.filter(bci -> namedCheckers.contains(bci.canonicalName()))
enableRefreshTime=true
prefs.getBoolean(context.getString(R.string.pref_enable_cell_key),true)
getTestVector().getNumNonZeroElements()
new ClusterConfiguration("whatever","cluster://1","cluster://2")
userManager.isUserRunning(userHandle) && !userManager.hasUserRestriction(UserManager.DISALLOW_OUTGOING_CALLS,userHandle) && !user.isManagedProfile()
getMyApplication().getFavorites().getFavouritePoints()
mHasPendingMoveOrDelete || mKeySnapshots.isEmpty()
ImmutableList.copyOf(interceptors)
Iterable<T>
(Class<? extends TruffleObject>)receiverClass
getPreferences().getBoolean("allow_message_correction",false)
w.lock()
field.getTypeDesc()
gridDim > 768
new LinkedHashSet<>(0)
routePointImage.setOnClickListener(saveAsRoutePointOnClickListener)
sendResourcesChangedBroadcast(true,true,pkgList,uidArray,null)
new Version(V_1_1_2_ID,false,org.apache.lucene.util.Version.LUCENE_4_7)
mDeviceInfo.isMili1A() || mDeviceInfo.isMilli1S()
ddmStructureLocalService.fetchStructure(groupId,ddmStructureKey)
LOG.debug(getQueueName() + " user=" + userName+ " used="+ queueUsage.getUsed()+ " numContainers="+ numContainers+ " headroom = "+ application.getHeadroom()+ " user-resources="+ user.getUsed())
NoSuchGroupException.class
mIpSecService.allocateSecurityParameterIndex(IpSecTransform.DIRECTION_OUT,mRemoteAddr,TEST_SPI_OUT,new Binder())
otherEvent.getElement()
ConfigureMapMenu.getSortedMapNamesIds(this,entrieValues,entries)
Debug.e("Texture asset not found, " + pAssetPath,e)
EntityCacheUtil.putResult(AssetModelImpl.ENTITY_CACHE_ENABLED,AssetImpl.class,asset.getPrimaryKey(),asset)
!stopped.get()
super.onRequestSendAccessibilityEventInternal(child,event)
Collection<DeclarationDescriptor>
Validator.isNull(referringPortletResource) || !PortletConstants.getRootPortletId(referringPortletResource).equals(PortletKeys.ASSET_PUBLISHER)
new StringParser(charset)
useAutoinc=false
public TransMeta getManagedObject(){   return transMeta; } 
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).subscriberContext(withUser)
isEmptyOrSpaces(s)
mBindingServices.isEmpty()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod.kt")
b.getId()
!persistencePackage.containsCriteria(INVENTORY_ONLY_CRITERIA)
@Nullable @Override public KtTypeReference getContentElement(){   return findChildByClass(KtTypeReference.class); } 
assertEquals("that/has/one/bang",result)
each.getPath()
partialUri.toLowerCase()
composeText.getText()
app.getSettings().AVOID_FERRIES.getModeValue(params.mode)
logger.debug(ex,() -> format("The java.lang.Class loaded from path [%s] has a malformed class name [%s].",classFile.toAbsolutePath(),fullyQualifiedClassName))
new StringBundler(2)
ColorProperties.getColor("buttonGradientLight")
LOG.info(e)
BeanUtil.setDeclaredProperty(target,parameter,value)
MAX_EMITTER_THREADS=4
DEFAULT_DATA_SIZE_PER_COLUMN=50
this.nextNode
ActivityManager.handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,true,false,"cancelAllNotifications",pkg)
new EditSessionBlockChangeDelegate(editSession)
new HTable(TEST_UTIL.getConfiguration(),TABLE)
testWarning(LINE_JOINER.join("goog.require('a.c');","/** @suppress {extraRequire} */","goog.require('a.b')"),REQUIRES_NOT_SORTED)
LOG.error("failed to send {} messages to {}: {}",numMessages,dstAddressPrefixedName,future.getCause())
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true)
threshold >= 0
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
!TruffleOptions.AOT
!chatSession.isDescriptorPersistent() && !(chatSession instanceof ConferenceChatSession) && !ConfigurationManager.isAddContactDisabled()
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to timestamp: " + value.toStringUtf8(),e)
!Boolean.parseBoolean(ldapConfig.get("startEmbeddedLdapServer"))
jarEntry.isDirectory()
idleTimeoutGuard=-1
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
sSoundPaths.containsKey(mQa) && mNextToPlay < sSoundPaths.get(mQa).size()
Assertions.assertThrows(EmptyStackException.class,() -> stack.peek())
accounts.length > 0 && mNavigationView != null
Iterable<String>
new MultipartEntity(getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT,null,Charset.forName(contentEncoding))
csFoldingEnabled.getSelection()
list.toLongArray()
ev.getAction() == MotionEvent.ACTION_DOWN || mDetector.onTouchEvent(ev)
context.getVariableResolver().replaceTokens(bsz)
myPreferredFocusedComponent instanceof AbstractButton
verify(mockRealm,times(2))
menu == null || mAccount == null
List<PdfComment>
serviceName == null || seenServiceNames.contains(serviceName)
replayEnd=ISODateTimeFormat.dateTimeParser().parseDateTime(replayTimeIso)
Matrix.scaleM(mMVPMatrix,0,scaleX,scaleY,1)
context.getProjectCompileScope()
request.setHeader(h.getKey(),h.getValue())
period >= MINIMAL_POLL_PERIOD
clock.compare(newClock)
parentPackageInTree != null || (aPackage != null && aPackage.getParentPackage() != null)
getRestricted(null,uid,restrictionName,md.getName(),false,false)
AbstractAegisProvider.clearContexts()
protected static Object lock=new Object(); 
new TestCaseGeneratorImpl(false,true)
this.controller.saveService(data)
id=15
new GetExecutionVariableInstancesCmd(executionId,variableNames,true)
new INodeDirectory(dirNode,true)
myShowWindowAlarm.addRequest(new Runnable(){   public void run(){     if (isRunning()) {       showDialog();       final DialogWrapper popup=myDialog.myPopup;       if (popup != null) {         myFocusTrackback.onShown(popup.getPreferredFocusedComponent());       }     }   } } ,300,getModalityState())
waitFor(condition,duration,SLEEP_MILLIS)
assertEquals(worldVocab.getIndex(),3)
assertThat(connector.getSoLingerTime()).isEqualTo(30000)
close.setVisibilityImmediate(removable ? VISIBLE : GONE)
v3.getString()
new ArrayList<>()
Network.connectToServer(TestChatServer.NAME,TestChatServer.VERSION,host,TestChatServer.PORT)
g.paidAppName.equals("")
p.getName().equals(name) || p.getKey().equalsIgnoreCase(name)
MTU_LENGTH_DEFAULT=4096
proxy.getHost()
new ExpectedHighlightingData(myEditor.getDocument(),checkWarnings,checkWeakWarnings,checkInfos,ignoreExtraHighlighting,getHostFile())
result == null && exception != null
(_result == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
assertEquals(ChronicleEngineMapEventType.INSERT,mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE))
rendererAttr != null
propEditor != null && !type.isArray()
findAvailablePort(2000,10000)
discardChannel.receive(1000)
PackageParser.generateApplicationInfo(p,flags,ps.readUserState(userId),userId)
ACRA.log.i(LOG_TAG,"ACRA is disabled for " + context.getPackageName() + " - forwarding uncaught Exception on to default ExceptionHandler")
new ProtoFile("hex.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
word2Vec.setSentenceIterator(iterator)
serialVersionUID=1425037792
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_ACCESS_SETTINGS,true)
declaringClass.getSimpleName()
new Timespan(30,Timespan.TimeUnit.SECOND)
inHeatableTicks=20
frame.setLocation(frameLoc.x,30)
HashBiMap.create(7)
parent == null || !parent.isValid()
setZrtpEncryptionOnDescription(mediaType,description,null)
Minecraft.getMinecraft().gameSettings.fancyGraphics && tome != null
myRole1 == ChildRole.LOOP_BODY || myChild2.getElementType() == ElementType.CODE_BLOCK
@Override public ClassLoader createFilteringClassLoader(ClassLoader parent,FilteringClassLoader.Spec spec){   FilteringClassLoader.Spec classLoaderSpec=new FilteringClassLoader.Spec(spec);   if (needJaxpImpl()) {     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,SAXParserFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DocumentBuilderFactory.class);     makeServiceVisible(systemClassLoaderServiceLocator,classLoaderSpec,DatatypeFactory.class);   }   return new FilteringClassLoader(parent,classLoaderSpec); } 
columnType.equalsIgnoreCase("double") || columnType.equalsIgnoreCase("float")
SafeUsagesExt1Kt.foo(a,1,"1","!")
-121
Math.min(127,Math.max(-128,priority))
recommendedVersion == null || recommendedVersion.equals(seenVersion)
ret.setComplete(e,response)
!myAutomaticStartLevel.isSelected()
Character.isDigit(first) || first == '-'
assertTrue("File:" + file.getPath() + "; time:"+ modified,timestamp[i] != modified)
runUTRunner(testDir.getPath(),testDir.getPath() + "/","true")
Request.class
AnnotatedElementUtils.findAnnotationAttributes(method,annotType)
Object transformationResult=JsonPath.read(source,JSonPathExpression); 
WikiTestUtil.addPage(TestPropsValues.getUserId(),node.getNodeId(),ServiceTestUtil.randomString(),ServiceTestUtil.randomString(),true,true,serviceContext)
desiredX >= 0 && !ApplicationManager.getApplication().isUnitTestMode()
LOG.warn("Block of ID " + getCurrentBlockId() + " could not be cached into Tachyon")
new IndexWriter(indexStore,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
logger.fine("reconnect success")
sendMail(getFromAddress(),addressList,getSuccessSubject(),"URL Restarted: " + sample.getSampleLabel(),getSmtpHost(),getSmtpPort(),getLogin(),getPassword(),getMailAuthType())
process.waitFor(5,TimeUnit.MINUTES)
findAnnotationAttributes(element,annotationType.getName(),false,false)
new CommandLineException("Failed to execute operation.",e)
new FileDumper(output.toAbsolutePath().toString(),true,e1.getClassType(),summaryDumper,collectingDumper.getTypeUsageInformation(),options,illegalIdentifierDump)
this.mGLState.setDitherEnabled(renderOptions.isDithering())
Key.class.getName()
LOG.debug(ex.getLocalizedMessage(),ex)
new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(false);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(true);     countDownLatch.countDown();   } } )
Boolean.valueOf((String)disableMultipart)
LAST_VERSION=362
myPieces.floorEntry(startOffset)
s.charAt(0)
um.getUsers(true)
String rootName
EntityRegistry.registerGlobalEntityID(entityClass,entityName,id,background,foreground)
assertTrue(qr.hasFullRank())
Double.valueOf(args[1])
sysPkg != null && sysPkg.pkg != null
c > ic
new MD5Renderer(model,false,true)
new Fetcher(conf).fetch(segment,threads,Fetcher.isParsing(conf))
Object... selected
!sDisplayAnswer || !getConfigForCurrentCard().has("replayq") || getConfigForCurrentCard().getBoolean("replayq")
ClassLoader rootClassLoader=classLoaderFactory.createFilteringClassLoader(classLoader,rootSpec); 
ContactModel::getFacebookSn
adminService.createInstance(containerName,sshPort,rmiRegistryPort,rmiServerPort,null,jvmOptsBuilder.toString(),collectionAsString(features),featuresUrls)
i <= rlist.size() - 1
mPickerOptionsBundle.putBoolean(EXTRA_SHOW_CAMERA,showCamera)
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElementsToIgnore),false,refreshViews);   } } ,project.getDisposed())
attribute.getDefinition().getMarshaller()
public Variable emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue){   LIRKind kind=newValue.getLIRKind();   assert kind.equals(expectedValue.getLIRKind());   Kind memKind=(Kind)kind.getPlatformKind();   AMD64AddressValue addressValue=asAddressValue(address);   RegisterValue raxRes=AMD64.rax.asValue(kind);   emitMove(raxRes,expectedValue);   append(new CompareAndSwapOp(memKind,raxRes,addressValue,raxRes,asAllocatable(newValue)));   assert trueValue.getLIRKind().equals(falseValue.getLIRKind());   Variable result=newVariable(trueValue.getLIRKind());   append(new CondMoveOp(result,Condition.EQ,asAllocatable(trueValue),falseValue));   return result; } 
DiagnosticType.error("JSC_BAD_PRIVATE_GLOBAL_ACCESS","Access to private variable {0} not allowed outside file {1}.")
Integer.parseInt(optionsHelper.getOptionValue(OPTION_PERIOD))
ACRA.log.w(LOG_TAG,"Could not rename approved report from " + report + " to "+ approvedReport)
new BoltStateMachineV1SPI(boltChannel,usageData,logging,authentication,transactionSPI)
new DQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
JSRefactoringUtil.createTypeElement(myTargetClass.getProject(),type,JavaScriptSupportLoader.ECMA_SCRIPT_L4)
dist <= bestdist
prefs.getBoolean(PERSIST_SERVICE,true)
assertThat(request.getBody().readUtf8()).isIn("<my-object><message>hello world</message><count>10</count></my-object>","<my-object><count>10</count><message>hello world</message></my-object>")
final CharSequence subtypeName=context.getPackageManager().getText(packageName,mSubtypeNameResId,appInfo); 
rewrite == null
group.getGroupId()
WString.class
statistics.addPutTimeNanos(System.nanoTime() - start)
args.length >= 2
new BigInteger(1,Hex.decode("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"))
req.getPathInfo()
Uri uri
HandleConstructor.createConstructor(AccessLevel.PACKAGE,builderType,Collections.<EclipseNode>emptyList(),false,true,annotationNode,Collections.<Annotation>emptyList())
FridgeChannelSelector selector=(FridgeChannelSelector)getValueSelectorFromChannelID(channelID); 
(IntIntVector)row
return 10; 
r.getKey()
miniBatchSize[i]
LoggerFactory.getLogger(ProcessUtils.class).error("Fail to kill " + process,e)
lowers != null
10 * 60 * 1000L
mSeekBar.setProgress(mVolumeBeforeMute,true)
final StringBuilder buf=new StringBuilder(); 
10 * MINUTES
new ComponentContext(c.getBaseContext(),c.getLogTag(),c.getLogger())
parser.parseLight(GroovyElementTypes.CLOSURE,builder)
Integer.parseInt(param.getValue())
/**   * Received bytes count.   */ private final LongAdder8 rcvdBytesCnt=new LongAdder8(); 
GL20.glUniform2iv(location,v)
nextPk()
"DependencyReport".equals(scriptName) || "Upgrade".equals(scriptName) || "SetProxy".equals(scriptName)|| "AddProxy".equals(scriptName)
mapEntry.getValue().equals(source)
countNewlines(headerFragment) + 2
obj.getName() != null && obj.getName().length() > 0
UpgradeStepRegistrator.class
button.setPadding(50,5,10,5)
p >= 0
request == null || request.getScheme() == null || !request.getScheme().startsWith("package")
masm.add(size,scratch1,result,delta)
new IllegalStateException(String.format("File \"%1$s\" has no indentation comment or its format " + "malformed. Error on line: %2$d",aFileName,lineNumber))
VERSION=14
TCN_RECOMMENDED_MINOR * 100
Slog.w(TAG,"APK " + fileName + " has compressed native code "+ entry.getName())
loginResult != null && loginResult.getProperties() != null
mAccessibilityController.isAccessibilityEnabled()
whitelist.addTags("span","hr","kbd","samp","tt","del","s","strike","u","details","summary")
log.debug("Null primary key column for '" + object.getName() + "'")
RECENT_SKETCHES_MAX_SIZE=10
propertyValue.getName().replaceFirst(prefix + PREFIX_SEPERATOR,"")
(cb.getBuffer().length - cb.getEnd()) == 0 && bb.getLength() != 0
statusMessage != null && statusMessage.length() != 0
pyClass.getQualifiedName()
host.getHost()
javaProject.getAllPackageFragmentRoots()
StringUtil.isNotEmpty(source)
sharedSecretPanel.getSecret()
mApplicationObject == null && (Process.SYSTEM_UID == Process.myUid())
pane.setPreferredSize(new Dimension(300,80))
RawTCPInput.class
notificationManager.cancelAsUser(NOTIFICATION_ID,id,UserHandle.ALL)
name.startsWith("java.") || name.startsWith("javax.xml.") || name.startsWith("org.w3c.dom.")|| name.startsWith("org.xml.")
setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
buf.readRetainedSlice(length)
dz >= 1
getChildren().add(0,tabsContainerHolder)
mViewModel.onNewsCardShown(item,getCurrentTag())
new float[4]
@Override @NotNull protected T handlePostfixInsert(@NotNull InsertionContext context,@NotNull PrefixExpressionContext expressionContext){   Project project=expressionContext.expression.getProject();   JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);   PsiElementFactory elementFactory=psiFacade.getElementFactory();   PrefixExpressionContext fixedContext=expressionContext.fixExpression();   PsiStatement targetStatement=fixedContext.getContainingStatement();   assert targetStatement != null;   PsiElement expressionCopy=fixedContext.expression.copy();   TStatement newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression);   @SuppressWarnings("unchecked") TStatement replaced=(TStatement)targetStatement.replace(newStatement);   return replaced; } 
databaseLocker == null && isUseDatabaseLock()
new ForAdvice(adviceMethod,new TypeList.Empty(),enterTypes,TranslationMode.ENTRY)
BaseConnection.class
getTestName(false)
new GitCompareBranchesDialog(myProject,info.getTo(),info.getFrom(),info.getInfo(),myGitRepository,true)
items[31]
Integer.parseInt(getOptional("kylin.storage.hbase.block-size-bytes","1048576"))
Validator.isNull(portalVersion) || privateApp
hongbaoContent == null || "查看红包".equals(hongbaoContent)
foundTargetWs && winAnim.getShown() && winAnim.mLastAlpha > 0f
Arrays.asList("Bnd-LastModified","Created-By","Javac-Debug","Javac-Deprecation","Javac-Encoding")
final ImageButton buttonMore=(ImageButton)view.findViewById(R.id.context_menu_more_button); 
UpgradeStepRegistrator.class
commentsListView.setSelection(0)
InputType.convolutionalFlat(height,width,channels)
add(food(perc(.1,1)),COOKED_SWEETCORN,SWEETCORN_7088)
-37.0f
log.debug("getSummaryResults(): Session ID is unknown: {}",currentSessionID)
DataType.map(datatype,datatype)
new Dialog(ActivityMain.this)
new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,trimmed)),SaveService.getFileEncoding("UTF-8")),false)
PlatformTestCase.autodetectPlatformPrefix()
assertNotNull("SqlStatement to test is NOT null.",statementUnderTest)
modelNodeInternal.asImmutable(ModelType.untyped(),null)
new ContextName(name,null)
!isInTransform && !isUDTF && child.getChildCount() > 2
Sets.intersection(new HashSet<>(a.getPropertyKeys()),new HashSet<>(b.getPropertyKeys()))
? extends TypeDescription
paras.put(22L,10000L)
return result; 
logger.debug("cs-change-async-wait-callback. current-step:" + currentStep.getKey())
logger.debug("This client will talk to the following serviceUrls in order : {} ",Arrays.toString(serviceUrls.toArray()))
new IterableAlgorithmRunner(blockScanner)
Status.createStatuseList(get(getBaseURL() + "favorites.json",new PostParameter[0],true))
OperatorGroupByUntil<T,TKey,TValue,TDuration>
change.isMoved()
configuration.getDatabaseId() == null && this.databaseIdProvider != null
E extends Exception
DEFAULT_PORT=8888
MetadataMismatchException e
isReplicateRequest()
new IllegalArgumentException(sm.getString("iib.requestheadertoolarge.error"))
Character.isJavaIdentifierPart(c) || c == '\''
input.getExecPath()
ocvmat.convertTo(cvmat,CV_8UC(3),255.0,0.0)
declaredMethods[i].isBridge() || name.indexOf('+') >= 0
food(8)
this.messageService.fluxPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
Integer[]
logger.warn("license [{}] - expired",license.uid())
CLOB_LENGTH=9999999
data[1] > 800
new GitVersion(1,7,3,0)
telephony.getDataNetworkTypeForSubscriber(subId,getOpPackageName())
RowKey.getSaltBytes(salt_bucket)
type.isAssignableFrom(number.getClass())
new LeftTuple(new DefaultFactHandle(2,"cheese"),null)
printServices.size() >= 1
visibility != View.VISIBLE && mZoomManager != null
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
HashMap<Integer,ResTypeSpec>
GridCacheAdapter metaCache=getFieldValue(fs,"meta","metaCache"); 
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + currentToken)
latch.await(600,TimeUnit.SECONDS)
LOG.error("Could not load JDK7 class with a JDK7+ JVM, falling back to no-op implementation.")
t.type.tsym.flatName()
0.249f * mainUnitInMeters
!transactional && this.referenceId == referenceId
stationItemName != null && openSprinkler != null
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER,STANFORD_DEPENDENCIES)
/**   * set the identifier of this item  * @param identifier  * @return  */ public Item withIdentifier(long identifier){   this.mIdentifier=identifier;   return (T)this; } 
new IllegalStateException("UTF-8 not supported!")
parser.hasNext(4)
Flyway.configure(classLoader).configuration(createFlywayConfig(envVars))
changeAffiliationByAdmin(jids,"owner")
solo.clickOnText(solo.getString(R.string.settings_label))
arguments[1]
contentType.getCharset()
System.identityHashCode(o)
SCRIM_BEHIND_ALPHA_KEYGUARD=0.45f
maxActiveSessions == null && servletContainerService != null
JettyWebSocketServer.LISTEN_PORT.getDisplayName()
createFrame(getRootNode().getFrameDescriptor(),args1)
cell != null && cell.recon != null
mock.message(0).body(String.class)
myLeftIndex == 0
Throwable t
new Long(4)
DEFAULT_VERIFY_ENABLE=true
Settings.Secure.getIntForUser(mContext.getContentResolver(),DOZE_SENSORS_WAKE_UP_FULLY,1,UserHandle.USER_CURRENT)
!unsafeBuffers.contains(buffer,true)
wrapper.getServlet() == null
LOG.error("Error while deserializing payload",e)
packet.getTo().split("/",2)
benchmark.expectAround("Throughput to scroll FILE_SOURCES",throughputPerSecond,120,0.08)
CompilationUnitTree tree
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
Timber.e(e,"Argument %s is incorrect")
model.replaceWhiteSpace(wsRange,newWhiteSpace)
currentOffset > documentText.length()
!isConsole && !isOpOverride && (senderGroup != null ? permissionHandler.inGroup(auxUser.getName(),senderGroup.getName()) : false)
permissions+=64
attacher.addRefreshableView(view,null,refreshListener)
getObjectLayout().getArrayIndexScale(elementKind)
value.getType().getName()
myDebugger.close()
request.contains(HttpParameters.SESSIONS_PART) || request.contains(HttpParameters.PROCESSES_PART) || request.contains(HttpParameters.JNDI_PART)|| request.contains(HttpParameters.CONNECTIONS_PART)|| request.contains(HttpParameters.MBEANS_PART)
latbottom <= o.getLocation().getLatitude()
TypeParameterDescriptorImpl.createWithDefaultBound(receiverFunction,Collections.<AnnotationDescriptor>emptyList(),false,Variance.IN_VARIANCE,Name.identifier("T"),0)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   return cache.drPauseState(); } 
continueUpdateBounds(HOME_STACK_ID)
new SortedList<>(entriesFiltered)
DEFAULT_LOCK_TIMEOUT=60000
owner.getEnergyFrozenBalance()
i >= generations.length
log.debug("Performing lookup: %s --> %s",nodeIds,retVal)
Throwable onlyIfJUnitIsNotAvailable
/**   * @param arg  * @return  */ T convert(S arg); 
new LaserRow(spriteTubeMiddle,0,8,8,16)
CollectionUtils.newList(GrailsResourceUtils.appendPiecesForUri(SLASHED_VIEWS_DIR_PATH,uri),uri)
PART_COUNT=1000
LOG.config(() -> createDiscoveredTestEnginesMessage(testEngines))
UnifiedDiffWriter.write(myProject,patches,writer,"\n",patchTransitExtensions)
ConcurrentHashMap<String,Channel>
vec == null || DKV.get(vec._key) == null
mDrawer != null && view.getContext() != null
JBIterable.from(getSelectedValuesList())
processor.open(w2,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
currentTx.concatenate(matrixTx)
realUserTagEventDel.getTagId()
perfRule.assertDurationAround(Long.valueOf(prof.getProperty("Xoo Highlighting Sensor")),8900L)
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.BUILDING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNode)
SOURCE_INTERNETRADIO(26)
i >= 0
c.getDomain() == null && getDomain() != null
HEADER.getBytes(Constants.UTF8)
app.getGraphics().newFont(app.getFiles().getInternalFileHandle("data/arial.ttf"),11,FontStyle.Plain,true)
LOG.debug("Value selected for the metric should be a number: " + context)
pk.getColumnNameInSql()
new IOException(e.getMessage(),e)
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(element)).descriptionAndTooltip(message)
new InvalidPluginRequestException("Found more than one plugin for plugin id " + pluginId)
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,false);   }   if (log.isTraceEnabled()) {     log.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"CamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
!issuer.equals(accessTokenV.getTokenIssuer())
m[M30]
_log.error(ioe.getMessage(),ioe)
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","D a.txt")
V extends Identifier
StringBuilder numberedSrcTextBuffer=new StringBuilder(); 
T userObject
AssetTagFinderUtil.countByG_N(_scopeGroup.getParentGroupId(),assetTagName)
mImageManager.load(holder.mImgAvatarOrBlavatar,imageUrl,null)
component.setMaxThreads(20)
size >= _STORAGE_SIZE_DENOMINATOR
new DatePickerDialog(getActivity(),DatePickerDialog.THEME_HOLO_LIGHT,getConstructorListener(),y,m,d)
overlayPackage.isStaticOverlay || mDefaultOverlays.contains(overlayPackage.packageName)
gradleProject.getProjectIdentifier()
HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()
new UpgradePermission(true)
new MaterialDialog.Builder(getActivity()).title(R.string.reschedule_card_dialog_title).positiveText(getResources().getString(R.string.dialog_ok)).negativeText(R.string.cancel).inputType(InputType.TYPE_CLASS_NUMBER).inputRange(1,4)
MapActivity.getMapActions()
outState.putBoolean(KEY_SHOULD_RESOLVE,mShouldResolve)
JiveGlobals.deleteXMLProperty(ONE_TIME_PROPERTY)
Duration.seconds(200)
annotationProcessors.isEmpty() && plugins.isEmpty() && annotationProcessorDeps.isEmpty()
mDownView != null && mDownView instanceof ContextualUndoView
trade.getLimit()
mService.removeNetwork(netId,mContext.getOpPackageName())
icer_cc.toClass(Weaver.class.getClassLoader())
rnaPath.endsWith("rotation") || rnaPath.endsWith("rotation_euler")
agent != null && agent.getHeader() != HttpHeader.USER_AGENT
StringBuffer sb=new StringBuffer("RuleFlowProcessInstance"); 
paymentGatewayApi.processNotification(PLUGIN_NAME,"TOTO",NULL_PLUGIN_NAMES,NULL_PLUGIN_PROPERTIES,requestOptions)
setIcon(iconView,tree)
fm2.getKnownNodes().size() == 0
zkController.getZkStateReader().getReplicaProps(collection,shardId,cd.getCloudDescriptor().getCoreNodeName())
this.specificIcon && this.clearIfManual && historyReference.getHistoryType() == HistoryReference.TYPE_MANUAL
highJson.getDouble(i)
IP_FILTER_ENABLED_HTTP_SETTING.getDefaultRaw(s)
networkOperator != null && !networkOperator.isEmpty()
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title","_id","_version","_score","_uid","_source")
lambdas.size() > ordinal
nextNonWakeup != 0 && mNextNonWakeup != nextNonWakeup
new Tailer(new File(s),new LogTailerListener(),1000,false,true)
isFocused()
mapTypeStringTransparency=R.string.map_transparency
@NotNull @Override public abstract ClassDescriptor getDeclarationDescriptor(); 
SWIPE_UP_SHOW_ON_APP_LAUNCH_AFTER_DISMISS_BACK_OFF=40
getPaymentMethodById(account.getPaymentMethodId(),true,context)
PyUtil.addListNode(this,param,beforeWhat,params.length == 0,true)
list.size() > 0
mService.disconnect()
runPartialSorter(sorter,NUM_RECORDS,25)
guiResource.getImageSlaveTree()
Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new QueueCallBuilder(h2)); 
NETHER_WARTS(115)
mGridView != null && mGridView.getNumColumns() > maxColumnSize
assertBusy(() -> {   final Snapshot snapshot=new Snapshot("test-repo",snapshotId);   List<IndexShardSnapshotStatus.Stage> stages=snapshotShardsService.currentSnapshotShards(snapshot).values().stream().map(status -> status.asCopy().getStage()).collect(Collectors.toList());   assertThat(stages,hasSize(shards));   assertThat(stages,everyItem(equalTo(IndexShardSnapshotStatus.Stage.DONE))); } ,30L,TimeUnit.SECONDS)
CLOSURE_DO_CALL_METHOD.equals(methodName) || CLOSURE_CALL_METHOD.equals(methodName)
cs.newDrawable()
Configuration.getMs(PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS)
body != null && body.getChildCount() > 0
d.isObjectVisible(tag,val,zoom,type,nightMode)
query.startsWith("about:")
f.close(true)
new LLVMInsertFloatValueNode(sourceAggregate,resultAggregate,size,offset,(LLVMFloatNode)valueToInsert)
Assert.assertEquals(3,definitions.size())
myIgnoreInstanceRefsInClosure=false
foundExistingGitUrl=false
SDK_INT >= JELLY_BEAN_MR2
assertEquals(3,historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size())
getUserFromDashboard(ownerDashboard,creatorId)
getEmptyCellElement()
ColorProperties.getColor("primaryControlColor")
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",true))
baseAt(i).getFile().getAbsolutePath()
/**   */ private final LongAdder8 mapSize=new LongAdder8(); 
{26,29}
Flux.from(inputStream).concatMap(value -> {   DataBuffer arraySeparator=bufferFactory.wrap(SEPARATOR_BUFFER);   return Flux.just(encodeValue(value,bufferFactory,elementType),arraySeparator); } )
state > singleByteReads || dst.remaining() == 1
Double.valueOf(data[metadata.indexOf(name)])
List<Double>
y == 32
note.getTag() != null && note.getTag().getId() != 0
!mStopped || mReportNextDraw
assertEquals(someName,actualPattern.pattern())
Order result=order; 
mBluetoothHeadset.connectAudio()
new MailMessage(from,to,subject,userThreadBody,true)
UriBuilder.fromResource(AlarmCallbackResource.class).path("{alarmCallbackId}").build(streamid,id)
return 10000; 
MUCUser.from(oldPresence)
List<Street>
fluidFuel.getBlockID()
Long.parseLong(val)
service.getAdnUriForPhoneAccount(accountHandle,mContext.getOpPackageName())
reader.nextDouble()
@Internal
greaterThanOrEqualTo(290L)
LOG.info("Failed to read expected encryption handshake from client " + "at " + peer.getRemoteAddressString() + ". Perhaps the client "+ "is running an older version of Hadoop which does not support "+ "encryption",imne)
widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST
new StringBuffer(self.length() + 16)
taskIds.size()
point.getName()
CallParticipantRecordImpl newRec=new CallParticipantRecordImpl(callParticipant.getAddress(),new Date(),null); 
assertEquals(13,definitions.size())
mContext.enforceCallingOrSelfPermission(PERMISSION,"LockSettingsRead")
LOGGER.lifecycle(exception.apply().toString())
size * 1.8f
/**   * Create the  {@link RxBleClientMock} instance using the configured values.  */ public RxBleDevice build(){   if (this.rssi == -1)   throw new IllegalStateException("Rssi is required. DeviceBuilder#rssi should be called.");   if (this.deviceMacAddress == null)   throw new IllegalStateException("DeviceMacAddress required." + " DeviceBuilder#deviceMacAddress should be called.");   if (this.scanRecord == null)   throw new IllegalStateException("ScanRecord required. DeviceBuilder#scanRecord should be called.");   RxBleDeviceMock rxBleDeviceMock=new RxBleDeviceMock(deviceName,deviceMacAddress,scanRecord,rssi,rxBleDeviceServices,characteristicNotificationSources);   for (  BluetoothGattService service : rxBleDeviceServices.getBluetoothGattServices()) {     rxBleDeviceMock.addAdvertisedUUID(service.getUuid());   }   return rxBleDeviceMock; } 
index < 5
new IllegalStateException(sm.getString("endpoint.jsse.noSslContext",sniHostName))
InputType.convolutional(conv.getHeight(),conv.getWidth(),from - to + 1)
width - (int)maxX
mNwService.getInterfaceConfig(mTetherInterfaceName)
ddmTemplateModel.setResourceClassNameId(sourceClassNameId)
new SimpleType(subclass,_bindings,this,_superInterfaces,_valueHandler,_typeHandler,_asStatic)
new OkHttpClient.Builder().connectTimeout(15,TimeUnit.SECONDS)
hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED
property != null && method.getName().equals(refex.getText())
new NetworkRequestHandler.ResponseException(504,0)
myClass != null && myClass.isContentsLoaded()
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))).append(targetNode)
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())
new Schema(1000,"de.greenrobot.daoexample")
countDownLatch.await()
_scored_valid != null
new ModelNode().set(5000L)
REPLACE_IF_SAME(7)
mAudioQuality=AUDIO_QUALITY_NONE
UpgradeStepRegistrator.class
cg.getUpdater().update(gradient[0],1,batchSize)
Math.min(1.0,type.getProbability() * (1.0 - probabilityA) / (1.0 - probabilityB))
TokenSet.create(ABSTRACT_KEYWORD,ASSERT_KEYWORD,BOOLEAN_KEYWORD,BREAK_KEYWORD,BYTE_KEYWORD,CASE_KEYWORD,CATCH_KEYWORD,CHAR_KEYWORD,CLASS_KEYWORD,CONST_KEYWORD,CONTINUE_KEYWORD,DEFAULT_KEYWORD,DO_KEYWORD,DOUBLE_KEYWORD,ELSE_KEYWORD,EXTENDS_KEYWORD,FINAL_KEYWORD,FINALLY_KEYWORD,FLOAT_KEYWORD,FOR_KEYWORD,GOTO_KEYWORD,IF_KEYWORD,IMPLEMENTS_KEYWORD,IMPORT_KEYWORD,INSTANCEOF_KEYWORD,INT_KEYWORD,INTERFACE_KEYWORD,LONG_KEYWORD,NATIVE_KEYWORD,NEW_KEYWORD,PACKAGE_KEYWORD,PRIVATE_KEYWORD,PUBLIC_KEYWORD,SHORT_KEYWORD,SUPER_KEYWORD,SWITCH_KEYWORD,STRICTFP_KEYWORD,SYNCHRONIZED_KEYWORD,THIS_KEYWORD,THROW_KEYWORD,PROTECTED_KEYWORD,TRANSIENT_KEYWORD,RETURN_KEYWORD,VOID_KEYWORD,STATIC_KEYWORD,WHILE_KEYWORD,TRY_KEYWORD,VOLATILE_KEYWORD,THROWS_KEYWORD,ENUM_KEYWORD)
readWifiSleepPolicy()
new ListWidget(RuntimeEnvironment.application,formEntryPrompt,false,false)
headerHandled=true
new ClassPathResource(location,ResourceUtils.class.getClassLoader())
StringBuilder padding=new StringBuilder("\t"); 
Number rate=(Number)map.get(MediaFormat.KEY_FRAME_RATE); 
any(Object.class)
instance.criterion.sql.replace("?",instance.criterion.entryValues[instance.selectedIndex])
new EditorLanguage("mode/rdoc",false,false)
new Span("> IDLE")
JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED,sourceMapPath,e.getMessage())
!DruidDataSourceUtils.isRemoveAbandoned(datasource)
/**   * Bluetooth GATT callbacks. Overrides the default BluetoothGattCallback implementation.  */ private final IBluetoothGattCallback mBluetoothGattCallback=new IBluetoothGattCallback.Stub(){   /**   * Application interface registered - app is ready to go  * @hide  */   @Override public void onClientRegistered(  int status,  int clientIf){     if (DBG)     Log.d(TAG,"onClientRegistered() - status=" + status + " clientIf="+ clientIf);     if (VDBG) { synchronized (mStateLock) {         if (mConnState != CONN_STATE_CONNECTING) {           Log.e(TAG,"Bad connection state: " + mConnState);         }       }     }     mClientIf=clientIf;     if (status != GATT_SUCCESS) {       mCallback.onConnectionStateChange(BluetoothGatt.this,GATT_FAILURE,BluetoothProfile.STATE_DISCONNECTED); synchronized (mStateLock) {         mConnState=CONN_STATE_IDLE;       }       return;     }     try {       mService.clientConnect(mClientIf,mDevice.getAddress(),!mAutoConnect,mTransport,mPhy);     }  catch (    RemoteException e) {       Log.e(TAG,"",e);     }   }   /**   * Phy update callback  * @hide  */   @Override public void onPhyUpdate(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyUpdate() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyUpdate(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Phy read callback  * @hide  */   @Override public void onPhyRead(  String address,  int txPhy,  int rxPhy,  int status){     if (DBG)     Log.d(TAG,"onPhyRead() - status=" + status + " address="+ address+ " txPhy="+ txPhy+ " rxPhy="+ rxPhy);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onPhyRead(BluetoothGatt.this,txPhy,rxPhy,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Client connection state changed  * @hide  */   @Override public void onClientConnectionState(  int status,  int clientIf,  boolean connected,  String address){     if (DBG)     Log.d(TAG,"onClientConnectionState() - status=" + status + " clientIf="+ clientIf+ " device="+ address);     if (!address.equals(mDevice.getAddress())) {       return;     }     int profileState=connected ? BluetoothProfile.STATE_CONNECTED : BluetoothProfile.STATE_DISCONNECTED;     try {       mCallback.onConnectionStateChange(BluetoothGatt.this,status,profileState);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     } synchronized (mStateLock) {       if (connected) {         mConnState=CONN_STATE_CONNECTED;       }  else {         mConnState=CONN_STATE_IDLE;       }     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }   }   /**   * Remote search has been completed. The internal object structure should now reflect the state of the remote device database. Let the application know that we are done at this point.  * @hide  */   @Override public void onSearchComplete(  String address,  List<BluetoothGattService> services,  int status){     if (DBG)     Log.d(TAG,"onSearchComplete() = Device=" + address + " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     for (    BluetoothGattService s : services) {       s.setDevice(mDevice);     }     mServices.addAll(services);     for (    BluetoothGattService fixedService : mServices) {       ArrayList<BluetoothGattService> includedServices=new ArrayList(fixedService.getIncludedServices());       fixedService.getIncludedServices().clear();       for (      BluetoothGattService brokenRef : includedServices) {         BluetoothGattService includedService=getService(mDevice,brokenRef.getUuid(),brokenRef.getInstanceId(),brokenRef.getType());         if (includedService != null) {           fixedService.addIncludedService(includedService);         }  else {           Log.e(TAG,"Broken GATT database: can't find included service.");         }       }     }     try {       mCallback.onServicesDiscovered(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been read. Updates the internal value.  * @hide  */   @Override public void onCharacteristicRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onCharacteristicRead() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readCharacteristic(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null) {       Log.w(TAG,"onCharacteristicRead() failed to find characteristic!");       return;     }     if (status == 0)     characteristic.setValue(value);     try {       mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Characteristic has been written to the remote device. Let the app know how we did...  * @hide  */   @Override public void onCharacteristicWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onCharacteristicWrite() - Device=" + address + " handle="+ handle+ " Status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeCharacteristic(mClientIf,address,handle,characteristic.getWriteType(),authReq,characteristic.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onCharacteristicWrite(BluetoothGatt.this,characteristic,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote characteristic has been updated. Updates the internal value.  * @hide  */   @Override public void onNotify(  String address,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onNotify() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     }     BluetoothGattCharacteristic characteristic=getCharacteristicById(mDevice,handle);     if (characteristic == null)     return;     characteristic.setValue(value);     try {       mCallback.onCharacteristicChanged(BluetoothGatt.this,characteristic);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor has been read.  * @hide  */   @Override public void onDescriptorRead(  String address,  int status,  int handle,  byte[] value){     if (VDBG)     Log.d(TAG,"onDescriptorRead() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if (status == 0)     descriptor.setValue(value);     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.readDescriptor(mClientIf,address,handle,authReq);         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorRead(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Descriptor write operation complete.  * @hide  */   @Override public void onDescriptorWrite(  String address,  int status,  int handle){     if (VDBG)     Log.d(TAG,"onDescriptorWrite() - Device=" + address + " handle="+ handle);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     BluetoothGattDescriptor descriptor=getDescriptorById(mDevice,handle);     if (descriptor == null)     return;     if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && (mAuthRetryState != AUTH_RETRY_STATE_MITM)) {       try {         final int authReq=(mAuthRetryState == AUTH_RETRY_STATE_IDLE) ? AUTHENTICATION_NO_MITM : AUTHENTICATION_MITM;         mService.writeDescriptor(mClientIf,address,handle,authReq,descriptor.getValue());         mAuthRetryState++;         return;       }  catch (      RemoteException e) {         Log.e(TAG,"",e);       }     }     mAuthRetryState=AUTH_RETRY_STATE_IDLE;     try {       mCallback.onDescriptorWrite(BluetoothGatt.this,descriptor,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Prepared write transaction completed (or aborted)  * @hide  */   @Override public void onExecuteWrite(  String address,  int status){     if (VDBG)     Log.d(TAG,"onExecuteWrite() - Device=" + address + " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     } synchronized (mDeviceBusy) {       mDeviceBusy=false;     }     try {       mCallback.onReliableWriteCompleted(BluetoothGatt.this,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Remote device RSSI has been read  * @hide  */   @Override public void onReadRemoteRssi(  String address,  int rssi,  int status){     if (VDBG)     Log.d(TAG,"onReadRemoteRssi() - Device=" + address + " rssi="+ rssi+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onReadRemoteRssi(BluetoothGatt.this,rssi,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the MTU for a given connection changes  * @hide  */   @Override public void onConfigureMTU(  String address,  int mtu,  int status){     if (DBG)     Log.d(TAG,"onConfigureMTU() - Device=" + address + " mtu="+ mtu+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onMtuChanged(BluetoothGatt.this,mtu,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   }   /**   * Callback invoked when the given connection is updated  * @hide  */   @Override public void onConnectionUpdated(  String address,  int interval,  int latency,  int timeout,  int status){     if (DBG)     Log.d(TAG,"onConnectionUpdated() - Device=" + address + " interval="+ interval+ " latency="+ latency+ " timeout="+ timeout+ " status="+ status);     if (!address.equals(mDevice.getAddress())) {       return;     }     try {       mCallback.onConnectionUpdated(BluetoothGatt.this,interval,latency,timeout,status);     }  catch (    Exception ex) {       Log.w(TAG,"Unhandled exception in callback",ex);     }   } } ; 
public Builder setAllowPoolingConnection(boolean allowPoolingConnection){   configBuilder.setAllowPoolingConnection(allowPoolingConnection);   return this; } 
mapper.getTypeFactory().constructType(UpdateContainerCmdImpl.class)
new RuntimeException()
AndroidApkBuilder.execute(context.getProject(),resPackagePath,item.getClassesDexPath(),item.getSourceRoots(),externalLibPaths,item.getNativeLibsFolders(),finalPath,unsigned,item.mySdkPath)
callVideoButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_ROLLOVER))
new DrawHandler(getLooper(mDrawingThreadType),this,mDanmakuVisible)
new ByteSizeValue(133,ByteSizeUnit.BYTES)
settings.username != null && !settings.username.isEmpty()
KNOWN_TO_FAIL_STRICT.add("comments/generic_methods.unit:46  var")
UIUtil.createImage(myEditorComponent,rect.width,rect.height,BufferedImage.TYPE_INT_RGB)
case 13: 
resourceUrl.toString()
new IllegalStateException("Encountered null records for input index " + i)
assertQEx("unknown sort field",req("id_i:1000; abcde12345 asc"),400)
registered.remove(objectName)
mockBigtableSource.getRanges()
part1.equalsIgnoreCase("error") || part1.equalsIgnoreCase("Caused by")
return lastPath; 
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper,false)
camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)
Assert.assertSame(_ehcachePortalCache.ehcache,_ehcache)
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(hardLinkFile)
in.readFully(serCondition)
hotDrinkDelay=300
config.getEndTime()
10 * 1024L * 1024L
b.setMessage(getString(R.string.local_osm_changes_upload_all_confirm),1)
expression.getElse()
mSelectPhotoView.getSelectFiles() != null && mSelectPhotoView.getSelectFiles().size() > 0
i=1
view.setOpaque(false)
entity.isImmutable() || !Mirrors.isInstance(types,typeElement,PACKAGE_ANDROID_OS + ".Parcelable") || Mirrors.overridesMethod(types,typeElement,"writeToParcel")
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,help,HELP)
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src,dst,renameOptions)
new JarFile(mArchiveSourcePath,true,true)
super.getHibernateTemplate().execute(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     for (Iterator i=expressions.iterator(); i.hasNext(); ) {       GrailsMethodExpression current=(GrailsMethodExpression)i.next();       crit.add(current.getCriterion());     }     List results=crit.list();     if (results.size() > 0) {       return results.get(0);     }  else {       return null;     }   } } )
expectQueryToFail("UserWith:Colon",ldapUserPassword,MALFORMED_CREDENTIALS_ERROR)
Integer.getInteger("org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor",10)
executableFlow.getStatus()
PRIVATE_FLAG_SUSTAINED_PERFORMANCE_MODE=0x00040000
encoding != null && !DEFAULT_ENCODING_NAMES.contains(encoding.name())
assertThat(targetConnectionCount).isLessThanOrEqualTo(goodServerStats.getTotalRequestsCount())
deleteAction.delete(markerFile)
_buildTemplateWithGradle("portlet-configuration-icon","icon-dependency-management","--dependency-management-enabled")
SyncAccountService.addSyncAccount(filePathName,10,"test@liferay.com","test","http://localhost:8080/api/jsonws")
CommonUtils.sleepMs(200)
items[22]
telecomManager != null && !mHandleVolumeKeysInWM
indexY <= pointsIndex
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
Math.min(tb.getZoom() + tb.getZoomFloatPart() + zdelta,settings.AUTO_ZOOM_MAP.get().maxZoom)
opti >= args.length
XPathUtil.makeDocument(new ByteArrayInputStream(responseData),isValidating(),isWhitespace(),isNamespace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),true)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicLocalTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3)
Simple.forClass(Tuple.class)
OutputScrapingExecutionFailure.hasFailure(output)
(color & 0x00FFFFFF) | (alpha << 24)
this.bus == null
canvas.drawText(shortText,Rect2i.createFromMinAndSize(iconWidth,0,canvas.getRegion().width() - iconWidth,canvas.getRegion().height()))
psiElement instanceof GoFunctionOrMethodDeclaration
mLayoutAnimationEnabled && mLayoutAnimator.shouldAnimateLayout(viewToRemove) && arrayContains(tagsToDelete,viewToRemove.getId())
UpgradeStepRegistrator.class
super.computeDefaultContexts()
offset(200.0)
CacheEntryProcessor<Integer,Long,Object>
pipe != null && GateKind.values()[coreState.gateKind] != GateKind.None
StaticApplicationContextServiceFetcher.this
coreId < nCores
assertEquals(3,loader.getPlugins().size())
myFixture.assertPreferredCompletionItems(0,"AXX.one","AXX.two","main","const","false","new","null","true","AbstractClassInstantiationError","AbstractClassInstantiationError","ArgumentError","ArgumentError","ArgumentError.notNull","ArgumentError.value","AssertionError","AssertionError","AXB","AXB.four","AXB.three","AXX","BidirectionalIterator")
new OptionValue<>(1000)
Thread.sleep(7000)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true)
new String[5]
Exception ignored
stoppedCaches.values()
logger.debug("{} {}",errorCode,message)
methodExists("of",typeNode,false)
dh != mBackgroundHeight
executor.execute(new NamedRunnable("OkHttp %s stream %d",hostName,streamId){   @Override public void execute(){     try {       handler.receive(newStream);     }  catch (    IOException e) {       throw new RuntimeException(e);     }   } } )
bucket=1
availableEIPList.iterator()
LOG.isDebugEnabled() && !(psiBlock instanceof PsiCodeFragment) && instruction instanceof ControlTransferInstruction&& after.length == 0
StringBuilder stringBuilder=new StringBuilder(); 
patientExitObs != null && patientExitObs.size() > 0
getStickyFooterPosition(identifier)
!paths.isEmpty()
i < 5
mLteSignalStrength > 31
behindFraction * GRADIENT_SCRIM_ALPHA_BUSY
showViewUpdateCollection(request,model,pathVars,id,collectionField,collectionItemId,null,"viewCollectionItem")
accountHandle.getComponentName().flattenToString()
new InfoData(null,InfoData.NOT_AWAY,MY_CAPS,null)
format.getName()
@GUIMenuSortOrder(5)
Loader.loadClass(Log.class,__logClass)
part.publicSize()
mSlideableView != null && mSlideableView != child
/**   * SSH port.  */ private Integer port=2000; 
res.startsWith("android") || res.startsWith("Vtok") || res.startsWith("Talk.v")
mFiles.indexOf(file)
assertInCompletionList("<caret>UIView","animationDidStart","animationDidStop:finished:")
ArrayUtil.contains(functionName,PyNames.AITER,PyNames.ANEXT,PyNames.AENTER,PyNames.AEXIT,PyNames.CALL)
vals.length < _sparseLen
StringUtils.isEmpty(initExpr) ? 0L : MVELSafeHelper.getEvaluator().eval(initExpr,Long.class)
this.input.slice(sliceDescription,offset,length)
filtersId != null && !filtersId.isEmpty()
connectionStreams.getInputStream().read(buffer,0,fileLength)
sslService.getHttpTransportSSLConfiguration()
DeprecationLogger.nagUserWith("<someIdeTask>.beforeConfigured is deprecated! Replaced by beforeMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
FSImageFormatPBINode.class
c <= '9'
removeQuotes(timestring.trim())
target.directory("zk" + id + "data",true)
parametersList.getParamsGroup(GROUP_SCRIPT)
new Backgrounding(true)
diff <= 1000
mService.setAppPolicy(UID_A,POLICY_NONE)
v.layout(viewLeft,viewTop,viewLeft + viewWidth,viewTop + viewHeight)
assertFalse(killRes)
addResult.getNumRowsInSegment() >= tuningConfig.getMaxRowsPerSegment()
typeName.equalsIgnoreCase("Integer") || typeName.equalsIgnoreCase("int")
System.setProperty(COPROCESSOR_LOCAL_JAR,path)
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey",productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.BLOCK)
managedType.getRawClass()
replaces="directDispatch"
authManager.setupCredentials(client,url,credentialsProvider,LOCALHOST)
new IndexWriter(directory,analyzer,create,IndexWriter.MaxFieldLength.LIMITED)
"Requeuing shutdown because rootScanned: " + rootRescanned + ", numberOfMetaRegions: "+ numberOfMetaRegions.get()+ ", onlineMetaRegions.size(): "+ onlineMetaRegions.size()
RECORD_LENGTH=0
conf.getKernelSize()
content().duplicate()
getPropertyImpl(RESOLVE_FANIN_FALLBACK_TRIANGLE,CONFIGURATION_NO)
containsString("Eclipse")
getLayoutRec(position,getFixedPosition(data),length,getFixedFitLength(data))
assertNotNull(auth.getAttributes().get(SamlAuthenticationMetaDataPopulator.ATTRIBUTE_AUTHENTICATION_METHOD))
Validate.notNull(soloInstances)
idleConnectionTimeout + nettyResponseFuture.getLastTouch()
new StoreFileMetaData(file.getName(),file.length(),checksums.get(file.getName()))
CodeStyleSettings.class.getField(name)
new FormAttachment(wSeq,-margin)
final Throwable t
this.httpHandler.handle(req,resp).onErrorResume(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
DEBUG_ALL_ACTIVITIES || true
mDuration >= 0 && mTransitions != null
!status.isDir()
localSettings.getMaxConcurrentStreams() <= activeRemoteStreamCount.incrementAndGet()
Assert.assertEquals(ReportUtils.calculateFuel(startPosition,endPosition),0.0,0.01)
readBuffer.remaining() == 0
executor.execute(new EmailTask(messages))
timeoutMs < 1000
localCache.put(name,cacheEntry)
card.init()
pgl.loadVertexShader(vertFilename)
prots == Protections.SIGN_ENCRYPT
Integer.parseInt(st.nextToken())
@Override public Variable emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new AMD64ByteSwapOp(result,input));   return result; } 
JoglNewtDisplay.class
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,dummy,MembershipEvent.MEMBER_ADDED);     for (    MembershipListener listener : listenerSet) {       listener.memberAdded(membershipEvent);     }   } } )
buildInitPendingIntent(vol)
/**   * Returns the next pseudorandom  {@link ArrayValue} of local-time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of local-time elements.  */ public LocalTimeArray nextLocalTimeArray(){   LocalTime[] array=nextLocalTimeArrayRaw(minArray(),maxArray());   return Values.localTimeArray(array); } 
writeBufferBlocking(false)
size <= 1
compareSignatures(bp.packageSetting.signatures.mSignatures,pkg.mSignatures) == PackageManager.SIGNATURE_MATCH
sourceNodeTextData != null
createDouble(buffer.length(),init,workspace)
RowKey.prefixKeyWithSalt(key_a)
resolveExecutableType(child,castSourceType)
(inGC - timeInGC) * 100.0
new SimpleSourceInclusionScanner(testIncludes,testExcludes)
trace.error(e,"removing server because of exception")
/**   * Current size of all enqueued blocks in bytes.   */ private final LongAdder8 curSize=new LongAdder8(); 
searchBack.postDelayed(new Runnable(){   @Override public void run(){     searchBack.setImageDrawable(ContextCompat.getDrawable(SearchActivity.this,R.drawable.ic_arrow_back_padded));   } } ,600L)
inputItem.getItemDetails()
@Message(id=14151,value="Could not find view %s for EJB %s") IllegalStateException viewNotFound(String viewClass,String ejbName); 
new GroupTest(false)
new Builder().setDuration(5000).setColor(android.R.color.holo_red_light)
observable.timeout(5,SECONDS).toList().toBlocking()
factory.getProxy(getClass().getClassLoader())
bottomost != null && bottomost.getLanguage().getFormattingModelBuilder() != null
teleport(new Target(loc),name)
propertyDescriptor.setType(inType,type,Collections.<TypeParameterDescriptor>emptyList(),DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor),ReceiverDescriptor.NO_RECEIVER)
log.warn(e,"Graceful shutdown of task[%s] aborted with exception.",task.getId())
new InstantPeriodicWorkerTask(errorRunnable,exec,composite)
volatileSet((int)i & mask,item)
TextAttributes.merge(ConsoleHighlighter.OUT.getDefaultAttributes(),textAttributes)
min.getX() <= box.max.getX()
optiqConnection.setSchema(name)
requestCode == RC_EMAIL_FLOW && resultCode == ResultCodes.OK
new INodeDirectory(s,true)
new TestCaseGeneratorImpl(true,true)
private final DateTime createdDate; 
context.getRangeLocation(node,0,node.astName(),0)
sUseRenderThread=false
compare(leftValue,rightValue) >= 0
Log_OC.e(TAG,"onAccountChanged was called with NULL account associated!")
compare(other,method) >= 0
Double.parseDouble(param.getValue())
targetPoint.y - shift
ComponentOption that=(ComponentOption)o; 
colon != null && colon.getStartOffset() + 1 < node.getStartOffset() + node.getTextLength()
mSettingsButton != null && !mHasSettingsPanel
RANGES.contains(builder.getTokenType()) || getCompositeSign(builder)
final XmlElementDescriptor xmlElementDescriptor=createElementDescriptor(tag); 
new JoddExtractor()
query.getLong(7)
FileUtils.setPermissions(mPackageListFilename,0640,SYSTEM_UID,PACKAGE_INFO_GID)
factory.getOrCreateProxyByName(packet.name)
Localization.menuTitle("Check integrity")
log.error("Error opening session file " + file.getAbsolutePath(),e)
Build.VERSION.SDK_INT < 24
assertEquals(13,tokens.size())
VibrationEffect.get(VibrationEffect.EFFECT_TICK,false)
BUKKIT_VERSION=2420
assertEquals(1,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
annotationHelper.printAnnotationError(element,"%s annotated element should have only one constructor")
Assert.assertEquals(threshErr2,error,1e-2)
mQSPanel != null && mQSPanel.getHost() != null
Futures.transform(inputsUploadedFuture,ignored -> {   uploadingInputsScope.close();   return actionInfo.withRequiredData(ImmutableMap.of()); } ,MoreExecutors.directExecutor())
Collections.singletonList(pi)
new RastriginFunctionModel(10,conf)
client != null && client.autofillClientIsFillUiShowing()
public LetterTokenizer create(Reader input){   return new LetterTokenizer(input); } 
config.notifyOnOwnName()
StringBuilder xml=new StringBuilder(request.getContentLength()); 
new ModelMetricsMultinomial.MetricBuilderMultinomial(domain.length,domain)
new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,true)
!key.equals(PropertyKey.ZOOKEEPER_ENABLED)
markerArray.get(0)
newExecutionInput().query(parameters.getQuery())
entry.getValue().getManagementInterfaceMicroVersion()
new URLClassLoader(classpath.toArray(new URL[classpath.size()]),null)
workspace.runBuckCommand("test","//:foo","--config","apple.xctool_path=does/not/exist")
Map<String,Integer>
view.getTag(R.id.glide_tag)
request.getSize() > 0 && request.getSoFar() == 0
new ClassPathResource(PROJECT_META_FILE,getClassLoader())
position >= 0 && position < mData.size()
mScanHelper.getCycledScanner() != null
Assert.assertEquals(select.size(),0)
ensureGreen(index)
this.encoder.encode(inputStream,message.bufferFactory(),elementType,contentType,hints).onErrorMap(this::mapError)
"Failed to create OutgoingJingleSession.\n" + calleeAddress + " does not support jingle"
computeGraph(treeToPrint,_effective_n_classes)
new Interval(startTime,endTime,ISOChronology.getInstanceUTC())
doTest("class Test {\n" + "  void <caret>foo(Class<?>... cl) { }\n" + "}","foo-java.lang.Class...-","foo-java.lang.Class<?>...-","foo(java.lang.Class...)","foo(java.lang.Class<?>...)")
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),false,Variance.IN_VARIANCE,Name.identifier("P" + j),j)
(target.getModifiers() & Modifier.STATIC) == 0
createFromResourceStream(res,value,is,srcName,null)
url.toString()
_addTestVariant("small.hd","uuid1",99,100)
pkgs.get(j)
data.contains("siamese") || data.contains("white")
mService.enableNetwork(netId,attemptConnect,mContext.getOpPackageName())
(shape != LINES) && (shape != LINE_STRIP) && (shape != TRIANGLES)
!supportsNewLinesInSQL()
war.setWebXML(SimpleWebTestCase.class.getPackage(),"web.xml")
null == reference
tea.save(true)
CACHE_MANAGER.addCacheIfAbsent(storageCache)
localMaster == null || localMaster.getAppMaster().getAppContext().getMasterService() == null
response.getResponseBody().equals("")
handleException(error)
LOGGER.lifecycle(msg.apply())
!cmdKey.equals("-help") && !cmdKey.equals("-failover") && !cmdKey.equals("-transitionToObserver")
_writeNestedList(nestedListFieldFunction,list,itemJsonObjectBuilder,null)
calendar.getTimeZone().getRawOffset()
auxString2.substring(0,auxString2.lastIndexOf(","))
fmd.getFieldType().equals(SupportedFieldType.EXPLICIT_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.BROADLEAF_ENUMERATION) || fmd.getFieldType().equals(SupportedFieldType.EMPTY_ENUMERATION)
targetWidth == 0
GLMTest.residualDevianceTest(model) - 1e-2
args.length != 2
frameHandler.getClass() != FrameAggregator.class
ts >= timeout
61L + 122L
-998173294
Exception e
parameter.getName()
FileTemplateUtil.mergeTemplate(attributes,airDescriptorContentTemplate,true)
learningRate=0.005
("".equals(nodeJID) && "".equals(resourceJID)) || ((RoutableChannelHandler)nameRoutes).getAddress().equals(node)
mConnector.execute("resolver","clearifaceforuidrange",iface,uid_start,uid_end)
Validator.isNull(indexType) || indexType.equals("none")
ArrayUtils.equals(MiBand2Service.RESPONSE_ACTIVITY_DATA_START_DATE_SUCCESS,value,0,3)
SharingEntryActionKey::getBitwiseValue
name != null && name.getElementType() == JSTokenTypes.IDENTIFIER
new ImmutableInstruction3rc(deodexedOpcode,instruction.getStartRegister(),instruction.getRegisterCount(),resolvedMethod)
assertEquals(counter.get(),0)
editor.offsetToVisualPosition(mySelectionStarts[i],true)
Variable emitBitCount(Value operand); 
logger.error(message,ex)
new ModelNode().set(1L)
assertPlanEquals(expectedPlan,actualPlan)
TEST_TIMEOUT_MS=400
TRACE_ROUTING=false
objectMapper.reader(DataSegment.class)
JsonUtf8Writer.string(buffer,strings[i])
closeForbidden(ok) || getChosenElements().isEmpty()
Math.round((DERIVE_AGGR_CACHE_CONSTANT_FACTOR + DERIVE_AGGR_CACHE_VARIABLE_FACTOR * nRows / baseResult.nRows) * baseResult.aggrCacheMB)
DiagnosticFactory0.create(ERROR)
_parms._distribution == Distribution.Family.bernoulli || _parms._distribution == Distribution.Family.modified_huber
ThingFactoryHelper.class
subtypeProps == null || subtypeProps.isEmpty()
me.urls.size() == 1
_addTestVariant("small.hd","uuid1",100,99)
c.getLiquid() == null || c.getLiquid().amount == 0
dlFileEntryFinder.filterCountByG_U_F_M(groupId,0,folderIds,mimeTypes,new QueryDefinition(WorkflowConstants.STATUS_ANY))
GroupFinderUtil.findByC_C_PG_N_D(TestPropsValues.getCompanyId(),classNameIds,GroupConstants.ANY_PARENT_GROUP_ID,new String[]{null},new String[]{null},new String[]{null},groupParams,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
qualifier != null && !methodToFind.hasModifierProperty(PsiModifier.STATIC)
System.currentTimeMillis() - lastTimeLocationFixed
ws.newRequest()
request.getDecodedRequestURI()
KotlinToJVMBytecodeCompiler.INSTANCE.analyzeAndGenerate(environment)
LOG.warn("Promotion of block " + blockId + " failed.")
mBarChart.addTiming(section,2,serializeResult.runDuration / 1000f)
MultiWindowedElement.class
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Headers[%s]",hostName,streamId){   @Override public void execute(){     boolean cancel=pushObserver.onHeaders(streamId,requestHeaders,inFinished);     try {       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )
PRAYER_ENHANCE("prayerenhance","Prayer enhance",275,ChronoUnit.SECONDS)
new TestResultPrinter(new PrintStream(output)){   public void printErrors(  TestResult result){     getWriter().println("Errors here");   } } 
VERSION=5
mWasActivatedOnDown || !mNeedsDimming || isTouchExplorationEnabled()
!rootPortletId.equals(PortletKeys.WIKI_DISPLAY)
mapper.getTypeFactory().constructType(InspectContainerResponse.class)
commentText.substring(commentText.length() - 2)
FileDownloadUtils.formatString("range[%d-%d)",currentOffset,endOffset)
evaluate("value = read_config('foo', 'bar', 'baz')").moduleLookup("value")
colors[1]
Lifecycle.BEFORE_DESTROY_EVENT.equals(type)
Log.e(tag,msg,tr)
UpgradeStepRegistrator.class
ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,AppleBinaryDescription.class,AppleBundleDescription.class,AppleTestDescription.class,HalideLibraryDescription.class,SwiftLibraryDescription.class)
Arrays.asList(HTTPConstants.GET,HTTPConstants.HEAD,HTTPConstants.OPTIONS,HTTPConstants.TRACE)
!beanPrefix.isEmpty() || !beanSuffix.isEmpty() || beanPackageName != null
consumeToken(b,IDENTIFIER)
waitForOptimization(function,640000)
testClass.getSimpleName()
getTestIgniteInstanceName(nodeCount() + servers + i)
/**   * @return When this column is a {@link ForeignKey} and a Model, returning true with save the modelbefore adding the fields to save as a foreign key. If false, we expect the field to not change and must save the model manually outside of the ModelAdapter. This also applies to ModelContainer objects as foreign key fields.  */ boolean saveForeignKeyModel() default false; 
NIO_GROUP.shutdownGracefully(0,10,TimeUnit.SECONDS)
parser.hasNext(5)
servletClass != null || filterClass != null
initSize / 100d
@NotNull DfaMemoryState createClosureState(); 
assertThat(xml).isEqualToIgnoringWhitespace(expectedContent)
allocator.getFlowController().prepareActionAllWrite(input,epsilon,activations,nextEpsilon)
new UncheckedIOException(e)
Integer.parseInt(sid[0],16)
new RelationIndexStatusReport(false,relationIndexName,relationTypeName,actualStatus,status,t.elapsed())
FileUtils.deleteQuietly(root)
new Node.JspAttribute(tai,qName,uri,localName,value,true,el,dynamic)
Optional.ofNullable(certificatesFile)
ltype == Analyzer.self.builtins.BaseStr && rtype == Analyzer.self.builtins.BaseStr
innerCache.put(key,value)
(ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)
timeout=120_000L
c.getLiquid() == null || c.getLiquid().amount < c.getCapacity()
endpoint.getHostAddress()
public SubType where(Expr.EBoolean... o){   query.where(o);   return self; } 
assertEquals(5,outs.size())
pgl.initTexture(glTarget,PGL.GL_RGBA,width,height)
DEBUG_OBB=false
new SafariWebDriverImpl(projectDirName,portalURL)
type == null || type == Object.class
new StringBuffer(input.length())
numDocs <= docsToGather
if (DBG) {   Log.d(LOG_TAG,"unregisterPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
? super IN
ACC_BRIDGE | ACC_SYNTHETIC | ACC_STATIC
cctx != null && cctx != 0
Map<Byte,UdpMessageTypeEnum>
toByteBuffer(index,length)
PsiReplacementUtil.replaceExpression(expression,newMethodCallExpression.toString())
SemVer.parseFromText(version)
_portal.getSiteDefaultLocale(groupId)
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_SAVE_AS,true)
recommendArrayListByUser.size() > 1
startMediaTimeState=START_NOT_SET
cssClassName.equals("net.java.sip.communicator.plugin.addrbook" + ".msoutlook.MsOutlookAddrBookContactSourceService")
flipZ=1
type == BSON.B_GENERAL || type == BSON.B_BINARY
buf.halfOpenElement("url")
mergeWithParentCategory && !oldCategoryId.equals(parentCategoryId) && !parentCategoryId.equals(MBCategory.DEFAULT_PARENT_CATEGORY_ID)
LOG.info("Node " + path + " already exists and this is not a "+ "retry")
public AbstractExecHandleBuilder setIgnoreExitValue(boolean ignoreExitValue){   this.ignoreExitValue=ignoreExitValue;   return this; } 
runtime.lookupType(returnType,(HotSpotResolvedObjectType)accessingClass,false)
instanceOfA.profile() != null && instanceOfA.profile().getNullSeen() != TriState.FALSE
context.containsMetaEntity(fqcn)
setServiceForegroundInnerLocked(r,id,notification,flags)
that.getPath() == null && getPath() != null
addon.updateBuildingInfo()
out.println(e.getMessage())
lang.length() > 3
ctx.nextInboundMessageBuffer()
createMessageConsumer(session,destinationName,null,false,null)
DeletionRetentionStrategyConfig.class
node.isUsingGenerics() && node instanceof InnerClassNode && ((InnerClassNode)node).isAnonymous()&& (node.getGenericsTypes() == null || node.getGenericsTypes().length == 0)&& lType.isUsingGenerics()
ROOT_LOGGER.errorContextModuleNotFound(consoleSlot == null ? "main" : consoleSlot)
LOG.isDebugEnabled()
lastModified >= (headerValue + 1000)
c == null || c == interfaceClass
new ConditionVariable(true)
new DaemonProgressIndicator()
subscriptionSender.setContextAttribute("[$CONTENT_TITLE$]",contentTitle,false)
NewIndexDescriptor descriptor
connection.local().createStream(toStreamId(i),false)
LAST_VERSION=937
configurationPair.getKey()
new TextField<String>(TopicConfiguration.TOPIC_NAME_KEY,String.class)
world.add("capsule",5f,3f,5f)
/**   * Allows subclass to override Conection if required.  */ protected Connection newConnection(EndPoint endpoint){   return new HttpConnection(this,endpoint,getServer()); } 
LOG.debug("Building gRPC server on <any address>" + ":" + configuration.getPort())
new IndexWriter(dir,new MyAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
copy.getGenericsTypes()
(ClusterManager)manager
dimensionsIterator.remove()
c.setLong("hbase.hregion.memstore.flush.size",25000)
promise.trySuccess()
classPropertyFetcher.getPropertyType(property,true)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionTanh.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,43.457087913127,DeepLearningParameters.Activation.Tanh)
new GridQueryCacheObjectsIterator(new Iter(res),cctx,cctx.keepPortable())
impl.getClass().getDeclaredMethod("join",InetAddress.class)
new Influencer(JOB_ID,"n","v",new Date(DEFAULT_START_TIME),600)
noteReleaseWifiLock(wifiLock)
Thread.sleep(2500)
OperationSetPersistentPresenceGibberishImpl persistentPresence=new OperationSetPersistentPresenceGibberishImpl(this); 
executor.scheduleAtFixedRate(this,period,period,unit)
bufferedKeys.size() >= getBatchSize()
m1.getName().equals("getAttributes") && !m1.getName().equals(m2.getName())
PatchedRouteInfo ipv4Default=new PatchedRouteInfo(Prefix("0.0.0.0/0"),null,"rmnet0"); 
new UnsupportedOperationException("can't remove from a ReflectionDBObject")
dep.getName()
Config.defaults()
typesArray.length != row.productArity()
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE,10)
RuntimeException e
value == null || value.equals(getString(R.string.protocol_odk_default))
equalsToSchemaName(tag,"include") || (equalsToSchemaName(tag,"import") && rootTag.getNamespaceByPrefix(XmlUtil.findPrefixByQualifiedName(name)).equals(tag.getAttributeValue("namespace")))
cubeSeg.getConfig().getQueryCoprocessorTimeoutSeconds() * 1000L
resetTimeInSeconds * 1000L
PrivacyManager.getSettingBool(null,ActivityMain.this,0,PrivacyManager.cSettingFSystem,false,false)
System.currentTimeMillis() - (sessionInactiveInterval + 60) * 1000
client.get().uri("/").exchange().expectStatus().isOk().expectBody(String.class)
ev.getAction() == MotionEvent.ACTION_DOWN && getLayoutManager() != null
appendedResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(fragUrl))
Utils.writeUtf8File(outputDirectory,getFileName(cls),xsb.toXML())
IllegalStateException expected
sb.append(portletName)
newName.equalsIgnoreCase(file.getName()) || !delegate.exists(file)
friendlyAttributes.get(friendlyName)
order.getDosingInstructions()
e.getKey() > 10
DEPENDENCY_FORMAT_VERSION=47
create().select(param("p",String.class).as("p")).getSQL(false)
createTestBlockCapsule(1533529947843L + 12000,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderNumber() + 1,blockCapsule3.getBlockId().getByteString(),addressToProvateKeys)
dimension - 9
modifyList(ns,arg)
dateMask[i]
swapTempFile.delete()
myPluginDescriptor != null && myPluginDescriptor.getPluginClassLoader() != null
Thread.sleep(1500)
assertEquals(26,sqlStatements.get(1).getLineNumber())
securityMode != SecurityMode.None || !mLockPatternUtils.isLockScreenDisabled(KeyguardUpdateMonitor.getCurrentUser())
this(164); 
new CacheCreateConfigOperation(cacheConfig,createAlsoOnOthers,false)
(sbn.getNotification().flags & Notification.FLAG_AUTOGROUP_SUMMARY) == 0
mChildrenExpanded ? mNotificatonTopPadding + mDividerHeight : 0
nrRecordsReference++
StringEntity entity=new StringEntity(new ObjectMapper().writeValueAsString(object),"utf-8"); 
logger.fine("Moving functions + variable into deeper modules")
token.equals(":") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
transformedLine == null || transformedLine.isEmpty()
newParameters.add(0,o)
field.getType()
ClassLoaderUtil.accept(cl,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } )
!value.isValid()
new DebugFlag("debug.optimize_startinput",false)
MAX_ITEMS=500
this.categoryWithApiModel=category
logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : "+ directory.getUrl(),e)
execution.getJobs().remove(jobEntity)
post.getUrl()
dateTimeFormatter.format(value)
requestLayout()
ch.pipeline().addLast(handlers)
TreeClassChooserFactory.getInstance(project).createAllProjectScopeChooser(title)
mUnreachedBarPaint.setColor(mUnreachedBarColor)
AudioManagerImpl.class
ImmutableList<SourceFile>
new RemoveFileOperation(PATH_TO_DELETE,false,account,false,MainApp.getAppContext())
conv.convert(bc,cc,true)
new IOException("ExifInterface only supports saving attributes on JPEG formats.")
Preconditions.checkNotNull(blockIds,"blockIds")
twitter1.checkUserListSubscription(id1.screenName,userList.getId(),id2.id)
setImageDrawable(icon,false)
((ResolvedJavaType)obj).toJavaName()
clientArchiver.createArchive(project,archive)
Preconditions.checkNotNull(secondOperand)
assertEquals(7,ti.nrOfInvocations)
new SynthesizedAnnotationInvocationHandler(annotation,annotatedElement,getAttributeAliasMap(annotationType))
fullName != null && fullName.length() > selectedFullName.length()
Variable emitBitScanReverse(Value operand); 
private final PropertyKey mHostNameKey; 
location.equals(BlockStoreLocation.anyDirInTier(tierAlias))
@Override public ExtendedCell deepClone(){   return new KeyValue(this); } 
new MapProducerCapabilities(false,false,false,true,null)
jmsTemplate.setPubSubDomain(true)
c.networkId == netId && c.SSID.equals(config.SSID)
IllegalStateException.class
inflater.inflate(R.layout.mdtp_date_picker_dialog,container,false)
(Source)value
icon.setVisibilityImmediate(visible ? VISIBLE : GONE)
mContext.sendStickyBroadcastAsUser(intent,UserHandle.ALL)
!resources.isEmpty()
Throwable err
/**   * Add a  {@link AtmosphereResource} to the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if added, or null if it was already there.  */ Broadcaster addAtmosphereResource(AtmosphereResource resource); 
/**   * clockwise   */ CW(0)
returnPoshiElement.createReadableBlock(readableBlock)
"declaringClass".equals(propName) || "format".equals(propName)
GL20.glUniform2fv(location,v)
new SpringApplicationBuilder(SampleSecureApplication.class).properties("security.user.password=password")
String painelStatus=parser.next(); 
logger.warn("Table spec retrieval failed!")
dest.writeInt(mTxPower)
next.handle(request).then(responseProcessor)
logger.fine("Parsing Dep: " + filePath)
i <= DatabaseDescriptor.getIndexInterval()
new ClientAttributeUpdater(clients.get(salesRep.getId())).setFrontchannelLogout(true).removeAttribute(SamlProtocol.SAML_SINGLE_LOGOUT_SERVICE_URL_POST_ATTRIBUTE)
assertLeftRightCategory(7,category2a)
ColorProperties.getColor("primaryControlShadow")
super.externalNodeSettings(nodeOrdinal)
V_5_0_0_ID=5000099
typeSettingsProperties.containsKey(oldStagingPortletId)
/**   * Support the subscript operator for String  * @param text  * @return the Character object at the given index  */ public static CharSequence get(CharSequence text,int index){   index=normaliseIndex(index,text.length());   return text.subSequence(index,index + 1); } 
String.format("Could not find method %s(%s) on %s",name,Arrays.toString(paramTypes),origTarget)
Sets.newHashSet()
REAL_DRIVER.quit()
SUBOPTIMAL_INDEX_FOR_CONTAINS_QUERY(SeverityLevel.INFORMATION,Status.Statement.SuboptimalIndexForWildcardQuery,"If the performance of this statement using `CONTAINS` doesn't meet your expectations check out the alternative index-providers, see " + "documentation on index configuration.")
binary.size()
ctx.writeAndFlush("Your session is protected by " + ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() + " cipher suite.\n")
promises.add(promise)
Object value
Observable.interval(100,TimeUnit.MILLISECONDS)
sLat == null || "".equals(sLat)
Localization.lang("Find unlinked files")
config.getOrcStreamBufferSize()
public <A>SubType innerJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).innerJoin((Expr<?>)entity);   return self; } 
cacheMapTileCount=9
minPriority == null ? 1 : minPriority
getTimeout(ticketToAdd)
emitScript(scriptStartNdx,total)
socialActivitySetFinder.countByRelationType(userId,type)
(currentGroup.isStatic && !CompositeType.isStaticName(c.name())) || !isSameGroup(current)
@NonNull
mService.removePasspointConfiguration(fqdn)
assertTrue("map size is : " + map.size(),latch.await(5,TimeUnit.MINUTES))
new MimeException(me)
registration.registerOperationHandler(CommonAttributes.ADD_PROXY,ModClusterAddProxy.INSTANCE,addProxy,false,runtimeOnlyFlags)
/**   * The root package controller.   */ private ImportControl root; 
SceneConfigReadingJob.class
MAX_ARITY=25
methodName.startsWith("save") || methodName.startsWith("create") || methodName.startsWith("update")
myAccountPortlet.getPortletId()
new ZLIntegerRangeOption("Scrolling","AnimationSpeed",1,10,7)
JMenu predefined=new JMenu("Predefined Style"); 
-551779908
super(expression," \t",startTime,zone,0,3); 
super.onDestroy()
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,context,_configuration,_templateContextHelper,false)
new Invoke(bci,opcode,kind,new Value[argumentCount],target,returnType,into)
possibleCenters.elementAt(i)
popup.showInBestPositionFor(selectedEditor)
ManifestUtils.getOrCreateManifest(archive)
factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)
Duration.millis(120)
/**   * An extension of  {@link MessageHeaderAccesssor} that also provides read/write access tomessage headers from an external message source. Native message headers are kept in a  {@link MultiValueMap} under the key {@link #NATIVE_HEADERS}.  * @author Rossen Stoyanchev  * @since 4.0  */ public class NativeMessageHeaderAccessor extends MessageHeaderAccessor {   public static final String NATIVE_HEADERS="nativeHeaders";   private final Map<String,List<String>> originalNativeHeaders;   private final MultiValueMap<String,String> nativeHeaders=new LinkedMultiValueMap<String,String>(4);   /**   * A constructor for creating new headers, accepting an optional native header map.  */   public NativeMessageHeaderAccessor(  Map<String,List<String>> nativeHeaders){     super();     this.originalNativeHeaders=nativeHeaders;   }   /**   * A constructor for accessing and modifying existing message headers.  */   public NativeMessageHeaderAccessor(  Message<?> message){     super(message);     this.originalNativeHeaders=initNativeHeaders(message);   }   private static Map<String,List<String>> initNativeHeaders(  Message<?> message){     if (message != null) {       @SuppressWarnings("unchecked") Map<String,List<String>> headers=(Map<String,List<String>>)message.getHeaders().get(NATIVE_HEADERS);       if (headers != null) {         return headers;       }     }     return null;   }   @Override public Map<String,Object> toMap(){     Map<String,Object> result=super.toMap();     result.put(NATIVE_HEADERS,toNativeHeaderMap());     return result;   }   @Override public boolean isModified(){     return (super.isModified() || (!this.nativeHeaders.isEmpty()));   }   /**   * Return a map with native headers including original, wrapped headers (if any) plus additional header updates made through accessor methods.  */   public Map<String,List<String>> toNativeHeaderMap(){     Map<String,List<String>> result=new HashMap<String,List<String>>();     if (this.originalNativeHeaders != null) {       result.putAll(this.originalNativeHeaders);     }     for (    String key : this.nativeHeaders.keySet()) {       List<String> value=this.nativeHeaders.get(key);       if (value == null) {         result.remove(key);       }  else {         result.put(key,value);       }     }     return result;   }   protected List<String> getNativeHeader(  String headerName){     if (this.nativeHeaders.containsKey(headerName)) {       return this.nativeHeaders.get(headerName);     }  else     if (this.originalNativeHeaders != null) {       return this.originalNativeHeaders.get(headerName);     }     return null;   }   protected String getFirstNativeHeader(  String headerName){     List<String> values=getNativeHeader(headerName);     return CollectionUtils.isEmpty(values) ? null : values.get(0);   }   /**   * Set the value for the given header name. If the provided value is  {@code null} theheader will be removed.  */   protected void putNativeHeader(  String name,  List<String> value){     if (!ObjectUtils.nullSafeEquals(value,getHeader(name))) {       this.nativeHeaders.put(name,value);     }   }   protected void setNativeHeader(  String name,  String value){     this.nativeHeaders.set(name,value);   } } 
saveTask instanceof LongTask
FilterModifWord.modifResult(result,forests)
LOG.warn("Failed to add Connection id={}, clientId={} due to {}",info.getConnectionId(),clientId,e.getLocalizedMessage(),e)
ImmutableList<Number>
addKeys(externalClasses,DATE,"org.joda.time.LocalDate","java.time.LocalDate")
Captain captain=(Captain)beans.get(ROWING_BEAN); 
portletDataContextClone.setDataStrategy(portletDataContext.getDataStrategy())
ProductOptionTranslationImpl.class
addDaysAndCheckForCompletion(6,NextEvent.PAYMENT_ERROR)
version > 1
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
logger.warn("{}",builder)
new AndroidBinaryNonExoInstaller(buildTarget,projectFilesystem,installableApk)
new GLBufferPool(true)
Tokens.isIgnoredWhitespace(t) || isUnquotedWhitespace(t) || Tokens.isComment(t)
xmlenc.writeObject(bean)
errorHandler.onError(t)
singletonComponentInstance == null
ImmutableSet<Key<?>>
GithubApiUtil.removeProtocolPrefix(GithubSettings.getInstance().getHost())
new InvalidFragmentCollectionFileException()
(arg & (EventDistributor.DOWNLOAD_QUEUED)) != 0 && feedItemDialog != null
data.contains("red") || data.contains("orange") || data.contains("tabby")
new WelcomeScrollablePanel(new GridBagLayout())
SENDER_POSITION_TYPE_ID=2
finish()
(group == null) || !group.isActive()
fileNode != null && fileNode.dexVersion >= DexConstants.DEX_037
bs.max() <= 32
src.remaining()
FileType.of(".h",".hh",".hpp",".ipp",".hxx",".inc")
new SdkListCellRenderer(getComboBox().getRenderer())
PyCallExpression callExpression=(PyCallExpression)elementGenerator.createFromText(LanguageLevel.forElement(dictExpression),PyExpressionStatement.class,stringBuilder.toString()).getExpression(); 
{6,30,54,78,102}
page.getRetainedSizeInBytes()
string.length() / maxIdxPerLine + 2
new EnterSelectionDialog(shell,fields.getFieldNamesAndTypes(max_field_length),"Fields","Select a field:")
input.getTargetStepDefinitions()
tgt.grantServiceTicket("ST2",service,new NeverExpiresExpirationPolicy(),true,false)
System.currentTimeMillis() - start
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_COMPRESS))
TestShardRouting.newShardRouting(index,0,"_node_id",null,null,true,state,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
dbText.getText()
client.signup(data.fullName,data.email,data.password,data.password,data.sendNewsletters).compose(Transformers.pipeApiErrorsTo(signupError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
LOG.debug(e)
name.equalsIgnoreCase(pkg.getName())
logger.debug("TuneIn service not found")
LOGGER.warn("No file list editor found.")
logger.info("started [{}] instances with [{}] stage=prod tag",nodes,prodInstances)
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(_user.getUserId(),calendarBooking,0,false)
detachViewFromParent(--index)
assertEquals(fc2,fc)
-29
link.bone.getWorldBindRotation()
private final JDialog myWindow; 
/**   * Make sure we don't attempt to recover inline; if the parser successfully recovers, it won't throw an exception.  */ @Override public Token recoverInline(BaseRecognizer recognizer) throws RecognitionException {   throw new RuntimeException(new InputMismatchException(recognizer)); } 
super.getSecurityEngine(true)
Integer.getInteger("org.mortbay.io.nio.MAX_SELECTS",25000)
what instanceof UpdateAppearance || what instanceof ParagraphStyle || (what instanceof SuggestionSpan && (((SuggestionSpan)what).getFlags() & SuggestionSpan.FLAG_AUTO_CORRECTION) != 0)
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,completedTasks,false,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
LOG.assertTrue(url != null,"Url should not be null!")
assertEquals(5,tool.getAllRules().size())
createTestBlockCapsule(1533529947843L + 3000L * 8 + 3000L * i,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
views.html.search.noresults.render(currentUser(),q,searchResult,stream)
SecurityAutoConfiguration.class
Modifier.isStatic(field.getModifiers()) || field.isSynthetic() && !field.getName().equals("this$0")
stack.get(stack.size() - 4).longValueSafe()
repositoryImpl.setClassNameId(getClassNameId())
@Override public AnalyzedTokenReadings createNullToken(String token,int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
MainActivity.class
new TypeResolver(hasRelatedOfString)
setProperty(POLICY,policy,HC4CookieHandler.DEFAULT_POLICY_NAME)
refDefault != null
pagedStoragePageSizeProperty == null
AtmosphereResourceEventListenerAdapter.class
new NeuralNetConfiguration.Builder().lossFunction(LossFunctions.LossFunction.RMSE_XENT).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
id=15
response == null || response.value == null
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   return dht().drPauseState(); } 
myRightPrecalculated.get(lineRight)
new ObjectMapper().readerFor(DiskBalancerWorkItem.class)
drained != null && tank.canFill(side,drained.getFluid())
charsSequence.charAt(offset)
log.info("Wanted to terminate %,d workers, but couldn't find any lazy ones!",excessWorkers)
childQuerySpec.limit()
mContext.sendStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL)
editor.rebuildHeader()
Localization.menuTitle("Search")
public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"4:37: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK" + "/METHOD_DEF[@text='InputMethodParamPad']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={"5:13: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMethodParamPadThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute("option","space");     final String[] expectedViolation={"4:25: " + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,"(")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LPAREN");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
@Override public final DivideByOnConditionStep orExists(Select<?> select){   return or(exists(select)); } 
Exception e
targetState == STATE_EXPANDED && interpolatorAnimator != null
0 | open
Optional.ofNullable(privateKeyFile)
"DROP TABLE IF EXISTS " + TABLE_VISIBILITY
mccMncs != null
String.format(Locale.ROOT,"User [%s] already exists",username)
IDLE_TIMEOUT=1000
new IllegalStateException("Wrong header information type: " + fieldsFromHeader)
mAnswer.setBackground(null)
Localization.menuTitle("BibTeX")
Boolean.parseBoolean(resizeableStr)
!mUseHeadsUp || isDeviceInVrMode()
mTempDate.get(Calendar.DAY_OF_YEAR) == mMaxDate.get(Calendar.DAY_OF_YEAR)
LOG.error("Fail to set owner for {} with user: {}, group: {}",path,user,group)
StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){   public void run(){     myMappings.setDirectoryMappings(mappingsList);   } } )
new Error("unexpeced missing SHA-1 digest",ex)
-location[0]
catchPokemon(1.0,1.95 + Math.random() * 0.05,0.85 + Math.random() * 0.15,pokeball,amount,razberryLimit)
s.equals(".svn") || s.equals(".git") || s.endsWith("_")
routeName + "-" + cheWorkspacesRoutingSuffix
expand("serializedforms/CalendarIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
declaredTypes.remove(internalName)
synchronized (references) {   if (transformed == null) {     transformed=initializer.initializeBroadcastVariable(data);     data=null;   }   return transformed; } 
data.metadataRowMeta.getString(outputData)
mDisplay.getRealMetrics(mDisplayMetrics)
mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS
port.readBytes(serialEvent.getEventValue())
mImage.getFrameCount() > 1
{4,7,5,11,6,5,7,5,11,11}
!mConnected || !UsbManager.containsFunction(mCurrentFunctions,UsbManager.USB_FUNCTION_ACCESSORY)
ExceptionUtils.handleThrowable(tt)
YamahaReceiverHandlerFactory.class
getBurnTime(ALCHEMICAL_COAL_STACK)
new DSXOrder(pair,type,new BigDecimal("0.1"),new BigDecimal("900"),0,DSXOrder.OrderType.limit)
ipnbFilePanel.getSelectedCellPanel()
getActivity() == null || !WordPress.hasValidWPComCredentials(getActivity().getApplicationContext())
/**   * Mounts file resources in sub directories that do not exist in the main resoucres.  */ public class TestFileResourceSetVirtual extends TestFileResourceSet {   @Override public File getBaseDir(){     return new File("test/webresources/dir3");   } } 
!pageInfo.isELIgnored() && !pageInfo.isDeferredSyntaxAllowedAsLiteral() && reader.matches("#{")
focusManager.requestFocus(new MyFocusCommand(),false)
addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1)
public Long getId(){   return id; } 
/**   * An exception thrown when a mark can no longer be obeyed because the underlying buffer size is smaller than the amount of data read after the mark position.  */ public static class InvalidMarkException extends IOException {   private static final long serialVersionUID=-4338378848813561757L;   public InvalidMarkException(  String detailMessage){     super(detailMessage);   } } 
new WorldPoint(3238,3169,0)
peopleListFromJSON(jsonArray,localTableBlogId,!isEmailFollower,isEmailFollower,false)
mSelectedItemIdentifier != 0L
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true)
CodeSignIdentityStoreFactory.class
private JsStatement mapExpressionStatement(Node node) throws JsParserException {   JsExpression expr=mapExpression(node.getFirstChild());   return expr.makeStmt(); } 
this(texName,false); 
(Number)resultList
new StringBuilder(729)
new Message(MESSAGE_TEXT,false)
super.onActivityCreated(icicle)
Integer.parseInt(getOptional("kylin.storage.hbase.small-family-block-size-bytes","65536"))
Schema.builder().addNullableField("id",Schema.FieldType.INT32)
msgLog.debug(msg,true)
mono.onErrorResume(ex -> Mono.error(getReadError(bodyParameter,ex)))
public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
mp.getResolvedValue()
fm.getKnownNodes().size() == 0
postApply(p.getLayer(),p.getParamName(),gradView,paramView)
gatherWriteActionStatistics && myWriteActionsStack.isEmpty() && !myWriteActionPending
id=17
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","extern","inline","register","restrict","signed","goto","sizeof","struct","typedef","union","volatile","and","and_eq","asm","bitand","bitor","compl","const_cast","delete","dynamic_cast","explicit","export","friend","mutable","namespace","not","not_eq","operator","or","or_eq","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","wchar_t","xor","xor_eq","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
config.getIdleConnectionInPoolTimeoutInMs()
response.setStatus(statusCode)
{@link ImportControl}
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,s,PERSIST_DELAY)
fragmentTransaction.add(R.id.fragment_container,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
pm.queryIntentServicesAsUser(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA)
formatter.print()
topVer(4,3)
collection.setOnScrollListener(onScrollListener)
is2D() && len != 2
event.isTouchFocusCancel() || !calculatePositionAndValue(x,y)
per >= HEALTHY_PER
singleModelJSONObjectBuilder.nestedField(head,tail).field(HYDRA_OPERATION)
isInputViewShown()
new BufferedOutputStream(new FileOutputStream(outFile),8192)
assertEquals(3,schema.getUDTs().size())
discardChannel.receive(10_000)
editor.waitAllMarkersInvisibility(ERROR)
new INodeDirectory(oldinode,true)
stream.getProperty(NettyClientStream.class)
getIntProperty("tachyon.master.web.threads",9)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
hz.getCluster().getLocalMember().isLiteMember()
route.toString()
lDirAllocator.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_VIDEO_OUTPUT) == PackageManager.PERMISSION_GRANTED
e.getMessage().contains("SocketTimeout") || e.getMessage().contains("ConnectException")
1L << 36
getInt(THREAD_PER_HOST,2)
new UrlClassLoader(urls,null,false,false,true)
LOG.warn(String.format("%d ms elapsed since build job marked as finished, but still missing build rule finished events.",elapseMillisSinceFirstFinishedStatus))
equal=true
ComputeTaskTimeoutCheckedException e
left.getRowLength()
log.debug("Error extracting parameters meta data",e)
Calendar.getInstance()
!wNoExecution.getSelection()
final ImageView buttonShare=(ImageView)view.findViewById(R.id.context_menu_share_button); 
4 >= buf.length - count
giveFieldBinding(ss)
F.isEmpty(diffs)
l.contains("<pre>")
messageVerifier.verifyMessage(responseHeaders,requestCtx.getMethod(),requestCtx.getUriInfo().getAbsolutePath().getPath())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_MEDIA_FUNCTION,false)
c.getStartOffset() != getStartOffset() && c.getStartOffset() < targetBlockStartOffset
new MyResult(null,DiffPresentationReturnValue.quit,e.getMessage())
bitoff + nbits <= 32
mWindowManager.removeViewImmediate(mContainer)
logger.debug("AUTHENTICATE")
mResolver.stop()
GL20.glUniform2fv(location,toFloatBuffer(v,offset,count << 1))
/**   */ private LongAdder8 cntr; 
sharedPref.getBoolean(SettingActivity.SHOW_BIG_PIC,false)
mFolderName.equals(mAccount.getInboxFolderName())
JavaConversions.asJavaIterable(kafkaLog.logSegments(committedOffset,Long.MAX_VALUE))
(Number)array[this.index]
lib.returnStringVarArgs2("","Test")
"Skipped invalid content exclude pattern: " + excludeExp
session == null || serverName == null
GROUPS=4
log.debug("getOptimizationConfig(): Session ID is unknown: {}",currentSessionID)
testPackage.getFormattedSuccessRate()
new InputStreamReader(in,"UTF-8")
new ChunkUpdater(c,tessellator,worldProvider,this)
ignoreResourceNotFound=true
hasColumn(oldTableName,"description")
LOGGER.error("Error while downloading file",ioex)
testable.sort(sorted.clone())
KeyStore.getInstance("PKCS11",Security.getProvider(pkcs11.getName()))
mRingingCallState == other.mRingingCallState
new IndexSizeExceededException("%s",getOutOfRowsReason())
createPermissionsXmlAsset(new JndiPermission("*","lookup"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"))
new LightweightThread(null,null,new SuspendableRunnable(){   @Override public void run() throws SuspendExecution {     dut.myMethod();   } } )
this.klass.isPrimitive() || this.isEnum()
Preconditions.checkState(state.discoveredInputs != null,"discoverInputs() returned null on action %s",action)
impl._handler_method.getName()
!isRemoteRegionRequested
setop.getJavaName()
clientCodeVerifier == null
logger.fine("Remove try/catch/finally")
buffer.writeBytes(content,content.readerIndex(),content.readableBytes())
tag.setLabelposition("top")
args.length > 0 && Util.isInt(args[0])
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),null,null,_velocityEngine,_templateContextHelper,false)
"Got ACTION_DEVICE_CHANGED from unexpected device: " + device
"weighting " + weightingStr + " not supported"
connection.getRequestId() <= lastRequestID + 1
field.holder().isInitialized()
id=21
ImmutableSet.of(new AnagramClue("This anagram reveals who to speak to next: A BAKER","Baraek",new WorldPoint(3217,3434,0),"Varrock square","5"),new AnagramClue("This anagram reveals who to speak to next: A BASIC ANTI POT","Captain Tobias",new WorldPoint(3026,3216,0),"Port Sarim","7"),new AnagramClue("This anagram reveals who to speak to next: A HEART","Aretha",new WorldPoint(1814,3851,0),"Soul altar","2"),new AnagramClue("This anagram reveals who to speak to next: A ZEN SHE","Zenesha",new WorldPoint(2652,3295,0),"Platebody Southern Ardougne centre square"),new AnagramClue("This anagram reveals who to speak to next: ACE MATCH ELM","Cam The Camel",new WorldPoint(3300,3231,0),"North of the glider in Al Kharid"),new AnagramClue("This anagram reveals who to speak to next: AHA JAR","Jaraah",new WorldPoint(3359,3276,0),"Duel Arena hosptial"),new AnagramClue("This anagram reveals who to speak to next: AN PAINT TONIC","Captain Ninto",new WorldPoint(2865,9877,0),"Bar under White Wolf Mountain"),new AnagramClue("This anagram reveals who to speak to next: ARC O LINE","Caroline",new WorldPoint(2715,3302,0),"North Witchaven next to the row boat","11"),new AnagramClue("This anagram reveals who to speak to next: ARE COL","Oracle",new WorldPoint(3013,3501,0),"Ice Mountain West of Edgeville","48"),new AnagramClue("This anagram reveals who to speak to next: ARMCHAIR THE PELT","Charlie the Tramp",new WorldPoint(3209,3392,0),"South entrance of Varrock","0"),new AnagramClue("This anagram reveals who to speak to next: ARR! SO I AM A CRUST, AND?","Ramara du Croissant",new WorldPoint(2339,3677,0),"Piscatoris Fishing Colony"),new AnagramClue("This anagram reveals who to speak to next: AT HERG","Regath",new WorldPoint(1719,3723,0),"General Store, Arceuus, Zeah","25"),new AnagramClue("This anagram reveals who to speak to next: A BAS","Saba",new WorldPoint(2858,3577,0),"Death Plateau"),new AnagramClue("This anagram reveals who to speak to next: AREA CHEF TREK","Father Aereck",new WorldPoint(3243,3208,0),"Lumbridge Church","19 or 20"),new AnagramClue("This anagram reveals who to speak to next: BAIL TRIMS","Brimstail",new WorldPoint(2402,3419,0),"West of Stronghold Slayer Cave"),new AnagramClue("This anagram reveals who to speak to next: BAKER CLIMB","Brambickle",new WorldPoint(2783,3861,0),"Trollweiss mountain"),new AnagramClue("This anagram reveals who to speak to next: BLUE GRIM GUIDED","Lumbridge Guide",new WorldPoint(3232,3232,0),"Lumbridge"),new AnagramClue("This anagram reveals who to speak to next: BY LOOK","Bolkoy",new WorldPoint(2529,3162,0),"Tree Gnome Village general store","13"),new AnagramClue("This anagram reveals who to speak to next: CAR IF ICES","Sacrifice",new WorldPoint(2209,3056,0),"Zul-Andra"),new AnagramClue("This anagram reveals who to speak to next: CAREER IN MOON","Oneiromancer",new WorldPoint(2150,3866,0),"Astral altar","25"),new AnagramClue("This anagram reveals who to speak to next: C ON GAME HOC","Gnome Coach",new WorldPoint(2395,3486,0),"Gnome Ball course","6"),new AnagramClue("This anagram reveals who to speak to next: COOL NERD","Old Crone",new WorldPoint(3462,3557,0),"East of the Slayer Tower","619"),new AnagramClue("This anagram reveals who to speak to next: COPPER ORE CRYPTS","Prospector Percy",new WorldPoint(3061,3377,0),"Motherlode Mine","12"),new AnagramClue("This anagram reveals who to speak to next: DED WAR","Edward",new WorldPoint(3284,3943,0),"Inside Rogue's Castle"),new AnagramClue("This anagram reveals who to speak to next: DEKAGRAM","Dark Mage",new WorldPoint(3039,4835,0),"Centre of the Abyss","13"),new AnagramClue("This anagram reveals who to speak to next: DO SAY MORE","Doomsayer",new WorldPoint(3230,3230,0),"East of Lumbridge Castle","95"),new AnagramClue("This anagram reveals who to speak to next: DIM THARN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28 or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR HITMAN","Mandrith",new WorldPoint(3182,3946,0),"Wilderness Resource Area","28, Light box or Puzzle box"),new AnagramClue("This anagram reveals who to speak to next: DR WARDEN FUNK","Drunken Dwarf",new WorldPoint(2913,10221,0),"East Side of Keldagrim"),new AnagramClue("This anagram reveals who to speak to next: DRAGONS LAMENT","Strange old Man",new WorldPoint(3564,3288,0),"Barrows","40"),new AnagramClue("This anagram reveals who to speak to next: DT RUN B","Brundt the Chieftain",new WorldPoint(2658,3670,0),"Rellekka, main hall","4"),new AnagramClue("This anagram reveals who to speak to next: DUO PLUG","Dugopul",new WorldPoint(2803,2744,0),"Graveyard on Ape Atoll"),new AnagramClue("This anagram reveals who to speak to next: EEK ZERO OP","Zoo keeper",new WorldPoint(2613,3269,0),"Ardougne Zoo","40"),new AnagramClue("This anagram reveals who to speak to next: EL OW","Lowe",new WorldPoint(3233,3423,0),"Varrock archery store"),new AnagramClue("This anagram reveals who to speak to next: ERR CURE IT","Recruiter",new WorldPoint(2541,3305,0),"West Ardougne centre square","20"),new AnagramClue("This anagram reveals who to speak to next: FORLUN","Runolf",new WorldPoint(2512,10256,0),"Miscellania & Etceteria Dungeon"),new AnagramClue("This anagram reveals who to speak to next: GOBLIN KERN","King Bolren",new WorldPoint(2541,3170,0),"Tree Gnome Village"),new AnagramClue("This anagram reveals who to speak to next: GOT A BOY","Gabooty",new WorldPoint(2790,3066,0),"Centre of Tai Bwo Wannai","11"),new AnagramClue("This anagram reveals who to speak to next: GULAG RUN","Uglug Nar",new WorldPoint(2442,3051,0),"West of Jiggig"),new AnagramClue("This anagram reveals who to speak to next: GOBLETS ODD TOES","Otto Godblessed",new WorldPoint(2501,3487,0),"Otto's Grotto","2"),new AnagramClue("This anagram reveals who to speak to next: HALT US","Luthas",new WorldPoint(2938,3152,0),"Banana plantation, Karamja","33 (or none)"),new AnagramClue("This anagram reveals who to speak to next: HE DO POSE. IT IS CULTRRL, MK?","Riki the sculptor's model",new WorldPoint(2904,10206,0),"East Keldagrim, south of kebab seller."),new AnagramClue("This anagram reveals who to speak to next: HEORIC","Eohric",new WorldPoint(2900,3565,0),"Top floor of Burthorpe Castle","36"),new AnagramClue("This anagram reveals who to speak to next: HIS PHOR","Horphis",new WorldPoint(1639,3812,0),"Arceuus Library, Zeah","1"),new AnagramClue("This anagram reveals who to speak to next: I AM SIR","Marisi",new WorldPoint(1813,3488,0),"Allotment patch, South coast Zeah","5"),new AnagramClue("This anagram reveals who to speak to next: ICY FE","Fycie",new WorldPoint(2630,2997,0),"East Feldip Hills"),new AnagramClue("This anagram reveals who to speak to next: I DOOM ICON INN","Dominic Onion",new WorldPoint(2609,3116,0),"Nightmare Zone","9,500"),new AnagramClue("This anagram reveals who to speak to next: I EAT ITS CHART HINTS DO U","Shiratti the Custodian",new WorldPoint(3427,2927,0),"North of fountain, Nardah"),new AnagramClue("This anagram reveals who to speak to next: I EVEN","Nieve",new WorldPoint(2432,3422,0),"The slayer master in Gnome Stronghold","2"),new AnagramClue("This anagram reveals who to speak to next: I FAFFY RUN","Fairy Nuff",new WorldPoint(3201,3169,0),"North of the bank in Zanaris"),new AnagramClue("This anagram reveals who to speak to next: IM N ZEZIM","Immenizz",new WorldPoint(2592,4324,0),"The Imp inside Puro-Puro"),new AnagramClue("This anagram reveals who to speak to next: KAY SIR","Sir Kay",new WorldPoint(2760,3496,0),"The courtyard in Camelot Castle","6"),new AnagramClue("This anagram reveals who to speak to next: LEAKEY","Kaylee",new WorldPoint(2957,3370,0),"Rising Sun Inn in Falador","18"),new AnagramClue("This anagram reveals who to speak to next: LAND DOOMD","Odd Old Man",new WorldPoint(3359,3506,0),"Limestone mine northeast of Varrock"),new AnagramClue("This anagram reveals who to speak to next: LARK IN DOG","King Roald",new WorldPoint(3220,3476,0),"Ground floor of Varrock castle","24"),new AnagramClue("This anagram reveals who to speak to next: LOW LAG","Gallow",new WorldPoint(1805,3566,0),"Vinery in the Great Kourend","12"),new AnagramClue("This anagram reveals who to speak to next: LADDER MEMO GUV","Guard Vemmeldo",new WorldPoint(2447,3418,0),"Gnome Stronghold Bank","3"),new AnagramClue("This anagram reveals who to speak to next: MAL IN TAU","Luminata",new WorldPoint(3508,3237,0),"Near Burgh de Rott entrance"),new AnagramClue("This anagram reveals who to speak to next: ME AM THE CALC","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: MACHETE CLAM","Cam the Camel",new WorldPoint(3300,3231,0),"Outside Duel Arena","6"),new AnagramClue("This anagram reveals who to speak to next: ME IF","Femi",new WorldPoint(2461,3382,0),"Gates of Tree Gnome Stronghold"),new AnagramClue("This anagram reveals who to speak to next: MOLD LA RAN","Old Man Ral",new WorldPoint(3602,3209,0),"Meiyerditch"),new AnagramClue("This anagram reveals who to speak to next: MOTHERBOARD","Brother Omad",new WorldPoint(2606,3211,0),"Monastery south of Ardougne","129"),new AnagramClue("This anagram reveals who to speak to next: MUS KIL READER","Radimus Erkle",new WorldPoint(2726,3368,0),"Legends' Guild"),new AnagramClue("This anagram reveals who to speak to next: MY MANGLE LAL","Lammy Langle",new WorldPoint(1688,3540,0),"Hosidius House spirit tree patch"),new AnagramClue("This anagram reveals who to speak to next: NO OWNER","Oronwen",new WorldPoint(1162,3178,0),"Lletya Seamstress shop in Lletya","20"),new AnagramClue("This anagram reveals who to speak to next: NOD MED","Edmond",new WorldPoint(2566,3332,0),"Behind the most NW house in East Ardougne","3"),new AnagramClue("This anagram reveals who to speak to next: O BIRDZ A ZANY EN PC","Cap'n Izzy no Beard",new WorldPoint(2807,3191,0),"Brimhaven Agility Arena","33"),new AnagramClue("This anagram reveals who to speak to next: OK CO","Cook",new WorldPoint(3207,3214,0),"Ground floor of Lumbridge Castle","9"),new AnagramClue("This anagram reveals who to speak to next: OR ZINC FUMES WARD","Wizard Frumscone",new WorldPoint(2594,3086,0),"Downstairs in the Wizards' Guild"),new AnagramClue("This anagram reveals who to speak to next: OUR OWN NEEDS","Nurse Wooned",new WorldPoint(1575,3590,0),"Shayzien House Infirmary","19"),new AnagramClue("This anagram reveals who to speak to next: PACINNG A TAIE","Captain Ginea",new WorldPoint(1561,3602,0),"Building east of Shayzien combat ring","113"),new AnagramClue("This anagram reveals who to speak to next: PEAK REFLEX","Flax keeper",new WorldPoint(2744,3444,0),"Flax field south of Seers Village","676"),new AnagramClue("This anagram reveals who to speak to next: PEATY PERT","Party Pete",new WorldPoint(3047,3376,0),"Falador Party Room"),new AnagramClue("This anagram reveals who to speak to next: PROFS LOSE WRONG PIE","Professor Onglewip",new WorldPoint(3113,3162,0),"Ground floor of Wizards Tower"),new AnagramClue("This anagram reveals who to speak to next: QUIT HORRIBLE TYRANT","Brother Tranquility",new WorldPoint(3681,2963,0),"Mos Le'Harmless or Harmony Island","7"),new AnagramClue("This anagram reveals who to speak to next: QUE SIR","Squire",new WorldPoint(2975,3343,0),"Falador Castle Courtyard","654"),new AnagramClue("This anagram reveals who to speak to next: R AK MI","Karim",new WorldPoint(3273,3181,0),"Al Kharid Kebab shop","5"),new AnagramClue("This anagram reveals who to speak to next: RAT MAT WITHIN","Martin Thwait",new WorldPoint(2906,3537,0),"Rogues' Den","2"),new AnagramClue("This anagram reveals who to speak to next: RED ART TANS","Trader Stan",new WorldPoint(3041,3193,0),"Port Sarim Charter ship"),new AnagramClue("This anagram reveals who to speak to next: RATAI","Taria",new WorldPoint(2940,3223,0),"Rimmington bush patch","7"),new AnagramClue("This anagram reveals who to speak to next: R SLICER","Clerris",new WorldPoint(1761,3850,0),"Arceuus mine, Zeah","738"),new AnagramClue("This anagram reveals who to speak to next: SAND NUT","Dunstan",new WorldPoint(2919,3574,0),"Anvil in north east Burthorpe","8"),new AnagramClue("This anagram reveals who to speak to next: SEQUIN DIRGE","Queen Sigrid",new WorldPoint(2612,3867,0),"Throne room of Etceteria Castle."),new AnagramClue("This anagram reveals who to speak to next: SLAM DUSTER GRAIL","Guildmaster Lars",new WorldPoint(1649,3498,0),"Woodcutting guild, Zeah"),new AnagramClue("This anagram reveals who to speak to next: SLIDE WOMAN","Wise Old Man",new WorldPoint(3088,3253,0),"Draynor Village","28"),new AnagramClue("This anagram reveals who to speak to next: SNAH","Hans",new WorldPoint(3218,3219,0),"Lumbridge Castle courtyard"),new AnagramClue("This anagram reveals who to speak to next: SNAKES SO I SAIL","Lisse Isaakson",new WorldPoint(2351,3801,0),"Neitiznot","2"),new AnagramClue("This anagram reveals who to speak to next: TAMED ROCKS","Dockmaster",new WorldPoint(1822,3739,0),"Piscarilius House, NE of General store","5"),new AnagramClue("This anagram reveals who to speak to next: TEN WIGS ON","Wingstone",new WorldPoint(3389,2877,0),"Between Nardah & Agility Pyramid"),new AnagramClue("This anagram reveals who to speak to next: THEM CAL CAME","Cam the Camel",new WorldPoint(3300,3231,0),"Just outside of the Duel Arena"),new AnagramClue("This anagram reveals who to speak to next: THICKNO","Hickton",new WorldPoint(2822,3442,0),"Catherby fletching shop","2"),new AnagramClue("This anagram reveals who to speak to next: TWENTY CURE IRON","New recruit Tony",new WorldPoint(1498,3544,0),"Shayzien House's Graveyard"),new AnagramClue("This anagram reveals who to speak to next: UNLEASH NIGHT MIST","Sigli the Huntsman",new WorldPoint(2660,3654,0),"Rellekka","302"),new AnagramClue("This anagram reveals who to speak to next: VESTE","Steve",new WorldPoint(2432,3423,0),"Upstairs Wyvern Area or Stronghold Slayer Cave","2"),new AnagramClue("This anagram reveals who to speak to next: VEIL VEDA","Evil Dave",new WorldPoint(3079,9892,0),"Doris' basement, Edgeville","666"),new AnagramClue("This anagram reveals who to speak to next: WOO AN EGG KIWI","Awowogei",new WorldPoint(2802,2764,0),"Ape Atoll","24"),new AnagramClue("This anagram reveals who to speak to next: YAWNS GY","Ysgawyn",new WorldPoint(2340,3167,0),"Lletya"),new AnagramClue("This anagram reveals who to speak to next: MAJORS LAVA BADS AIR","Ambassador Alvijar",new WorldPoint(2736,5351,1),"Dorgesh-Kaan, NE Middle Level","2505"))
injectField(annotationNode.up().up(),fieldDecl)
fileService.getResource(getResourcePath(versionedBundleName))
candidate.getSelected().getPublishedAs()
Timber.d(e,"Error getting path delimiter using LIST command")
identifier != null && identifier.isPhysical()
gs._mb.makeModelMetrics(GLRMModel.this,orig)
um.getEnabledProfileIds(mCurrentUserId)
assertEquals(35,carEncoder.getSpeed(iter.getFlags()))
CalendarBookingServiceUtil.addCalendarBooking(calendarId,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
String.format("Option %s is not supported by this runtime",name)
!page.isApproved() && !page.isDraft() && !page.isPending()&& !page.isInTrash()&& !page.isInTrashFolder()&& (page.getVersion() != WikiPageConstants.VERSION_DEFAULT)
FileInStream.create(status,options.toInStreamOptions(),mFileSystemContext)
this.getClass()
parts.length > 1
response.getLongContentLength()
blockId == null || blockId >= Block.field_71973_m.length
tgt.grantServiceTicket("ST3",service,new NeverExpiresExpirationPolicy(),true,false)
DocumentationManager.storeOriginalElement(project,originalElement,element)
annotationHelper.printAnnotationError(element,"%s annotated element should have an empty constructor")
Double.parseDouble(value.toString())
LOG.debug("Creating short circuit output stream for block {} @ {}",blockId,address)
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
new HttpBlobStore(new URI("http://localhost:" + serverPort),30,credentials)
externalMediaDir.getPath()
glyph.setSize(16)
@Override public String apply(String json) throws Exception {   Controller controller=createController();   return controller.applyJson(json); } 
report(n,MISPLACED_ANNOTATION,"@abstract","function with a non-empty body cannot be abstract")
BuildCraftCore.DEVELOPER_MODE
T actor
log.warn(msg,t)
i < 8
parsed && name.length() > 0
psiFileFactory.createFileFromText("dummy.html",HTMLLanguage.INSTANCE,templateString,false,true)
String textToUse; 
annotations == null || annotations.isEmpty()
SelectTimeZonePacificStandardTimeCPMATest.class
(FieldType)unsafe.getObjectVolatile(owner,offset)
new ResourceContactPhoto(R.drawable.ic_profile_default,R.drawable.ic_person_large)
Context.getAdministrationService().saveGlobalProperty(propToUpdate)
call.getStartTime()
RenderUtil.loadResources(resources,resFolderWrapper)
hostConfig.getCpuQuota()
DLServiceUtil.addFile(companyId,portletId,article.getGroupId(),repositoryId,dirName + "/" + fileName,0,StringPool.BLANK,new String[0],bytes)
SynchronizeFolderOperation synchFolderOp=new SynchronizeFolderOperation(mContext,remoteFile.getRemotePath(),mAccount,mCurrentSyncTime); 
logger.severe("Failed to process response: " + responsePacket + " on response thread:"+ getName(),e)
COUNT_DATABASE.put(key,newVal)
notifier.getConfiguration().setPort(25669)
!entry.getKey().isEmpty()
timeout >= 0
private ClassLoader myClassLoader; 
LOG.error(e.getMessage(),e)
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,FALSE)
Collection<PostgreTableBase>
this.rejectedAttr=rejectedAttr
new IgniteCheckedException("Failed to perform cache operation (cache topology is not valid): " + U.maskName(cacheCtx.name()),err)
-909763073
permissions+=128
!res.getObject().isStopApplicable(res.isForwardDirection(),intId)
hideable && shouldHide(releasedChild,yvel) && (releasedChild.getTop() > collapsedOffset || Math.abs(xvel) < Math.abs(yvel))
holder.setGone(loadEndViewId,visible)
dataFormatModel.setDescription(row.get("description"))
future.get(120,TimeUnit.SECONDS)
!isLoaded && item.isOptional() && item.getRecursiveLink() == null
reader.getType(reader.readSmallUint(protoIdItemOffset + RETURN_TYPE_OFFSET))
TypeSpec.parseStrict(builder)
source.isInteractive()
gen.generateParser(false)
assertEquals(false,statement.getReferencesUniqueColumn())
new ExecutionEnvironment(env.getRunProfile(),env.getExecutionTarget(),env.getProject(),env.getRunnerSettings(),env.getConfigurationSettings(),null,null)
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.claimed,"AAAAA","BALO",cargo.isMisdirected())
account.hasSpamFolder()
new DatabaseFormatterPostgres()
sfield != null && schema.getDynamicPattern(sfield.getName()) != null
path.findFileByRelativePath(className.replace('.','/') + ".class")
getI18NString(key,null,Locale.getDefault())
private RunningProcessList mRunningProcessList=new RunningProcessList(); 
fileMeasures.get(6L)
setUnknownLabels(collapsedUnary,mainLabel)
currentFragment=FRAGMENT_SIGNUP
!mIsOnInnerCircle && hour != 0
new BorderLayout(UIUtil.DEFAULT_HGAP,UIUtil.DEFAULT_VGAP)
PyMandatoryEncodingInspection.class
Objects.hashCode(mLocationPolicy,mReadType,mCacheIncompleteBlock)
new ArgumentsPanel(true,JMeterUtils.getResString("backend_listener_paramtable"))
0x100000 - 0x50
_rate_decay != 1
propertySourceLoader.load(GrailsNameUtils.getLogicalPropertyName(pluginClass.getSimpleName(),"GrailsPlugin") + "-" + PLUGIN_YML,resource,null,true,DEFAULT_CONFIG_IGNORE_LIST)
_siteNavigationMenuPortletInstanceConfiguration.siteNavigationMenuType()
saveToFile(false)
new MethodHandler(methodKey,groupId,cal,type)
moreThan2Bloom != null && srcCount >= 1
webView.findNext(false)
assertEquals(3,map.size())
MethodInterceptor.class.isAssignableFrom(type) || type.getName().endsWith(ClassAgent.CLASSNAME_SUFFIX) || (name != null && name.startsWith(AopConfigration.IOCNAME))|| AopConfigration.class.isAssignableFrom(type)|| Modifier.isAbstract(type.getModifiers())
interfaces[i].isAssignableFrom(interfaceClass)
timeout=5000
id=19905
"Scheduling method " + method.getName() + " on "+ target+ " to be run every "+ delay+ " "+ timeUnit+ " after "+ initialDelay+ " "+ timeUnit
128 * 1024
Context.getVisitService().getAllVisitTypes(true)
alpha=0
this.originY
requestLine.split("\\s",-1)
this.connectTo(vertex,null,null,indexOfOutputGate,indexOfInputGate,DistributionPattern.BIPARTITE,true)
new Notification(notification,nodeService)
parameterIsPrimitiveOrNullable(func,i)
case 16: 
paginationType.equals("more") && (end > 0) && (docs.size() > end)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().finished().list().size())
final GenericStructContainer parent
/**   * [Sa * Da, Sc * Dc]   */ MULTIPLY(13)
isAlphaModeSupported()
/**   * User: anna Date: 1/10/13  */ public class JavaFXDefaultTagInspectionTest extends AbstractJavaFXQuickFixTest {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxDefaultTagInspection());   }   public void testChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testEmptyChildren() throws Exception {     doLaunchQuickfixTest("children");   }   public void testStylesheets() throws Exception {     checkQuickFixNotAvailable("stylesheets");   }   @Override protected String getHint(  String tagName){     return "Unwrap '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/defaultTag/";   } } 
holder.textView.setBackgroundDrawable(null)
queryStrings.append(key)
mWidth - mMinWidth
specFactory.createInputFilesSpec(value)
ignite.getOrCreateCache(cacheCfg)
liveMetadata != null && this != liveMetadata.compressionParameters
asLongReg(result)
loc != null && isSortedByDistance
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Cool this annotation!")
Object key
PushBufferStream.class
e instanceof ItemFrame
input.getDouble(0) < 0.05
jaxbbean.addConstructorArgValue(paramsbean.getBeanDefinition())
portalTopLevelBuildData.getUserContentRelativePath()
public PhoneticFilter create(TokenStream input){   return new PhoneticFilter(input,encoder,name,inject); } 
UpgradeStepRegistrator.class
webappsDir.getAbsolutePath()
super(project,true); 
final ImageView buttonMore=(ImageView)view.findViewById(R.id.context_menu_more_button); 
List<Number>
lookupService.lookupPrincipalByName(user)
!isEnabled() || mSlideableView == null
false && !closedWay && getOuterWays().size() == 1
db.needUpgrade(9)
log.warn("Couldn't get resource: " + filename)
config.getProperty("peer.p2p.pingInterval",5)
~HIDDEN
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends Activity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK)     SendCoinsActivity.start(this,intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT));     finish();   } } 
SourceSatelliteView view
logger.fine(String.format("close (%s)",reason))
rightResult.cardinality()
mImageSize == MediaSettingsImageSize.FULL && TextUtils.isEmpty(mEditorImageMetaData.getCaption())
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",true)
side.getCapitalized()
(LongIntVector)row
getTestName(true)
visitor.visitMethodInsn(opCode.getOpCode(),target.getClassName(),name,getMethodDescription(),target.isInterface())
from > to
AddPortletSMChildPageTest.class
canvas.drawArc(mArcRect,45,90,false,mPaint)
clusteringSize + 1
"Content-Type".equalsIgnoreCase(name)
JDBCUtils.safeGetLong(dbResult,"time")
a.getLayoutDimension(R.styleable.BootstrapButton_android_layout_width,0)
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV6_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
ORIENTATION_SETTLE_TIME_MS=250
dbSqlSessionFactory.getDatabaseCatalog() != null && dbSqlSessionFactory.getDatabaseCatalog().length() > 0
updatable=true
dot == -1
content=nc
VERSION_INT=1000011
new InternalSearchResponse(new SearchHits(new SearchHit[]{hit},1L,1f),null,null,null,false,false,1)
(1.0f - rawLightValueSun) * 16.0
((Number)s.first()).doubleValue()
tenantApi.uploadPluginPaymentStateMachineConfig(PLUGIN_NAME,stateMachineConfig,requestOptionsOtherTenant)
(read=channel.read(byteBuffer)) >= 0
CellUtil.estimatedHeapSizeOfWithoutTags(cell)
-1412539489
authenticationText != null
new Note(null,noteText,comment,new Date(),NoteType.TEXT)
ultimateRecyclerView.setDefaultOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener(){   @Override public void onRefresh(){     new Handler().postDelayed(new Runnable(){       @Override public void run(){         simpleRecyclerViewAdapter.insert("Refresh things",0);         ultimateRecyclerView.setRefreshing(false);         linearLayoutManager.scrollToPosition(0);       }     } ,1000);   } } )
this.csrfTokenRepository.generateToken(exchange).delayUntil(token -> this.csrfTokenRepository.saveToken(exchange,token))
searcher.get().getRawReader()
CachedValuesManager.getCachedValue(context,new CachedValueProvider<MethodCandidateInfo>(){   @Nullable @Override public Result<MethodCandidateInfo> compute(){     return new Result<MethodCandidateInfo>(getStaticFactoryCandidateInfo(psiClass,newExpression,context,argumentList),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);   } } )
FileUtil.loadFile(new File(getTestDataPath() + "/" + getTreeFileName()),true)
assertEquals(11,databases.size())
renderFrameBuffer == null && renderFrameBufferMS == null
Math.abs(expectedSum) * 1e-10
commit.getId().asString()
@NotNull public SoftWrapModelEx getSoftWrapModel(){   return myDelegate.getSoftWrapModel(); } 
4 + maskLength
Status.createStatuseList(get(getApiBaseURL() + V1 + user+ "/lists/"+ id+ "/statuses.json",new PostParameter[0],paging.asPostParameterList(Paging.SMCP,Paging.PER_PAGE),true))
hits3.length()
LOGGER.debug("Invalid number format for side pane component '" + componentName + "'.",e)
mQsDensityContainer.getX()
conf.setInt("hbase.hregion.memstore.block.multiplier",100)
!mLoadingErrorResource && getBitmapFromMemCache(key) == null
mPhones.contains(phone)
mCaCerts != null && mCaCerts.length > 0
Iterator<URLDetail>
await().atMost(2,TimeUnit.SECONDS)
LongAdder8 cntr
w1.getGradient(target,label - expTable[(int)((f + MAX_EXP) * (expTable.length / MAX_EXP / 2))],this.alpha)
emptyCheck.log(0,"msgKey")
Helpers.exec(j4p,"setProfileFabs(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE
private static final HBaseConfiguration config=new HBaseConfiguration(); 
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000)
new TimeoutException("DNS timeout " + getTimeout() + " ms")
myChild2.getElementType() == ElementType.BLOCK_STATEMENT || myChild2.getElementType() == ElementType.CODE_BLOCK
folder.toUnescapedModel()
DEBUG_LOG_ENABLED=false
final GridCacheAdapter cache=internalCache(i); 
NCNameResourceCodec.encode(ci)
count < 200
ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())
GetterUtil.getString(serviceReference.getProperty("javax.portlet.description"))
RingBuffer.newSequencedQueue(RingBuffer.<T>createSingleProducer((int)batchSize))
Thread.currentThread().hashCode()
status.isDir()
invocations >= 4
/**   * A  {@link ChannelHandler} that is notified when it is added to or removedfrom a  {@link ChannelPipeline}.  Please note that the methods of this handler is called only when the  {@link ChannelPipeline} it belongs to hasbeen  {@linkplain ChannelPipeline#attach(Channel,ChannelSink) attached}.  * @author The Netty Project (netty-dev@lists.jboss.org)  * @author Trustin Lee (tlee@redhat.com)  * @version $Rev$, $Date$  */ public interface LifeCycleAwareChannelHandler extends ChannelHandler {   void beforeAdd(  ChannelHandlerContext ctx) throws Exception ;   void afterAdd(  ChannelHandlerContext ctx) throws Exception ;   void beforeRemove(  ChannelHandlerContext ctx) throws Exception ;   void afterRemove(  ChannelHandlerContext ctx) throws Exception ; } 
this.add(getPanelCommand(),getPanelCommand().getName())
directoryUrl.getParameter(Constants.GROUP_KEY,"")
!md.getToggleState()
mWindow == null || !mWindow.getSharedElementsUseOverlay()
database instanceof DerbyDatabase || database instanceof PostgresDatabase || database instanceof FirebirdDatabase|| database instanceof DB2Database
stopWatch.taken() < 1000
get(context,R.string.pref_navigation,false)
prev.getNextProp()
new Node.JspAttribute(tai,qName,uri,localName,value,false,el,dynamic)
verify(mockRestTemplate).postForEntity(eq(URI.create("http://example.com")),any(Message.class),eq(Void.class))
mImage.getFrameCount() <= 1
newFlagged=Boolean.parseBoolean(value)
waitLatch.await()
ci.getConduit(info,bus)
assertEquals(0,dataCountsDoc.get("bucket_count"))
dumpLine(pw,0,category,MISC_DATA,screenOnTime / 1000,phoneOnTime / 1000,fullWakeLockTimeTotal / 1000,partialWakeLockTimeTotal / 1000,getMobileRadioActiveTime(rawRealtime,which) / 1000,getMobileRadioActiveAdjustedTime(which) / 1000,interactiveTime / 1000,powerSaveModeEnabledTime / 1000,connChanges,deviceIdleModeEnabledTime / 1000,getDeviceIdleModeEnabledCount(which),deviceIdlingTime / 1000,getDeviceIdlingCount(which),getMobileRadioActiveCount(which),getMobileRadioActiveUnknownTime(which) / 1000)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class CountDownLatchBasicDistributedTest extends CountDownLatchAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
psiMethod.getReturnType()
ids2.size()
body.getContentType().mediaType()
NestedSetBuilder.linkOrder()
rt != null && other != null
solve(false)
U.warn(log,"Failed to load partition counters.",e)
service.diff(appContext.getDevMachine(),project.getLocation(),null,NAME_STATUS,true,0,"HEAD",false)
String.format("(%s) violated quota. Actual: (%f), Threshold: (%f)",metric.metricName(),value,quota.bound())
block instanceof BlockTallGrass
boundingBox.getLatSouthE6() / 1e6
ImmutableSortedSet.<BuildRule>of(bundle,reactNativeDeps)
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),team.getGroupId(),ActionKeys.MANAGE_ANNOUNCEMENTS) && RolePermissionUtil.contains(themeDisplay.getPermissionChecker(),themeDisplay.getScopeGroupId(),role.getRoleId(),ActionKeys.MANAGE_ANNOUNCEMENTS)
portalTopLevelBuildData.getBuildURL()
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
incomingMessage.setTransactionCanceled(true)
case READ_UNCOMMITTED: 
checkCallerIsSystemOrShell()
200L * FileUtils.ONE_MB
contact != null && contact.showInRoster()
this.r != null && r != null
new StatsListener(ss,1)
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.<Type>asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
parts.length > 2
Assert.assertEquals(runResult.stdOut,stdoutLines.length,lines.length)
objectFactory.newInstance(DefaultSwiftExecutable.class,name + "Executable",projectLayout,objectFactory,getModule(),true,false,getSwiftSource(),configurations,getImplementationDependencies())
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
Slog.w(TAG,"APK " + fileName + " has unaligned dex code "+ entry.getName())
updateBreakResponseBtn()
authHeaders == null || authHeaders.size() != 1
calendar.add(Calendar.DATE,2)
LOG.warn("Memory Usage for the Broker (" + memLimit / (1024 * 1024) + " mb) is more than the maximum available for the JVM: " + jvmLimit / (1024 * 1024) + " mb - resetting to 70% of maximum available: " + (usage.getMemoryUsage().getLimit() / (1024 * 1024)) + " mb")
EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>
retryPolicy.onWriteTimeout(wcl,WriteType.from(wte.writeType),wte.blockFor,wte.received,queryRetries)
new File(resourceArr[i])
Math.max(1,amount)
setContentType(response,TEXT_HTML,gspEncoding,true)
registerWithArgs(sizeMethods,"size",o,methodArgs)
invoke(agentInfo,payload,DEFAULT_FUTURE_TIMEOUT)
"Virtual file is null for " + myFile
/**   * Proxy class to catch calls to set blocks.  * @author sk89q  */ public class MinecraftSetBlockProxy extends em {   /**   * Edit session.  */   private EditSession editSession;   /**   * Constructor that should NOT be called.  * @param editSession  */   public MinecraftSetBlockProxy(  EditSession editSession){     super(null,"",(long)0,null);     throw new IllegalStateException("MinecraftSetBlockProxy constructor called (BAD)");   }   /**   * Called to set a block.  * @param x  * @param y  * @param z  * @param blockType  * @return  */   @Override public boolean a(  int x,  int y,  int z,  int blockType){     try {       return editSession.setBlock(new Vector(x,y,z),new BaseBlock(blockType));     }  catch (    MaxChangedBlocksException ex) {       return false;     }   }   /**   * Called to get a block.  * @param x  * @param y  * @param z  * @return  */   @Override public int a(  int x,  int y,  int z){     return editSession.getBlock(new Vector(x,y,z)).getID();   }   /**   * @return  */   public EditSession getEditSession(){     return editSession;   }   /**   * @param editSession  */   public void setEditSession(  EditSession editSession){     this.editSession=editSession;   } } 
standalone=false
connectors.put(connectorId,connector)
sendGetBlockHeaders(syncManager.getGapBlock().getHash(),FORK_COVER_BATCH_SIZE,0,true)
module == null || module.isDisposed()
(low + high) >>> 1
assertEquals(builder.size(),1)
/**   * Allows a List to be used as the indices to be used on a String  * @returns a String of the values at the given indices  */ public static CharSequence get(CharSequence self,Collection indices){   StringBuffer answer=new StringBuffer();   for (Iterator iter=indices.iterator(); iter.hasNext(); ) {     Object value=iter.next();     if (value instanceof Range) {       answer.append(get(self,(Range)value));     }  else     if (value instanceof Collection) {       answer.append(get(self,(Collection)value));     }  else {       int idx=InvokerHelper.asInt(value);       answer.append(get(self,idx));     }   }   return answer.toString(); } 
(status & 0x00010000) != 0
digitalRefreshInterval=10 * 1000
Files.move(tmpCacheEntry,cacheEntry.toPath(),REPLACE_EXISTING)
XmppStringUtils.parseBareJid(user)
serialVersionUID=320L
ImmutableList<ConformanceConfig>
5 * 60 * 1000
result.length() < 2
ScalingUtils.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f)
BorderFactory.createMatteBorder(5,0,5,0,UIUtil.getPanelBackground())
case OK: 
U.error(log,"Failed to apply updates for session (maximum number of retries exceeded) [sesId=" + sesId + ", retries="+ retries+ ']',e)
finish()
AndroidResource resourceRule1=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res1")).build()); 
info.getURL()
((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(channel,exchange)
refresh(asynchronous,recursive,postRunnable)
SimpleAttributeDefinitionBuilder.create("new-level",ModelType.STRING,true)
new IndexWriter(directory,autoCommit,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
iter.next().getDoubleValue() != 0.0
Optional.ofNullable(caCertificatesFile)
Thread.sleep(500)
/**   * Changes permission on current working directory so that the directory is owned by the user and the group remains azkaban. Leverages execute-as-user with "root" as the user to run the command.  * @param effectiveUser user/proxy user running the job  */ private void assignUserDirOwnership(final String effectiveUser) throws Exception {   final ExecuteAsUser executeAsUser=new ExecuteAsUser(this.sysProps.getString(AZKABAN_SERVER_NATIVE_LIB_FOLDER));   final String groupName=this.sysProps.getString(AZKABAN_SERVER_GROUP_NAME,"azkaban");   final List<String> changeOwnershipCommand=Arrays.asList(CHOWN,effectiveUser + ":" + groupName,getWorkingDirectory());   info("Change current working directory ownership to " + effectiveUser + ":"+ groupName+ ".");   final int result=executeAsUser.execute("root",changeOwnershipCommand);   if (result != 0) {     error("Failed to change current working directory ownership. Error code: " + Integer.toString(result));   } } 
new BooleanQuery(true)
assertTrue("reuse-address",networkConfig.isReuseAddress())
/**   * The number of public elements in this segment's region.   */ private final LongAdder8 pubSize=new LongAdder8(); 
SpectralKMeansDriver.run(new Configuration(),affinities,output,1100,2,measure,convergenceDelta,maxIter)
properties.itemType > ItemViewProperties.ID_NOT_IN_ACTIONBAR
ddmStructureLocalService.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),folderId,true)
Mono.just(entry.getKey()).zipWith(entry.getValue().health().compose(this.timeoutCompose))
new PropertyDescriptor.Builder().name("Receive Message Wait Time").description("The maximum amount of time to wait on a long polling receive call. Setting this to a value of 1 second or greater will reduce the number of SQS requests and decrease fetch latency at the cost of a constantly active thread.").expressionLanguageSupported(false).required(true)
TestSuiteEnvironment.getServerAddressNode1()
MavenBuild.create(new File("projects/struts-1.3.9-diet/pom.xml")).setGoals("clean package","org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar")
causeString.contains("NoSuchGroupException") || causeString.contains("PrincipalException")
StepVerifier.create(Flux.just(1).then()).verifyComplete()
logger.debug(e.getMessage(),e)
public T getMedian(){   if (count > 0) {     return values.get((int)(values.size() * .5));   }   return ZERO; } 
LOG.info("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
/**   * Gets data center replication pause state  {@code null} if replication is not paused.  * @return Data center replication pause state {@code null} if replication is not paused.  */ @Nullable public GridDrStatus pauseState(); 
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(range(ref)).descriptionAndTooltip(message)
getExitCode() != 0 || isTimeout()
tracesDir.mkdirs()
fileName.substring(lastDotIndex + 1)
TypeEvalContext.slow()
getService().hasClipboardText()
stateMap.get("CurrentURIMetaData") != null && !stateMap.get("CurrentURIMetaData").isEmpty()
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(),resource)
marketDataService.getOrderBook(CurrencyPair.LTC_USD,"LIVE")
ImmutableList<Map<String,Object>>
ack.getLastMessageId().setEntryLocator(seq)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFieldsFromImports.kt")
PublishSubject<Void>
GenericAttributeValue<Boolean>
buildJSLoaderModulesServlet(Collections.<String,Object>singletonMap("applyVersioning",Boolean.TRUE))
query.elements()
new PNGDecoder(pngStream)
Vector2D other=(Vector2D)obj; 
stack.get(stack.size() - 3).longValueSafe()
expectedStatus != 400
NOTIFICATION_TYPE_MOVE_ENTRY_TO_TRASH=5
MIN_RECALL=0.1f
mStartDelay == 0 || mSeekFraction >= 0
WebAppUtils.getResolvedRMWebAppURLWithScheme(new Configuration())
Flux.from(this.messageService.publisherPostAuthorizeBeanFindById(2L)).subscriberContext(withUser)
getStep(project,stepId)
ZLOptionEntry option
LanguageExtensionPoint<CompletionConfidence>
NavigatePointFragment.this.getContext()
selectNext(currentCellPanel,false)
/**   * Create reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonReactiveClient createReactive(){   Config config=new Config();   config.useSingleServer().setAddress("127.0.0.1:6379");   return create(config); } 
new ByteArrayInputStream(decryptedPayload)
JetBrainsAccountDialogKt.showJetBrainsAccountDialog(getRootPane())
new HighlightInfoTypeImpl(HighlightSeverity.INFORMATION,CodeInsightColors.TODO_DEFAULT_ATTRIBUTES)
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
(cls == null) || (cls.length == 0) || (!SvnVcs.getInstance(project).getName().equals(((CommittedChangeList)cls[0]).getVcs().getName()))|| (((SvnChangeList)cls[0]).getVcsRoot() == null)
UserManager.getInstance()
new URI(scheme,userInfo,server.host,server.port,path,null,null)
item.getName().equals(name)
MultiFields.getFields(index2)
mIam.getStackInfo(WINDOWING_MODE_FULLSCREEN,ACTIVITY_TYPE_STANDARD)
assertion.getSamlObject()
quad ? (val & 0x3F) : 63
assertEquals(10,batchExecutionAssistant.processedCount())
rep.saveStepAttribute(id_transformation,id_step,"file_type_field",fileTypeField)
Localization.lang("Library")
MAX_RETRIES_ON_ASSOCIATION_REJECT=16
Long.parseLong(value)
scanFeatures(getCamelKarafFeatureUrl(),"xml-specs-api","camel-core","camel-spring","camel-" + feature)
builder.setPlaceholderImage(getResources().getDrawable(ActorSDK.sharedActor().style.getAvatarBackgroundResourse()),ScalingUtils.ScaleType.CENTER_CROP)
discardChannel.receive(10_000)
logger.debug("Exception mapping responses to requests.",e)
mState.mPivotY != pivotY
activeEditor.checkModified(true)
gsonWrappedStack.toJsonTree(inputStack,WrappedStack.class)
-TimeZone.getDefault().getOffset(actualTime.getTime())
@Override public HttpResponseMessage getDefaultOutput(HttpResponseMessage input){   return input; } 
formatter != null && formatter != ValueFormatter.RAW
curOffset=0
r - scrollX
this.serviceRpcServer.addProtocol(RpcKind.RPC_WRITABLE,HAServiceProtocol.class,this)
(options & ActionBar.DISPLAY_HOME_AS_UP) != 0 ? VISIBLE : GONE
minBukkitBuildVersion=617
y
_appendables == null || _appendables.length == 0
XSourcePositionImpl.doCreateOpenFileDescriptor(project,this)
annotation.getContainingFile() == annotationOwner.getContainingFile()
@After public void clearMlState() throws Exception {   new MlRestTestStateCleaner(logger,adminClient(),this).clearMlMetadata(); } 
formatTimeMs(scanWifiLockOnTime / 1000)
(getSource().x() + getTarget().x()) / 3f
responseEncoding != null
Cell cell
currentStage != NodeStage.DONE && sendMessage() == false
scriptField.setInitialText(element.getPropertyAsString(BeanShellSampler.SCRIPT))
/**   * Sent messages count.  */ private final LongAdder8 sentMsgsCnt=new LongAdder8(); 
Exception e
"Adding new Docker node " + newNode
NotificationManager.getInstance().onMessageNotification(messageItem)
Validator.equals(value.getData(),dataString)
index <= myIntermediateCalls.size()
{abiOverride}
portlet.getPortletId()
Math.abs(delta_loss)
!blocked.isDone()
new NullPointerException("Emitter got a null throwable. Null values are generally not allowed in 2.x operators and sources.")
Map<String,Long>
previousAttribute.compareToIgnoreCase(attribute)
FLog.e(TAG,"Failed inserting a file into the cache",ioe)
DynamoDbDeploymentContextTableCache.class
Exception ex
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equalsIgnoreCase(type)
new Instant(10L)
S id
getConfig().getInt(ASKONEXIT_OPTION,1)
new UnsupportedOperationException("CorrespondingDeclaration not available for unsolved symbol.")
sMenuHeight=831
super.initialize()
uri == null || "thing".equals(uri.getScheme()) == false
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_STRING)
Response<RemoteCallResponseType>
MessagingService.instance().sendRR(cm.makeMutationMessage(),endpoint,responseHandler,false)
(InvocationTargetException)unwrapped
Integer.parseInt(System.getProperty("cassandra.memtable_row_overhead_computation_step","100000"))
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameMethod.run();   } } 
MAX_IMAGE_DIMEN=2048
".".equals(relativePath) || relativePath == null
partitionGroup.numBuffered(partition)
getBoolean(SPIDER_PROCESS_FORM,true)
putBytes(v)
IllegalArgumentException.class
doReopen(true)
MoreCollectors.toImmutableSet()
new HandlingEvent(cargo,new Date(10),new Date(20),HandlingEvent.Type.CLAIM,sesto,null)
executeCommand("EXPLAIN OPTIONAL MATCH (n) RETURN n;","No data returned")
(child.mViewFlags & VISIBILITY_MASK) == VISIBLE
MimeUtility.DEFAULT_ATTACHMENT_MIME_TYPE.equalsIgnoreCase(contentType)
isOffhook || AudioSystem.isStreamActive(AudioSystem.STREAM_VOICE_CALL)
StringBuilder curString=new StringBuilder(); 
COUNTER_UPDATER.addAndGet(this,-vs.size) <= 0
super.onActivityCreated(state)
new Resource(include,name,wrapper.isParserRestricted())
exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class,exchange,graph)
/**   * Needed for statistics.   */ private final LongAdder8 canceledJobsCnt=new LongAdder8(); 
map.substitute(path,SystemInfo.isFileSystemCaseSensitive)
e1 == null || e2 == null || Math.abs(e1.getY() - e2.getY()) > SWIPE_MAX_OFF_PATH
textDelimiterTrailing.getSelection()
root != null && root.isShowing()
validateFriendlyURL(group.getCompanyId(),group.getGroupId(),group.getClassNameId(),group.getClassPK(),friendlyURL)
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE
/**   * The upper value in the range.  * @return the upper value in the range  */ T getTo(); 
Ignition.start()
reply.setError(PacketError.Condition.not_authorized)
OAuthConstants.HAWK_TOKEN_TYPE.equalsIgnoreCase(tokenType)
atLeast(2)
args.length > index
this.urlPathHelper.getLookupPathForRequest(request)
private View mAlarmStatusCollapsed; 
ams.mContext.createPackageContextAsUser(appInfo.packageName,0,new UserHandle(userId))
closeCode < 1001
public void testJobQueues() throws Exception {   JobClient jc=new JobClient(mrCluster.createJobConf());   String expectedQueueInfo="Maximum Tasks Per Job :: 10";   JobQueueInfo[] queueInfos=jc.getQueues();   assertNotNull(queueInfos);   assertEquals(1,queueInfos.length);   assertEquals("default",queueInfos[0].getQueueName());   assertEquals(QueueState.RUNNING.getStateName(),queueInfos[0].getQueueState());   JobConf conf=mrCluster.createJobConf();   FileSystem fileSys=dfsCluster.getFileSystem();   conf=configureWaitingJob(conf);   conf.setJobName("test-job-queue-info-test");   fileSys.delete(SHARE_DIR,true);   RunningJob rJob=jc.submitJob(conf);   while (rJob.getJobState() != JobStatus.RUNNING) {     UtilsForTests.waitFor(10);   }   int numberOfJobs=0;   for (  JobQueueInfo queueInfo : queueInfos) {     JobStatus[] jobStatusList=jc.getJobsFromQueue(queueInfo.getQueueName());     assertNotNull(queueInfo.getQueueName());     assertNotNull(queueInfo.getSchedulingInfo());     assertEquals(expectedQueueInfo,queueInfo.getSchedulingInfo());     numberOfJobs+=jobStatusList.length;     for (    JobStatus status : jobStatusList) {       assertEquals(JOB_SCHEDULING_INFO,status.getSchedulingInfo());     }   }   assertEquals(1,numberOfJobs);   UtilsForTests.signalTasks(dfsCluster,fileSys,getSignalFile(),getSignalFile(),4); } 
hasPartialTag(tokens[pos - 1],"SUB","EIG","VER:AUX:3:","ADV:TMP")
image != null && image.getFile_url() != null
? super T
DataBufferUtils.read(is,this.bufferFactory,3)
mH.obtainMessage(MSG_TIMEOUT_INPUT_EVENT,seq,0,p)
List<Throwable>
name.indexOf(endQuote,startQuote.length())
!filename.endsWith(".jpg")
ATLAS_MAP_ENTRY_FIELD_COUNT=3
new DroolsParserException(e.toString(),e.getCause())
handler.update(subPackage.getValue(),dynamicEntityDao,(RecordHelper)getCompatibleModule(OperationType.BASIC))
myBuilder.restoreEolsState()
newCount <= reservoirSize
log.info("Hooking new default : onOperatorError")
request.setAttribute("liferay-ui:asset-display:assetEntry",assetEntry)
query.field("relyOnPrevCycle").equal(false)
this == NTI_ONLY
items[20]
safeClose(connection)
/**   * Rest integration test. runs against external cluster in 'mvn verify'   */ public class RestIT extends ESRestTestCase {   public RestIT(  RestTestCandidate testCandidate){     super(testCandidate);   }   @ParametersFactory public static Iterable<Object[]> parameters() throws IOException, RestTestParseException {     return createParameters(0,1);   } } 
forceShutdown(t)
annotationReader.ofTypeVariableBound(index)
UpgradeStepRegistrator.class
(flags & Const.FLAG_FLOAT) != 0x0
prjFile.getParent()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(refElement)).descriptionAndTooltip(message)
failureDesc.contains("14807") || failureDesc.contains("14883") || failureDesc.contains("13456")|| failureDesc.contains("11340")
AbstractBootstrap<ServerBootstrap,ServerChannel>
new Translog.DeleteByQuery(new byte[]{4},null)
zeroState[1][1]=0.251F
LOG.warn(rootPath + "is not a directory")
logger.debug("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice())
assertFalse(bulkResponse.buildFailureMessage(),bulkResponse.hasFailures())
this.mTitle.compareToIgnoreCase(another.mTitle)
owner != null && originalElement != null
result.getName()
error == null && dataFilter != null
typeResolver.resolveAbbreviatedType(scopeWithTypeParameters,typeReference,trace)
Object value=nsDictionary.get(convertKey(key)); 
id=15
UpgradeStepRegistrator.class
64 * 1024
LOG.error(result.getDescription(),t)
U.resolveWorkDirectory(U.defaultWorkDirectory(),"marshaller",false)
/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IllegalArgumentException {   return JSON.writeValueAsString(object); } 
contentWritten == 0
mListener.getConnectionId() != -1 && request.mConnectionID != null
BodyExtractor<Mono<MultiValueMap<String,String>>,ReactiveHttpInputMessage>
DEBUG_RC=false
XContentType.JSON.mediaType()
new Short(getShortValue(workingMemory,object))
new PageException("不支持该SQL转换为分页查询!",e)
JavaConversions.asJavaIterable(logManager.allLogs())
return 0L; 
checkNotNullOrEmpty(resource,"Resource should not be null")
new KillableColoredProcessHandler(finalCommandLine,true){   @Override public void startNotify(){     if (myShowGoEnvVariables) {       GoRunUtil.printGoEnvVariables(finalCommandLine,this);     }     super.startNotify();   } } 
w.createReadableString()
getIEuiccController().getEid(mCardId,mContext.getOpPackageName())
window.activate(null,false,false)
NullableCoder.of(StringUtf8Coder.of())
className.lastIndexOf("org.openmrs.")
StringUtil.isBlank(raw) || raw.equalsIgnoreCase("null")
packet.getType() != IQ.Type.result && packet.getType() != IQ.Type.error
logger.debug("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size)
P params
new IllegalStateException("Not a time field: " + field)
checkDatabaseConnection(monitor)
new BitSetFlags(permanentGraph.nodesCount(),false)
taskClass.findClassAttribute("negative_opt",true)
readers[i].doDelete(n - starts[i])
LocalFileSystem.getInstance().findFileByIoFile(parentIoFile)
getDefaultCountry()
exec("p4","-d",workingDir,"sync","-f","@" + parseLong(revision))
!paragraphNote.getId().equals(this.getId())
FIXED_VIEWPORT=17
nextIdx + 1
public static VideoContent createRemoteVideo(FileReference reference,int w,int h,int duration,FastThumb fastThumb){   return new PhotoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration)))); } 
appMode.getMapIconId()
showMessage(context.getString(R.string.error_calculating_route_occured),Toast.LENGTH_LONG)
TYPE_DEBUG.equals(type)
Context.getPermissionsManager().checkAttribute(getUserId(),entity.getAttributeId())
fetch.get(associationName)
ZonePlannerMapDataServer.instance.getChunk(ctx.getServerHandler().playerEntity.worldObj,message.chunkX,message.chunkZ,zonePlannerMapChunk -> {   BCMessageHandler.netWrapper.sendTo(new MessageZonePlannerMapChunkResponse(message.chunkX,message.chunkZ,zonePlannerMapChunk),ctx.getServerHandler().playerEntity); } )
mMMatrix.leftMultiply(parentMatrix)
String.format("%s:%s:%s:%s",getModuleGroup(),getModuleName(),getModuleVersion(),configuration)
worldEdit.getBlockRegistry().parseFromListInput(component,context)
new ChannelInboundHandlerAdapter(){   @Override public void channelWritabilityChanged(  ChannelHandlerContext ctx) throws Exception {     buf.append(ctx.channel().isWritable());     buf.append(' ');   } } 
!SettingsUtils.hasJobTransportPoolingKey(settings)
hash != 0 && hash == this.lastDeviceListNotificationHash
Assert.assertEquals(31,resultAll)
m.size()
Map<List<Object>,T>
builder.startObject("upgraded_indices")
private final Object key; 
jid != null && jid.getContent() != null
checkNotNull(checker.getAnnotation(BugPattern.class),"BugCheckers must be annotated with @BugPattern")
mScrollView.post(() -> mScrollView.restoreDefaultFocus())
public String comments() default ""; 
LensPositionSelectors.front()
assertEquals("TEST-001 Summary",activeChangeList.getName())
{14,3.5f}
Color.blue(color)
convertView == null || convertView.getTag() == null
mService.reassociate()
queryMixin.rightJoin(target)
StringBuilder message=new StringBuilder(); 
http2Stream.garbageCollector()
log.error("Could not set transaction isolation: {}@{}",isolation,System.identityHashCode(dsc),ex)
ctClass.getDeclaredMethod("paintBackground")
super.onStop()
verifyPosition(decoder,text("359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"))
sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } )
MUCOwner iq=new MUCOwner(); 
new Camera(settings.getWidth(),settings.getHeight())
new Coordinator(node.getName(),clusterService.getSettings(),clusterService.getClusterSettings(),transportService,namedWriteableRegistry,allocationService,masterService,() -> persistedState,hostsResolver -> testClusterNodes.nodes.values().stream().filter(n -> n.node.isMasterNode()).map(n -> n.node.getAddress()).collect(Collectors.toList()),clusterService.getClusterApplierService(),Collections.emptyList(),random())
pOtherShape instanceof Line
mRejectTimes[i]
ChannelBuffers.wrappedBuffer(bytes,0,length)
new IllegalStateException(sm.getString("coyoteResponse.setBufferSize.ise"))
Set<IConfigurationListener>
name.equals("Devices") || name.equals("UUIDs")
inventory.getStackInSlot(i).stackSize >= inventory.getStackInSlot(i).getMaxStackSize() || inventory.getStackInSlot(i).stackSize >= inventory.getInventoryStackLimit()
true || IS_USER_BUILD
return mIdleTimeMillis; 
12 * ClassSize.REFERENCE
JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,funType.toString(),UniqueNameGenerator.getOriginalName(typeParam),types.toString(),funType.toString())
LibraryTableEditor.editLibraryTable(getProjectLibrariesProvider(),myProject)
JvmDeclarationOriginKt.OtherOriginFromPure(myClass)
editor.selectNextTab()
ctx.getMapViewTrackingUtilities()
VfsUtilCore.getRelativePath(mainClassFile,sourceRoot,'/')
POLL_PERIOD=1000L
TaskDisplayNameMixin.class
new StatsLogEventWrapper(SystemClock.elapsedRealtimeNanos(),tagId,10)
new InputStreamReader(resourceInputStream,encoding)
isPushGroupConversation()
DatabaseDescriptor.getListenAddress().getHostAddress()
CompanyService.class
domElement != null && domElement.getXmlTag() != null
Namespace.CURRENT.getUriString()
Assert.assertEquals(_memoryClusteredJobs.toString(),2,_memoryClusteredJobs.size())
Thread.sleep(3000)
ClassHelper.make(SoftReference.class,false)
builder.humanReadableField(HttpRequest.Field.READ_TIMEOUT.getPreferredName(),HttpRequest.Field.READ_TIMEOUT_HUMAN.getPreferredName(),readTimeout)
CommonProblemDescriptor[]
component.setStrikethrough(object.get("strikethrough").getAsBoolean())
FilteredBatchServerViewProvider.class
value == Integer.MAX_VALUE
Class.forName(className.replace('/','.'),true,Thread.currentThread().getContextClassLoader())
case ABORT_BUILD: 
new PebbleHealthActivitySample(stepsRecord.timestamp,deviceId,userId,stepsRecord.getRawData(),stepsRecord.intensity,stepsRecord.steps)
45 * displayMetrics.density
eligible.size() > allowedSegCountInt
path.lastIndexOf(';')
mService.stopLocalOnlyHotspot()
SimpleAttributeDefinitionBuilder.create("max-backup-index",ModelType.INT,true)
distinctValues.put(slice,distinct)
mAccount.setChipColor(AccountSettings.this,color)
FileTemplateManager.getDefaultInstance()
c.getOpenCount()
maxCallCount=100
UrlUtils.isStartPageUrl(currentTab.getUrl())
duration(0,15,18873,0)
updateCondition.isInternal()
mIconBase.clone().iconText((String)mIcons.get(i))
context.init(servletContext,httpServletRequest,httpServletResponse)
30 * 60 * 1000
propertiesComponent.setValue(CONFIGURED_V2,"true")
JDBCUtils.safeGetLong(dbResult,"id")
@Override public Long call() throws Exception {   MessageCountResponse response=api.get(MessageCountResponse.class).path("/count/total").execute();   return response.events; } 
new JSyntaxTextArea(10,50)
logger.trace("[{}] not acking store deletion (not a data node)",index)
quad.toUnpacked(DefaultVertexFormats.ITEM)
planDetailJson.getProduct()
Map.Entry<String,RealmObjectSchema>
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_MARK_AS_FINALIZED,true)
DefaultCacheKeysFactory.staticCreateNaturalIdKey(naturalIdValues,persister,session)
Site.me().setRetryTimes(3).setSleepTime(1000)
environmentSubstitute(getWorkDirectory())
mExpandedGroup != -1 && mExpandedGroup != groupPosition
source.getAddress() == null || source.getAddress().length() == 0
public static Object replaceCommandVars(String token) throws Exception {   Matcher matcher=_pattern.matcher(token);   if (matcher.matches() && _commandMap.containsKey(matcher.group(1))) {     return getValueFromCommandMap(matcher.group(1));   }   matcher.reset();   while (matcher.find() && _commandMap.containsKey(matcher.group(1))) {     String varValue=getStringFromCommandMap(matcher.group(1));     token=StringUtil.replace(token,matcher.group(),varValue);   }   return token; } 
Messages.showErrorDialog(myMainPanel,"Error updating package list: " + e.getMessage(),"Reload List of Packages")
Object[]
"Cannot guess file extension for invalid MIME type: '" + mimeType + "'"
mDiskCache.put(diskKey,value)
LOGGER.warn("Could not perform drage and drop",nfe)
id=51
AnkiDroidApp.deck().setUndoEnd(undoName)
message.getMessageId().setEntryLocator(sequenceId)
mService.reassociate(mContext.getOpPackageName())
Configuration.getInstance().setHostInjectionEnabled(host,Collections.singleton(languageId),true)
mCameraUser.submitRequest(request,false)
Loader.loadClass(klass,mName)
mRS.nScriptIntrinsicBLAS_Double(getID(mRS),RsBlas_dsyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha,A.getID(mRS),B.getID(mRS),beta,C.getID(mRS),0,0,0,0)
ImmutableSortedMap<String,T>
(Short)args.get("damage")
pm.performDexOpt(pkg,null,true)
start + emoji.length()
StringBuilder buffer=new StringBuilder("SynchronizedAttributeAccessor: ["); 
ImmutableSet.of("~key","~value","~id","~nid","~label","~adjacent","~timestamp","~ttl","~visibility","key","vertex","edge","element","property","label","~T$VertexExists","~T$SchemaName","~T$SchemaDefinitionProperty","~T$SchemaCategory","~T$SchemaDefinitionDescription","~T$SchemaUpdateTimestamp","~T$SchemaRelated","~T$VertexLabel")
public T addProgressListener(ProgressListener listener){   operationParamsBuilder.addProgressListener(listener);   return getThis(); } 
public static BuildConfigSpec addBuildParameterGitSource(BuildConfigSpecBuilder builder,String gitUrl){   return builder.withNewSource().withType("Git").withNewGit().withUri(gitUrl).endGit().endSource().build(); } 
pointer.isEmpty() || pointer.equals("#")
log.info("")
pm.hasSystemFeature(PackageManager.FEATURE_NFC,0) || pm.hasSystemFeature(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION,0)
!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())
!components.isInstalled(service,"CLIENT")
UpgradeStepRegistrator.class
converter.tryConvertTo(rightValue.getClass(),leftValue)
vel < mFlingExpandMinVelocityPx
id=10869
a.getDimensionPixelSize(R.styleable.CollapsingToolbarLayout_scrimVisibleHeightTrigger,-1)
new BuildRuleParams(params.getBuildTarget(),() -> ImmutableSortedSet.<BuildRule>naturalOrder().addAll(swiftCompileRules).addAll(implicitSwiftCompileRules).addAll(cxxDeps.getDeps(ruleFinder)).addAll(preprocessor.getDeps(ruleFinder)).build())
tfp != null && ctxt.isPrototypeMode()
sm.getString("apr.read.error",Integer.valueOf(-result),Long.valueOf(socket),wrapper)
FileUtils.setPermissions(fstr.getFD(),0640,SYSTEM_UID,PACKAGE_INFO_GID)
dataTypeName.replaceFirst("\\s*\\{.*","")
item.isFile()
Futures.transformAsync(attemptTwoLevelStore(info,output),input -> {   if (input) {     return Futures.immediateFuture(null);   }   return delegate.store(info,output); } ,MoreExecutors.directExecutor())
FileUtil.isAncestorThreeState(dir.getPath(),changeCandidate.getPath(),false)
request.getParams() != null && !request.getParams().isEmpty()
mQueryTextView.length()
inputManager.isCursorVisible() && evt.getButtonIndex() >= 0 && evt.getButtonIndex() <= 2
TwitterRestClient.get("statuses/public_timeline.json",null,new JsonHttpResponseHandler(){   @Override public void onSuccess(  Object response){     JSONArray timeline=(JSONArray)response;     try {       JSONObject firstEvent=timeline.get(0);       String tweetText=firstEvent.getString("text");       System.out.println(tweetText);     }  catch (    JSONException e) {       e.printStackTrace();     }   } } )
rulesJars.exclude(excludedJar)
input.doubleValue() != value.doubleValue()
fullyAdjustInvoiceAndCheckForCompletion(account,invoicesToAdjust.get(i),NextEvent.INVOICE_ADJUSTMENT,NextEvent.INVOICE_ADJUSTMENT)
DEFAULT_TETHER_OFFLOAD_DISABLED=1
ticket.notifyAll()
new Dimension(750,600)
createLightFile("Test.java","class Test extends Type<A, B, C, D> {\n}")
allDeleted || cacheFileList.length == 0
(View)convertView.findViewById(R.id.repost_flag)
getFragmentManager()
guiResource.getImageTransGraph()
v.isString() && meta.isEnclosureForced() && !meta.isPadded()
DEPENDENCIES dependencies
ImageUtilities.createBufferedImageForDisplay(capture.getNextFrame())
SCAN_STATUS_COMPLETE=2
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_DISABLED,0,null,false)
private ExceptionHandler exceptionHandler; 
opCodes[0x85]
new Duration(30,SECONDS)
Context.newBuilder("java").option("java.AllowClassLoading","true")
UnitBitSet.MAX_CHARS_IN_WORD < letters.length()
new MccEntry(230,"cz",2,"Europe/Prague","cs")
new Ticker.Builder().currencyPair(pair).bid(kcTick.getBuy())
responseRaw(p)
IndexerRegistryUtil.getIndexer(baseModel.getModelClass())
mService.addOrUpdateNetwork(config)
GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx")
Exception ex
LOG.info(title + "; " + message)
new IndexMetadata(column,row.getString(INDEX_NAME),type)
getStepIOMeta().getInfoStreams()
findMethod(expr,ClassHelper.STRING_TYPE,name,args)
times + BASE_FILE_NUMBER
buffer == null || buffer.getWidth() <= 1 || buffer.getHeight() <= 1
SmartEnterProcessors.INSTANCE.allForLanguage(language)
DirectoryReader.openIfChanged(oldReader,writer.w,true)
Stream.of(BRIDGE_TYPE,THING_TYPE_PRESENCE_SENSOR,THING_TYPE_DAYLIGHT_SENSOR,THING_TYPE_POWER_SENSOR,THING_TYPE_LIGHT_SENSOR,THING_TYPE_TEMPERATURE_SENSOR,THING_TYPE_SWITCH)
super.onContextItemSelected(item)
rs.getMetaData()
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).log().retryBackoff(4,Duration.ofMillis(100)).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(3)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
ImmutableList.of(sourceNode)
new IllegalArgumentException(JSON_BUILDER + "invalid element")
preMergedCustomer.isRegistered()
err == 0
cls != null && cls.isValid()
csFoldingEnabled=UIUtils.createCheckbox(foldingGroup,"Folding enabled","Use folding in SQL scripts.",false,2)
ClientTest.class
resultList.last()
log.error("Exception while processing message: " + e,e)
required=false
client.setIgnoreExternals(false)
hasColumn(oldTableName,"templateId")
curArticle.getId()
mAvailablePhysicalRequestKeys == null
SessionClicks.get(request.getSession(),"ignoreUserLocaleOptions",Boolean.FALSE.toString())
new PackageConfig("namespacePackage")
new BlockFamilyRegistryImpl()
c < 28
new ValidationException("Unable to deserialize string '" + base64String + "' of base class '"+ baseClass.getName()+ "'.",e)
LOGGER.error(msg.apply())
now >= deadline
name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("junit.")|| name.startsWith("sun.")|| name.startsWith("com.sun.")|| name.contains("cglib")
mFile.getStoragePath()
parser.parse("-u",username,"-p",password,"-U",url)
WindowsResourceScriptPlugin.class
this.messageService.fluxPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
MainActivity.class
info.crashInfo.stackTrace != null && info.crashInfo.stackTrace.length() > 10000
mForegroundTintResId=array.getResourceId(1,0)
case IGNITE: 
UndertowLogger.ROOT_LOGGER.debug("JDK9 ALPN not supported")
endFunction("write_column_statistics: ",ret != false,null)
graphVersion.incNodeAndEdgeVersion()
token.equals("?") && !prevToken.equals("!") && !prevToken.equals("\u00a0")&& !prevToken.equals("\u202f")
case 16: 
ph.setTimeStampGroups(groupsFile.lastModified())
result=true
result.assertJson(this.getClass(),"search_debt_rule.json",false)
obj1.isLoose && obj2.isLoose
makeString(list,",","(",")")
p.matcher(s)
builder().incompatibleBzlDisallowLoadAfterStatement(false).incompatibleCheckedArithmetic(true).incompatibleComprehensionVariablesDoNotLeak(true).incompatibleDepsetIsNotIterable(false).incompatibleDictLiteralHasNoDuplicates(true).incompatibleDisallowDictPlus(false).incompatibleDisallowKeywordOnlyArgs(true).incompatibleDisallowToplevelIfStatement(true).incompatibleListPlusEqualsInplace(true)
!Const.isEmpty(tablename)
new EmptyRepository.MyRepositoryElementsManager(psiManager,myRepositoryManager)
scanFeatures(getKarafFeatureUrl(),"jetty")
model.setSortByStatus(true)
socket.setSoTimeout(1000)
public EdgeNGramTokenFilter create(TokenStream input){   return new EdgeNGramTokenFilter(input,side,minGramSize,maxGramSize); } 
lp.height != defaultHeight && !mOverlayContent
waitUntil(() -> pongsReceived.get() == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000)
new ClusterTopologyCheckedException("Failed to send message to node (has node left grid?): " + nodeId)
mSelecting=true
@Self Statement currentStatement
factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)
Exception e
Cat.w(t)
playbackService != null && media != null
latch.await(70,TimeUnit.MILLISECONDS)
size >= min && size <= max
configuration.numEvents*=10000
delta < radius
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicDistributedTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
failOrAccept(prevAccept,input,closure,t)
repositoryEntry == null
t instanceof InvalidToken || t.getCause() instanceof InvalidToken
UPGRADE_TASKS
GrailsDataBinder.createBinder(instance,instance.getClass().getName(),request)
getOriginalAmount().subtract(remainingAmount)
(flags & 0x01) != 0
loadedTextures.size()
activeSyncAccountIds.add(syncAccount.getSyncAccountId())
setSelectedCell(panel,false)
fileName.startsWith("/") || fileName.matches("^[A-z]:\\\\\\S+$")
!getAllDeviceItems(deviceId).contains(commandId)
InheritableThreadLocal<Integer>
String.format(Locale.ROOT,"Warning:  Could not parse [%s] for roles verification. Please revise and fix it. Nonetheless, the user will still be associated with all specified roles",rolesFile.toAbsolutePath())
index.retrieve(between(TransactionIndex.TIMESTAMP,beginInMilliseconds,endInMilliseconds))
jfe.getMapCounters()
filteredItems.get(index)
mThemeStore.getWpComThemeByThemeId(themeId)
LOG.debug("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is "+ firstBadLink)
ordering.compare(info.startOffset,caretOffset) > 0 && ordering.compare(info.endOffset,caretOffset) > 0
SizeWidget.class
/**   * This is  {@link CasWebflowServerSessionContextConfigurationTests}.  * @author Misagh Moayyed  * @since 5.0.0  */ @TestPropertySource(properties="cas.webflow.session.storage=true") public class CasWebflowServerSessionContextConfigurationTests extends BaseCasWebflowSessionContextConfiguration {   @Autowired @Qualifier("loginFlowExecutor") private FlowExecutor flowExecutorViaServerSessionBindingExecution;   @Override public FlowExecutor getFlowExecutor(){     return this.flowExecutorViaServerSessionBindingExecution;   } } 
10 * 1024
String.format(Locale.ROOT,"route weight: %.6f (CH) vs. %.6f (no CH) (diff = %.6f)",chWeight,noChWeight,(chWeight - noChWeight))
LanguageFolding.INSTANCE.forLanguage(elements[0].getLanguage()) instanceof CustomFoldingBuilder
title.length() > 17
assertThat(stack.selectAllIssues()).isEmpty()
RepositoryDirectoryUI.getTreeWithNames(newJob,rep,dircolor,sortColumn,includeDeleted,ascending,false,true,directoryTree,null,null)
Log.setTraceEnabled(JiveGlobals.getBooleanProperty(Log.LOG_TRACE_ENABLED,false))
flow.getUpdateTime() >= updateTime
args0.length > 1
cfs.getMemtableFlushAfterMins() * 60 * 1000L
LinkedHashMap<String,String>
"Failed to generate [" + extraSource + "]"
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/smart/SuperMembers.kt")
moveLock(orig,dest)
private void showMatch(final Server server,final CommandSender sender,final String match) throws PlayerNotFoundException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(match);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     showExp(sender,player);   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
len >= 1000
response.getStatusCode() / 100 == 4 || response.getStatusCode() / 100 == 5
getLog().debug("Module name is " + moduleName)
myComponentsRegistry == null || !myComponentsRegistry.containsInterface(interfaceClass)
ResponseEntity<Object>
LOG.warn("Syslog message is missing date or date could not be parsed. (Possibly set {} to true) " + "Not further handling. Message was: {}",SyslogInputBase.CK_ALLOW_OVERRIDE_DATE,new String(msg.getRaw()))
BrowseCap.isChrome() || BrowseCap.isMacintoshDesktop()
id=10852
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
CookieHelper.addCookie(KEYCLOAK_REMEMBER_ME,username,path,null,null,31536000,secureOnly,true)
field.getFieldName().equalsIgnoreCase(s)
hasColumn("MicroblogsEntry","receiverUserId")
new MockNode(settings,Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
localBinder.getServiceInstance().restartScan()
new WrappedEpoxyModelClickListener(this,clickListener)
tryHarder ? 8 : 4
Thread.sleep(300)
model.getDb().getTableHistory().getHistoryIdsOfHistType(getSessionId(),HistoryReference.TYPE_SPIDER,HistoryReference.TYPE_BRUTE_FORCE,HistoryReference.TYPE_SPIDER_AJAX)
subProperties.putIfAbsent(subName,value)
new TestUserResource()
filterJson != null && !filterJson.isEmpty()
line.startsWith(StringPool.TAB + "public abstract class ") || line.startsWith(StringPool.TAB + "public class ") || line.startsWith(StringPool.TAB + "public enum")
return checksumtypeDescs; 
StringBuilder buffer=new StringBuilder("["); 
accountCapsule.getLatestAssetOperationTime(tokenName)
Preconditions.checkNotNull(nativePlatforms.get(targetCpuType),"Unknown platform type " + targetCpuType.toString())
CoreRegistry.get(InventoryManager.class).removeItem(owner,EntityRef.NULL,pickupItem,false,1)
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
NoClassDefFoundError ignored
DropTreesOfSnapshots::handle
itemTop >= headerBottom
source.isNodeDescendant(target)
tracker.timeUpperBound=1000
this.keycloakSession.users().getServiceAccount(clientSession.getClient())
rs.getNString(columnName)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,methodHandleLoaded))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
private MultiplePermissionsListener listener; 
setLowHighExpected(lowResults,highResults,expectedResults,MUC_TP,5965,5970,5965)
!addressStreet2Present
log.debug("Can not authenticate " + ac.getUsername() + " due to "+ e.toString(),e)
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.2f)
GroupServiceUtil.addGroup(name,description,type,StringPool.BLANK,true,true,serviceContext)
Timber.i("Dismiss dialogs")
row("p_comment",null,7.0,0.0,null,null,null)
Localization.menuTitle("File")
Collection<GridDrStateTransferDescriptor>
runUTRunner(PathManager.getHomePath(),"true")
DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS=0
Utils.createInformativeDialog(context,mContext.getResources().getString(R.string.title_error),mContext.getResources().getString(R.string.dialog_import_error))
!mStatus.showStatusLines() || (mCharging == null && mNextAlarm == null)
new KettleRowException("Couldn't find hop '" + from + "' to read from")
OK(R.drawable.sense_ok,R.string.normal,R.string.detail_info_normal)
isSimple=false
CollectionAdminRequest.createCollection("halfdeletedcollection2","conf",4,3)
extras.getInt("fragment",prefs.getInt("default_view",0))
new JCacheProducer(this,cacheConfiguration)
trim.equals(inspectionToolID) || trim.equalsIgnoreCase(ALL)
mCol.getDb().queryLongScalar("SELECT nid FROM cards WHERE id = " + id)
ctx.write(msg,promise)
SceneApplication.getApplication().getRenderer().readFrameBufferWithFormat(offBuffer,cpuBuf,Format.BGRA8)
r.setAltitude(alt)
docErrors.entry(i)
"Use " + ATT_LOGOUT_SUCCESS_URL + " or "+ ATT_LOGOUT_HANDLER+ ", but not both"
RowKey.prefixKeyWithSalt(key)
new NotificationCompat.BigTextStyle().bigText(newErrorMessage)
JavaSdkImpl.getMockJdk15("java 1.5")
CLEAR_OUTPUT_DIRECTORY=true
Status.createStatuseList(get(getBaseURL() + "statuses/home_timeline.json",true))
ImmutableList.of(new ExpressionPostAggregator("a3","log((\"a1\" + \"a2\"))"),new ArithmeticPostAggregator("a4","quotient",ImmutableList.of(new FieldAccessPostAggregator(null,"a1"),new ConstantPostAggregator(null,0.25))))
mChildrenExpanded ? mDividerHeight : mChildPadding
IOException e
Utils.intNow(1000)
_testUploadPortlet.put(testFileEntry)
Thread.sleep(51)
JwsSignatureVerifier validator
addEnergy(10)
logger.warn("[{}] {}",request.getJobId(),msg)
nameMethod.invoke(hero)
public Integer getHeight(){   return height; } 
newExecutionInput().requestString(parameters.getQuery()).operationName(parameters.getOperationName()).variables(parameters.getVariables())
COOKIE_SYNC_MANAGER=true
event.causeOfChange == CommentAction.PUSH_COMMENT
bufferedBytes < maxBufferedBytes
!subtype.containsExtraValueKey(SUBTYPE_EXTRAVALUE_EXCLUDE_FROM_LAST_IME)
notebook.createNote(null)
fileSystem.renameFile(backup,file)
in.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
new ArrayList<Object>(literalList.size())
new ZuulException(errorMsg,causeMsg,true)
getCode().split("\n",-1)
assertEquals(CodecFactory.deflateCodec(6).toString(),write.getCodec().toString())
!content.contains("&")
!allowPrivate.isNull()
populateUi()
m.getName().equals(e.getMethodName()) && m.getAnnotation(Test.class) != null
panel.getTabIndex() == 0 && tab.indexOfComponent(panel) != -1
stmt.setDate(1,date)
assertEquals((CodecFactory.fromString(codec).toString()),codecFactory.getCodec().toString())
new IllegalStateException("Advertising can't be both connectable and scannable")
CachePutAllCodec.encodeRequest(nameWithPrefix,entries,expiryPolicyData,completionId)
group.shutdownGracefully(0,10,TimeUnit.SECONDS)
Person2 person=new Person2(); 
new CleanupWorker(preset,panel.getBibDatabaseContext().getMetaData().getFileDirectory(Globals.FILE_FIELD),null,Globals.journalAbbreviationLoader.getRepository())
saleAdjustmentPrice.lessThanOrEqual(retailAdjustmentPrice)
PublisherPeek<T>
alterStatement.getUpdateColumns().put(oldName,oldDefinition)
DiagnosticType.warning("JSC_MISPLACED_TYPE_ANNOTATION","Type annotations are not allowed here. " + "Are you missing parentheses?")
new CamelExchangeException("JettyClient failed with state " + exchangeState,exchange,exchange.getException())
page < 0
Status.createStatuseList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json"))
arguments.add(0,"--jmxlocal")
near.getAndRemove(key)
project.getUserData(CONTENT_SCOPE_KEY)
paramNames != null && paramNames[i] != null
from("direct:b").delay(1000)
fragmentCollectionPersistence.findByGroupId(groupId,start,end,orderByComparator)
getProperties().put("hibernate.connection.handling_mode","DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT")
LOG.debug("Finding all components using class resolver: {} -> {}",new Object[]{resolver})
CCMBridge.ipOfNode(1)
new IgniteCheckedException("Failed to start near cache " + "(a cache with the same name without near cache is already started)")
clients.inMemory().withClient("my-trusted-client").authorizedGrantTypes("password","authorization_code","refresh_token","implicit").authorities("ROLE_CLIENT","ROLE_TRUSTED_CLIENT").scopes("read","write","trust").accessTokenValiditySeconds(60).additionalInformation("foo:bar","spam:bucket","crap")
clientState.getRawKeyspace()
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateLastParam",m.getName(),m.getClass().getName()))
@Autowired ApplicationEvents applicationEvents; 
BaseBulletTest.init()
_value instanceof NotValue
height - (int)maxY
toolItem.getParent()
(startTime + 500) / 500
!mIsInitialized
getLocalizationXmlFromPreferences(preferences,portletRequest,parameter,null,defaultValue)
BooleanQuery[]
super.getAttributeAsString(FOUNDATION_ATTR_NAME)
metricName.toString()
scheduleUpdate(10)
com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(mAm.mContext,TAG,pw)
new Text(this.comboComposite,SWT.READ_ONLY)
VMRuntime.registerAppInfo(profileFile.getAbsolutePath(),appInfo.dataDir,codePaths.toArray(new String[codePaths.size()]),null)
Exception.class
new DatagramSocket(SSDP_PORT)
windowSize=Long.parseLong(cmd.getOptionValue(CLI_WINDOW_SIZE)) * DAY_IN_MS
rsWrap.getMobFileCacheMissCount()
elementAtOffset == null || elementAtOffset.getNode() == null
any()
Response.ok(null,MediaType.TEXT_PLAIN)
new ByteArrayResource(groovyPages.get(location).getBytes("UTF-8"),location)
getLastCustomNonConfigurationInstance()
xml.halfOpenElement(getElementName())
routes.ExtractorsResource().create(input.getId())
MacMessages.showYesNoDialog(title,message,yesText,noText,WindowManager.getInstance().suggestParentWindow(project))
log.err("Could not annotate via server! Trying to annotate locally...",t)
ApplicationManager.getApplication().invokeAndWait(() -> {   if (myProject.isDisposed())   return;   myProject.getMessageBus().syncPublisher(BranchChangeListener.VCS_BRANCH_CHANGED).branchHasChanged(branchName); } )
null == result || XmlSuite.DEFAULT_JUNIT.equals(result)
addInfo("URL [" + url + "] is not of type file")
new Dimension(30000,GRID_SIZE)
IntrospectionSupport.setProperties(config,componentProperties)
CustomPrefixesActivity.class
@RequestMapping
logger.warn("InfluxDB is not yet connected")
_isAtLineEnd(detailAST)
new LeftTuple(new DefaultFactHandle(1,"cheese"),null)
rows.get(0).key.key.equals(startKeyBytes)
poolProperties.getRemoveAbandonedTimeout() * 1000L
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_PUT,updateVal,true,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
GithubNotifications.showErrorDialog(myPane,"Login Failure","Can't login: " + GithubUtil.getErrorTextFromException(ex))
mCachedDevice.onProfileStateChanged(mPanProfile,BluetoothProfile.STATE_DISCONNECTED)
new ObjectMapper().readerFor(DiskBalancerVolume.class)
entry.getValue().getIdentifiesControllerService() != null && props.get(entry.getKey()) != null
Log.w(TAG,"Unable to resolve SystemUI's UID.",e)
return name; 
BinaryFunction<Object>
diff <= freeLimit
description != null && description.length() < 100
DEFAULT_TO_EXPERIMENTAL_WEBVIEW=false
_buildTemplateWithGradle("npm-jquery-portlet","jquery-dependency-management","--dependency-management-enabled")
USE_COMPASS_IN_NAVIGATION.setModeDefaultValue(ApplicationMode.CAR,true)
new JtxTests()
getDoubleValue(key,0)
new AccountCapsule(ByteString.copyFromUtf8(ACCOUNT_NAME_SECOND),ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),AccountType.Normal,300_000_000L)
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_NAME + " in manifest. Falling back to default")
assertEquals(2,unindexedFieldNames.size())
new IllegalStateException("Failed to create temp directory",e)
layoutLocalService.addLayout(user.getUserId(),group.getGroupId(),false,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,"Portlets",null,null,LayoutConstants.TYPE_PORTLET,false,"/portlets",new ServiceContext())
public class XpathRegressionRequireThisTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"7:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_VARIABLE,"age","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisOne']/OBJBLOCK" + "/METHOD_DEF[@text='changeAge']/SLIST/EXPR/ASSIGN[@text='age']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RequireThisCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRequireThisTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RequireThisCheck.class);     moduleConfig.addAttribute("validateOnlyOverlapping","false");     final String[] expectedViolation={"9:9: " + getCheckMessage(RequireThisCheck.class,RequireThisCheck.MSG_METHOD,"method1","")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRequireThisTwo']/OBJBLOCK" + "/METHOD_DEF[@text='method2']/SLIST/EXPR/METHOD_CALL[@text='method1']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
executionStats.getStartedSplits()
ResourceResolver.create(sProjectResources.getConfiguredResources(config),sFrameworkRepo.getConfiguredResources(config),themeName,false)
typedAction.getRawHandler()
new SoftReference(result,queue)
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName())
reusedBytes()
{LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT,LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES,LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER}
line.startsWith(StringPool.TAB + "private abstract class ") || line.startsWith(StringPool.TAB + "private class ") || line.startsWith(StringPool.TAB + "private enum ")
v.makeCopy(null)
assertThat(provider.fetchCount,is(1))
mAppOpsManager.noteOpNoThrow(outAppOp[0],callingUid,attrs.packageName)
_sharingEntryService.addOrUpdateSharingEntry(user.getUserId(),classNameId,classPK,themeDisplay.getScopeGroupId(),shareable,sharingEntryPermissionDisplayActionKey.getSharingEntryActionKeys(),expirationDate,serviceContext)
StringUtils.isNullOrEmpty(id)
writeStartElement(null,localName,namespaceURI)
SequenceBatchCSVRecord.class
new Font(nodeFontName,nodeFontStyle,nodeFontSize)
List<MiddleEntity>
FileEntry.class
(Integer)strategy.getOrNull("test",third)
tenantApi.uploadPluginConfiguration(pluginName,pluginConfig,requestOptions)
findAnnotationAttributes(element,annotationType.getName())
fieldType instanceof PsiPrimitiveType || fieldType instanceof PsiArrayType
app.getAudio().newAudioRecoder(44100,true)
new IllegalStateException("Advertising can't be both connectable and anonymous")
defaultMaxRowsInMemory=75000
? extends T
String.format("The variables input contains a field name '%s' that is not defined for input object type '%s' ",fieldName,GraphQLTypeUtil.getUnwrappedTypeName(graphQLType))
"Unknown or Unsupported Option '" + key + "'"
client.getVertx().setTimer(1000,id -> checkExpired())
@Alive protected AllocatableValue deltaValue; 
assertEquals(1,resultList.size())
app.invokeLater(() -> Messages.showErrorDialog(text,title),ModalityState.any())
VERSION=28
!isAccountManagedByCaller(account.type,callingUid,user.getIdentifier()) && !isSystemUid(callingUid) && !isProfileOwner(callingUid)
messageBus.replace(createSynchronousDestination(destinationName),false)
mapper.setAttributePrefix("")
assertViolations(result,0,2)
c >= 0x80
ApplicationManager.getApplication().isUnitTestMode() ? 1 : 2
ImmutableList<PersistentLocalScope>
/**   * GridGain message.   */ IGNITE
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,NO_TYPES,Arrays.asList(expected),map(),NO_EXTEND_DECLARATIONS)
create.fetch(meta().getSchemas(),SQLDataType.VARCHAR)
DefaultCacheKeysFactory.staticCreateEntityKey(id,persister,factory,tenantIdentifier)
DefaultAlluxioWorker.class
findById(type,1)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethodsNoDuplicates.kt")
WebSocketEventListener.class.cast(l).onHandshake(event)
IOHelper.getCharsetName(exchange,useDefault)
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amounts[face.getIndex()] / flow.capacity,1,min,max,fluidBuffer,sides)
new IllegalStateException("Could not find navigation view for Toolbar!")
ObjectStreamClass.lookup(clazz)
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3790,ROCKS_3791,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
assertEquals(2,persons.size())
SerializedString name
verifyGetCommandNameCalled(2)
RangeSliceVerbHandler.class
assertFalse(prj.nodes().contains(grid(4).localNode()))
DeclaredType fooTypeMirror=types.getDeclaredType(fooElement); 
Exception t
error.expectedMinimumMessageCount(2)
MAX_IMAGE_DIMEN=1024
return 3; 
Timber.v(e,"Authentication exception for new token, permanent error assumed")
Response description(String description); 
assertEquals(SNAPPY_CODEC,write.getCodec().toString())
text.emptyElement(BR)
Math.min(DataModule.DISK_CACHE_SIZE,Integer.MAX_VALUE)
options.needsTranspilationFrom(ES8)
{11,7.0f}
getStaticCatalog(to,requestedDate,subscriptionStartDate)
m.isReadBackupData()
mScaleType.getTransform(sMatrix,new Rect(0,0,source.getWidth(),source.getHeight()),source.getWidth(),source.getHeight(),0.0f,0.0f,mScaleType)
Validator.isNotNull(entry.getUrlTitle())
myTaskManager.getChangelistName(localTask)
Metric<Integer>
mFlexItemInEdit.setAlignSelf(AlignItems.BASELINE)
waitForMappingUpdateOnAll("dynamic_table","my_object.a","my_object.b")
getCategoriesAndThreads(category.getGroupId(),categoryId,WorkflowConstants.STATUS_IN_TRASH)
requestEncoding != null
mImageManager.load(holder.mImgBlavatar,GravatarUtils.fixGravatarUrl(post.getBlogImageUrl(),mAvatarSzSmall),R.drawable.ic_placeholder_blavatar_grey_lighten_20_40dp)
String.join("\n","pending changes to 'foo/bar/baz.xml'","pending changes to 'spam/ham/eggs.c'","")
@Alive({REG,ILLEGAL})
superMenu.addSeparator()
query.toString(s)
in.readUShortx()
nameHint == null
mapper.getTypeFactory().constructType(InspectExecResponse.class)
new InterruptedException("TEST EXCEPTION")
slotId <= 0
LambdaArgKt.foo(10,new Function1<Integer,Unit>(){   public Unit invoke(  Integer n){     System.out.println(n);   } } )
executionListenerContextCloseListener.addCloseFailedExecutionListener(executionListener,execution,executionVariablesToUse,customPropertiesMapToUse)
!inRaidChambers || event.isHidden()
this.context.getLogAggregationStatusForApps().add(finalReport)
AuditManager.class
countNewlines(headerFragment + lhsFragment + thenFragment) + 1
config.getClass().getName()
reportExceptions(result,basedir,true)
view.setVisibility(View.VISIBLE)
_jsonWebServiceServiceAction.getJSON(null,mockHttpServletRequest,mockHttpServletResponse)
assertThat(finder.findByIds(newArrayList(2,3))).hasSize(1)
!StringUtils.equals(filter.getKey(),RuleNormalizer.RuleField.LANGUAGE.field())
writer.flush()
final ServiceTicket sId=getCentralAuthenticationService().grantServiceTicket(tId.getId(),TestUtils.getService()); 
activityMonitor.waitForActivityWithTimeout(2000)
checkCall(receiver)
STUB_VERSION=30
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,true))
@InputIntMethodAnnotation(42)
context.start()
i <= lastLine
retriever.getFrameAtTime(-1)
LOG.warn(e)
type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF
expectedCommentLength <= maxCommentLength
line.isEmpty() || line.startsWith("##")
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_UNICODE)
return mConversationPrefs; 
Arrays.hashCode(connectors)
repoSelectorPanel.add(label)
toIntervalStartEpochMs(epochMs) + queryDelayMs + NEXT_TASK_DELAY_MS
log.info(sm.getString("webappClassLoader.stackTrace",threadName,getStackTrace(thread)))
mListener.getConnectionId() != -1 && requestHeader.mConnectionID != null
telephony.isOffhook(getOpPackageName())
checkArgument(!"/".equals(resourcePath),"%s is the classpath root",resourcePath)
CxxBinary resultRule=binaryBuilder.build(graphBuilder,filesystem,targetGraph); 
clockSource.elapsedMillis(startTime)
Trade data
!strand.isAlive()
new MutableFloat("2.0")
ImmutableList<PairedStats>
findPackage(PACKAGE_PIP,false)
Arrays.asList(MaterialColor.PLUM,MaterialColor.CRIMSON,MaterialColor.VERMILLION,MaterialColor.VIOLET,MaterialColor.BLUE,MaterialColor.INDIGO,MaterialColor.FOREST,MaterialColor.WINTERGREEN,MaterialColor.TEAL,MaterialColor.BURLAP,MaterialColor.TAUPE)
this.clientRpcServer.addProtocol(RpcKind.RPC_WRITABLE,HAServiceProtocol.class,this)
new InternalTestCluster("network",randomLong(),createTempDir(),numNodes,numNodes,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX,true)
personalJournalList != null && !personalJournalList.trim().isEmpty()
!(application.change().upgrades(deployment.version()) || application.change().upgrades(deployment.applicationVersion()))
j++
WikiTestUtil.addPage(TestPropsValues.getUserId(),(Long)parentBaseModel.getPrimaryKeyObj(),ServiceTestUtil.randomString(),keywords,true,approved,serviceContext)
public class RegExpParseTest extends BaseParseTestCase2 {   private ByteArrayOutputStream myOut;   enum Result {  OK,   ERR} static class Test {     String pattern;     boolean showWarnings=true;     boolean showInfo=false;     Result expectedResult;     String regExpHost=null;     Test(    String pattern,    Result result,    boolean warn,    boolean info,    String host){       this.pattern=pattern;       expectedResult=result;       showWarnings=warn;       showInfo=info;       regExpHost=host;     }   }   private final Map<String,Test> myMap=new LinkedHashMap<String,Test>();   @Override protected void setUp() throws Exception {     final Document document=new SAXBuilder().build(new File(getTestDataRoot(),"/RETest.xml"));     final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");     int i=0;     for (    Element element : list) {       final String name;       final Element parent=(Element)element.getParent();       final String s=parent.getName();       final String t=parent.getAttribute("id") == null ? "" : parent.getAttribute("id").getValue() + "-";       if (!"tests".equals(s)) {         name=s + "/test-" + t+ ++i+ ".regexp";       }  else {         name="test-" + t + ++i+ ".regexp";       }       final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));       final boolean warn=!"false".equals(element.getAttributeValue("warning"));       final boolean info="true".equals(element.getAttributeValue("info"));       final String host=element.getAttributeValue("host");       final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");       myMap.put(name,new Test(pattern,result,warn,info,host));       if (!"false".equals(element.getAttributeValue("verify")) && host == null) {         try {           Pattern.compile(pattern);           if (result == Result.ERR) {             System.out.println("Incorrect FAIL value for " + pattern);           }         }  catch (        PatternSyntaxException e) {           if (result == Result.OK) {             System.out.println("Incorrect OK value for " + pattern);           }         }       }     }     super.setUp();     myOut=new ByteArrayOutputStream();     System.setErr(new PrintStream(myOut));   }   @Override protected String getTestDataPath(){     return super.getTestDataPath() + "/gen/";   }   public void testSimple() throws Exception {     doTest("simple/");   }   public void testQuantifiers() throws Exception {     doTest("quantifiers/");   }   public void testGroups() throws Exception {     doTest("groups/");   }   public void testCharclasses() throws Exception {     doTest("charclasses/");   }   public void testEscapes() throws Exception {     doTest("escapes/");   }   public void testAnchors() throws Exception {     doTest("anchors/");   }   public void testNamedchars() throws Exception {     doTest("namedchars/");   }   public void testBackrefs() throws Exception {     doTest("backrefs/");   }   public void testComplex() throws Exception {     doTest("complex/");   }   public void testIncomplete() throws Exception {     doTest("incomplete/");   }   public void testRealLife() throws Exception {     doTest("real-life/");   }   public void testRegressions() throws Exception {     doTest("regressions/");   }   public void testBugs() throws Exception {     doTest("bug/");   }   public void testFromXML() throws Exception {     doTest(null);   }   private void doTest(  String prefix) throws IOException {     int n=0;     int failed=0;     for (    String name : myMap.keySet()) {       if (prefix == null && name.contains("/")) {         continue;       }       if (prefix != null && !name.startsWith(prefix)) {         continue;       }       System.out.print("filename = " + name);       n++;       final RegExpParseTest.Test test=myMap.get(name);       try {         if (test.regExpHost != null) {           final Class<RegExpLanguageHost> aClass=(Class<RegExpLanguageHost>)Class.forName(test.regExpHost);           final RegExpLanguageHost host=aClass.newInstance();           RegExpLanguageHosts.setRegExpHost(host);         }         try {           myFixture.configureByText(RegExpFileType.INSTANCE,test.pattern);           myFixture.testHighlighting(test.showWarnings,true,test.showInfo);         }   finally {           RegExpLanguageHosts.setRegExpHost(null);         }         if (test.expectedResult == Result.ERR) {           System.out.println("  FAILED. Expression incorrectly parsed OK: " + test.pattern);           failed++;         }  else {           System.out.println("  OK");         }       }  catch (      Throwable e) {         if (test.expectedResult == Result.ERR) {           System.out.println("  OK");         }  else {           e.printStackTrace(System.out);           System.out.println("  FAILED. Expression = " + test.pattern);           if (myOut.size() > 0) {             String line;             final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));             do {               line=reader.readLine();             }  while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));             if (line != null) {               if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {                 System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));               }             }  else {               System.out.println("ERROR: " + myOut.toString());             }           }           failed++;         }       }       myOut.reset();     }     System.out.println("");     System.out.println(n + " Tests executed, " + failed+ " failed");     assertFalse(failed > 0);   } } 
equalTo(0L)
new ShardRouting(index,shardId,currentNodeId,relocatingNodeId,restoreSource,primary,state,version,null,AllocationId.newInitializing(),true)
Error e
ris.setAmount(amount)
private View frame=null; 
assertEquals(8,databases.size())
LOG.warn("Root project path of the Gradle project not found for " + rootModel.getModule())
assertEquals(String.format("Expected %s results but got %s. Number of evicted entries: %s.",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())
pId + BASE_FILE_NUMBER
Runtime.getRuntime().maxMemory()
ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged
new WorldPoint(2458,3364,0)
!newDatabase && (bibDatabaseContext != null) && bibDatabaseContext.getMetaData().getGroups().isPresent()
FacetUtilsKt.getOrCreateFacet(getModule(),modelsProvider,false,null,false)
parcel.readString()
tester.getRequest()
new J7StatsListener(ss,1)
CommonProblemDescriptor descriptor
UpgradeStepRegistrator.class
next != null && next.getElementType() == ElementType.WHITE_SPACE
StringBuilder buffer=null; 
TableModelCell tableCell
mProgress != null && getActivity() != null
this == READY
project.isDisposed() || ApplicationManager.getApplication().isUnitTestMode()
getMyApplication().getSelectedGpxHelper().selectGpxFile(model.getGpx(),false,false)
getPageItems(PaginationRequest.of(10,1),_group.getGroupId(),_acceptLanguage,getThemeDisplay(_group,LocaleUtil.getDefault()),new Filter(_filterParser.parse("contains(title,'title')")),Sort.emptySort())
Map<String,String>
new IllegalStateException("Failed to create temporary folder in " + workingPath,e)
variableType.matches(allowedClassName)
Thread.sleep(50)
resp.getAssertions()
JavaClass.class
mOpenTags.peek()
resolved.build()
playerData.getCurrencyBalanceList()
onDetachedFromWindows()
e.getPresentation().setEnabledAndVisible(enabled(project,log,details))
Boolean.parseBoolean(getOptional("kylin.query.enable-dict-enumerator","false"))
MeasureTypeFactory.getUDAFs()
new ConcurrentHashMap<Class<?>,Constructor<?>[]>(256)
count == 0 && position == buffer.length
Thread.sleep(2500)
DefaultGroovyMethods.getRootLoader(Environment.class.getClassLoader()) != null
myPalmId=palmId
BlockingManager.getInstance().getCachedBlockedContacts(account)
!JACKSON_16
db.delete(CONNECTION_TABLE_NAME,null,null)
notifier.isIgnoreExchangeSendingEvents()
mPm.getUserBadgedIcon(icon,new UserHandle(userId))
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
/**   * Defines the target visibility of properties in the target entity. Note this is not applicable to abstract or immutable classes.  * @return the visibility level of properties in the target entity  */ PropertyVisibility propertyVisibility() default PropertyVisibility.PRIVATE; 
/**   * Gets the exception thrown (if any) by the method called in  {@link #run()}  * @return the thrown exception (if any).  */ public Exception getExceptionThrown(){   return exceptionThrown; } 
new ArrayList<>(2)
eq(false)
is(15)
picker.evaluateParams()
assertEquals(12,definitions.size())
renderNotebookv2(sourceDoc,null,input.getFormat())
task.getInputs().file(futureValue)
connectionProperties.containsKey("oracle.url")
JSTypeUtils.areTypesCompatible(setterType,type,null,function)
new RangeSliceCommand(KS,CF,System.currentTimeMillis(),filter,range,null,count,true,false)
comp.getCollectorItems().isEmpty()
sharedPreferences.edit().remove(PREF_KEY_HIDDEN_DEFAULT_ENGINES).apply()
System.out.println("The stack is full, can't insert value")
mConnectionById.containsKey(callId)
Long.parseLong(row.getValue(partitionCol).toString())
isShowing()
new DeoptimizeNode(node.action(),node.reason(),node.getSpeculation())
return serialConsistency; 
log.error(message)
LOGGER.info(msg.apply())
hits2.length()
testPool.getWeightedListeningExecutorService()
new IllegalStateException(String.format("Unable to close %s transactions (see warnings in log output for details)",txCloseExceptions.size()))
d != 0
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
assertNames(realm.clients().findAll(),"account","realm-management","security-admin-console","broker","my-app","impersonation")
Character.isJavaIdentifierPart(buffer.charAt(i))
!classFilter.contains(classID)
!phones.isValid()
imageView.setImageDrawable(drawable)
row(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)
_buildTemplateWithGradle("content-targeting-report","report-dependency-management","--dependency-management-enabled")
Preferences.clear(ActFmPreferenceService.PREF_USER_ID)
public JMeterProperty clone(); 
targetRegistry.registerAlias(transactionManagerRef,"transactionManager")
version == null || version.equals("")
stall_till_cloudsize(5)
!includeGlobalTemplates || (template != null)
new IllegalArgumentException("Command not found in spout message: " + shellMsg)
new HttpPanelResponse(false,extension,httpMessage)
i < 100000000
senders == SendersEnum.both || senders == null
/**   * Change the permission of a file or directory specified by args.  */ public final class ChmodCommand extends AbstractAclCommand {   public ChmodCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chmod";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String modeStr=args[0];     TachyonURI path=new TachyonURI(args[1]);     chmod(path,modeStr,false);   }   @Override public String getUsage(){     return "chmod <mode> <path>";   } } 
commentsListView.smoothScrollToPosition(0)
wsSessions == null
/**   * Executes the action with the given controller. <p> The state of the build is not defined as part of this contract, it is highly context specific.  */ Object run(BuildController buildController); 
urlToLoad.getText().toString().equals("")
JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())
elementText.substring(i + 1,range.getEndOffset())
NotifyUtil.show("Error",formatter.format(record),MessageType.ERROR,listener,0)
Environment.getOemDirectory()
mForgotPatternButton != null && mForgotPatternButton.getVisibility() == View.VISIBLE
CommentListBean mentionsComment=intent.getParcelableExtra(BundleArgsConstants.MENTIONS_COMMENT_EXTRA); 
Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.DISABLED && Nd4j.getExecutioner().getProfilingMode() != OpExecutioner.ProfilingMode.SCOPE_PANIC
accountPermissionUpdateContract.getPermissionsCount() != 2
clientConfig.getRegistryFetchIntervalSeconds() * 2000
logger.debug("gave up waiting for query reply from device {}",m_address)
surfaceHeightFacet.getWorld(pos.getX(),pos.getY())
synchronized (this) {   Class answer=(Class)sourceCache.get(codeSource.getName());   if (answer != null)   return answer;   CompilationUnit unit=createCompilationUnit(config,codeSource.getCodeSource());   SourceUnit su=null;   if (codeSource.getFile() == null) {     su=unit.addSource(codeSource.getName(),codeSource.getInputStream());   }  else {     su=unit.addSource(codeSource.getFile());   }   ClassCollector collector=createCollector(unit,su);   unit.setClassgenCallback(collector);   int goalPhase=Phases.CLASS_GENERATION;   if (config != null && config.getTargetDirectory() != null)   goalPhase=Phases.OUTPUT;   unit.compile(goalPhase);   answer=collector.generatedClass;   for (Iterator iter=collector.getLoadedClasses().iterator(); iter.hasNext(); ) {     Class clazz=(Class)iter.next();     setClassCacheEntry(clazz);   }   if (shouldCacheSource)   sourceCache.put(codeSource.getName(),answer);   return answer; } 
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new SIPCommCheckBox()
dest.mkdirs()
assertEquals(9,tasks.size())
new MethodCallExpression(INVOKERHELPER_RECEIVER,target.isStatic() ? "invokeStaticMethod" : "invokeMethodSafe",new ArgumentListExpression(target.isStatic() ? new ClassExpression(target.getDeclaringClass()) : receiver,new ConstantExpression(target.getName()),arr))
arrayContaining("foofoobar","foofoo","foofoo-closed")
initialCapacity <= 0
needAlLeastOneAttribute(tag) && WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && tag.getAttributes().length == 0
configElements[0]
AvroValue<GenericRecord>
view.isLaidOut() || view.getWidth() != 0 || view.getHeight() != 0
retVal.setProperty(entry.getKey(),value)
cache.invoke(entry.getKey(),this,entry.getValue())
this.traceHandlers.remove(traceHandler)
result.wasNull() || s == null
new IllegalStateException("Could not access Field '" + classField.getName() + "'",e)
out.writeInt(sampleCount)
holder.setGone(getLoadingViewId(),visible)
myTreeBuilder == null || myTreeBuilder.isNodeBeingBuilt(event.getPath())
LOG.error("Failed to delete temp folder",e)
f.getAttrs().getMTime() * 1000L
material.getMaterialDef().getName().contains("Lighting") && mesh.getFloatBuffer(Type.Normal) == null
Assert.assertEquals(interop.getFloatField(),copy.getFloatField(),0.001)
getNextClusterSlaveID()
GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)
i < nodeCount
Integer.parseInt(time.split(":")[1])
forecastConditionType[0]
new WorldPoint(2552,3556,0)
private void _runClassCommandName(String classCommandName) throws Exception {   Element rootElement=PoshiRunnerContext.getTestcaseRootElement(_testClassName);   List<Element> varElements=rootElement.elements("var");   for (  Element varElement : varElements) {     String name=varElement.attributeValue("name");     String value=varElement.attributeValue("value");     PoshiRunnerVariablesUtil.putIntoExecuteMap(name,value);   }   PoshiRunnerVariablesUtil.pushCommandMap();   Element commandElement=PoshiRunnerContext.getTestcaseCommandElement(classCommandName);   if (commandElement != null) {     PoshiRunnerStackTraceUtil.pushFilePath(classCommandName,"testcase");     PoshiRunnerExecutor.parseElement(commandElement);     PoshiRunnerStackTraceUtil.popFilePath();   } } 
addRewrite(0x0A,ProtocolConstants.Direction.TO_SERVER,true)
jsonModel.insert(async)
showDialog(DIALOG_SYNC_LOG)
showDialog(parent,message,title,options,defaultOptionIndex,defaultOptionIndex,icon)
!hasNextChunk()
this.comparatorIgnoringType
endPosition.set(Position.KEY_ODOMETER,51000)
Assert.assertNotNull(s)
@Override public Element detach(){   throw immutableError(this); } 
result3.getMatches()
GithubNotifications.showInfoDialog(myPane,"Success","Connection successful for user " + user.getLogin())
new String[9]
return 20_000; 
id=10857
Validator.isNotNull(portletResource)
fillPaint.getTypeface()
currentMatchPosition=currentWordsIndex
buffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY)
Util.threadFactory("Rate Limited Dispatcher",true)
myPopup.closeOk(null)
Exception ex
EvaluationResult<SkyValue>
done || body == null
new ServletException("non-HTTP request or response",e)
ssl.hasDefined(CommonAttributes.CIPHER_SUITE)
allowBlacklisting
getResultHandler(result).handleResult(exchange,result).onErrorResume(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
args.length > 7
uri.getRawPath()
assertThat(context.getExtensions()).hasSize(44)
QUEUE_TRANSACTION_LOG_RECORD=44
getIntent().getExtras().getLong(EXTRA_PERSON_ID)
logger.trace("myq ReturnCode: {}",returnCode)
new ConversionException("Expected a proto but was: " + body.mimeType())
DEFAULT_MAX=4096
@RunWith(MockitoJUnit4Runner.class) public class JUnit4ExampleTest extends ExampleTestCase { } 
new DebugMediaCodecVideoRenderer(context,MediaCodecSelector.DEFAULT,allowedVideoJoiningTimeMs,mainHandler,drmSessionManager,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY)
grabFrame(false,true,false,false)
showMessage(context.getString(R.string.osmand_routing_experimental),Toast.LENGTH_LONG)
indexNameExpressionResolver().concreteIndexNames(state,IndicesOptions.lenientExpandOpen(),HistoryStore.INDEX_PREFIX + "*")
waitUntil(() -> pongsReceived.get() == ADDRESSES_COUNT,60_000)
getHost()
enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,"startLockTaskModeOnCurrent")
groupType == null || device.isGatewayExtras()
war.setWebXML(ClusteredWebTestCase.class.getPackage(),"web.xml")
new ToolWindow.Border(false,false,false,false)
new ConnectionException(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR)
Timber.e(e,"Error enabling compression")
currentGroupByExprData[index] == null
mph >= 10 || am.hasFastSpeed()
public <A>SubType from(Expr<A> entity,A first,A... rest){   List<A> list=new ArrayList<A>(rest.length + 1);   list.add(first);   list.addAll(Arrays.asList(rest));   return from(entity,list); } 
year < 0
unquotedValue.substring(idx + AS_CONNECTOR_WITH_SPACES.length())
new ModuleDescriptorImpl(Name.special("<built-ins module>"),storageManager,ModuleParameters.Empty.INSTANCE$,this)
initialTargetElement != null && targetDirectory == null
getChildMeasureSpec(heightMeasureSpec,mPaddingTop + mPaddingBottom + lp.topMargin+ lp.bottomMargin,lp.height)
LOG.warn(e,"Parser exited while decoding BSER data")
JavaCompletionData.addExpectedTypeMembers(parameters,result)
learnRate * 0.5f
myEditor.getContentComponent()
case BUILD_IMAGE: 
bar.expectedMinimumMessageCount(2)
binding.getKey().getTypeLiteral().getRawType()
new StormClientErrorHandler(client.name())
Build.VERSION.SDK_INT < 14
blockChainSummary.size() == 1 && blockChainSummary.get(0).getNum() == 0
child1.setBytes(100L)
LOG.warn(new RepoStateException("Couldn't load .git/config file at " + configFile.getPath(),e))
new RuntimeException()
String.format("Examples labeled as %s classified by model as %s: %d times%n",expected,actual,count)
Collection<String>
masm.add(64,resultRegister,zr,ptr,AArch64Assembler.ShiftType.LSL,encoding.shift)
value < maximumValue
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.short-title"))
rootSaveDir.mkdirs()
new DeleteOptions.Builder()
!consumers.isEmpty()
!onlyEnabled
-619863281
pc.getPlugin() == null || pc.getPlugin().equals(plugin)
GetterUtil.getBoolean(portletPreferences.getValue("enableRss",null),true)
aCheckIn("101","foo/bar.baz")
script.getBytes("UTF8")
/**   * counter-clockwise   */ CCW(1)
String.format("%s : filtering out %s as it's stats is unavailable.",CPUSTATUS_FILTER_NAME,filteringTarget.toString())
((StringLiteral)literal).getValue()
new ClassCastException("Return type " + returnType + " does not match result "+ result.getClass())
process(unionSelect.left(),sb)
notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false)
MAX_DEFAULT_FRACTIONS_DIGITS=16
RIGHT_ID_F=3534
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted)
serialVersionUID=215521212534240L
!displayContent.isReady() || !mPolicy.isScreenOn() || !okToAnimate()
result.size() == 6
!tmp.exists() || !tmp.isDirectory()
USE_ROULETTE_WHEEL=false
String.format(Locale.getDefault(),"Time taken: %d.%03ds",seconds,milliseconds)
into.get(j)
hasNonClassAnnotations()
LinkedHashSet<String>
logger.error("an error")
new UnsupportedOperationException("Resolved method declarations should have the " + TypeVariableResolutionCapability.class.getName() + ".")
new MalformedException("Unrecognized message placeholder referenced: " + phName,node)
getFragmentManager().beginTransaction().add(android.R.id.content,peopleListFragment,KEY_PEOPLE_LIST_FRAGMENT)
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).constrainGradientToUnitNorm(true).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1,1e-5)).iterations(100).learningRate(1e-3).iterationListener(new ScoreIterationListener(10)).nIn(next.numInputs()).nOut(next.numOutcomes()).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).layerFactory(layerFactory).list(4).hiddenLayerSizes(600,250,100).override(3,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 3) {       builder.layerFactory(new DefaultLayerFactory(OutputLayer.class));       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
KBFolderServiceUtil.getKBFolder(getParentResourcePrimKey())
order=11
mock.expectedMinimumMessageCount(2)
this.messageService.monoPostAuthorizeFindById(1L).subscriberContext(withUser)
T item
GL20.glGetShaderiv(shader,pname,params)
synchronized (frontendHandler) {   try {     io.shardingsphere.shardingproxy.frontend.mysql.CommandExecutor.this.wait();   }  catch (  final InterruptedException ignored) {   } } 
Pair.of(pair.getRight(),pair.getLeft())
new PaymentType("CUSTOMER_PAYMENT","Customer Payment",true)
queuedChunk.provider.originalLoadChunk(queuedChunk.x,queuedChunk.z)
LOG.warn(e,"Failed to deserialize fetched-from-cache manifest for rule %s with key %s",rule,key)
callElement.getText()
calcTo()
progress != null && progress.isResumed()
private final DomAnchor myParent; 
_buildTemplateWithGradle("freemarker-portlet","freemarker-dependency-management","--dependency-management-enabled")
mNavigationBarView.getPaddingLeft()
uncompressedProto.length < 1100000
descrTextView.setTextColor(color)
p.getFileSystem(conf).delete(p,true)
TokenSet.create(PyTokenTypes.PLUS,PyTokenTypes.MULT,PyTokenTypes.OR,PyTokenTypes.AND)
req.getContentLengthLong()
List<UsageInfo>
blockIo && !ContainerThreadMarker.isContainerThread() && isAsync()
new StringPreference("map_underlay",null,false)
body.transferTo(position,target)
Exception e
LanguageLevel.forElement(element).isAtLeast(LanguageLevel.PYTHON27)
postForm=true
mPhone.getContext().enforceCallingOrSelfPermission("android.permission.SEND_SMS","Sending SMS message")
mContentResolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED),false,mMagnificationObserver,UserHandle.USER_ALL)
!aClass.isInterface() || aClass.isAnnotationType()
spaceProperty.getMaxSpaces() >= 0 && getTotalSpaces() > spaceProperty.getMaxSpaces()
portNum
kbArticleVersion.setPriority(priority)
new FrameV2(frame,s.offset,s.len)
_parms._sample_rate < 1 || _parms._sample_rate_per_class != null
file.getAbsolutePath()
position.offset(mLeft,mTop)
getNewValue()
private final ReplayingDecoderByteBuf replayable=new ReplayingDecoderByteBuf(); 
msg.what=SHOW_ZOOM_BUTTON_MSG_ID
NOTIFICATION_LED_OFF_TIME=2000
new IllegalStateException("Fields should be either date based or time based")
getConfig().getBoolean(ENABLED,true)
/**   * User: anna Date: 30-Jan-2006  */ public class ClassesScopeTreeStructureExpander implements ScopeTreeStructureExpander {   private Project myProject;   public ClassesScopeTreeStructureExpander(  final Project project){     myProject=project;   }   public void treeWillExpand(  TreeExpansionEvent event) throws ExpandVetoException {     ProjectView projectView=ProjectView.getInstance(myProject);     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<ClassNode> classNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof FileNode) {           final FileNode fileNode=(FileNode)childNode;           final PsiElement file=fileNode.getPsiElement();           if (file instanceof PsiJavaFile) {             final VirtualFile virtualFile=((PsiJavaFile)file).getVirtualFile();             if (virtualFile == null || (virtualFile.getFileType() != StdFileTypes.JAVA && virtualFile.getFileType() != StdFileTypes.CLASS)) {               return;             }             final PsiClass[] psiClasses=((PsiJavaFile)file).getClasses();             if (classNodes == null) {               classNodes=new HashSet<ClassNode>();             }             commitDocument((PsiFile)file);             for (            final PsiClass psiClass : psiClasses) {               if (psiClass != null && psiClass.isValid()) {                 final ClassNode classNode=new ClassNode(psiClass);                 classNodes.add(classNode);                 if (projectView.isShowMembers(ScopeViewPane.ID)) {                   final List<PsiElement> result=new ArrayList<PsiElement>();                   PsiClassChildrenSource.DEFAULT_CHILDREN.addChildren(psiClass,result);                   for (                  PsiElement psiElement : result) {                     psiElement.accept(new JavaElementVisitor(){                       @Override public void visitClass(                      PsiClass aClass){                         classNode.add(new ClassNode(aClass));                       }                       @Override public void visitMethod(                      PsiMethod method){                         classNode.add(new MethodNode(method));                       }                       @Override public void visitField(                      PsiField field){                         classNode.add(new FieldNode(field));                       }                       @Override public void visitReferenceExpression(                      PsiReferenceExpression expression){                       }                     } );                   }                 }               }             }             node.remove(fileNode);           }         }       }       if (classNodes != null) {         for (        ClassNode classNode : classNodes) {           node.add(classNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   public void treeWillCollapse(  TreeExpansionEvent event) throws ExpandVetoException {     final TreePath path=event.getPath();     if (path == null)     return;     final DefaultMutableTreeNode node=(PackageDependenciesNode)path.getLastPathComponent();     if (node instanceof DirectoryNode) {       Set<FileNode> fileNodes=null;       for (int i=node.getChildCount() - 1; i >= 0; i--) {         final TreeNode childNode=node.getChildAt(i);         if (childNode instanceof ClassNode) {           final ClassNode classNode=(ClassNode)childNode;           final PsiElement psiElement=classNode.getPsiElement();           if (psiElement != null && psiElement.isValid()) {             if (fileNodes == null) {               fileNodes=new HashSet<FileNode>();             }             fileNodes.add(new FileNode(psiElement.getContainingFile(),true));           }           node.remove(classNode);         }       }       if (fileNodes != null) {         for (        FileNode fileNode : fileNodes) {           node.add(fileNode);         }       }       TreeUtil.sort(node,getNodeComparator());       final Object source=event.getSource();       if (source instanceof JTree) {         ((DefaultTreeModel)((JTree)source).getModel()).reload(node);       }     }   }   private DependencyNodeComparator getNodeComparator(){     return new DependencyNodeComparator(ProjectView.getInstance(myProject).isSortByType(ScopeViewPane.ID));   }   private void commitDocument(  final PsiFile file){     final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);     final Document document=documentManager.getDocument(file);     documentManager.commitDocument(document);   } } 
existingLayout == null
visitStatement(node,context)
modified=true
mNumAppsLaunchedSinceSwipeUpTipDismiss >= swipeUpShowOnAppLauncherAfterDismiss
substitution == null
getJSONValue(activity.getExtraData(),"title",kbArticle.getTitle())
components.afterEach(new Action<PlayApplicationSpec>(){   @Override public void execute(  PlayApplicationSpec playComponent){     playComponent.getSources().create("coffeeScript",CoffeeScriptSourceSet.class,new Action<CoffeeScriptSourceSet>(){       @Override public void execute(      CoffeeScriptSourceSet coffeeScriptSourceSet){         coffeeScriptSourceSet.getSource().srcDir("app/assets");         coffeeScriptSourceSet.getSource().include("**/*.coffee");       }     } );   } } )
debug=true
UsageDetailMode.DETAIL == usageDetailMode && usage.getUsageType() == UsageType.CONSUMABLE
_logloss / _wsum
type.getName()
new StringBuilder(1024)
Double.toHexString(d)
field.createField(fieldType.indexedToReadable(indexedValue),1.0f)
new IllegalStateException("Result is already complete: failed")
x < 3
id >= EVENT_CODE_BY_ID.length
AllocatableValue delta
public abstract ResolvedReferenceType deriveTypeParameters(ResolvedTypeParametersMap typeParametersMap); 
tokens[position].hasPosTag("_allow_repeat")
@UriParam(label="producer",defaultValue="1") private String requestRequiredAcks="1"; 
AtmosphereRequest.newInstance()
new GroovyPagesTemplate(context,request,response,pageMeta,spillGroovy)
new StepMeta(fromstepid,fromstepname,(StepMetaInterface)tii)
StepVerifier.create(source.flux().bufferWhen(open,o -> close)).then(() -> {   source.assertSubscribers();   open.assertSubscribers();   close.assertSubscribers();   open.next(1); } ).then(() -> {   open.assertSubscribers();   close.assertSubscribers();   source.complete(); } ).expectNextMatches(List::isEmpty).verifyComplete()
noParam == null && arguments.length != 0
a.getFont(attr)
callerPrincipalCallback != null
TestUtils.getService()
boost != -1
multipleTopologyChangeWorker(TOP_CHANGE_THREAD_CNT)
getProperty().containsKey("spark.yarn.keytab")
public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {   if (index < 0 || index > capacity()) {     throw new IndexOutOfBoundsException("Invalid index: " + index + " - Bytes needed: "+ (index)+ ", maximum is "+ capacity());   }   int componentId=componentId(index);   return components[componentId].duplicate(); } 
new CommentByBlockCommentHandler().invoke(myFixture.getProject(),myFixture.getEditor(),myFixture.getEditor().getCaretModel().getPrimaryCaret(),myFixture.getFile())
DirectoryReader r=IndexReader.open(dir); 
PyExpression newExpression=createExpression(project,name,declaration).getExpression(); 
showStatusChangedInChat=false
request.getDueAfter()
rackIdToNodes.getOrDefault(rid,Collections.emptyList())
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PLAY_FUNCTION,false)
super.doRemove(key)
logger.trace("Adding PropertySource: " + source + " in group: "+ basename)
rc.tiles.size() > 35 && rc.getSubRegions().size() > 0
LOG.debug("Building gRPC server on " + configuration.getHost() + ":"+ configuration.getPort())
Arrays.asList("class","constraints","hasMany","mapping","properties",GormProperties.IDENTITY,GormProperties.VERSION,"domainClass","dirty",GormProperties.ERRORS,"dirtyPropertyNames")
new GdxRuntimeException("Failure reading Vorbis.",e)
edge.setDirection(edgeDefault)
file != null && file.exists()
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)
public Listener getListener(){   return listener; } 
new MongoClient(getPrimary())
new IllegalStateException("No overridden descriptors found for (fake override) " + descriptor)
secondString.substring(i + 1)
GrIntroduceHandlerBase.findAnchor(context.getOccurrences(),scope)
verifyPositions(decoder,text("+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"))
fragment == null || fragment.getActivity() == null
ReviewChangesActivity.Companion.startForResult(this,view,requestModel,getPresenter().getRepoId(),getPresenter().getLogin(),pullRequest.getNumber(),isAuthor,isEnterprise())
server.getSegment(segment.getIdentifier()) != null || peon.getSegmentsToLoad().contains(segment)
mMediaMetadataRetriever.getFrameAtTime(-1)
values == null || values.length == 0
INSTANCE.rand(shape,Nd4j.getRandom())
db.activityDao().getByKey(dbSession,activityKey)
!record.isMms() || record.isMmsNotification() || record.isGroupAction()
getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"")
manager.disable(keyId)
Assert.assertEquals(3,propertyCategories.size())
Integer.getInteger("org.apache.juli.logging.UserDataHelper.SUPPRESSION_TIME",60 * 60 * 24)
DISABLE_TIMEOUT=20000
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.04045,2.4)
mWm.addAppToken(0,null,0,0,0,false,false)
pojo.keyFields()
(ConcurrentPublication)resourceByRegIdMap.get(registrationId)
CxfSpringEndpointBean.class
0.0 == CheckUtils.parseFloat(text,type)
mBitmapState.mBitmap == null || mBitmapState.mBitmap.hasAlpha()
expected=50331652
public String getBuffer(){   return this.buffer; } 
type != null || interpolationInterval > 0
RangeDenormalizer.class
any()
jdk.getHomeDirectory() == null || jdk.getBinPath() == null
entry != null && (entry.info.flags & ApplicationInfo.FLAG_INSTALLED) != 0
Math.max(filterExplanations.get(i).getValue(),factor)
expand("serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
future.channel().writeAndFlush(request)
unittests("tests_pydevd_python/test_debugger.py",null,true)
canSupportPublicClient(client)
quantaRemaining >= quantaPerBlock
Constant.messages.getString("start.gui.cmdline.invalid.session.options",CommandLine.SESSION,CommandLine.NEW_SESSION,Constant.getZapHome())
JournalFolderLocalServiceUtil.fetchFolder(serviceContext.getScopeGroupId(),parentFolderId,name)
o2 instanceof String
new int[681]
DecodedBitStreamParser.decode(builder.toByteArray(),Version.getVersionForNumber(1),null,null)
150 * 1024 * 1024
conf.unset("tez.queue.name")
parent.resolveFile(jarfile)
/**   * {@link Builder#postfixWith(Tree,String)}   */ public static SuggestedFix postfixWith(Tree node,String postfix){   return builder().postfixWith(node,postfix).build(); } 
freezeThisOneIfNeeded != null && !mWindowPlacerLocked.mOrientationChangeComplete
endpoint.expectedMinimumMessageCount(1)
querySkuDetails(ITEM_TYPE_SUBS,inv,moreSubsSkus)
inputBuffer.available() > 0 || inputBuffer.nbRead() > 0
System.getProperty("java.io.tmpdir",".")
Number oldValue=(Number)conn.get(getName()); 
existingOne != null
/**   * Hook some methods which we want to create an easier interface for developers.  */ private static void initXbridgeZygote() throws Throwable {   final HashSet<String> loadedPackagesInProcess=new HashSet<String>(1);   findAndHookMethod(ActivityThread.class,"handleBindApplication","android.app.ActivityThread.AppBindData",new XC_MethodHook(){     protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ActivityThread activityThread=(ActivityThread)param.thisObject;       ApplicationInfo appInfo=(ApplicationInfo)getObjectField(param.args[0],"appInfo");       ComponentName instrumentationName=(ComponentName)getObjectField(param.args[0],"instrumentationName");       if (instrumentationName != null) {         XposedBridge.log("Instrumentation detected, disabling framework for " + appInfo.packageName);         disableHooks=true;         return;       }       CompatibilityInfo compatInfo=(CompatibilityInfo)getObjectField(param.args[0],"compatInfo");       if (appInfo.sourceDir == null)       return;       setObjectField(activityThread,"mBoundApplication",param.args[0]);       loadedPackagesInProcess.add(appInfo.packageName);       LoadedApk loadedApk=activityThread.getPackageInfoNoCheck(appInfo,compatInfo);       XResources.setPackageNameForResDir(appInfo.packageName,loadedApk.getResDir());       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=appInfo.packageName;       lpparam.processName=(String)getObjectField(param.args[0],"processName");       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=appInfo;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);       if (appInfo.packageName.equals(INSTALLER_PACKAGE_NAME))       hookXposedInstaller(lpparam.classLoader);     }   } );   findAndHookMethod("com.android.server.ServerThread",null,Build.VERSION.SDK_INT < 19 ? "run" : "initAndLoop",new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       loadedPackagesInProcess.add("android");       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName="android";       lpparam.processName="android";       lpparam.classLoader=BOOTCLASSLOADER;       lpparam.appInfo=null;       lpparam.isFirstApplication=true;       XC_LoadPackage.callAll(lpparam);     }   } );   hookAllConstructors(LoadedApk.class,new XC_MethodHook(){     @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {       LoadedApk loadedApk=(LoadedApk)param.thisObject;       String packageName=loadedApk.getPackageName();       XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());       if (packageName.equals("android") || !loadedPackagesInProcess.add(packageName))       return;       if ((Boolean)getBooleanField(loadedApk,"mIncludeCode") == false)       return;       LoadPackageParam lpparam=new LoadPackageParam(loadedPackageCallbacks);       lpparam.packageName=packageName;       lpparam.processName=AndroidAppHelper.currentProcessName();       lpparam.classLoader=loadedApk.getClassLoader();       lpparam.appInfo=loadedApk.getApplicationInfo();       lpparam.isFirstApplication=false;       XC_LoadPackage.callAll(lpparam);     }   } );   findAndHookMethod("android.app.ApplicationPackageManager",null,"getResourcesForApplication",ApplicationInfo.class,new XC_MethodHook(){     @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {       ApplicationInfo app=(ApplicationInfo)param.args[0];       XResources.setPackageNameForResDir(app.packageName,app.uid == Process.myUid() ? app.sourceDir : app.publicSourceDir);     }   } );   if (!new File(BASE_DIR + "conf/disable_resources").exists()) {     try {       hookResources();     }  catch (    Exception e) {       log("Errors during resources initialization");       logResourcesDebugInfo();       throw e;     }   }  else {     disableResources=true;   } } 
163 + (USE_OLD_HISTORY ? 1000 : 0)
action != KeyEvent.ACTION_UP
x + 1 >= size
new JSONOrderedObject()
setFlag(FLAG_AUTO_CANCEL,autoCancel)
focusable.isAccessibilityFocusable()
freezeBalanceContract.getFrozenBalance() / 1_000_000
SpellCheckerBundle.message("word.0.1.is.misspelled")
work >= 0
searchUICore.search(text,updateResult,new ResultMatcher<SearchResult>(){   SearchResultCollection regionResultCollection=null;   SearchCoreAPI regionResultApi=null;   List<SearchResult> results=new ArrayList<>();   @Override public boolean publish(  SearchResult object){     if (paused || cancelPrev) {       if (results.size() > 0) {         getResultCollection().addSearchResults(results,true,true);       }       return false;     } switch (object.objectType) { case SEARCH_API_FINISHED:       final SearchCoreAPI searchApi=(SearchCoreAPI)object.object;     final List<SearchResult> apiResults;   final SearchPhrase phrase=object.requiredSearchPhrase; final SearchCoreAPI regionApi=regionResultApi; final SearchResultCollection regionCollection=regionResultCollection; final boolean hasRegionCollection=(searchApi == regionApi && regionCollection != null); if (hasRegionCollection) { apiResults=regionCollection.getCurrentSearchResults(); }  else { apiResults=results; } regionResultApi=null; regionResultCollection=null; results=new ArrayList<>(); showApiResults(apiResults,phrase,hasRegionCollection); break; case SEARCH_API_REGION_FINISHED: regionResultApi=(SearchCoreAPI)object.object; final SearchPhrase regionPhrase=object.requiredSearchPhrase; regionResultCollection=new SearchResultCollection(regionPhrase).addSearchResults(results,true,true); showRegionResults(regionResultCollection); break; case PARTIAL_LOCATION: break; default : results.add(object); } return false; } @Override public boolean isCancelled(){ return paused || cancelPrev; } } )
DynamicAttributeRanking.refreshMinMax(this,graph)
ftest.numRows() != validation_rows
!libraryOrderEntry.isValid()
OptimisticOptimizations.ALL.remove(OptimisticOptimizations.Optimization.UseExceptionProbability,OptimisticOptimizations.Optimization.RemoveNeverExecutedCode,OptimisticOptimizations.Optimization.UseTypeCheckedInlining,OptimisticOptimizations.Optimization.UseTypeCheckHints)
Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))
mapCache1.addAndGet("4",1D)
"MySQL".equals(databaseProductName) || "Google SQL Service/MySQL".equals(databaseProductName) || "MySQL/Google Cloud SQL".equals(databaseProductName)
settings.isShowExcludedFiles() == isShowExcludedFiles() && settings.isUseFileNestingRules() == isUseFileNestingRules()
LOGGER.info("Using proxy address [{}]",proxy)
t.getCause()
new JdbcUserServiceBeanDefinitionParser()
project.isDisposed() || !file.isValid()
synchronized (mLock) {   mSystemUnlockedUsers=ArrayUtils.removeInt(mSystemUnlockedUsers,userId); } 
isAutopopupCompletion()
/**   * {@inheritDoc}  */ public Integer getTo(){   return Integer.valueOf(to); } 
!isCancelled0(result)
Integer.parseInt(tupleValue)
row < 0 || row > getRowCount() - 1
ConcurrentHashMap<Object,AggregationStrategy>
public class XpathRegressionFallThroughTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     final String[] expectedViolation={"11:13: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=FallThroughCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(FallThroughCheck.class);     moduleConfig.addAttribute("checkLastCaseGroup","true");     final String[] expectedViolation={"10:17: " + getCheckMessage(FallThroughCheck.class,FallThroughCheck.MSG_FALL_THROUGH_LAST)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodFallThruCustomWords']/SLIST/LITERAL_WHILE/SLIST" + "/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
return AUTUMN; 
logger.error("Callback onResult call produced an error",e)
new IndexWriter(dir2,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Key.create("_java_compiler_usage_stats_")
mc.getMod() == null && !mc.isImmutable()
getResources().getString(R.string.upgrade_import_no_file_found,"'.apkg'")
/**   * {@inheritDoc}  */ public Integer get(int index){   if (index < 0) {     throw new IndexOutOfBoundsException("Index: " + index + " should not be negative");   }   if (index >= size()) {     throw new IndexOutOfBoundsException("Index: " + index + " too big for range: "+ this);   }   int value=reverse ? to - index : index + from;   return Integer.valueOf(value); } 
assertEquals(11,lm.getFields().size())
record("INDEX ON :User(name)","User",singletonList("name"),"ONLINE","node_unique_property",getIndexProviderDescriptorMap(InMemoryIndexProviderFactory.PROVIDER_DESCRIPTOR),"")
new IllegalStateException("Unable to close transaction",Iterables.getOnlyElement(txCloseExceptions.values()))
VersionNumber.parse(playVersion).getMicro()
getRight() - getPaddingRight()
Character.isLetterOrDigit(ch)
Glide.with(activity).load(url).submit(size.getWidth(),size.getHeight())
Number value=list.get(i); 
cacheDirectory.mkdirs()
/**   * <p>A  {@code TaskInputs} represents the inputs for a task.</p><p>You can obtain a  {@code TaskInputs} instance using {@link org.gradle.api.Task#getInputs()}.</p>  */ @HasInternalProtocol public interface TaskInputs extends CompatibilityAdapterForTaskInputs {   /**   * Returns true if this task has declared the inputs that it consumes.  * @return true if this task has declared any inputs.  */   boolean getHasInputs();   /**   * Returns the input files of this task.  * @return The input files. Returns an empty collection if this task has no input files.  */   FileCollection getFiles();   /**   * Registers some input files for this task.  * @param paths The input files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder files(  Object... paths);   /**   * Registers some input file for this task.  * @param path The input file. The given path is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder file(  Object path);   /**   * Registers an input directory hierarchy. All files found under the given directory are treated as input files for this task.  * @param dirPath The directory. The path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure the property.  */   TaskInputFilePropertyBuilder dir(  Object dirPath);   /**   * Returns the set of input properties for this task.  * @return The properties.  */   Map<String,Object> getProperties();   /**   * <p>Registers an input property for this task. This value is persisted when the task executes, and is compared against the property value for later invocations of the task, to determine if the task is up-to-date.</p> <p>The given value for the property must be Serializable, so that it can be persisted. It should also provide a useful  {@code equals()} method.</p><p>You can specify a closure or  {@code Callable} as the value of the property. In which case, the closure or{@code Callable} is executed to determine the actual property value.</p>  * @param name The name of the property. Must not be null.  * @param value The value for the property. Can be null.  */   TaskInputs property(  String name,  Object value);   /**   * Registers a set of input properties for this task. See  {@link #property(String,Object)} for details.  * @param properties The properties.  */   TaskInputs properties(  Map<String,?> properties);   /**   * Returns true if this task has declared that it accepts source files.  * @return true if this task has source files, false if not.  */   boolean getHasSourceFiles();   /**   * Returns the set of source files for this task. These are the subset of input files which the task actually does work on. A task is skipped if it has declared it accepts source files, and this collection is empty.  * @return The set of source files for this task.  */   FileCollection getSourceFiles();   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param paths The paths. These are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #files(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object... paths);   /**   * Registers some source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #files(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return this  * @deprecated Use {@link #file(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs source(  Object path);   /**   * Registers a source directory for this task. All files under this directory are treated as source files for this task. Note that source files are also considered input files, so calling this method implies a call to  {@link #dir(Object)}.  * @param path The path. This is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return this  * @deprecated Use {@link #dir(Object)} instead and set {@code skipWhenEmpty} to {@code true}.  */   @Deprecated TaskInputs sourceDir(  Object path); } 
groupMetaCache.get(key)
!conf.contains("spark.submit.deployMode") || !conf.get("spark.submit.deployMode").equals("cluster")
polyLats.length - 2
ServiceLoader.load(ReportingAdministrator.class,getClass().getClassLoader())
!target.toFile().exists() || target.toFile().isDirectory()
ignitionEventHandler != null
transform(matrix,source,width,height,true,recycle)
myModel == null || text.length() == 0
-1.1f
i == -1 || i == 65535
service.setDomainEventNotifier(domainEventNotifier)
Messages.showErrorDialog(myMainPanel,"Error loading package list:" + e.getMessage(),"Packages")
totalTimeMeasurement.startedAt()
tokens.next().expect(Token.IDENTIFIER,'{',"::")
ctx.writeAndFlush("Welcome to " + InetAddress.getLocalHost().getHostName() + " secure chat service!\n")
theTermsUrl=props.getProperty(TERMS_URL_PROPERTY)
reporter.report("A class cannot have default members",m)
batteryVp > low
ModLoaderHelper.sidedHelper == null || !ModLoaderHelper.sidedHelper.clientConnectionClosed(manager,mod)
sanitaryName.equalsIgnoreCase(c.getPrettyName())
expressionType == null || expressionType.equals(JetStandardClasses.getUnitType())
collisionPoints.get(0)
new OneRun(49.8020,9.2470,50.4940,10.1970,125633,2449)
parent.decrementPrioritizableForTree0(amt)
150 * 1024 * 1024L
StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){   public void run(){     new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){       public void run(      @NotNull final ProgressIndicator indicator){         try {           final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);           final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();           if (compilers.length > 0) {             final Module[] modules=ModuleManager.getInstance(project).getModules();             for (            IntermediateOutputCompiler compiler : compilers) {               for (              Module module : modules) {                 final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));                 if (outputRoot != null) {                   intermediateRoots.add(outputRoot);                 }                 final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));                 if (testsOutputRoot != null) {                   intermediateRoots.add(testsOutputRoot);                 }               }             }           }           final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());           final int totalRootsCount=projectRoots.size() + intermediateRoots.size();           scanSourceContent(project,projectRoots,totalRootsCount,true);           if (!intermediateRoots.isEmpty()) {             final int projectId=getProjectId(project);             final FileProcessor processor=new FileProcessor(){               public void execute(              final VirtualFile file){                 if (!isMarkedForRecompilation(projectId,getFileId(file))) {                   final SourceFileInfo srcInfo=loadSourceInfo(file);                   if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {                     addSourceForRecompilation(projectId,file,srcInfo);                   }                 }               }             } ;             int processed=projectRoots.size();             for (            VirtualFile root : intermediateRoots) {               indicator.setText2(root.getPresentableUrl());               indicator.setFraction(++processed / (double)totalRootsCount);               processRecursively(root,false,processor);             }           }           markOldOutputRoots(project,buildOutputRootsLayout(project));         }   finally {           myInitializationInProgress.up();         }       }     } .queue();   } } )
ClassLoader loggingClassLoader=classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(),loggingSpec); 
String.format("Error while checking frozen types on field %s of %s %s: %s",field.getName(),classDescription,field.getDeclaringClass().getName(),e.getMessage())
outputType == ProcessOutputTypes.STDERR && !looksLikeProgress(line)
Simple.forClass(Runtime.NoneType.class)
Double.parseDouble(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor","1.0"))
this.cusolverDnSsyevd.invoke(null,solverDn,jobz,uplo,M,(FloatPointer)xAPointer.getDevicePointer(),M,(FloatPointer)xRPointer.getDevicePointer(),new CudaPointer(workspace).asFloatPointer(),worksize,new CudaPointer(allocator.getPointer(INFO,ctx)).asIntPointer())
fm.beginTransaction().add(R.id.stats_container,mStatsPhoneFragment,StatsPhoneFragment.TAG)
LOG.info("Exception while detecting JMX protocol for clusterName = " + clusterName + ", componentName = "+ componentName,e)
ThreadLocal<String>
DatabaseDescriptor.getRpcAddress().getHostAddress()
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_KEY,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "local expireDate = 92233720368547758; " + "if value ~= false then "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1;"+ "end;"+ "return 0; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
public void setEnablePush(long enablePush) throws ConnectionException {   if (enablePush > 1) {     throw new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",Long.toString(enablePush)),Http2Error.PROTOCOL_ERROR);   }   this.enablePush=(enablePush == 1); } 
ReturnPoshiElement returnPoshiElement=null; 
DLFileShortcutLocalServiceUtil.getDLFileShortcut(primaryKey)
note1.getId()
new CacheCreateConfigOperation(config,false)
new RuntimeConfigurationWarning("No attest runner found in selected interpreter")
responseType != null && !Void.class.equals(responseType)
getter.getType()
LOGGER.fine("Packed texture. Reading directly from the blend file!")
new FakeCommitsInfo(fakeCommits,base,resultRef,subjectRef)
value != null && !(dataType instanceof ConvertedDataType)
outputDir.getAbsolutePath()
new Instant(20L)
peopleListFromJSON(jsonArray,localTableBlogId,false,false,false)
getIntent().getAction() == null && savedInstanceState == null
Preconditions.checkNotNull(manager,"manager")
MediaSessionLegacyHelper.getHelper(mContext).sendVolumeKeyEvent(event,AudioManager.USE_DEFAULT_STREAM_TYPE,true)
iter.remove()
field.getCommonType()
importedFolder.getModel()
log.debug("No slayer task for {} in the Task database",taskName)
length == 0 || !StringUtil.startsWithIgnoreCase(lookupString,prefix)
STATUS.isReleaseToRefresh(mStatus)
reader.maxDoc()
public static final class TutorialSupportFragmentImpl extends TutorialSupportFragment {   private TutorialOptions mTutorialOptions;   public TutorialSupportFragmentImpl(){   }   @SuppressLint("ValidFragment") private TutorialSupportFragmentImpl(  @NonNull TutorialOptions tutorialOptions){     mTutorialOptions=tutorialOptions;   }   @Override public void onCreate(  Bundle savedInstanceState){     super.onCreate(savedInstanceState);     setRetainInstance(true);   }   @Override protected TutorialOptions provideTutorialOptions(){     return mTutorialOptions;   } } 
workspace.runBuckBuild("//:provided_only")
connection().createPacketCollectorAndSend(ping).nextResultOrThrow(pingTimeout)
session.closeInternal(new CloseReason(code,reasonPhrase))
E edge
current.localDeletionTime >= gcBefore
!isViewAncestorOf(focused,this) || distanceToView(focused) > 0
parameters.length <= limit
isFieldKept(input,uniqueField)
/**   * An attachment provider that locates the attach API directly from the system class loader.  */ enum ForModularizedVm implements AttachmentProvider {/**   * The singleton instance.  */ INSTANCE; /**   * {@inheritDoc}  */ public Accessor attempt(){   return Accessor.Simple.of(ClassLoader.getSystemClassLoader()); } } 
line.startsWith("//") || line.startsWith("--") || line.startsWith("#")|| line.startsWith("REM")|| line.startsWith("/*")|| line.startsWith("*")
mFormEntryModel.getCaptionHierarchy(index)
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
subjectAlternativeNameIps != null
"Trying to use view with tag " + parentTag + " as a parent, but its Manager doesn't extends ViewGroupManager"
new MaybeCompressedFileResource(new FileResource(tarFile))
destinations[i].getPhysicalName()
bicycleNotDefinedValues.put("bridleway",3d)
server.getClass()
equalTo(0)
formService.populateEntityForm(cmd,entity,subRecordsMap,entityForm,true)
super(manager); 
PyDictLiteralExpression dict=(PyDictLiteralExpression)elementGenerator.createFromText(LanguageLevel.forElement(expression),PyExpressionStatement.class,"{" + stringBuilder.toString() + "}").getExpression(); 
args.length >= 3
statesByName.put(counterName,state)
entry.hasChanged()
connection.onIdleExpired()
asList(DERBY,FIREBIRD,ORACLE,SYBASE)
ThirdEyeUtils.getTimestampTimeSpecFromDatasetConfig(datasetConfig)
ret.shapeInfoDataBuffer()
get(request,plid)
(Double)countObj
assertEquals(2,triggers.size())
Assert.assertEquals(21,as.getAllGlobalProperties().size())
idGenerator.generateUuid()
RuntimeException.class
paintFooterLine.setColor(footerColor)
event.init(viewTag,barCode)
p == null || t < -1
name.equals(blacklistName) || name.startsWith(blacklistName)
new ConnectorTableLayout(handle,Optional.empty(),TupleDomain.none(),Optional.empty(),Optional.empty(),ImmutableList.of())
demoContainerView.animate().alpha(1).setStartDelay(250).setDuration(1000)
conn.getResponseCode() == 200
Variable emitByteSwap(Value operand); 
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN)
application.map(version::compareTo).orElse(0) < 0
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA("DHE-DSS-DES-CBC3-SHA",KeyExchange.EDH,Authentication.DSS,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA")
121 * height
info.crashInfo.stackTrace.length() > 30000
!this.instanceName.equals(singleInstanceProfilingEvent.getInstanceName())
buffersReadyFlyweight.bufferLength(index,TERM_META_DATA_LENGTH)
cache.removeRecord(key)
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withAdmin)
stat.st_size.longValue()
findChildByType(PyElementTypes.TARGET_EXPRESSION)
viewable=true
FSDirectory.getDirectory(sub.toString())
findDelegateForNewObject(name)
(U)identifier
tplSnd.getParent().getChildren()[0]
new ConnectionException(sm.getString("http2Parser.headers.wrongFrameType",connectionId,Integer.toString(headersCurrentStream),frameType),Http2Error.COMPRESSION_ERROR)
myCopyDocument.addDocumentListener(new DocumentAdapter(){   @Override public void documentChanged(  DocumentEvent e){     if (isUpToDate()) {       myTranslation.addFirst(e);     }   } } ,this)
case SUBCMD_TRIGGER: 
username == null
route.setDelay(6000)
new IndexWriter(dir,anlzr,true,IndexWriter.MaxFieldLength.LIMITED)
mIconColor != null && mIconColor.isStateful()
x2 - x1
property.getGetter().valueOrNull()
public Builder setRealmName(String realmName){   realm().setRealmName(realmName);   return this; } 
styleBox.setSelectedIndex(1)
teleport(new Target(entity),name)
SystemProperties.getBoolean("persist.enable_task_snapshots",false)
await().atMost(20,TimeUnit.SECONDS)
StringBuilder buffer=new StringBuilder("("); 
new MqttFixedHeader(UNSUBACK,false,AT_LEAST_ONCE,false,0)
new IndexWriter(dir,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
TokenSet.create(RegExpTT.CHARACTER,RegExpTT.CARET,RegExpTT.DOLLAR,RegExpTT.REDUNDANT_ESCAPE)
new MapStoreWithStoreCount(expectedStoreCount,300,50)
ArrayList<Item>
destroy()
EstimatedHistogram.serializer.serialize(columnnCounts,out)
BodyAvailabilityTest.class
left != right
db.isSyncMode()
XContentType.fromMediaTypeOrFormat(values[0])
req.startAsync(req,res)
epsilon.muli(activationDerivative)
MANAGEMENT_API_MICRO_VERSION=1
Class.forName(name,false,getClass().getClassLoader())
transform.getValue().getScaleX() != 1f
r.destination != null && !r.destination.isEmpty()
out.writeByte(ENUM_CONSTANT_VALUE_TAG)
answer == null || comparator.compare(value,answer) < 0
mDatamodels[1] != null && !isErrorResponse(1)
/**   * Retrieves X.  * @return a value  */ public T1 getX(){   return null; } 
stmt.execute(sql)
vertexIndex % 3 == 0 && vertexIndex < cloneIndexes.limit()
seconds * 1000L
PathUtils.concatPath(homeDir,YML_FILE_DIR)
Throwable e
new SimplexNoise(seed)
cause instanceof ThreadDeath
revWalk.close()
onFocusChange(mHostUrlInput,false)
new ExecutionEnvironment(new MockProfile(),MOCK_EXECUTOR,myProject,null)
event.isError()
dispatchedMessage.remove(msgId)
assertNull(savedPayment4Again.getLastSuccessStateName())
getLogger()
new WebApplicationException(e,serverError(e))
BUTTON_QUIESCENT_ALPHA=0.70f
knownHandlers.contains(handler)
-100
archivePath.get()
b.setSubject(TEST_SUBJECT).setSentDate(SENT_DATE).setHideTimeZone(true)
InspectionsConfigTreeTable.getAdditionalShift()
patchResourcesPath.put(key + ";" + frag.getSymbolicName(),Resource.newResource(patchFragUrl))
super.onDestroy()
n < colPI
new ShowArticleOnTouchListener(helpFileName,activity,title)
LinkedList<Object>
SSLContext.getDefault().createSSLEngine(address.getHost(),address.getPort())
new Field(name,DateField.dateToString(value),true,true,false)
maxIdxPerLine - 3
localExclude != null && localExclude.isValid()
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
timeMillis + MILLIS_IN
arg1 > arg2
batteryVp > medium
Thread.sleep(10)
imageWidth / images.size()
indexWriter.forceMergeDeletes(false)
states[0].hollow
@Test public void testSimplePutTake() throws OutOfCapacityException {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   queue.put(createQueryRequest(groupOne,metrics));   assertEquals(groupFactory.numCalls.get(),2);   SchedulerQueryContext r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupOne);   r=queue.take();   assertEquals(r.getSchedulerGroup().name(),groupTwo); } 
ColorProperties.getColor("tabTitle")
SystemKeyspace.setLocalHostId(hostId)
new ProtoFile("descriptor.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(messageType),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
assertEquals(adjustedInvoice.getAmount().compareTo(BigDecimal.ZERO),0)
/**   * @return  */ private StringBuilder getCurrentBuffer(){   if (!TransactionSynchronizationManager.hasResource(bufferKey)) {     TransactionSynchronizationManager.bindResource(bufferKey,new StringBuffer());     TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter(){       @Override public void afterCompletion(      int status){         clear();       }       @Override public void beforeCommit(      boolean readOnly){         try {           if (!readOnly) {             complete();           }         }  catch (        IOException e) {           throw new FlushFailedException("Could not write to output buffer",e);         }       }       private void complete() throws IOException {         StringBuffer buffer=(StringBuffer)TransactionSynchronizationManager.getResource(bufferKey);         if (buffer != null) {           String string=buffer.toString();           byte[] bytes=string.getBytes(encoding);           int bufferLength=bytes.length;           ByteBuffer bb=ByteBuffer.wrap(bytes);           int bytesWritten=channel.write(bb);           if (bytesWritten != bufferLength) {             throw new IOException("All bytes to be written were not successfully written");           }           if (forceSync) {             channel.force(false);           }           if (TransactionSynchronizationManager.hasResource(closeKey)) {             closeCallback.run();           }         }       }       private void clear(){         if (TransactionSynchronizationManager.hasResource(bufferKey)) {           TransactionSynchronizationManager.unbindResource(bufferKey);         }         if (TransactionSynchronizationManager.hasResource(closeKey)) {           TransactionSynchronizationManager.unbindResource(closeKey);         }       }     } );   }   return (StringBuffer)TransactionSynchronizationManager.getResource(bufferKey); } 
log.warn("Error processing event, NOT scheduling retry for event='{}', retryNb='{}'",originalNotificationEvent,retryNb,exception)
new IndexWriter("index",ANALYZER,false,IndexWriter.MaxFieldLength.LIMITED)
id=52
new NTCredentials(PROXY_USER,PROXY_PASS,LOCALHOST,PROXY_DOMAIN)
/**   * Changes the group of a file or directory specified by args recursively.  */ public final class ChgrpRecursiveCommand extends AbstractAclCommand {   public ChgrpRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrpr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,true);   }   @Override public String getUsage(){     return "chgrpr <group> <path>";   } } 
mFrameSlots.remove(name)
id=14
resource.terminate(input.getId(),extractorId)
methodAnnotations != null
endBounds.height()
(KvCoder)inputCoder
Arrays.asList(createBlock(0),createBlock(1),createBlock(2),createBlock(3),createBlock(4),createBlock(5),createBlock(6))
Object maxIntDigits=properties.get(NumberFormatSample.PROP_MAX_INT_DIGITS); 
Field[]
this.children.add(0,body)
PASSWORD_SCRYPT_N=11
tnCount=70
-33.86543615612047
d1.isTimeOut() || d2.isTimeOut()
internalCluster().getDataNodeInstance(ClusterService.class)
internalRemovePlugin((IRendererPlugin)tasks[i],AFrameTask.UNUSED_INDEX)
smartLockHelper != null && mUsername != null && mPassword != null
mBluetoothService.notifyIncomingA2dpConnection(address,false)
new IndexWriter(startDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
super(numHits); 
PlatformPatterns.or(psiElement().withParent(PsiExpression.class),psiElement().inside(PsiClassObjectAccessExpression.class),psiElement().inside(PsiThisExpression.class),psiElement().inside(PsiSuperExpression.class))
initial(randToUse)
mAppName.getVisibility() != GONE && appWidth > mHeaderMinWidth
r[0]
h - y
LoggerFactory.getLogger(MongoQueryCreator.class)
actionCache.remove(execPath)
allowCredentials=true
request.path()
RedisRunner.shutDownDefaultRedisServerInstance()
i < 3
Response.ok()
executableTypes.size() == 1 && !target.getType().hasImplicitSourceTypes()
s.trim().endsWith("#") || s.trim().length() == 0
final SimulatedDpad mSimulatedDpad; 
hex.toUpperCase()
ViewWSRPClickToInvokeResourceServingPhaseRDPTest.class
mDataNotSet || mData == null || mData.getYValCount() <= 0
log.debug("getModelLastUpdateTimes(): Session ID is unknown: {}",currentSessionID)
6 * width * height
subjectConfData.getNotOnOrAfter().isBeforeNow()
OrganizationMembershipPolicyUtil.checkRoles(null,filteredOrganizationUserGroupRoles)
log.warn("Failed to retrieve instances from Eureka",e)
final PsiMethod constructor
UpgradeStepRegistrator.class
ISOChronology.getInstance(getZone())
REQUEST_TIMEOUT=4000
GlobalContext.getInstance().getAppTheme() == R.style.AppTheme_Four && getResources().getBoolean(R.bool.is_phone)
new LineNumberRange(0,0,move)
Map<IdeFrame,Object>
MAX_CACHE_PREPARED=10000
passwd.getBytes(StringUtils.UTF8)
speed < 83
/**   * @author Andreas Schildbach  */ public final class SendCoinsQrActivity extends Activity {   private static final int REQUEST_CODE_SCAN=0;   @Override protected void onCreate(  final Bundle savedInstanceState){     super.onCreate(savedInstanceState);     startActivityForResult(new Intent(this,ScanActivity.class),REQUEST_CODE_SCAN);   }   @Override public void onActivityResult(  final int requestCode,  final int resultCode,  final Intent intent){     if (requestCode == REQUEST_CODE_SCAN && resultCode == Activity.RESULT_OK) {       final String input=intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT);       new StringInputParser(input){         @Override protected void handlePaymentIntent(        final PaymentIntent paymentIntent){           SendCoinsActivity.start(SendCoinsQrActivity.this,paymentIntent);           SendCoinsQrActivity.this.finish();         }         @Override protected void handleDirectTransaction(        final Transaction transaction) throws VerificationException {           final WalletApplication application=getWalletApplication();           application.processDirectTransaction(transaction);           SendCoinsQrActivity.this.finish();         }         @Override protected void error(        final int messageResId,        final Object... messageArgs){           dialog(SendCoinsQrActivity.this,dismissListener,0,messageResId,messageArgs);         }         private final OnClickListener dismissListener=new OnClickListener(){           @Override public void onClick(          final DialogInterface dialog,          final int which){             SendCoinsQrActivity.this.finish();           }         } ;       } .parse();     }  else {       finish();     }   } } 
log.warn("Unexpected exception on closing transaction.  Cause: " + e)
GL.glGenTextures(n,textures,Memory.getPosition(textures))
validator.error("@JunctionTable should be specified on only one side of a " + "ManyToMany relationship")
QMMetaEvent[]
new ConnectorRefsAttribute(CommonAttributes.STATIC_CONNECTORS,true,true)
Assert.assertEquals(120L,ownerCapsuleNew.getNetUsage())
createMessageConsumer(session,destinationName,messageSelector,false,null)
SystemInfo.isMac ? 3 : 2
--i
mock.expectedMinimumMessageCount(3)
writeRepeatedFixed64Impl(id,val)
userRecord != null && userRecord.mClientRecords != null
storeDirList != null && storeDirList.length > (numBackups + 1)
in.readVLong()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
uuids.split("/",2)
s <= 10000
vp.getCamera().resize(width,height,false)
new QSDetailClipper(mDetail)
getDelegate().handle(exchange).switchOnError(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
tempBlock.getPath()
MessagingService.instance().sendRR(message,target,handler,false)
avatar == null || avatar.getFullImage() == null
row.getTable().moveLastOver(row.getIndex())
JSRootConfiguration.getInstance(getProject()).storeLanguageLevelAndUpdateCaches(JSLanguageLevel.JS_1_7)
topActivity != null && topActivity.getStack().getStackId() != PINNED_STACK_ID
versionObject.getVersionBase()
tableMetadataBuilder(DEFAULT_TEST_LINEITEMS).column("orderkey",BIGINT).column("partkey",BIGINT).column("quantity",DOUBLE)
url.addEncodedArgument(getAttributeValue(nodeAtts,"name"),tempNode.getFirstChild().getNodeValue())
Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor()
zoom < 17
mIconAttrId != 0
order.isCurrent() || order.isFuture()
taskDao.findByUserId(2L,new Sort(Direction.ASC,"id"))
/**   * Pops a constructor call from the enclosing constructor call stack.  * @return the popped call  */ public ConstructorCallExpression popEnclosingConstructorCall(){   return enclosingConstructorCalls.removeFirst(); } 
Assert.assertEquals(3,latch.getCount())
useDisMax=jp.getIntValue() != 0
DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(),resource,msg)
LOGGER.trace("Cache expiration duration after reads is set to [{}]",currentDuration)
EXCEPTION_PATTERN.matcher(output)
this.settings.analyzeWildcard(analyzeWildcard)
sDefaults.putBoolean(BOOL_SHOW_CDMA_CHOICES,false)
this.saveTotalNetWeight(1L)
new SkylarkTest("--incompatible_disallow_dict_plus=false")
datastoreFactory.getDatastore(c.getPipelineOptions(),v1Options.getProjectId(),v1Options.getLocalhost())
url.startsWith(completeUrl)
s.elapsed(TimeUnit.NANOSECONDS)
PREVIEW_FRAME_TIMEOUT=1000
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
lock.tryLock(30,TimeUnit.SECONDS)
Thread.sleep(50)
myListeners.add(0,listener)
Class.forName(className,true,value.getClass().getClassLoader())
renderManager.render(tpf,true)
cell == null || cell.recon == null
err.jspError("jsp.error.tld.mandatory.element.missing","jsp-version",uri)
/**   * Needed for statistics.   */ private final LongAdder8 rejectedJobsCnt=new LongAdder8(); 
getSelectedIconColorRes()
in.readStringNull(10)
exchFut.discoveryEvent().eventNode()
Log_OC.e(TAG,"\t file is NULL")
new byte[20]
recalculateRouteInBackground(lastFixedLocation,finalLocation,currentGPXRoute)
traces.remove()
edge.setDirection(type)
collectCount <= lim
Arrays.asList("dirty","log","serialVersionUID","DATE_TIME_PATTERN","TIME_PATTERN","DATE_PATTERN","FORM_NAMESPACE_PATH_SEPARATOR","FORM_NAMESPACE_PATH_MAX_LENGTH","obsId","groupMembers","uuid","changedBy","dateChanged","voided","voidedBy","voidReason","dateVoided","formNamespaceAndPath","$jacocoData")
indexBuf.getData().limit()
mContext.getPackageManager().getApplicationInfoAsUser(sbn.getPackageName(),0,sbn.getUser().getIdentifier())
parser.parse("-u",username,"-p",password,"-U",url)
new ApiException(ApiException.Type.BAD_FORMAT,e)
new OpenFileDescriptor(project,selectedFiles[i])
elementToDelete == null
CHAIN_CONSTRUCTION
assertEquals("Size of " + r,11,r.size())
handler.waitFor(3000)
new VideoContent(new ContentRemoteContainer(new DocumentMessage(reference.getFileId(),reference.getAccessHash(),reference.getFileSize(),reference.getFileName(),"video/mp4",fastThumb != null ? new im.actor.model.api.FastThumb(fastThumb.getW(),fastThumb.getH(),fastThumb.getImage()) : null,new DocumentExVideo(w,h,duration))))
queryIndex == 0 || queryProcessor.getResultContainers().size() == 1
forced == null && con.getListener().isForceDefault()
uri.getAssetName().toLowerCase()
super.getHibernateTemplate().execute(new HibernateCallback(){   public Object doInHibernate(  Session session) throws HibernateException, SQLException {     Criteria crit=session.createCriteria(clazz);     crit.add(Expression.allEq(queryMap));     List results=crit.list();     if (results.size() > 0)     return results.get(0);     return null;   } } )
context.getLocation(argument)
DomAnchor<DomElement>
Preconditions.checkState(subscriptionId != null || !failOnMissingSubscription,"Missing subscription id")
iteration=1
isPrimitive(resultType)
(count + numSkipped + skipInterval) >= df
myVirtualFile != null && myProject != null
klass.getDeclaredFieldsUnchecked(false,declaredFields)
metadata.getFaceRectangles()
@Bean @Primary RepositoryImpl repository(){   return new RepositoryImpl(systemProperties(),keyValueDataSource(),keyValueDataSource(),this); } 
PsiFormatUtil.getExternalName(psiMethod,false)
meta.setContentType(Mimetypes.MIMETYPE_OCTET_STREAM)
GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.INIT); 
r2.getName()
!WebUtils.isForward(request)
didtimeout=true
mPowerManager.wakeUp(SystemClock.uptimeMillis(),"android.policy:FINGERPRINT")
hasMatch=false
provider.addRootSetChangedListener(this)
IndexOutOfBoundsException e
JMeterUtils.getPropDefault("proxy.pause",5000)
MonitoringPortlet.isMonitoringPortletRenderRequest()
pathURL.toURI().getSchemeSpecificPart()
!View.isInitialised() || EventQueue.isDispatchThread()
buffer.writeInt(TYPE_LEN)
pending_native(myFd)
new WeightedRandomChestContent(item,min,max,weight)
Size.kilobytes(16)
assertEquals(10,sqlStatements.size())
Byte.parseByte(value.toString())
ITERATIONS=3
ImmutableList<SuggestedFix>
getHeadNodeId(upNodeIndex)
i=2000
assertThat(list.params()).hasSize(11)
ELECTRON_BEAM_OFF_ANIMATION_DURATION_MILLIS=400
new EnumValidator(ParticipantStatus.class,true,false)
leafOutcomeValue.advance(doc)
mCursor.close()
new EnterSelectionDialog(shell,tablenames,Messages.getString("AccessOutputDialog.Dialog.SelectATable.Title"),Messages.getString("AccessOutputDialog.Dialog.SelectATable.Message"))
((MasterSlaveDataSource)dataSource).getMasterDataSource()
reporter.report("\"default\" methods must have a body",m)
synchronized (mAm) {   int[] users=mAm.getUsersLocked();   if ("all".equals(name)) {     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         services.add(r1);       }     }   }  else {     ComponentName componentName=name != null ? ComponentName.unflattenFromString(name) : null;     int objectId=0;     if (componentName == null) {       try {         objectId=Integer.parseInt(name,16);         name=null;         componentName=null;       }  catch (      RuntimeException e) {       }     }     for (    int user : users) {       ServiceMap smap=mServiceMap.get(user);       if (smap == null) {         continue;       }       ArrayMap<ComponentName,ServiceRecord> alls=smap.mServicesByName;       for (int i=0; i < alls.size(); i++) {         ServiceRecord r1=alls.valueAt(i);         if (componentName != null) {           if (r1.name.equals(componentName)) {             services.add(r1);           }         }  else         if (name != null) {           if (r1.name.flattenToString().contains(name)) {             services.add(r1);           }         }  else         if (System.identityHashCode(r1) == objectId) {           services.add(r1);         }       }     }   } } 
Arrays.asList("00:02:C7","00:16:FE","00:19:C1","00:1B:FB","00:1E:3D","00:21:4F","00:23:06","00:24:33","00:A0:79","00:0E:6D","00:13:E0","00:21:E8","00:60:57","00:0E:9F","00:12:1C","00:18:91","00:18:96","00:13:04","00:16:FD","00:22:A0","00:0B:4C","00:60:6F","00:23:3D","00:C0:59","00:0A:30","00:1E:AE","00:1C:D7","00:80:F0","00:12:8A")
limit=100
that.getTable()
MatchingFiltersFactory filters=new MatchingFiltersFactory(Module.LUCENE,Target.LUCENE); 
ENABLED.set(true)
Integer.valueOf(args.get(2))
verify(mWifiService).stopLocalOnlyHotspot()
(byte)0xF0
route.isBluetooth()
data.getAvatar() != null && data.getAvatar().getFullImage() != null
i < 10000
HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod()) || HTTPConstants.OPTIONS.equals(getMethod())
mn.getTypeDescriptor().equals(candidate.getTypeDescriptor()) && !mn.isAbstract() && !mn.isStatic()
new IndexWriter(directory,analyzer,false,IndexWriter.MaxFieldLength.LIMITED)
projectGeneratorParameters.isWithoutTests()
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_ctrmm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
Log.warn("Disable autoInstallOSGiBundles as the contexts folder '" + scandir.getAbsolutePath() + " does not exist.")
-3
"Camera resolution: " + cameraResolution
suggestUniqueVariableName(name,place,true)
LOG.error("DataNode is out of memory. Will retry in 30 seconds.",ie)
CodeStyleManager.getInstance(myProject).reformatText(file,ranges)
portletDataContext.addReferenceElement(stagedModel,entityElement,layout,PortletDataContext.REFERENCE_TYPE_DEPENDENCY,true)
getFragmentManager().beginTransaction().replace(android.R.id.content,personDetailFragment,KEY_PERSON_DETAIL_FRAGMENT)
new RecordReaderDataSetIterator(rr,batchSize,labelIndex,numPossibleLabels,regression)
socket.closeLatch.await(10,TimeUnit.SECONDS)
MathUtils.convertLongToInt(remainingBytes)
new Lock.With(directory.makeLock("commit.lock"),COMMIT_LOCK_TIMEOUT){   public Object doBody() throws IOException {     segmentInfos.write(directory);     return null;   } } 
(spoon.getRepository() != null) && (transMeta.getObjectId() != null) && (spoon.getRepository().getTransformationLock(transMeta.getObjectId()) != null)
kbase.newStatefulKnowledgeSession(conf)
color != null && color.length() > 0
!dockOnTopOrLeft
Assert.assertEquals(editor.getMarkersQuantity(ERROR_OVERVIEW),12)
pFromY - pToY
expression.length() - 1
null != rootCause && rootCause.getCause() != null
endFunction("get_column_statistics_by_partition: ",statsObj != null,null)
{0,400}
max=3
entry.getSupportsPartial()
StringUtils.stringToInt(localMediaId)
DLAppServiceUtil.updateFolder(folder.getFolderId(),album.getTitle(),album.getDescription(),serviceContext)
windowIndex >= currentTimeline.getWindowCount()
LOG.warn("Loaded Java method overrides another, but resolved as Kotlin function, doesn't.\n" + "super function = " + superFunction + "\n"+ "super class = "+ superFunction.getContainingDeclaration()+ "\n"+ "sub function = "+ function+ "\n"+ "sub class = "+ function.getContainingDeclaration()+ "\n"+ "sub method = "+ JavaSignatureFormatter.getInstance().getExternalName(method)+ "\n"+ "@KotlinSignature = "+ SignaturesUtil.getKotlinSignature(annotationResolver,method))
new NodeStats(discoveryNode,0L,null,null,null,null,null,null,null,null,null,null,null,null,null)
in.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
new LinkedHashMap(request.getParameterMap())
/**   * {@code BuildCacheService} decorator that stages files locally from a remote build cache. This provides a separation betweena build cache problem and a  {@code BuildCacheEntryReader} or {@code BuildCacheEntryWriter} problem.  */ public class StagingBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private final RoleAwareBuildCacheService delegate;   private final boolean stageCacheEntries;   private final TemporaryFileProvider temporaryFileProvider;   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  boolean stageCacheEntries,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.stageCacheEntries=stageCacheEntries;     this.temporaryFileProvider=temporaryFileProvider;   }   public StagingBuildCacheServiceDecorator(  TemporaryFileProvider temporaryFileProvider,  RoleAwareBuildCacheService delegate){     this(temporaryFileProvider,!(delegate instanceof DirectoryBuildCacheService),delegate);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     if (stageCacheEntries) {       return super.load(key,new StagingBuildCacheEntryReader(reader,temporaryFileProvider));     }  else {       return super.load(key,reader);     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     if (stageCacheEntries) {       super.store(key,new StagingBuildCacheEntryWriter(writer,temporaryFileProvider));     }  else {       super.store(key,writer);     }   }   /**   * Reads the cache entry to a local file from the build cache and then reads the cache entry from the local file.  */ private static class StagingBuildCacheEntryReader implements BuildCacheEntryReader {     private final BuildCacheEntryReader reader;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryReader(    BuildCacheEntryReader reader,    TemporaryFileProvider temporaryFileProvider){       this.reader=reader;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void readFrom(    InputStream input) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         stageCacheEntry(input,destination);         readCacheEntry(destination);       }   finally {         destination.delete();       }     }     private void stageCacheEntry(    InputStream input,    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         IOUtils.copyLarge(input,fileOutputStream);       }   finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void readCacheEntry(    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         reader.readFrom(fileInputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileInputStream);       }     }   }   /**   * Writes the new cache entry to a local file and then pushes the local file to the delegate build cache.  */ private static class StagingBuildCacheEntryWriter implements BuildCacheEntryWriter {     private final BuildCacheEntryWriter writer;     private final TemporaryFileProvider temporaryFileProvider;     private StagingBuildCacheEntryWriter(    BuildCacheEntryWriter writer,    TemporaryFileProvider temporaryFileProvider){       this.writer=writer;       this.temporaryFileProvider=temporaryFileProvider;     }     @Override public void writeTo(    OutputStream output) throws IOException {       File destination=temporaryFileProvider.createTemporaryFile("gradle_cache","entry");       try {         writeCacheEntry(destination);         unstageCacheEntry(output,destination);       }   finally {         destination.delete();       }     }     private void writeCacheEntry(    File destination) throws IOException {       OutputStream fileOutputStream=null;       try {         fileOutputStream=new BufferedOutputStream(new FileOutputStream(destination));         writer.writeTo(fileOutputStream);       }  catch (      FileNotFoundException e) {         throw new BuildCacheException("Couldn't create local file for cache entry",e);       }  finally {         IOUtils.closeQuietly(fileOutputStream);       }     }     private void unstageCacheEntry(    OutputStream output,    File destination) throws IOException {       InputStream fileInputStream=null;       try {         fileInputStream=new BufferedInputStream(new FileInputStream(destination));         IOUtils.copyLarge(fileInputStream,output);       }   finally {         IOUtils.closeQuietly(fileInputStream);       }     }   } } 
simpleRecyclerViewAdapter.removeLast()
new FileOutputStream(tempFile)
containingClass.getContainingClass()
public Integer getAutoCommitInterval(){   return this.autoCommitInterval; } 
pixel >>> 8
myApplyData == null || myDisposed
RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authn,false)
ESClientYamlSuiteTestCase.createParameters()
rect == null || urls.size() > 1
log.info("{}: Requesting {} transactions for dep resolution",vAddress,needToRequest.size())
USE_DISPLAY_LIST_PROPERTIES=false
UpgradeStepRegistrator.class
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     resultProcessor.process(new ArrayList<MavenArtifact>(result));   } } ,indicator.getModalityState())
valueType.isIntegerNumber() || valueType.isChar()
log.info("jmeterthread.startearlier=true (see jmeter.properties)")
view.getMode()
findSetUpMethod(psiClass)
msg.getSpannableString()
packetSize=160
channel.sendHeaders()
component instanceof JTree || component instanceof JTextField
getKeyFromGrant(grantAlias)
imageHeight - kernelHeight + 2
assertEquals(1,counter)
AnnotatedElementUtils.hasAnnotation(type,Validated.class)
if (mAllowUndeclaredRTE) {   processImport(aAST); } 
getRequestParameters()
selectedUser.getUserId()
tFAgentStatMapper.map(agentStatBo)
PartitionColumnsSeparator.class
DateFormat.getMediumDateFormat(context)
returnPoshiElement == null
paramValue == null || paramValue.isEmpty()
String.format(Locale.ROOT," Time: %6.2fms",queryTime * 1.e-6 / run)
langTool.check(paraText,true,JLanguageTool.ParagraphHandling.ONLYPARA)
MavenProjectsManager.getInstance(myProject).doInitComponent(false)
Integer.toHexString(flags)
new PrestoException(HIVE_FILESYSTEM_ERROR,"Failed to list directory: " + path,e)
setInternal(mapService.getMapServiceContext().toData(entry.getKey(),partitionStrategy),mapService.getMapServiceContext().toData(entry.getValue()),-1,TimeUnit.MILLISECONDS)
doTestCompletionVariants("av10.xml","fill_parent","match_parent","wrap_content","@android:")
database.FindProduct(node.getManufacturer(),node.getDeviceType(),node.getDeviceId(),node.getApplicationVersion())
/**   * Returns first child <b>element</b> with given name or <code>null</code> if no such children exist.  */ public Element getFirstChildElement(String elementName){   if (childNodes == null) {     return null;   }   for (int i=0, childNodesSize=childNodes.size(); i < childNodesSize; i++) {     Node child=childNodes.get(i);     if (elementName.equals(child.getNodeName())) {       child.initSiblingNames();       return child;     }   }   return null; } 
@XmlElement protected String value; 
/**   * Callback that is invoked <em>after</em> all test methods have been invoked.  * @param context the current container extension context  */ void afterAll(ContainerExtensionContext context) throws Exception ; 
color.toLowerCase(Locale.ROOT)
cSubmitLimit=10
toObject(dataValue)
new String(text.getBytes(),0,text.getLength())
new TestClass(ic,m_testName,testMethodFinder,m_annotationFinder,m_runInfo)
Exception pe
buffer.size()
new AnnotationNode(desc,true)
id=16500
this.copyFieldErrors
assertEquals(4,cms.getMaxThreadCount())
InputHelper.capitalizeFirstLetter(brand)
ClassFileVersion.forKnownJavaVersion(enforce.value()).compareTo(supportedVersion) <= 0
assertThatThrownBy(() -> this.messageService.notPublisherPreAuthorizeFindById(1L)).isInstanceOf(IllegalStateException.class).extracting(Throwable::getMessage).isEqualTo("The returnType class java.lang.String on public abstract java.lang.String org.springframework.security.config.annotation.method.configuration.ReactiveMessageService.notPublisherPreAuthorizeFindById(long) must return an instance of org.reactivestreams.Publisher (i.e. Mono / Flux) in order to support Reactor Context")
ownedEntryCount == nearCacheSize
Pattern.compile(keys[i],Pattern.CASE_INSENSITIVE)
DocumentationManager.storeOriginalElement(PlatformDataKeys.PROJECT.getData(dataContext),originalElement,element)
assertThat(System.currentTimeMillis() - start).isBetween(950L,1100L)
mBrowserType == MediaBrowserType.GRAVATAR_IMAGE_PICKER || mBrowserType == MediaBrowserType.SITE_ICON_PICKER
new HashMap<K,CacheObj<K,V>>(capacity + 1,1.0f)
new WorldPoint(1303,3762,0)
disabledForeground(false)
mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE || mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET
timelineObjectHolder.getObject().getChunk(0).getObject().getMetrics()
indexMap || indexAddress || indexTransport|| indexPOI
source != null && !source.isEmpty()
LOG.warn("Failed to write into TachyonStorage, the block " + getCurrentBlockId() + " will not be in TachyonStorage")
chain.filter(exchange).subscriberContext((Context context) -> context.put(Authentication.class,exchange.getPrincipal()))
new DeleteByQueryWrapper(rewritten,schema)
dpToPx(24f)
parseValueParameterList(false,true,valueArgsRecoverySet)
xmlWriter.writeStartDocument("UTF-8","1.0")
LOG.debug("Failed to resolve info about toolchain %s from plist files %s",toolchainDir.toString(),Arrays.toString(potentialPlistNames))
containerKeyName=elementName
new QueryException(e,"Error getting target node for %s\n%s",target,e.getMessage())
user.getSystemId() == null || user.getSystemId().equals("")
!Algorithms.isEmpty(address) && !address.equals(title) && !address.equals(getMapActivity().getString(R.string.no_address_found))
DeclarationDescriptorVisitor<Void,StringBuilder>
item == null || item.getStatus() < 2
targetClass != null && field != null
e.contains(SVNErrorCode.WC_NOT_DIRECTORY) || e.contains(SVNErrorCode.WC_NOT_FILE) || e.contains(SVNErrorCode.WC_PATH_NOT_FOUND)
origin.realComponent().doubleValue() < other
new ConcurrentHashMap<Class<?>,LifecycleMetadata>(256)
synchronized (mAm) {   pw.print(prefix);   pw.print("SERVICE ");   pw.print(r.shortName);   pw.print(" ");   pw.print(Integer.toHexString(System.identityHashCode(r)));   pw.print(" pid=");   if (r.app != null)   pw.println(r.app.pid);  else   pw.println("(not running)");   if (dumpAll) {     r.dump(pw,innerPrefix);   } } 
startupManager.runWhenProjectIsInitialized(new DumbAwareRunnable(){   public void run(){     postStartup();   } } )
bounds.height()
getBorderRadius() >= 0.5f || getPathEffectForBorderStyle() != null
new IllegalArgumentException("ClassInfo's name should be non-null")
getReadTimeout(requestConfig,attempt)
command.getOldName()
outputPath=args[1]
!value.iterator().hasNext()
new Type(null,"java.lang","java.lang.Object",tableName)
/**   * Returns the constructor call which is on the top of the stack, or null if there's no such element.  * @return the enclosing constructor call on top of the stack, or null if no such element.  */ public ConstructorCallExpression getEnclosingConstructorCall(){   if (enclosingConstructorCalls.isEmpty())   return null;   return enclosingConstructorCalls.getFirst(); } 
config != Config.ARGB_8888 || colorSpace == ColorSpace.get(ColorSpace.Named.SRGB)
getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,new FirstUsageWelcomeFragment(),FirstUsageWelcomeFragment.TAG).commitAllowingStateLoss()
mSyncStatus.valueAt(i)
lo != null
myFixture.testCompletionVariants("/jsp/actionLink-completionvariants-no-namespace.jsp","/","/WEB-INF","/actionLink-completionvariants-no-namespace.jsp","/actionLink/","/rootActionLink.action")
deleteTaskView.animate().setDuration(300).scaleX(0.9f)
DefaultCacheKeysFactory.staticCreateCollectionKey(id,persister,factory,tenantIdentifier)
myNameField.getFocusableComponent()
steps <= 0
Slog.w(TAG,"Service done with onDestroy, but executeNesting=" + r.executeNesting + ": "+ r)
ValueGeometry.getFromEWKB(bytes)
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,writableRegistry(),ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName("cluster")).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
randomNonNegativeLong()
includeSpecifiedOrganization
friendlyURL.equals(layout.getFriendlyURL(locale))
(Number)_aggregationResultList.get(i)
bibentries == null || bibentries.size() == 0
configure(COMPONENT,"cxf-jaxb")
public class Arial extends BasicFontMetrics { {     maxCharHeight=781;     widths[32]=277;     widths[33]=277;     widths[34]=354;     widths[35]=556;     widths[36]=556;     widths[37]=889;     widths[38]=666;     widths[39]=190;     widths[40]=333;     widths[41]=333;     widths[42]=389;     widths[43]=583;     widths[44]=277;     widths[45]=333;     widths[46]=277;     widths[47]=277;     widths[48]=556;     widths[49]=556;     widths[50]=556;     widths[51]=556;     widths[52]=556;     widths[53]=556;     widths[54]=556;     widths[55]=556;     widths[56]=556;     widths[57]=556;     widths[58]=277;     widths[59]=277;     widths[60]=583;     widths[61]=583;     widths[62]=583;     widths[63]=556;     widths[64]=1015;     widths[65]=666;     widths[66]=666;     widths[67]=722;     widths[68]=722;     widths[69]=666;     widths[70]=610;     widths[71]=777;     widths[72]=722;     widths[73]=277;     widths[74]=500;     widths[75]=666;     widths[76]=556;     widths[77]=833;     widths[78]=722;     widths[79]=777;     widths[80]=666;     widths[81]=777;     widths[82]=722;     widths[83]=666;     widths[84]=610;     widths[85]=722;     widths[86]=666;     widths[87]=943;     widths[88]=666;     widths[89]=666;     widths[90]=610;     widths[91]=277;     widths[92]=277;     widths[93]=277;     widths[94]=469;     widths[95]=556;     widths[96]=333;     widths[97]=556;     widths[98]=556;     widths[99]=500;     widths[100]=556;     widths[101]=556;     widths[102]=277;     widths[103]=556;     widths[104]=556;     widths[105]=222;     widths[106]=222;     widths[107]=500;     widths[108]=222;     widths[109]=833;     widths[110]=556;     widths[111]=556;     widths[112]=556;     widths[113]=556;     widths[114]=333;     widths[115]=500;     widths[116]=277;     widths[117]=556;     widths[118]=500;     widths[119]=722;     widths[120]=500;     widths[121]=500;     widths[122]=500;     widths[123]=333;     widths[124]=259;     widths[125]=333;     widths[126]=583;   } } 
INDENT_BREAK_FROM_CASE
BaseOutputLayerSpace.Builder<Builder>
LOG.info(e)
"source".equals(key) || "target".equals(key) || "value".equals(key)|| "weight".equals(key)|| "label".equals(key)
StringBuffer sb=new StringBuffer(html); 
Pattern.compile("(\".*\")|(0x[\\p{XDigit}]+)",Pattern.DOTALL)
myScopeSlider.setValue(2)
super(pipeline,null,HEAD_NAME,true,true); 
!serialNumber.equals(null)
ViewCompat.getLayoutDirection(backLayer)
session.closeInternal(new CloseReason(CloseReason.CloseCodes.NO_STATUS_CODE,null))
return START_STICKY; 
getSingleModelLoader().load(databaseWrapper,SQLite.select().from(getModelClass()).where(getPrimaryConditionClause(model)).getQuery(),model)
res > mLen
log.info("Obtained HBase Auth Token from ZooKeeper quorum {} for job {}",configuration.get(quorumCfgKey),job.getJobName())
new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1)+ "]")
world.setBlock(x,y,z,targetID,targetMeta,2)
Float.valueOf(context.getConfiguration().get(BatchConstants.CFG_REGION_SPLIT_SIZE))
latch.await(4000,TimeUnit.MILLISECONDS)
!afterSymbol && read == '/'
!exists
pathname.getName()
a.getBoolean(R.styleable.View_fadeScrollbars,true)
client.replicationControllers().inNamespace(session.getNamespace()).withName(replicationControllerName)
new KillableColoredProcessHandler(commandLine,true)
new IOException(msg)
JSParameterTableModel.createDefaultValueCellFragment("",createFakeClass(),JavaScriptSupportLoader.ECMA_SCRIPT_L4)
Exception throwable
createRx(config)
state.addNullness(false,x)
containsString("State")
mState == STATE_UNINITIALIZED
_nonceQueue.remove(nonce)
BigDecimal.valueOf(100d)
(float)executions / iterations
/**   * Total job execution time (unaccounted for in metrics).   */ private final LongAdder8 finishedJobsTime=new LongAdder8(); 
LlapServlet.class
assertEquals(0.0,biaOp.currentResult().doubleValue(),1e-1)
Arrays.asList(Errors.UNKNOWN_TOPIC_OR_PARTITION)
ConstantNode.forConstant(stamp(),JavaConstant.NULL_POINTER,null)
offset > editor.getDocument().getTextLength()
Integer.MIN_VALUE + 9
lastTerm.get()
new KettleRowException("Couldn't find hop '" + from + "' for reading from")
allowedAudiences.containsAll(providedAudiences)
stackTrace.length <= depth
OpenmrsProfileWithoutMissingModule.class
Product
TEMP_DIR_ATTEMPTS=10_000
gi.getOriginalVertexName()
Preferences.getBoolean(R.string.p_rmd_snooze_dialog,false)
this.privateKeyLocation
new Update(runnable){   public void run(){     wrapper.get().run();   } } 
info != null && info.isConnected() == true
Utils.getInt(storm_conf.get(Config.TOPOLOGY_WORKERS),1)
o.getClass() != getClass() && !(o instanceof ArrayNode)
fragmentEntryPersistence.findByG_FCI_S(groupId,fragmentCollectionId,status,start,end,orderByComparator)
new CacheConfiguration(CACHE2_NAME)
Thread.sleep(40000)
KOREA_ISO_COUNTRY_CODE.equals(defaultCountryIso) && (pn.getCountryCode() == util.getCountryCodeForRegion(KOREA_ISO_COUNTRY_CODE)) && (pn.getCountryCodeSource() == PhoneNumber.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN)
generatorConfig.getDaoTargetFolder()
JavascriptCompiler.compile("bar()",mixedFunctions,thisLoader)
removedGenerator.equals(next.getClass())
context.formatNewLine()
alertDialogBuilder.setPositiveButton(resources.getString(R.string.title_allow),new DialogInterface.OnClickListener(){   @Override public void onClick(  DialogInterface dialog,  int which){     result.restricted=false;     if (!cbWhitelist.isChecked() && !cbWhitelistExtra.isChecked()) {       mSelectCategory=cbCategory.isChecked();       mSelectOnce=cbOnce.isChecked();     }     if (cbWhitelist.isChecked())     onDemandWhitelist(restriction,null,result,hook);  else     if (cbWhitelistExtra.isChecked())     onDemandWhitelist(restriction,getXExtra(restriction,hook),result,hook);  else     if (cbOnce.isChecked())     onDemandOnce(restriction,result);  else     onDemandChoice(restriction,cbCategory.isChecked(),false);     latch.countDown();   } } )
MethodHandles.dropArguments(cacheLookup,1,type.parameterList().subList(1,type.parameterCount()))
new HttpHost(proxy.host,proxy.port)
Thread.sleep(2000)
"" + i
logError(message)
pathParameterMap != null
new String(expected,0,i + 1,"UTF-8")
faultSerialVersionUID.equals(FaultSerialVersionUID.FQCN) || "FQCN".equals(faultSerialVersionUID)
new DeoptimizeNode(deoptAction,deoptReason,speculation)
formService.populateEntityForm(cmd,entity,entityForm,true)
tag.getName()
getDeltaRequest().execute(this,((ClusterManager)getManager()).isNotifyListenersOnReplication())
Validator.isNull(PropsValues.MOBILE_DEVICE_TYPE)
DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.oracle || DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.db2
case 5: 
PropertiesComponent.getInstance(project).getBoolean(UPDATE_STATE_ENABLED,false)
!file.isHidden() && file.getPath().endsWith(".swf") && !file.getPath().endsWith("/designer.swf")
super.addPage(userId,nodeId,title,content,summary,minorEdit,serviceContext)
final ColorUIResource color
new IndexAnalyzers(indexSettings,namedAnalyzer,namedAnalyzer,namedAnalyzer,Collections.emptyMap(),Collections.emptyMap())
new ArgumentTypePreparedStatementSetter(args,argTypes)
(ChameleonElement)current
new AutoValue_ApkProvider(apk,unsignedApk,coverageMetadata,mergedManifest,keystore)
getName().equalsIgnoreCase("enum") || getName().equalsIgnoreCase("set")
Arrays.asList(new HashSet(),new LinkedHashSet())
SERIAL_VERSION_UID=500L
this.messageService.monoPostAuthorizeBeanFindById(1L).subscriberContext(withUser)
@Specialization protected LLVMBoxedPrimitive fromInt(int value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
pgl.blendFunc(PGL.SRC_ALPHA,PGL.ONE)
types.get(i)
new WorldPoint(2487,3005,0)
isUri(url)
@Override public final DivideByOnConditionStep on(Condition... conditions){   condition.addConditions(conditions);   return this; } 
logger.debug("Failed to obtain file icon from JFileChooser.",e1)
!v2.isSupportedBy(v1)
i.getLongExtra(Constants.INTENT_KEY,0)
archiverManager.getUnArchiver(srcFile)
data.remaining()
callExpression != null && callExpression.resolveCalleeFunction(PyResolveContext.defaultContext()) != null
len < 0 || len > 52
note != null && note.get_id() != 0
s.getRawReader()
reloadAndWait()
new Max()
PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,true)
assertEquals(8,LambdaOperations.values().length)
operations.remove(query,metadata.getJavaType(),metadata.getCollectionName())
DateUtilities.ONE_MINUTE * 15
new CvsRollbackProvider(myProject,selectedRevisions)
element != null
instance.connect(null,null,"localhost","graylog2test",Integer.valueOf(27017),"false",null)
private void _runCommand() throws Exception {   _runClassCommandName(_testClassCommandName); } 
TestTextureArrayCompressed app=new TestTextureArrayCompressed(); 
ANXV2.getWalletHistory(ANXExchange.getExchangeSpecification().getApiKey(),signatureCreator,new CurrentTimeNonceFactory(),"BTC",null,null,null)
it.current() == '/' || it.current() == '.'
Loader.getResource(resourceName)
e.getCommandResult().getErrorMessage().contains("ns not found")
_buildTemplateWithGradle("soy-portlet","soy-dependency-management","--dependency-management-enabled")
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",transMeta.getName(),realSubStepName)
new OptionValue<>(60.0D)
i=2
getPlayer(server,args,1,true)
this::collapse
new MaterialKey(text)
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(ExampleClass.class)).intercept(SuperMethodCall.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
private final PropertyKey mPortKey; 
powerBase=40
ModelReference.of(new ModelType<RuleAwarePolymorphicNamedEntityInstantiator<ComponentSpec>>(){ } )
{0x038,0x121,0x061,0x160,0x031,0x130,0x070,0x025,0x124,0x064,0x109,0x049,0x148,0x019,0x118,0x058,0x00D,0x10C,0x04C,0x01C,0x103,0x043,0x142,0x013,0x112,0x052,0x007,0x106,0x046,0x016,0x181,0x0C1,0x1C0,0x091,0x190,0x0D0,0x085,0x184,0x0C4,0x094,0x0A8,0x0A2,0x08A,0x02A}
this.dataCoding
replacements.add(replacement,Replacements.CoalescePolicy.EXISTING_FIRST)
new Info("basic/types").cppTypes("signed","unsigned","char","short","int","long","bool","float","double","_Bool","_Complex","_Imaginary","complex","imaginary")
executeWrappedCommandProtocolAsync(databaseName,getCommand(),new BsonDocumentCodec(),connection,binding.getReadPreference(),transformer(),wrappedCallback)
String lhsText=assignment.getLeft().getText(); 
ChronicleEngineEndpoint endpoint=(ChronicleEngineEndpoint)getEndpoint(); 
optionalClient.orElse(null)
new HashMap(61)
context.getMainLooper()
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,true)
postingsFormatSettings.get("fpp")
new JsonPathConfig(numberReturnType,defaultParserType,gsonObjectMapperFactory,jackson1ObjectMapperFactory,jackson2ObjectMapperFactory,defaultDeserializer,charset)
fileFilters.get(childModule)
jsonHotRestartState != null
ShutdownOperations.addOperation(new Runnable(){   public void run(){     wrappedResponseHolder.remove();   } } ,true)
rt == Boolean.TYPE && !(ret instanceof Boolean)
doTest(BASE_PATH + "/" + getTestName(false)+ ".java",warnings,false)
CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)
setSunPosition(cal,latitude,longitude,sun)
redefined.getDeclaredConstructor()
startBounds.height()
(fieldValues == null) || fieldValues.isEmpty()
setPin(file,true)
new RuntimeConfigurationWarning("No py.test runner found in selected interpreter")
SSTableMetadata.createCollector(cfs.getComparator())
fmd.getValueCount() == 0 && (!fmd.hasGroupCount() || fmd.getGroupCount() == 0)
Integer.toString(gramSize)
new IllegalStateException("Unexpected rule: " + ruleStr)
new Settings(getContext().getFilesDir(),new Object())
nodeFile.getParentFile()
clientConfig.property(ClientProperties.READ_TIMEOUT,2000)
config.getMaxQueryMemoryPerNode().toBytes() <= maxMemory.toBytes()
(types != null) && (types.length > 0) && ((types.length > 1) || Validator.isNotNull(types[0]))
getSegments().length - 1
currentFuel == null && fuel != null
Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,true)
refTableName.split("\\.")[1]
Thread.sleep(2000)
EventQueue.invokeLater(new Runnable(){   @Override public void run(){     scanFinshedEventHandler(id,host);   } } )
((HttpOutput)out).isWritten()
new RendezvousAffinityFunction(false,512)
Mockito.any(ProducerRecord.class)
elements != null && elements.length > 0
assertEquals(9,tokens.size())
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadString.Null"))
bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector())
new MethodHandler(methodKey,groupId,type,start,end)
DirectoryReader reader=DirectoryReader.openIfChanged(open); 
VerificationResult.withCount(1)
mService.setEnableAutoJoinWhenAssociated(enabled)
SmsHeader.toByteArray(header).length + 2
DAY_POSITION_IN_LONG=10_000
Representor<T,S>
BrowseCap.isCocoaDesktop()
now == currentPage || dotCenterX == null
checkManageOrCreateUsersPermission("query user")
{0x003,0x006,0x009,0x060,0x012,0x042,0x021,0x024,0x030,0x048,0x00c,0x018,0x045,0x051,0x054,0x015,0x01A,0x029,0x00B,0x00E,0x01A,0x029}
assertEquals(6,beanCount)
new IndexOutOfBoundsException("negative offset:" + offset)
ContainerUtil.getFirstItem(expressions)
!version.equals("1.2") && !version.equals("2.0") && !version.equals("2.1")
MOD_NUM=10000
cluster.setWifiIndicators(mWifiConnected,mWifiIconId,mWifiActivityIconId)
-30
file.isFile()
private Throwable maybeAttachBuildRuleNameToException(@Nonnull Throwable thrown){   if ((thrown instanceof HumanReadableException) || (thrown instanceof InterruptedException)) {     return thrown;   }   String message=thrown.getMessage();   if (message != null && message.contains(rule.toString())) {     return thrown;   }   return new RuntimeException(getErrorMessageIncludingBuildRule(thrown),thrown); } 
player.sendStatusMessage(new TextComponentString("Not an air block @" + placePos),true)
dumpErrorCountThreshold=2
file.getPath()
public static BuildConfigSpec addBuildParameterOutput(BuildConfigSpecBuilder builder,String imageTag){   return builder.withNewOutput().withTag(imageTag).endOutput().build(); } 
new PagesListAddPageRecord(cacheId,prevId,nextId)
Log.severe("ERROR WHILE DECODING MESSAGE: " + e.getMessage())
setReplyTo(replyTos)
Object tag
MalformedPathException e
ENABLED.set(false)
properties.containsKey("flyway.url")
new BooleanPreference("auto_zoom_map",false,false)
findPackage(PACKAGE_SETUPTOOLS,false)
file.isFile()
value == Short.MAX_VALUE
new DatabaseExplorerDialog(shell,SWT.NONE,dbinfo,databases,true)
request.getContentLengthLong()
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateMessageParam",m.getName(),m.getClass().getName()))
new MultiParentClassLoader(parent.getChildClassLoader())
currentFactory != null && currentFactory != newFactory
preciseExchangeAmount - exchangeAmount >= 0.000001f || preciseExchangeAmount - exchangeAmount <= -0.000001f
allTags == null
v != null && !postIDs[position].equals("draftsHeader") && !postIDs[position].equals("postsHeader")
c == Character.class || c == Character.TYPE
new ServerSparseDoubleRow(rowId,startCol,endCol,0)
mAdapter != null && mDataSetObserver != null
addr.getHostAddress()
public Version getVersion(){   return version; } 
performDexOpt(pkg.packageName,null,true,causeFirstBoot ? REASON_FIRST_BOOT : REASON_BOOT,false)
Boolean.parseBoolean(getOptional("kylin.query.disable-cube-noagg-sql","false"))
{CUSTOM_STUDY_REV,DECK_OPTIONS,MORE_OPTIONS}
scaleImage(scale,viewWidth / 2,viewHeight / 2,true)
commState.getBoolean("sys")
out.annotateTo(reader.getOffset(),"%s",StringIdItem.getOptionalReferenceAnnotation(dexFile,paramaterIndex,true))
fieldType.storeTermVectorOffsets()
Color.fromRGB(0x1E1B1B)
(FileActivity)getActivity()
!change.downgrades(current)
writeRepeatedSFixed64Impl(id,val)
popup.requestFocusInWindow()
public static final PyNewProjectSettings NO_SETTINGS=new PyNewProjectSettings(); 
protected ResolvedReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,ResolvedTypeParametersMap typeParametersMap){   return create(typeDeclaration,typeDeclaration.getTypeParameters().stream().map(typeParametersMap::getValue).collect(Collectors.toList())); } 
FileType.of(".so",".dylib")
/**   * User: anna Date: 1/10/13  */ public class JavaFXUnresolvedFxIdReferenceInspectionTest extends AbstractJavaFXQuickFixTest {   @Override protected void enableInspections(){     myFixture.enableInspections(new JavaFxUnresolvedFxIdReferenceInspection());   }   public void testUnknownRef() throws Exception {     doTest("Controller");   }   private void doTest(  final String controllerName){     myFixture.configureByFiles(getTestName(true) + ".fxml",controllerName + ".java");     final IntentionAction singleIntention=myFixture.findSingleIntention(getHint("unknown"));     assertNotNull(singleIntention);     myFixture.launchAction(singleIntention);     myFixture.checkResultByFile(controllerName + ".java",controllerName + "_after.java",true);   }   @Override protected String getHint(  String tagName){     return "Create Field '" + tagName + "'";   }   @NotNull @Override protected String getTestDataPath(){     return PluginPathManager.getPluginHomePath("javaFX") + "/testData/inspections/unresolvedFxId/";   } } 
mono.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
out.writeInt(length())
src.onTouchEvent(e)
jabberStatusToPresenceStatus(o2,parentProvider)
numTouched >= 1
new MethodDescription.Token(FOO,MODIFIERS,Collections.singletonList(mock(GenericTypeDescription.class)),first,Collections.<ParameterDescription.Token>emptyList(),Collections.singletonList(mock(GenericTypeDescription.class)),Collections.singletonList(mock(AnnotationDescription.class)),null)
new InterpreterExpectations("",false)
new ClosedByInterruptException()
ctx=ldap.connect(getServername(),getPort(),getRootdn(),getUserDN(),getUserPw())
getTypeName2(method.getReturnType())
ReadCommand command
ASHMEM_SIZE=464
BeanPropertiesUtil.getStringSilent(model,_keyProperty)
numSegments - 1.0
queryParams != null && !queryParams.isEmpty()
PokemonMetaRegistry.getHighestForFamily(getPokemonFamily())
this.createError != null
new CorruptedCacheException("block pointer must be >= -1, but was" + pos)
bits2[1]
(outputFolder + File.separator + modelFolder).replace("/",File.separator)
DiagnosticFactory3.create(ERROR,DECLARATION_NAME)
UpgradeStepRegistrator.class
localFileSystem.refreshAndFindFileByIoFile(vimKeyMapFile)
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SUCCESSFUL,getHttpStatusSeries(result))
dz <= -1
API_KEY == null || API_KEY == ""
new char[32]
Simple.forClass(SkylarkDict.class)
KotlinTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportGetOnNoOperatorWarning.test")
synchronized (this) {   classCache.put(cls.getName(),cls); } 
c1.getQualifiedName()
mLayoutParams != null && mLayoutParams.height >= 0
formController.getEventLogger().logEvent(EventLogger.EventTypes.GOOGLE_PLAY_SERVICES_NOT_AVAILABLE,0,null,false)
gtype < TYPES.length && gtype >= 0
SDK_INT <= LOLLIPOP
CommandUtils.convertMsToDate(files[0].getCreationTimeMs())
myCardModel.getQuestionAlign()
mdcPropertyMap == null
IndexReader.open(benchmark.getRunData().getDirectory())
syncOperation.delay <= 0
command.execute(answerForm)
interceptors.addLast(newAInterceptor(a))
@API(help="NetworkTestResults",direction=API.Direction.OUTPUT) public TwoDimTableV1 table; 
overrideDeploymentConfig || (loginConfig == null)
IssueTrackingBlocksRecognizer rec
Matchers.greaterThanOrEqualTo(900L)
assertTrue("Message did not contain writer: " + e.getMessage(),e.getMessage().toLowerCase().indexOf("writer") >= 0)
public static LocalizationBundle getMessages(){   return new LocalizationBundle(messages); } 
new DexBackedMethodReference(dexFile,methodIndex)
_connector.getResponse("GET /foo?data=1 HTTP/1.0\nhost: host:80\n\n")
LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(layoutUuid,groupId,true)
UpgradeStepRegistrator.class
mSmallestWidthDp >= 600
/**   * Exception thrown if the session-type of a session bean is not specified  */ @Message(id=14551,value="<session-type> not specified for ejb %s. This must be present in ejb-jar.xml") DeploymentUnitProcessingException sessionTypeNotSpecified(String bean); 
256 * 256 * 12.8
new CardinalityAggregatorFactory(input,Arrays.asList(input),byRow)
DUPLICATE_OPS_TOLERANCE=10
MonitoringPortlet.setMonitoringPortletResourceRequest(monitoringPortletResourceRequest)
values[i] == value
Localization.menuTitle("Push entries to external application (%0)",appName)
_model == null || _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal && _parms._histogram_type != SharedTreeModel.SharedTreeParameters.HistogramType.RoundRobin
file.isFile()
CoreMatchers.anyOf(is(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>$Placeholder"),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest" + ".net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedSpecifiedTypeVariableType<java.lang.String>.Placeholder"))
TIMEOUT=2000
code.executeVarargs(args,null,null)
Arrays.asList("test","lukas","sa","root@localhost","postgres","dbo","dba","dba@lukas-hp","dba@lukas-omni27")
id=10835
reject(e)
max=2000
new IndexWriter(rd,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
new String(plaintext)
mMapView.invalidateMapCoordinates(frameLeft - 2,frameTop - 2,frameRight + 2,frameBottom + 2)
synchronized (shardLocks) {   ImmutableSet.Builder<ShardId> builder=ImmutableSet.builder();   return builder.addAll(shardLocks.keySet()).build(); } 
clazz == null
SHUTDOWN_VIBRATE_MS > 0 && context != null
/**   * Obtain the property descriptor for a specific property of the wrapped object.  * @param propertyName the property to obtain the descriptor for(may be a nested path, but no indexed/mapped property)  * @return the property descriptor for the specified property  * @throws InvalidPropertyException if there is no such property  */ PropertyDescriptor getPropertyDescriptor(String propertyName) throws InvalidPropertyException ; 
makeString(actual,",","(",")",-1)
query.response().getContent().toString(Charset.forName("UTF-8")).substring(0,15)
w1.getGradient(target,alpha,this.alpha)
hasFocus() && showClearButton && isEnabled()
mService.setAppPolicy(UID_A,POLICY_REJECT_METERED_BACKGROUND)
UpgradeStepRegistrator.class
/**   * Constrains search results to only match those which also match a provided query.  Results are cached, so that searches after the first on the same index using this filter are much faster.  * @version $Id$  * @deprecated use a CachingWrapperFilter with QueryWrapperFilter  */ public class QueryFilter extends CachingWrapperFilter {   /**   * Constructs a filter which only matches documents matching <code>query</code>.  */   public QueryFilter(  Query query){     super(query);   }   public boolean equals(  Object o){     return super.equals((QueryFilter)o);   }   public int hashCode(){     return super.hashCode() ^ 0x923F64B9;   } } 
addTest(21,23,180.0f)
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.5,graphId)
Results.json()
TreeSet<String>
Log_OC.e(TAG,"initFragments() called with invalid NULLs!")
ShutdownOperations.addOperation(new Runnable(){   public void run(){     clear();   } } ,true)
l.maxCpus(lic.maxCpus())
this.highlightingItemStack
ConcurrentMap<Method,List<String>>
mResourceData[i] != null && !RenderResources.REFERENCE_NULL.equals(mResourceData[i].getValue())
Keyspace table=Keyspace.open(tableName); 
mPackageManager.hasSystemFeature(PackageManager.FEATURE_ETHERNET) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
handler.hasPermission(base,node)
/**   * The failure that occurred.  */ Throwable getFailure(); 
return 405; 
new RStudioThemedFrame(null,".rstudio-themes-flat.editor_dark h1,\n" + ".rstudio-themes-flat.editor_dark h2,\n" + ".rstudio-themes-flat.editor_dark h3,\n"+ ".rstudio-themes-flat.editor_dark h4 {\n"+ "  background: none;\n"+ "  color: white;\n"+ "}\n",null,false)
lookup="java:/TransactionManager"
requestUrlregex == null || requestUrlregex.length() == 0
new RuntimeException()
updateStreetName(false,calculateTextState())
showTooltip == null || showTooltip.targetActor == null
!documentsToCommit.isEmpty() || currentTask != null
new Button("submit"){   private static final long serialVersionUID=1L;   @Override public void onSubmit(){     try {       GeoServerExtensions.bean(GeoFenceConfigurationController.class).storeConfiguration(config,cacheParams);       doReturn();     }  catch (    Exception e) {       LOGGER.log(Level.WARNING,"Save error",e);       error(e);     }   } } 
context.createCallContextNoAccountId(createdBy,reason,comment,request)
Long.parseLong(args[ai])
myMapping.update(srcPath,outputPath)
mv.visitParameterAnnotation(0,Type.getDescriptor(Nullable.class),false)
Arrays.asList(mvn,"org.apache.maven.plugins:maven-archetype-plugin:2.2:generate",property("interactiveMode","false"),property("archetypeGroupId",archetype.groupId),property("archetypeArtifactId",archetype.artifactId),property("archetypeVersion",archetype.version),property("groupId",groupId),property("artifactId",artifactId),property("version",version),property("package",packageName),property("fabric8.profile",artifactId))
!isRotationEnabled
WEB_SYNC_MANAGER=true
new IllegalStateException("Unable to load error page data",e)
(NotificationListener)null
Arrays.asList(TYPE_INTEGER,TYPE_STRING,TYPE_INTEGER,TYPE_INTEGER,TYPE_INTEGER,TYPE_STRING,TYPE_STRING,TYPE_STRING,TYPE_STRING,TYPE_INTEGER,TYPE_STRING)
this.messageService.monoPreAuthorizeHasRoleFindById(1L).subscriberContext(withUser)
protocolProvider.getProtocolDisplayName()
out.getVersion().onOrAfter(Version.V_5_3_0_UNRELEASED)
year=2014
HSTRETCH_DURATION=0.5f
private JTextArea myDetailsPane; 
BaselineCompiler baselineCompiler=new BaselineCompiler(GraphBuilderConfiguration.getDefault(),providers.getMetaAccess()); 
runtime().config.useCompressedClassPointers
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A + c.txt","D a.txt")
!txEnabled() || portableEnabled()
id=3
count < 0
Picasso.with(context)
delayDuration - 120
String.format("Expression must consist of 6 fields (found %d in %s)",fields.length,expression)
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())
Loader.getResource(AUTOCONFIG_FILE,classLoader)
new UnsupportedOperationException("PLAIN doesn't support wrap or unwrap operation")
mPreferredHost.equals("localhost")
myViewingPanel.requestFocus()
next != 1 && next < getLineCount()
proxy.attemptErrorResponse(controlSessionId,correlationId,GENERIC,errorMessage,controlPublication)
((DefaultHttpHeaderMapper)this.headerMapper).setInboundHeaderNames(patterns)
Thread.sleep(5000)
new LocalAlluxioClusterResource(1000,Constants.GB,Constants.SECURITY_AUTHENTICATION_TYPE,AuthType.SIMPLE.getAuthName(),Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED,"true")
LOG.debug("Error reading HTTP response from " + url)
ImmutableList<Stats>
final Throwable e
GeneratedJavaParser::ResultType
Ignition.start("examples/config/example-ignite.xml")
parent instanceof PsiMethodCallExpression
transportError.augmentDescription("\n" + headers.toString())
msg.getHistoryRef().getHistoryType()
hash != 0
final LongAdder8 msgCntr=new LongAdder8(); 
methodCall.accepts(eMethodCall,context)
System.out.printf(Locale.ROOT,"na.setNode(%d, %f, %f);\n",node,na.getLat(node),na.getLon(node))
new SQLExecutionEvent(sqlExecuteUnit.getRouteUnit(),parameters,url)
mergeConfigs(file,s -> ConfigFactory.parseFile(new File(s)))
mLastUpdate == null || DateTimeUtils.secondsBetween(now,mLastUpdate) >= mMinRateInSeconds
LOGGER.error("Error during XML parsing",e2)
eventFunc.equals("conference_add_member") || eventFunc.equals("conference_member_add")
ref_val.contains("HTTP error 403")
manager.getUserDictionary().getEditableWords()
AbstractCollection self
zip(srcFile,zipFile,false)
sessionToken == null || !compareRequestAndSessionTokens(sessionToken,params,userSubject)
writeString(writer,fieldName,String.valueOf(reader.getInt()))
"Received communication message while stopping (will ignore) [nodeId=" + nodeId + ", msg="+ msg+ ']'
new StringBuilder(245)
id=16501
GL11.glTexParameteriv(target,pname,params)
order=2
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
strangeVocab.getElementFrequency()
testClosureFunction("goog.isArray",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)
Class.forName(metadata.getInheritedFromType()).isAssignableFrom(entity.getClass()) || entity.getClass().isAssignableFrom(Class.forName(metadata.getInheritedFromType()))
isAssignableFrom0(supertypeName,cn.superName,cl)
stateMap.get("CurrentTrackMetaData") != null && !stateMap.get("CurrentTrackMetaData").isEmpty()
new CompletionItemCapabilities(true)
@Override public Response header(String name,Property property){   addHeader(name,property);   return this; } 
new IgfsListingEntry(oldInfo)
!mMediaPlayer.isPlaying()
methodReturnType != null && methodReturnType != PsiType.VOID
node_type == MatchNode.MATCHNODE_STATEMENT && !this.stats.isEmpty()
view.setTextColor(0xffffffff)
this.addEventHandler(KeyEvent.KEY_PRESSED,event -> {   Optional<KeyBinding> keyBinding=preferences.getKeyBindings().mapToKeyBinding(event);   if (keyBinding.isPresent()) { switch (keyBinding.get()) { case ENTRY_EDITOR_NEXT_PANEL: case ENTRY_EDITOR_NEXT_PANEL_2:       tabbed.getSelectionModel().selectNext();     event.consume();   break; case ENTRY_EDITOR_PREVIOUS_PANEL: case ENTRY_EDITOR_PREVIOUS_PANEL_2: tabbed.getSelectionModel().selectPrevious(); event.consume(); break; case HELP: HelpAction.openHelpPage(HelpFile.ENTRY_EDITOR); event.consume(); break; case CLOSE_ENTRY_EDITOR: close(); event.consume(); break; default : } } } )
DBUtils.getDefaultContext(object,false)
!debugInfoEnabled || !JetPsiChecker.isErrorReportingEnabled()
c <= 'Z'
Slog.w(TAG_NETWORK,"Total time waited for network rules to get updated: " + totalTime + ". Uid: "+ callingUid+ " procStateSeq: "+ procStateSeq+ " UidRec: "+ record+ " validateUidRec: "+ mValidateUids.get(callingUid))
/**   * 秋季（第三季度）   */ AUTUMN(3)
LOGGER.warn("Could not execute open URL",ex)
task.abort()
parseKeywordIf(ctx,"DOUBLE PRECISION") || parseKeywordIf(ctx,"DOUBLE")
setUp(new JZDataSource(url),screen,objects)
/**   * @see Submit  */ public class SubmitTag extends AbstractClosingTag {   private static final long serialVersionUID=2179281109958301343L;   protected String action;   protected String method;   protected String align;   protected String type;   protected String src;   public Component getBean(  ValueStack stack,  HttpServletRequest req,  HttpServletResponse res){     return new Submit(stack,req,res);   }   protected void populateParams(){     super.populateParams();     Submit submit=((Submit)component);     submit.setAction(action);     submit.setMethod(method);     submit.setAlign(align);     submit.setType(type);     submit.setSrc(src);   }   public void setAction(  String action){     this.action=action;   }   public void setMethod(  String method){     this.method=method;   }   public void setAlign(  String align){     this.align=align;   }   public String getType(){     return type;   }   public void setType(  String type){     this.type=type;   }   public void setSrc(  String src){     this.src=src;   } } 
new TreeToBuffer(buffer,0,true,false,false,false,null){   @Override protected boolean shouldSkipNode(  TreeElement node){     return super.shouldSkipNode(node) || node instanceof PsiErrorElement || node instanceof PsiComment|| node instanceof LeafPsiElement && StringUtil.isEmptyOrSpaces(node.getText()) || node instanceof OuterLanguageElement;   }   @Override protected boolean showEmptyChildren(){     return false;   } } 
rs.getNString(columnIndex)
updateCloseButton()
!container.getControllerFactory().getUserPreferencesController().hasPerformedAction(IUserPreferencesController.LIKED_MESSAGE)
errorPosition=obj.getInt("errorPosition")
SequenceBatchCSVRecord singleCsvRecord=Unirest.post(url + "/transformincremental").header("accept","application/json").header("Content-Type","application/json").header(SEQUENCE_OR_NOT_HEADER,"true").body(transform).asObject(BatchCSVRecord.class).getBody(); 
mAm.addSharedAccountsFromParentUser(parentUserId,userId)
!itemChannelLinkRegistry.getLinks(channelUID).isEmpty()
currLine < mPrevLine
format(elem,false)
executor.execute(new NamedRunnable("OkHttp %s ACK Settings",hostName){   @Override public void execute(){     try {       frameWriter.ackSettings(peerSettings);     }  catch (    IOException ignored) {     }   } } )
clusterListeners.size() == 0 && managerTemplate instanceof DeltaManager
LOG.warn(_request.getRequestURI(),failure)
progressHeight - 2
date.getYear()
SURFACE_SELECTOR=32
!PRESERVE_WINDOWS
log.warn("IntrospectionUtils: InvocationTargetException for " + o.getClass() + " "+ name+ ")",ie)
assertThat(KeepOneFilter.isDeletable(createSnapshotWithDate(1L,"2011-05-01").setLast(true))).isFalse()
position <= 0
logger.info(logMessage,ve)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     Collection<EventRegistration> regs1=eventService1.getRegistrations(MapService.SERVICE_NAME,mapName);     Collection<EventRegistration> regs2=eventService2.getRegistrations(MapService.SERVICE_NAME,mapName);     assertEquals("there should be only one registration",1,regs1.size());     assertEquals("there should be only one registration",1,regs2.size());   } } )
/**   * {@inheritDoc}  */ @Override public TestElementProperty clone(){   TestElementProperty prop=(TestElementProperty)super.clone();   prop.value=(TestElement)value.clone();   return prop; } 
shortComment.lastIndexOf(']')
volatile DirectoryReader reader; 
cacheTimeout=3600000L
dos.writeInt(valueBytes.length)
Tools.checkText(text,lt,apiFormat)
mPositionScroller.startWithOffset(position,offset)
dockerClient.startContainerCmd(container.getId())
GroupPermissionUtil.contains(themeDisplay.getPermissionChecker(),group,ActionKeys.VIEW)
source.readLong()
s.onComplete()
map.tryPut(key,newValue,60,TimeUnit.SECONDS)
DEF_MAXIMUM_NETWORK_LOGGING_NOTIFICATIONS_SHOWN=2
CachedValuesManager.getManager(project).getParameterizedCachedValue(psiFile,CACHE_KEY,param -> CachedValueProvider.Result.create(parseConfigInternal(param.getVirtualFile(),param),param),false,psiFile)
ParamUtil.getString(resourceRequest,Constants.CMD)
new WildcardQuery(new Term("body","m?tal"))
Assert.assertEquals(catalogsJson.size(),1)
bs.getName()
logger.error("Unexpected exception in updating executions",e)
mValue == null || offset > mValue.length
bareNumber.length()
StringBuilder msg=new StringBuilder(methodName); 
!MessageDigest.isEqual(ourMac,theirMac)
UPDATES_BEFORE_CHECK_LOCATION=40
lineIdx > 1
InputType.recurrent(convNIn,length)
new TwoDimTable("Confusion Matrix (Act/Pred)",rowHeader,colHeader,colType,colFormat)
dir.mkdirs()
new KernelStatement(mock(KernelTransactionImplementation.class),mock(IndexReaderFactory.class),scanStore,null,null,null)
writer.close()
longVal(doc)
feedEntryStatusDAO.findAll(user,true,0,1,ReadingOrder.desc,true)
"+" + localNumberImprecise.substring(0,difference) + bareNumber
permissions=256
head.equals("ntpath") || head.equals("posixpath")
obtainMessage(MSG_ZEN_MODE_CHANGED,zen ? 1 : 0,0)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,93700,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
mBatteryStatus=BATTERY_STATUS_UNKNOWN
endLogicalColumn <= marginColumns
(AgendaEventListener)this
calendar.set(Calendar.DAY_OF_WEEK,2)
config.isAnimateGrass()
client.filter(basicAuthentication("test","this")).get().uri("/").exchange().expectStatus().isOk().expectBody(String.class)
Cli.buildCli("presto",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)
UpgradeStepRegistrator.class
viewObject.getMessageOwner() != null && !viewObject.getMessageOwner().trim().isEmpty()
LOGGER.trace(e.getMessage(),e)
void execute() throws Throwable ; 
props.getLong("session.time.to.live",SESSION_TIME_TO_LIVE)
LOG.warn("Storage directory " + rootPath + " does not exist")
this.counterpart.split("/",2)
channel.write(reply,remoteAddress)
LOG.warn("Unable to close socket selector")
SortedQueue<Node>
vm.canGetInstanceInfo()
LOG.warn("Error invoking metrics timer",e)
LOG.lifecycle("Detection of classes for compilation ({}) plus the compilation took {}.",recompilationSpec.getClassNames().size(),clock.getTime())
ImmutableList.copyOf(result)
new SimpleDateFormat("HH:mm MMM d yyyy",Locale.ENGLISH)
getInFaultInterceptors()
replicaEngine.refresh("test")
user.getUserId()
assertEquals(9,definitions.size())
typeAddrPair.getTypeReferenceField().getTypeDescriptor()
r.curApp != null && r.curApp.curReceiver == r
adapter != null && getActivity() != null
public static void main(String[] args) throws StartupError {   Bootstrap.main(args); } 
log.info("Cannot fetch column count for cursor : " + e.getMessage())
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound("SPDY")
new IllegalArgumentException(sm.getString("pojoMethodMapping.noPayload",m.getName(),m.getClass().getName()))
CrawlDatum val=new CrawlDatum(); 
shuffleWithNonExistentUuids(project1.uuid(),project3.uuid())
final LongAdder8 puts=new LongAdder8(); 
dialog.setVisible(true)
Integer.parseInt(getOptional("kylin.engine.spark.max-partition","5000"))
callbackList.getBroadcastCookie(i)
mThumbnail.copy(Config.HARDWARE,false)
(byte)0xe2
GenericStructContainer parent
Integer.valueOf(1)
Object listener
LibraryTableEditor.editLibraryTable(getApplicationServerLibrariesProvider(),myProject)
stateManager.register(store1,stateRestoreCallback)
mf.filter(r,originalMessage,transformed.message())
ApplicationManager.getApplication().isUnitTestMode() || myPopup.isDisposed()
RT.count(s)
renderManager.render(tpf,false)
HeadArraySchema schema=new HeadArraySchema(); 
course.getLessons(true)
new ParseField("rules","detector_rules")
testCollector.assertDistance(prepare.createAlgo(),currIdx.findClosest(50.2800,9.7190,ef),currIdx.findClosest(49.8960,10.3890,ef),76411,1406)
addAOEntitlementAndCheckForCompletion(bpSubscription.getBundleId(),"Telescopic-Scope",ProductCategory.ADD_ON,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
replayEnd=DateTime.now()
writeMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE,NettyConstants.SCOPE_WRITE,ExecutionPolicy.BOUNDARY)
old + 9
"Deleting existing file: " + target
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
w <= 0 || h <= 0
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
c.getPath() == null && getPath() != null
clsName == null
@Nullable final Throwable lastException
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forServerTenantDelete(serverTag)
workerCount--
asList(CUBRID,DERBY,FIREBIRD,ORACLE,SQLSERVER,SYBASE)
!file.exists() || file.renameTo(newFile)
type.getSimpleName()
usersStats.getMin()
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() / 2)
groupingSets.isEmpty()
ClientSession.getTLSPolicy() == Connection.TLSPolicy.required
explicit && !finished && (socketRef != 0)
request.getServletPath()
Pattern.compile(regexp,Pattern.CASE_INSENSITIVE)
new ConstraintIndexCreator(() -> kernel,indexingService,propertyAccessor)
task.stack != null && tr.stack != null && task.stack != tr.stack
assertThat(pod).hasName("cheese")
tempBitmap != null && tempBitmap.getWidth() != 0 && tempBitmap.getHeight() != 0
new DirectDruidClient(warehouse,smileMapper,httpClient,server.getHost())
getQualifiedName() != AbstractName.NO_NAME
173 != errors.size()
typeSwitch.keySuccessor(i) == beginNode
selectRestriction(spRestriction.getSelectedItemPosition())
saveJSONArray(json,filename,null)
((SoapFault)ex).getSubCode() != null && !SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE.equals(soapFault.getNamespaceURI())
1 << 3
@Override protected CDATA setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
twitter.getDailyTrends()
dic.buildRouterChain()
world.setBlockMetadataWithNotify(x,y,z,0,2)
ImageView divider=new ImageView(mContext); 
final WhiteListTrie foundWhitelist=(WhiteListTrie)trie.findNode(FocusString.create("def")); 
BottomEntity bottom
resourceServer.getId()
n.longValue()
assertEquals(12,md.references().size())
/**   * {@code "x-frame-options"}  */ public static final AsciiString X_FRAME_OPTIONS=new AsciiString("x-frame-options"); 
i <= getATN().maxTokenType
openConnection(false)
shouldUsePool(bis)
add2(yact[0],ds[0])
FileChooser.chooseFile(myProject,new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } ,myProject,null)
settings.getChangeAfterFilter()
libraryModel::commit
(parentRestricted && !restricted) || (!parentAsked && asked) || hook.whitelist() != null
mode != IControllable.Mode.Unknown && mode != IControllable.Mode.Mode
CharacterComponent.class
result=55
Optional.ofNullable(authorizedPeers)
nmRmConnectionWaitMs + delta
userVector.get(index) == 0.0
Manager.this.readyState == ReadyState.OPEN || Manager.this.readyState == ReadyState.OPENING
UNIT_FIELD.getPreferredName()
new InputStreamReader(githubResponse,"UTF-8")
laneOptions[j].equals("slight_right") || laneOptions[j].equals("merge_to_right")
test("var foo = function (a) {}; foo.call(null, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(null);")
rsMaxRows > 0 && connection.getDataSource().getInfo().supportsResultSetLimit()
mBackingBitmap.getWidth()
new StrictModeViolationDialog(mUiContext,ActivityManagerService.this,res,proc)
newHashSet(from)
notifyItemRangeChanged(getItemCount(),newData.size())
key != null
windowState.isOnScreen() && windowState.isVisibleLw() && !windowState.mWinAnimator.mEnterAnimationPending
c == null || !c.moveToFirst()
classNode.hasDeclaredMethod(methodName,parameterTypes)
JDKAsyncHttpProvider.class
dpToPx(64f)
String assetName
adopt && this.children != null
this.hostToId
new InvalidPluginRequestException("No plugins found for plugin id " + pluginId)
ThriftValidation.validateColumnFamily(keyspace,cfname,false)
triggerProto.getAfterEndOfWindow()
data[1] > 290
canvas.clipRect(0,0,width,tabHeight)
atlasFile.name()
unwindNode != null && unwindNode.isAlive()
this.httpHandler.handle(request,response).switchOnError(ex -> {   logger.error("Could not complete request",ex);   nativeResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
TestPlugin.class
response.rows()[12]
new UpdateNotifierTimerTask(this,execSvc,verChecker)
(long)mCachedGroupId[i] << 32L
mShowsDialog
jp.getLongValue()
curLayout.getName(locale).equals(localizedName) || curLayout.getFriendlyURL().equals(friendlyURL)
parsedVersion != null && parsedVersion.getDimensionForVersion() == dimension
!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
Beans.newDuration(jpaProperties.getPool().getMaxWait()).getSeconds()
"Interceptors contributed by endpoint: " + i3
fakeData != null && currentSegmentIndex < fakeData.segments.size()
ImmutableSet<ImplementationMethodDescriptor>
new StreamTaskException(exceptionMessage,e)
setResult(RESULT_FIRST_USER)
Exception e
(!p.matcher(definedType.getType()).matches()) && (definedType.getLength() == 0 || !p.matcher(definedType.getType() + "(" + definedType.getLength()+ ")").matches()) && (definedType.getScale() != 0 || !p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ","+ definedType.getScale()+ ")").matches())&& (!p.matcher(definedType.getType() + "(" + definedType.getPrecision()+ ", "+ definedType.getScale()+ ")").matches())&& (StringUtils.isBlank(definedType.getUserType()) || !p.matcher(definedType.getUserType()).matches() && !p.matcher(definedType.getQualifiedUserType().toString().replace("\"","")).matches())
root != null && root.getSourceSection() != null
return mInitialized; 
@Override public PostgreTableBase getChild(@NotNull DBRProgressMonitor monitor,@NotNull String childName) throws DBException {   return tableCache.getObject(monitor,this,childName,PostgreTableReal.class); } 
createCurrency("LTC","Litecoin",null,"XLT")
list.size() + 2
Object[]
new IndexWriter(dir,new Analyzer(){   public TokenStream tokenStream(  String fieldName,  Reader reader){     return new TokenFilter(new StandardTokenizer(reader)){       private int count=0;       public Token next() throws IOException {         if (count++ == 5) {           throw new IOException();         }         return input.next();       }     } ;   } } ,true,IndexWriter.MaxFieldLength.LIMITED)
mArrowImage != null && mShowTabsInDrawer
menu.hasSelectedMenus()
NativeBinarySpec nativeBinary
new GridKernalContextImpl(this,cfg,gw,ent)
serialVersionUID=1325597275
log.logError(BaseMessages.getString(PKG,"JobUnZip.TargetFolderNotFolder.Label",realTargetdirectory))
new EntityTrackerInfo(mod,ID,range,updateFrequency,sendVelocityInfo)
a.getInteger(R.styleable.MaterialCalendarView_mcv_selectionMode,SELECTION_MODE_SINGLE)
animateHeaderDelayed()
myToolWindow == null || !myToolWindow.isVisible()
mAccountStore.hasAccessToken()
fluid.getBlockID() > 0
attributes.getFloat(R.styleable.ArcProgress_arc_angle,default_arc_angle)
@Override public AbstractConfigValue get(int index){   return value.get(index); } 
redisson.<Long>getBucket("executed1")
_buildTemplateWithGradle("npm-react-portlet","react-portlet-dependency-management","--dependency-management-enabled")
nonPersistent.tryAddMessageLast(node,wait)
RandomDocumentPicks.randomIngestDocument(random(),Collections.emptyMap())
mPathBitmap == null || mPathBitmap.getWidth() != mViewPortHandler.getChartWidth() || mPathBitmap.getHeight() != mViewPortHandler.getChartHeight()
dataType.endsWith("Boolean") || dataType.equals("boolean")
Bukkit.getOperators()
CachedConstructor constructor=(CachedConstructor)chooseMethod("<init>",constructors,arguments,false); 
iterations=1
shortSizeDp >= 600
isPermitted(callingUid,Manifest.permission.GET_ACCOUNTS,Manifest.permission.GET_ACCOUNTS_PRIVILEGED)
logger.debug("Cannot clear queue ({})",e.getMessage())
mEditor.startSelectionActionMode()
request.getPrincipal()
group != null && this == group.mInternalConnection
jitter=0.3
BroadcasterFactory.getDefault().lookup(mapping,true)
mLocalWorkerAddress.getDataPort()
recordSetVersion2.getVersion()
CalendarLocalServiceUtil.addCalendar(userId,portletDataContext.getScopeGroupId(),calendarResourceId,calendarNameMap,calendar.getDescriptionMap(),calendar.getTimeZoneId(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
assertStatus(a,f,true)
owner == null || owner.getName().equals(PostgreConstants.PUBLIC_SCHEMA_NAME) || owner.getName().equals(PostgreConstants.CATALOG_SCHEMA_NAME)
new UncheckedIOException(String.format("Could not load properties for module '%s' from %s",name,jarFile),e)
sSwipeMinDistance=100
progressIndicatorWhenSearchStarted == myResultsPreviewSearchProgress && !myResultsPreviewSearchProgress.isCanceled()
parentJob.isStopped() || trans.getErrors() != 0
new Random(A)
Class.forName("android.support.v7.widget.Toolbar")
payloadErrorFatal || streamId == 0
rule.getName() != null
Object requestCacheKey
VertexProgram.createVertexProgram(graph,ConfUtil.makeApacheConfiguration(taskAttemptContext.getConfiguration()))
this(true,false); 
beans.add(bean)
max() > 32
case 14: 
MessageNotifier.updateNotification(context,null,-2)
account != null
interfacesToImplement.contains(interfaceToImplement)
target.getAddress() == null || target.getAddress().length() == 0
graphBuilderConfig.unresolvedIsError()
z.next_in[z.next_in_index++] != 0
stack.peek()
rc.networkPolicy(NetworkPolicy.OFFLINE)
mTfs.free(mTfs.open(path),true)
msgss == null && !ctx.localizations.isEmpty()
Window.<Integer>into(new GlobalWindows()).triggering(Repeatedly.forever(AfterPane.elementCountAtLeast(1))).accumulatingFiredPanes().withAllowedLateness(new Duration(0),ClosingBehavior.FIRE_ALWAYS)
postVisitColumnDefinition(each,statement,column.getName())
new Server()
given().contentType(ContentType.BINARY).content(inputStream).when().put("/file")
new ExtraLinkArgs("-bundle","-bundle_loader",bundleLoader.getExecPathString(),"-Xlinker","-rpath","-Xlinker","@loader_path/Frameworks")
String dateObject=lastMessageElement.getAttributes().getAttribute("date").toString(); 
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges),0)
times(5)
/**   * Gets the fully qualified resource name of the source view's id. <p> <strong>Note:</strong> The primary usage of this API is for UI test automation and in order to report the source view id of an  {@link AccessibilityNodeInfo} theclient has to set the  {@link AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}flag when configuring his  {@link android.accessibilityservice.AccessibilityService}. </p>  * @return The id resource name.  */ public String getViewIdResourceName(){   return mViewIdResourceName; } 
offset > 32767
yAmount != 0
argType instanceof PsiClassType && ClosureToSamConverter.isSamConversionAllowed(myPlace) && InheritanceUtil.isInheritor(argType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)&& !TypesUtil.isClassType(paramType,GroovyCommonClassNames.GROOVY_LANG_CLOSURE)
httpClient.closeAsynchronously()
m - 5d
iconsByFilename_.put(filespec.toLowerCase(),icon)
new Documentation(__ -> Optional.of(() -> "A"),__ -> Optional.of(() -> "B"),null,null,null,null)
getPageCache(fs,maxPages,pageCachePageSize,PageCacheTracer.NULL,DefaultPageCursorTracerSupplier.INSTANCE)
new WorldPoint(2783,3214,0)
_formatDefinition(definition,indent,level,!nestedDefinitions.isEmpty())
traceElements.size()
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
isChild() || !window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null
new Packet(data,operation.getPartitionId())
cache.removeAll(new HashSet<>(keys))
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),null,null,_velocityEngine,_templateContextHelper,false)
Path conf=nodeEnvironment.configFile(); 
(NestedForm)actionForm
new BigInteger(1,buf)
suiteXmlBuilder.getMetaClass().getProperty(suiteXmlBuilder,name)
(application.change().downgrades(deployment.version()) || application.change().downgrades(deployment.applicationVersion()))
case BALD: 
now < prefs.getLong(Constants.PREF_LAST_UPDATE_CHECK,0) + Constants.UPDATE_MIN_FREQUENCY
Channel channelObj=(Channel)channelSubscriptions.getItem(channel); 
_buildTemplateWithGradle("war-hook","war-hook-dependency-management","--dependency-management-enabled")
between != null && tile.wireManager.getColorOfPart(between.parts[0]) != null
mouseEvent.getModifiersEx()
new OperationSetTypingNotificationsGibberishImpl(this,persistentPresence)
UpgradeStepRegistrator.class
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_STOP_FUNCTION,false)
Localization.menuTitle("Tools")
BooleanUtils.isNotTrue(p.getMetadata().getExcluded())
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder().setEarlyFirings(subtrigger1))
new MapProducerCapabilities(false,false,true,true,null)
ByteBuf line=buffer(64); 
new StrutsSpringObjectFactory("constructor",null,null,msc,null,"true",null)
1f / 100
order=10
args.length == 1
Map<String,Fields>
new FeaturesConfig().setExperimentalSyntaxEnabled(true).setDistributedIndexJoinsEnabled(true).setDistributedJoinsEnabled(false).setRedistributeWrites(false).setOptimizeMetadataQueries(true).setOptimizeHashGeneration(false).setOptimizeSingleDistinct(false).setPushTableWriteThroughUnion(false)
response.getHeader(Exchange.CONTENT_TYPE) != null && !cxfExchange.containsKey(org.apache.cxf.message.Message.CONTENT_TYPE)
DiagnosticType.warning("JSC_CONSTANT_REASSIGNED_VALUE_ERROR","constant {0} assigned a value more than once.\n" + "Original definition at {1}")
pathParts[2] != null && pathParts[2].length() > 1
lastReturned >= streamSessions.size() - 1
new XlsExporter(false)
Status.createStatuseList(get(getBaseURL() + "favorites/" + id+ ".json","page",String.valueOf(page),true))
private final BeginNode node; 
drawable != null
getOrder()
SLIDING_TIMEOUT=60L
getPreferences().getBoolean(DEBUG_PREF,false)
cacheController.get(internalTenantContext.getTenantRecordId(),cacheLoaderArgument)
sourceScope.getGlobalSearchScope()
IDLE_TIMEOUT=10
PFLAG3_ASSIST_BLOCKED=0x4000
first.getWeight()
verify(mWifiService,never()).stopLocalOnlyHotspot(anyString())
expectedClockTime - 1000
address.getHostAddress()
new WitnessService(appT,context)
MIN_CONNECTIVITY_COUNT=1
token.equals("»") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
hasRows(targetConnection,tableName)
id=18
BaseComponent.toLegacyText(message)
public Game mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Game game=new Game();   game.setId(fs.readString("id"));   game.setYear(fs.readInt("year"));   game.setTeam(fs.readString("team"));   game.setWeek(fs.readInt("week"));   game.setOpponent(fs.readString("opponent"));   game.setCompletes(fs.readInt("completes"));   game.setAttempts(fs.readInt("attempts"));   game.setPassingYards(fs.readInt("passingYards"));   game.setPassingTd(fs.readInt("passingTd"));   game.setInterceptions(fs.readInt("interceptions"));   game.setRushes(fs.readInt("rushes"));   game.setRushYards(fs.readInt("rushYards"));   game.setReceptions(fs.readInt("receptions",0));   game.setReceptionYards(fs.readInt("receptionYards"));   game.setTotalTd(fs.readInt("totalTd"));   return game; } 
SIZE_OF_INT + SIZE_OF_INT + SIZE_OF_LONG
JSError.make(boundFunNode,GOOG_BIND_EXPECTS_FUNCTION,pair.type.toString())
ThreadPoolDownloadService.makeIntent(getContext(),mHandler,Options.TEST_URI)
ccfg0.setWriteBehindFlushFrequency(60_000)
String.format("Data file row position %d differs from index file row position %d",dataStart,dataStartFromIndex)
otherWriter.write(line)
GenericCommand<Object>
log.info("caught exception",e)
_training_metrics.auc().defaultThreshold()
ctx.cache().dynamicStartCaches(cacheCfgs,false,true,false)
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && ViewCompat.isAttachedToWindow(content)
buffer.nextValue(null,i,info.type,info.meta)
uri.getRawSchemeSpecificPart()
new GdxRuntimeException("Error during Vorbis decoding.",e)
"$" + name
ApplicationManager.getApplication().invokeLater(() -> {   final ExternalProjectsViewImpl projectsView=new ExternalProjectsViewImpl(project,(ToolWindowEx)toolWindow,myExternalSystemId);   ExternalProjectsManagerImpl.getInstance(project).registerView(projectsView);   ContentImpl tasksContent=new ContentImpl(projectsView,ExternalSystemBundle.message("tool.window.title.projects"),true);   contentManager.removeAllContents(true);   contentManager.addContent(tasksContent); } ,project.getDisposed())
chain.resolveResource(exchange,requestPath,locations).switchIfEmpty(Mono.defer(() -> resolveVersionedResource(exchange,requestPath,locations,chain)))
new TextField<String>(textFieldId,String.class)
check(permissionChecker,primaryKey,actionId)
previous.last.compareTo(current.first) >= 0
isAccessibilityFocusable()
RowKey.prefixKeyWithSalt(key_b)
ReflectionUtils.findMethod(user.getClass(),userPropertyToUse,new Class[0])
dbStat.setString(1,table.getName())
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_folder_name"))
childSubscription.set(scheduler.schedule(parentAction,parentAction))
Truffle.getRuntime().getCallerFrame()
buildHiloOptimizer(-1,increment)
users.size() > 50
(matchRule & SearchPattern.RULE_PREFIX_MATCH) != 0 && !nameMask.endsWith("%")
MacWrapper.class
mLocalAlluxioClusterResource.get().getWorker()
TIMEOUT=30000
enablePreload=false
FileChooser.chooseFile(new FileChooserDescriptor(true,false,false,false,false,false){   @Override public boolean isFileSelectable(  VirtualFile file){     return getCoverageRunner(file) != null;   } } )
latch.await(7,TimeUnit.SECONDS)
builder.run(context.getEditor(),false)
next != null && next.isHomeActivity()
new TypeException("TypeHandler '" + getClass() + "' extends TypeReference but misses the type parameter. "+ "Remove the extension or add a type parameter to it.")
dirtyOutputBuffer() || currentPacket != null
node == null || v == node.view
ESTestCase.randomAlphaOfLengthBetween(5,10)
res.getQuantityString(R.plurals.time_seconds_quantified,v,v)
process(unionSelect.right(),sb)
minElevation=99999
getImages.isSelected() && e.getStateChange() == ItemEvent.SELECTED
ModalityState.defaultModalityState()
Sets.newLinkedHashSet()
app.getSettings().SHOW_NEARBY_FAVORITES
winAnimator.setSurfaceBoundariesLocked(recoveringMemory)
!buckdEnabled
mHorizontals == null || offset < mLineStartOffset || offset >= mLineStartOffset + mHorizontals.length
LocalFileSystem.getInstance().refreshAndFindFileByPath(filePath)
scale(30000)
qp.isUniqueItems()
new ExecutionContext(instrumentation,executionId,graphQLSchema,queryStrategy,mutationStrategy,subscriptionStrategy,fragmentsByName,operation,variableValues,context,root)
1 <= user.getListedCount()
FieldStringEditor cse=new FieldStringEditor(); 
logger.debug("Did not recognise element named {}",localName)
isMoving || operationMode == Mode.MOVING
assertTrue(Modifier.isFinal(modifiers))
oldClusterVersion.before(Version.V_6_0_0_alpha1)
JNIDecoder.matches(out,getMatchingOutputFormats(inputFormat))
pm.setBlockUninstallForUser(packageName,uninstallBlocked,userId)
@GET @Path("/{petId}") @ApiOperation(value="Find pet by ID",notes="Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",response=Pet.class) @ApiResponses(value={@ApiResponse(code=400,message="Invalid ID supplied"),@ApiResponse(code=404,message="Pet not found")}) public Pet getPetById(@ApiParam(value="ID of pet that needs to be fetched",allowableValues="range[1,5]",required=true) @PathParam("petId") String petId) throws NotFoundException {   Pet pet=petData.getPetbyId(ru.getLong(0,100000,0,petId));   if (null != pet) {     return Response.ok().entity(pet).build();   }  else {     throw new NotFoundException(404,"Pet not found");   } } 
results.size() == K && lastNode != null
sreq.getRequestURI()
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to time: " + value.toStringUtf8(),e)
return tsrObject; 
whitelistedResourcesWithInvalidMac.contains(cleartextPath)
new HandlerThread(THREAD_NAME,android.os.Process.THREAD_PRIORITY_BACKGROUND)
new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null))
entity.getUserSessionNotes()
mKeyguardController.isKeyguardShowing(display.mDisplayId)
transportService.sendRequest(node,PublishClusterStateRequestHandler.ACTION,new PublishClusterStateRequest(clusterState),TransportRequestOptions.options().withHighType(),new VoidTransportResponseHandler(false){   @Override public void handleException(  TransportException exp){     logger.debug("failed to send cluster state to [{}], should be detected as failed soon...",exp,node);   } } )
equals(file1,file2)
detector != null && detector.detectCountry() != null
assertEquals(1000,timeout)
m.getParameterTypes()
setStacked(false,true)
1L << 36 - 1
mRemote.transact(REVOKE_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
clientInvocation.invokeUrgent().andThen(new ExecutionCallback<ClientMessage>(){   @Override public void onResponse(  ClientMessage response){     if (connection.isAlive()) {       connection.onHeartbeatReceived();     }   }   @Override public void onFailure(  Throwable t){     if (connection.isAlive()) {       logger.warning("Error receiving heartbeat for connection: " + connection,t);     }   } } ,executionService.getInternalExecutor())
flyway.setLocations("db.migration","com.googlecode.flyway.sample.migration")
buffers[i]
paramAttribute.split("\\.")
bean.getCollectionTime()
String.format(Locale.ROOT,"Warning: The following roles [%s] are unknown. Make sure to add them to the [%s] file. " + "Nonetheless the user will still be associated with all specified roles",Strings.collectionToCommaDelimitedString(unknownRoles),rolesFile.toAbsolutePath())
!sourcepath.isEmpty()
Map<K,V>
measureRun(0,0,offset,mLen,true,fmi)
packageNames != null && packageNames.length == 1
synchronized (this) {   if (listeners == null) {     listeners=new LinkedHashSet<HttpSessionListener>(GeoServerExtensions.extensions(HttpSessionListener.class));   } } 
new ListenerInfo("https",sslServer.getLocalAddress(),openListener,xnioSsl,sslServer)
DbConnectionManager.closeStatement(pstmt)
@ConditionalOnEnabledHealthIndicator("db")
name.contains(".")
new VisorGatewayArgument(VisorQueryTask.class).forNode(locNode).argument(VisorQueryArg.class,"person",URLEncoder.encode("select * from Person",CHARSET),false,false,1)
LayoutLocalServiceUtil.addLayout(group.getCreatorUserId(),group.getGroupId(),privateLayout,LayoutConstants.DEFAULT_PARENT_LAYOUT_ID,name,StringPool.BLANK,StringPool.BLANK,LayoutConstants.TYPE_PORTLET,false,friendlyURL,serviceContext)
map.set(keyValue.getKeyData(),value)
path.toString()
entity.func_189777_di() != ZombieType.NORMAL && entity.func_189777_di() != ZombieType.HUSK
Integer.parseInt(nid[0],16)
protected abstract T getTreeByKey(FBTree.Key key); 
record.getId() != 0 && record.getLength() > store.getRecordSize() - store.getRecordHeaderSize()
/**   * Theater of Blood reward chest inventory (Raids 2)  */ THEATRE_OF_BLOOD_CHEST(612)
!message.isDiscussion()
OfferDeliveryType.AUTOMATIC != deliveryType
repository.loadForRequest(null)
HashSet<String>
service.getId().equals(PublicizeConstants.GOOGLE_PLUS_ID) && mShouldHideGPlus
entry.getKey().startsWith("sun.") || entry.getKey().startsWith("awt.") || entry.getKey().contains(".awt.")
listeners.executed(context)
new Entry(i,(float)val)
EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT,ProcessExecutor.Option.IS_SILENT)
4
PrefUtils.setDefaultPreferenceValue(store,QUERY_ROLLBACK_ON_ERROR,false)
randomFrom(SearchType.QUERY_THEN_FETCH,SearchType.DFS_QUERY_THEN_FETCH)
targetBoard == null || !targetBoard.getId().equals(split[2])
titleTable.getPrefWidth()
new IndexWriter(d,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
@Override public ValueNode getMaterializedRepresentation(FixedNode fixed,ValueNode[] entries,int[] locks){   return new AllocatedObjectNode(this); } 
PhoneNumberUtils.is12Key(number.charAt(i))
maxRows >= 0
PsiTreeUtil.getParentOfType(file.findElementAt(offset),PsiComment.class,false)
upnpBox.isSelected()
mock.expectedMessageCount(3)
closed.get()
parser.getName().equals(xhtmlExtension.getElementName()) && parser.getDepth() <= startDepth
info.getDeviceSvnUsingSubId(subId[0],mContext.getOpPackageName())
b <= 'F'
wrapped.equals(binaryMessageHandler)
mediaVideoItem.getHeight() / 2
Nd4j.rand(200,200,min,max,Nd4j.getRandom())
isFetchSyncActive=false
STUB_VERSION=22
synchronized (this) {   try {     if (getClassCacheEntry(name) != cls)     return getClassCacheEntry(name);     URL source=resourceLoader.loadGroovySource(name);     cls=recompile(source,name,cls);   }  catch (  IOException ioe) {     last=new ClassNotFoundException("IOException while openening groovy source: " + name,ioe);   }  finally {     if (cls == null) {       removeClassCacheEntry(name);     }  else {       setClassCacheEntry(cls);     }   } } 
subscriptionManager.getOnSubscribeFunc(new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){   } } ,new Action1<SubjectObserver<? super T>>(){   @Override public void call(  SubjectObserver<? super T> o){     lastNotification.get().accept(o);   } } ,null)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AV_INPUT_FUNCTION,false)
((ContactJabberImpl)obj).getAddress().equalsIgnoreCase(getAddress())
value.readUnsignedInteger(offset,size)
getScrollMode(scroll,hasFirstRow,useLimitOffset,queryParameters)
TEST_UTIL.waitUntilAllRegionsAssigned(TEST_TABLE.getTableName())
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
ExampleItemWriter.class
CANCEL_TIMEOUT_LIMIT=3000
LAST_VERSION=941
ContentType.parse(request.getContentType())
this.getClass().getName()
Log_OC.d(TAG,"Got to start sync")
amp*=0.9
Map<String,Type>
Throwable ex
10 * 1024 * 1024
(BrokerService)context.getBean("broker")
providerConfig.setTimeout(5000)
ACRA.log.w(LOG_TAG,"Unknown json subtree type, see issue #186")
cursor == null || !cursor.moveToFirst()
JobEntryInterface.class
m.getModifiers()
zkController.getZkStateReader().getReplicaProps(collection,shardId,coreNodeName)
sRecentsBlacklist.contains(t.realActivity.getClassName()) || sRecentsBlacklist.contains(t.realActivity.getPackageName())
clazzes.put(name,clazz)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers3.kt")
fluids.containsKey(fluid.getName())
Arrays.fill(this.state,FREE)
unsafe.compareAndSetByte(container,byteOffset,(byte)17,(byte)121)
context.getViolations(violationQuery).isEmpty()
Path tempDataPath=tempNoCluster.toAbsolutePath(); 
stringEntry.getValue()
value + MINIMUM_BACKLIGHT
isAvailable(oldStatus)
synchronized (points) {   points.add(point);   int size=points.size();   if (size > MAX_RESULT_POINTS) {     points.subList(0,size - MAX_RESULT_POINTS / 2).clear();   } } 
LOG.info("Read offset {} before start of log at {}, starting to read from the beginning of the journal.",readOffset,logStartOffset)
Math.max(1,(end - currentTimeMillis()) / TimeUnit.DAYS.toMillis(1))
deserializerForCreator(config,enumClass,factory,null,null)
!hasCollapsibleActionView()
parent.getExactOverriddenJoinColumn(propertyName)
onlyRemoveOutdatedData || isTooLarge(file)
_getVersion()
filters={XSSHtmlFilter.class}
from("direct:a").delay(5000)
assertEquals(16,rows.size())
/**   * Creates the  {@link TokenStream} of n-grams from the given {@link Reader}.   */ public NGramTokenizer create(Reader input){   return new NGramTokenizer(input,minGramSize,maxGramSize); } 
Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
isRunning()
256L << zoomLevel
(Long)criteria.uniqueResult()
-904632508
prj0.getAndPutIfAbsent(i,i * i)
patch.getPath()
!lan
new FormAttachment(wCompression,margin)
mucUser.getInvite() != null && ((Message)packet).getType() != Message.Type.ERROR
new LightweightThread(null,null,this)
timeout=50_000L
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
EXCEPTION_CAUSE_PATTERN.matcher(output)
new FairAffinityFunction(false,512)
localNodeData.dcLocalAddress.getHostAddress()
assertEquals("null",dataFileStream.getMetaString("avro.codec"))
(short)0777
TestJsonRequest.doJsonRequest(client,true)
WsRemoteEndpointImplServer.class
NODE_START_CHECK_LIMIT=25
configurationManager.addContainerProvider(c)
myProgramParameters.getComponent().setDialogCaption(myProgramParameters.getRawText())
networkInfo == null || networkInfo.getType() == ConnectivityManager.TYPE_WIFI && !networkInfo.isConnected()
listIntent.toArray(new Intent[0])
item != null && !item.isDisposed()
UpgradeStepRegistrator.class
a.getKey()
table.hasSearchIndex(table.getColumnIndex("columnString"))
TEST_MAP_SIZE=30000
inputMaskArray != null && inputMaskArray.isAttached()
private void speedOtherPlayers(final Server server,final CommandSender sender,final boolean isFly,final boolean isBypass,final float speed,final String name) throws PlayerNotFoundException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     if (isFly) {       matchPlayer.setFlySpeed(getRealMoveSpeed(speed,isFly,isBypass));       sender.sendMessage(_("moveSpeed",_("flying"),speed,matchPlayer.getDisplayName()));     }  else {       matchPlayer.setWalkSpeed(getRealMoveSpeed(speed,isFly,isBypass));       sender.sendMessage(_("moveSpeed",_("walking"),speed,matchPlayer.getDisplayName()));     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
TimeoutUtil.sleep(1500)
public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry {   private final Logger logger=LoggerFactory.getLogger(this.getClass());   private final ConcurrentMap<TransformerKey,ClassFileTransformer> transformerMap=new ConcurrentHashMap<TransformerKey,ClassFileTransformer>();   @Override public void onRetransformRequest(  Class<?> target,  final ClassFileTransformer transformer){     add(target.getClassLoader(),target.getName(),transformer);     if (logger.isInfoEnabled()) {       logger.info("added retransformer classLoader: {}, class: {}, registry size: {}",target.getClassLoader(),target.getName(),transformerMap.size());     }   }   @Override public void onTransformRequest(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     add(classLoader,targetClassName,transformer);     if (logger.isInfoEnabled()) {       logger.info("added dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }   }   private void add(  ClassLoader classLoader,  String targetClassName,  ClassFileTransformer transformer){     ClassFileTransformer prev=transformerMap.putIfAbsent(new TransformerKey(classLoader,targetClassName.replace('.','/')),transformer);     if (prev != null) {       throw new ProfilerException("Transformer already exists. classLoader: " + classLoader + ", target: "+ targetClassName+ ", transformer: "+ prev);     }   }   @Override public ClassFileTransformer getTransformer(  ClassLoader classLoader,  String targetClassName){     if (transformerMap.isEmpty()) {       return null;     }     ClassFileTransformer transformer=transformerMap.remove(new TransformerKey(classLoader,targetClassName));     if (logger.isDebugEnabled()) {       logger.info("removed dynamic transformer classLoader: {}, className: {}, registry size: {}",classLoader,targetClassName,transformerMap.size());     }     return transformer;   } private static final class TransformerKey {     private final ClassLoader classLoader;     private final String targetClassName;     public TransformerKey(    ClassLoader classLoader,    String targetClassName){       this.classLoader=classLoader;       this.targetClassName=targetClassName;     }     @Override public int hashCode(){       return classLoader.hashCode() * 31 + targetClassName.hashCode();     }     @Override public boolean equals(    Object obj){       TransformerKey other=(TransformerKey)obj;       return this.classLoader.equals(other.classLoader) && this.targetClassName.equals(other.targetClassName);     }   } } 
new DefaultConfiguration(new NoConnectionProvider(),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
new ByteSizeValue(20,ByteSizeUnit.MB)
m_data.rewind().forward((int)key_offset).getFixString((int)key_length,charsetName)
user == null || "false".equalsIgnoreCase(property.getProperty("zeppelin.jdbc.auth.kerberos.proxy.enable"))
uri != null || !browser.isLoad()
IsotonicMDS.class
firstChatPanel.getChatStatusIcon()
logger.trace("Requsting URL {}",url)
Arrays.asList(User.class,Organization.class,Role.class,UserGroup.class,Group.class,Company.class)
new ByteBuddy().subclass(Object.class).name("example.Type").make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
mouse().alt().pressAt(1,1)
USE_MACOSX_CALAYERS=false
mCommand != null
DefaultTransactionExecutor.class
importData ? 4 : 3
Assert.assertEquals(120L,dbManager.getDynamicPropertiesStore().getPublicNetUsage())
EnumDict<Object>
name.length() - 1
keyFrameMeta.timestamps[i] >= ts
TaskLog.captureOutAndError(null,command,stdout,stderr,logLength,false)
plan != null && plan.getVolumeSetPlans().size() > 0
FileSystemUtils.exists(path)
mAppOpsManager.noteOpNoThrow(opCode,callingUid,opPackageName)
contentService.submitContentFromSandbox(contentIds,"UserSandBox","NumeroUno","NoteTest")
project.getExtensions().add(IdeaModel.class,"idea",ideaModel)
fragUtils.fragmentType()
testTLS(Cert.CLIENT_PEM_ROOT_CA,Trust.SERVER_JKS,Cert.SERVER_JKS,Trust.CLIENT_PEM_ROOT_CA).requiresClientAuth().serverUsesCrl()
lightSpecular[lightCount][3]
new WebdavEntry(resp.getResponses()[0],getUri().getPath())
!ro.isStopApplicable(ro.bearingVsRouteDirection(loc),i)
id=10865
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
commonPrefixLength == chars.length() && chars.length() == oldPsiText.length()
@NotNull Id getId(); 
namespace == null || namespace.equals("")
!Const.isEmpty(job.name()) && name.startsWith("!") && name.endsWith("!")
isES() || major < 3
createAggregator(aggregationBuilder,indexSearcher,fieldType)
calendar.add(Calendar.DATE,-1)
i >= 1
HiveRexUtil.simplify(rexBuilder,node)
fingerprintIsEnabled()
new Dimension(700,430)
Thread.sleep(1500)
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
upgradeDDLRecordVersionClassName(classNameDependencies)
FMLLog.log(mod.getModId(),Level.FINE,"Mod Logging channel %s configured at %s level.",mod.getModId(),level == null ? "default" : level)
page.getLogicalSizeInBytes()
call != null && call.resolveMethod() != null
accountCapsule.getFreeAssetNetUsage(tokenName)
cctx.wal() != null && !writeEntries().isEmpty()
DISPLAY_TASKS_PORTRAIT + 1
ROUTE_IGNORED_WARNING_CODE=5100
LocalFileSystem.getInstance().findFileByIoFile(file)
mFragments.mCurState < Fragment.CONTENT && mFragments.mActivity != null
new UnsupportedOperationException("read-only")
g.tool.errMgr.grammarError(ErrorType.INVALID_RULE_PARAMETER_REF,g.fileName,y,y.getText(),rref.name,expr)
typCategoryStr != null && !typCategoryStr.isEmpty()
new SQLException("Table exists","I6000",288)
assertThat(map).containsExactly(p)
!Const.isEmpty(stepTablename)
onJava11()
new DateTime(2012,3,2,23,59,0,0,testTimeZone)
o instanceof IndexReader || o.getClass().getSimpleName().equals("SegmentCoreReaders")
LOG.fine("Found operation: " + ori.getMethod().getName())
destinationFactory == null
handleSecurityPermissionEndpoints(child,permConfig)
numMessages=200
ImplementationMethodDescriptor methodDescriptor
LOGGER.warning("Unable to load image using TGA loader!")
new BundleSavedState(source,getClass().getClassLoader())
underlying.next(num)
i < path.length() && path.charAt(i) == PERIOD
Long.class
@Nullable T value
resources.getDimensionPixelSize(R.dimen.close_handle_height)
new JobConf(config_,StreamJob.class)
PsiClass superClass=((PsiAnonymousClass)typeDefinition).getBaseClassType().resolve(); 
t.getType() == Term.Type.STRING && !t.isToken
new Builder().setDuration(3000).setColor(android.R.color.holo_green_light)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
recentsStackInfo == null && activityType == ACTIVITY_TYPE_RECENTS
new ColumnInfo(Messages.getString("SetVariableDialog.Fields.Column.VariableType"),ColumnInfo.COLUMN_TYPE_CCOMBO,SetVariableMeta.getVariableTypeDescriptions(),false)
addIndices(indices)
public String getRequestRequiredAcks(){   return configuration.getRequestRequiredAcks(); } 
new TextField<String>(JMSConfiguration.GROUP_KEY,String.class)
public class XpathRegressionDefaultComesLastTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     final String[] expectedViolation={"8:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP","/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP" + "/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DefaultComesLastCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDefaultComesLastTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DefaultComesLastCheck.class);     moduleConfig.addAttribute("skipIfLastAndSharedWithCase","true");     final String[] expectedViolation={"15:13: " + getCheckMessage(DefaultComesLastCheck.class,DefaultComesLastCheck.MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionDefaultComesLastTwo']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
TIMESTAMPTZ_READ_METHOD.invoke(object,connection)
manager != null && manager.server != null
GL11.glGetIntegerv(pname,params)
MethodConstant.ofPrivileged(instrumentedMethod.asDefined())
guiResource.getImageJobGraph()
index >= 0
new IdentityHashMap<>()
source.getName()
SLTestTruffleBoundary01BuiltinFactory.getInstance()
this.getStyleClass().add("document-viewer")
state != SocketState.CLOSED
view.getStylesheets().add(0,AbstractDialogView.class.getResource("Main.css").toExternalForm())
count < 50
CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
new AnalyzedToken(word,taggerTokens[i + 1],taggerTokens[i],pos)
public RemoveDuplicatesTokenFilter create(TokenStream input){   return new RemoveDuplicatesTokenFilter(input); } 
batch.getSample().getRequiredBatchMemorySize() * 4
logger.info(String.format("Asked to rebuild table %s.%s but I don't know keyspace %s",keyspaceToRebuild,tableToRebuild,keyspaceToRebuild))
new IllegalArgumentException(Localizer.getMessage("org.apache.jasper.compiler.ELParser.invalidQuotesForStringLiteral",input))
ourXWindowIDEA94683FocusBug && isFocused() && !myRequestFocus&& prevOwner != null && Registry.is("actionSystem.xWindow.remove.focus.from.nonFocusable.popups")
Objects.equals(that.value,this.value) && that.timestamp.isEqual(timestamp) && that.windows.size() == windows.size()
e2.getPointerCount()
s.length() > 3 && s.charAt(3) == '<'
TransactionMetadata::setInactive
assertEquals(expected,result.toString())
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,false)
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
fortData.getLureInfo().getLureExpiresTimestampMs() > api.currentTimeMillis()
mTo == 0
rm.add(new QueryPath(cfName,cosc.super_column.name,column.name),column.value,column.timestamp,column.ttl)
standardSearchRequest(query,IndexHelper.determineAffectedIndices(indexRangeService,deflector,range),range)
delta.assetsSeq != ASSETS_SEQ_UNDEFINED && delta.assetsSeq != assetsSeq
assertEquals(56,StringUtil.countMatches(drl,"rule \""))
mCol.getDb().getDatabase().endTransaction()
ToolUtils.sleepIgnoreInterrupt(30000)
st.setNCharacterStream(name,characterStream.asReader(),characterStream.getLength())
element == null && editor != null
Slog.d(TAG,"Hardware Activity-Recognition not supported.")
n.extras.getCharSequence(Notification.EXTRA_TITLE)
S extends T
ContainerUtil.newTroveSet("intellij.platform.commercial","intellij.idea.ultimate.resources","intellij.platform.commercial.verifier","intellij.platform.commercial.license","intellij.platform.propertyInspector","intellij.platform.graph","intellij.platform.graph.impl","intellij.diagram","intellij.diagram.impl","intellij.uml")
toolWindow.activate(null,false)
reordableChildren.size() >= actionUrl.getAbsolutePosition()
descriptor.getDependencies()
assetAutoTaggerEntries.isEmpty()
logger.debug("Cannot handle repeat command ({})",e.getMessage())
latch.endLatch.await(800,TimeUnit.MILLISECONDS)
new ShowArticleOnTouchListener("feature_articles/about.html",getActivity(),version)
XmppStringUtils.parseBareJid(userJID)
id=4
LOG.debug("Creating netty input stream for block {} @ {} from client {}",blockId,address,NetworkAddressUtils.getClientHostName())
coyoteRequest.getReadListener() == null
file != null && !file.isDirectory()
StreamletNamePrefix prefix
ServerApplicationConfig.class
info.getImeiForSubscriber(subId[0],mContext.getOpPackageName())
MavenHelpers.getOrCreateElementBuilder(image,"name")
MAGIC_GEN_NUMBER=0xD0_46_B4_E4_0C_7D_07_CFL
mAuthorities.valueAt(i)
textChangeObservable.debounce(400,TimeUnit.MILLISECONDS)
state.isAlive()
{ENDPOINT_DISPLAY_ITEMS,DISPLAY_ITEM_BIT_CLOCK,0x10,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}
decoder.decode(null,null,null,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,ChannelBufferTools.convertArray(buf2)))
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=3
HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,method.getModifierList()) == null && !(aClass instanceof PsiAnonymousClass)
uri.getRawPath()
new CharChunk(32)
uiSettings.setShowEditorToolTip(myShowCodeLensInEditorCheckBox.isSelected())
kernelHeight > (inHeight + 2 * padHeight)
/**   * Returns a trigger which never fires. Output will be produced from the using  {@link GroupByKey}when the  {@link BoundedWindow} closes.  */ public static NeverTrigger ever(){   return new NeverTrigger(); } 
layoutPageTemplateLocalService.updateLayoutPageTemplate(getUserId(),pageTemplateId,name,layoutPageTemplateFragments,serviceContext)
!name.equals(that.name)
response.get(ROLLED_BACK)
stream.printf("        return ((AtomicReference<%s>) %s_PROPERTY.get(object, true)).getAndSet(value);%n",property.getType(),NameUtils.identifierToConstant(property.getName()),layout.getName())
Log_OC.e(TAG,"Server check tried with OperationService unbound!")
string != null && string.indexOf(oldname) != -1
JavaScriptClassContributor.getItemsByNameStatic(name,project,includeNonProjectItems)
days(25)
/**   * {@inheritDoc}   */ @Override public void start() throws IgniteException {   if (dataSrc == null)   throw new IgniteCheckedException("Failed to initialize cache store (data source is not provided).");   if (dialect == null)   dialect=resolveDialect(); } 
ChannelBuffers.buffer(order(),length)
id=14239
!Config.supportOmemo()
assertEquals(0.3116490253190556,mse,1e-8)
returnElement != null
PasswordEncryptorUtil.encrypt(jPassword,user.getPassword())
new GitException("Tag " + tagName + " not found. ")
BATCH_SIZE=100
argumentsLength == 0
downstreamNodes.containsAll(executionPhase.nodeIds())
new RationalTanhDerivative(x,y,z,n)
info.getDeviceIdForPhone(slotId,mContext.getOpPackageName())
Exception t3
notifierFuture.cancel(false)
!from.getItem().shouldCauseReequipAnimation(from,to,changed)
setStatus(SC_MOVED_PERMANENTLY)
getAlignment(targetDataLayout)
logger.trace("Mapped {} to {}",t,e.getValue())
size=24
intent.setDataAndType(uri,DocumentsContract.Root.MIME_TYPE_ITEM)
UNPINNED=0
id=10836
maxWait=10
!allowStateLoss
new WorldPoint(2447,3418,1)
ire.printStackTrace(css_.err)
LOGGER.debug("Ticket has expired because the difference between current time [{}] and ticket time [{}] is greater than or equal to [{}].",systemTime,lastTimeUsed,this.timeToKillInSeconds)
assertEquals(13,scannedBeanCount)
Color.blue(endColor)
manager.beginTransaction().remove(fragment).commitAllowingStateLoss()
cache.localSize()
JenkinsResultsParserUtil.combine("Unable to rebase ",targetBranch.getName()," to ",sourceBranch.getName(),"\n",executionResult.getStandardErr())
formatted.split("\n",-1)
mTfs.delete(mTfs.open(new TachyonURI(filePath)),true)
postAgg.getName().equalsIgnoreCase(topNMetricName)
assertEquals(3,result.getAuthorities().size())
precision=1E5
Map<String,Object>
classMapper.realClass(reader.getNodeName())
new InetSocketAddress("localhost",6333)
new VisorBinaryConfiguration(bc)
a.getInt(com.android.internal.R.styleable.Animator_duration,300)
Mockito.doNothing().when(mFileSystemMasterClient).rename(src,dst,renameOptions)
RuntimeException e
new ConnectionException(sm.getString("frameType.checkStream",this),Http2Error.PROTOCOL_ERROR)
timeout=30000
TreeMap<String,String>
getJSDocType(operation)
new MessagingException("Cannot open folder: " + e.getMessage(),e)
keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE
width / 2
reporterCtl.setVoidCallable(MockControl.ONE_OR_MORE)
!mScreenOnEarly
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true)
new VelocityTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_velocityEngine,_templateContextHelper,false)
Exception ignored
myImplementation.clear(myVcsLocation)
lastUpdateTime2 >= lastUpdateTime
new IllegalStateException(sm.getString("http11Processor.upgrade"))
GL20.glUniformMatrix4fv(location,transpose,toFloatBuffer(value,offset,count << 4))
@Bean @ConditionalOnMissingBean(NamedParameterJdbcOperations.class) public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){   return new NamedParameterJdbcTemplate(this.dataSource); } 
log.info("Not found",e)
new MatParamTexture(VarType.Texture2D,paramName,texture,null)
mService.saveConfiguration()
final String fpCat=(p.category != null) ? p.category : ""; 
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
(prop.getModifiers() & ACC_FINAL) == 0
param.setThrowable(xparam.getThrowable())
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
LOG.warn("Skipping incompatibly changed class: " + className)
assertEquals(6358481l,received.get(0)[1])
Assert.fail("Some completion variants are missed " + missedVariants)
new CompositeException(e,ex)
assertEquals(200f,animator.getFrame())
public static LocalTimeArray localTimeArray(LocalTime[] values){   return new LocalTimeArray(values); } 
Assert.assertEquals(6033003930L,trace.getReceipt().getEnergyFee())
bi treeGen=new ha(); 
Assert.assertEquals(2,clusterEventListeners.size())
run.size() == maxBatchWriteSize
removeFlagFromCache(account,ids,flag)
markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))
loadTask instanceof LongTask
!internalRenderers.containsKey(name)
script.getIntOperands()
batteryVp > full
1024 * 1024 * 15
testLogger.info("[v] Unsecure sync completed")
DLAppServiceUtil.deleteFolder(parentFolder.getFolderId())
payload.intPayload[1]
BaseMessages.getString(PKG,"AutoDoc.Exception.UnknownFileTypeValue",fileType)
outputPath.endsWith(DexStore.JAR.getExtension()) || outputPath.endsWith("classes.dex")
DLAppLocalServiceUtil.updateFolder(folder.getFolderId(),folder.getParentFolderId(),"New Name",RandomTestUtil.randomString(),serviceContext)
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).parallelProcessing(true)
cfm.getColumnDefinition(columnName.key)
TopEntity top1=new TopEntity(); 
nextInfo == null || nextInfo.directionInfo == null
createCurrency("BTG","Bitcoin Gold",null)
printLine("Unable to connect due to unrecognised server certificate")
lastListener == null
new TransactionOptions().setDurability(0).setTimeout(30,TimeUnit.SECONDS)
logger.fine("transport is open - connecting")
categoryMap.get(category.getParentId(),rootCategory)
FSA.read(JLanguageTool.getDataBroker().getFromResourceDirAsStream(DICT_FILENAME))
IGNORE("ignore")
doReopen(false)
deleteAction.delete(destination)
upgradeVersion=37
new FieldFrame(null,true,null)
SocialActivityInterpreterLocalServiceUtil.interpret(selector,_activity,serviceContext)
forward.close(true)
file == null || beforeDir == null || afterDir == null
type.createBlockBuilder(new BlockBuilderStatus(),4)
getResponse("GET","/books/" + bookId,null)
!mShowAnimations && mShowTimer && mCardTimer.getVisibility() == View.INVISIBLE
myApplication.invokeLater(new Runnable(){   public void run(){     if (myModule.isDisposed())     return;     ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();     if (indicator != null) {       indicator.setIndeterminate(true);       indicator.setText("Updating manifest indices.");     }     myBundleManager.reindex(myModule);   } } ,myModule.getDisposed())
localBroker.oneway(sub.getLocalInfo())
!stateSpec.defaultStateAsResource() && LOG.isDebugEnabled() && getDefaultState(component,name,stateClass) != null
numStats > 1
PsiTreeUtil.getStubOrPsiParentOfType(uexpr,ScopeOwner.class)
moveDocument(client,sourceDocumentUri,sourceParentDocumentUri,targetParentDocumentUri)
t3.getSort()
"com.android.browser".equals(browserPackageName) || "com.android.chrome".equals(browserPackageName)
java(convention).getTestClassesDir()
INDEX_TREE_LONGLONGMAP_DIR_SHIFT=7
/**   * Tests that compression is turned on.  */ @RunWith(JUnit4.class) public class TransportCompressionTest extends AbstractInteropTest {   private static int serverPort=TestUtils.pickUnusedPort();   private static final DecompressorRegistry decompressors=DecompressorRegistry.newEmptyInstance();   private static final CompressorRegistry compressors=CompressorRegistry.newEmptyInstance();   @Before public void beforeTests(){     Fzip.INSTANCE.anyRead=false;     Fzip.INSTANCE.anyWritten=false;   }   /**   * Start server.   */   @BeforeClass public static void startServer(){     decompressors.register(Fzip.INSTANCE,true);     compressors.register(Fzip.INSTANCE);     startStaticServer(ServerBuilder.forPort(serverPort).compressorRegistry(compressors).decompressorRegistry(decompressors),new ServerInterceptor(){       @Override public <ReqT,RespT>Listener<ReqT> interceptCall(      MethodDescriptor<ReqT,RespT> method,      ServerCall<RespT> call,      Metadata headers,      ServerCallHandler<ReqT,RespT> next){         Listener<ReqT> listener=next.startCall(method,call,headers);         call.setMessageCompression(true);         return listener;       }     } );   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Test public void compresses(){     final SimpleRequest request=SimpleRequest.newBuilder().setResponseSize(314159).setResponseType(PayloadType.COMPRESSABLE).setPayload(Payload.newBuilder().setBody(ByteString.copyFrom(new byte[271828]))).build();     final SimpleResponse goldenResponse=SimpleResponse.newBuilder().setPayload(Payload.newBuilder().setType(PayloadType.COMPRESSABLE).setBody(ByteString.copyFrom(new byte[314159]))).build();     assertEquals(goldenResponse,blockingStub.unaryCall(request));     assertTrue(Fzip.INSTANCE.anyRead);     assertTrue(Fzip.INSTANCE.anyWritten);   }   @Override protected ManagedChannel createChannel(){     return ManagedChannelBuilder.forAddress("localhost",serverPort).decompressorRegistry(decompressors).compressorRegistry(compressors).intercept(new ClientInterceptor(){       @Override public <ReqT,RespT>ClientCall<ReqT,RespT> interceptCall(      MethodDescriptor<ReqT,RespT> method,      CallOptions callOptions,      Channel next){         final ClientCall<ReqT,RespT> call=next.newCall(method,callOptions);         return new ForwardingClientCall<ReqT,RespT>(){           @Override protected ClientCall<ReqT,RespT> delegate(){             return call;           }           @Override public void start(          final ClientCall.Listener<RespT> responseListener,          Metadata headers){             ClientCall.Listener<RespT> listener=new ForwardingClientCallListener<RespT>(){               @Override protected io.grpc.ClientCall.Listener<RespT> delegate(){                 return responseListener;               }               @Override public void onHeaders(              Metadata headers){                 super.onHeaders(headers);                 String encoding=headers.get(GrpcUtil.MESSAGE_ENCODING_KEY);                 assertEquals(encoding,Fzip.INSTANCE.getMessageEncoding());               }             } ;             super.start(listener,headers);             setMessageCompression(true);           }         } ;       }     } ).usePlaintext(true).build();   } static final class Fzip implements Codec {     static final Fzip INSTANCE=new Fzip();     volatile boolean anyRead;     volatile boolean anyWritten;     @Override public String getMessageEncoding(){       return "fzip";     }     @Override public OutputStream compress(    OutputStream os) throws IOException {       return new FilterOutputStream(os){         @Override public void write(        int b) throws IOException {           super.write(b);           anyWritten=true;         }       } ;     }     @Override public InputStream decompress(    InputStream is) throws IOException {       return new FilterInputStream(is){         @Override public int read() throws IOException {           int val=super.read();           anyRead=true;           return val;         }         @Override public int read(        byte[] b,        int off,        int len) throws IOException {           int total=super.read(b,off,len);           anyRead=true;           return total;         }       } ;     }   } } 
new PaymentApiException(ErrorCode.PAYMENT_NO_SUCH_PAYMENT_METHOD,paymentMethodId)
console.readPassword(fmt,args)
(P)in.readOptionalNamedWriteable(PersistentTaskParams.class)
subModule.update(persistencePackage)
fragmentEntryPersistence.countByG_FCI_LikeN_S(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],status)
{4,5,5,11,6,5,7,7,11,11}
commState.getBoolean("syncCommit")
finalOverlayView.getParent() == null
str.chomp19(context)
e.update(recid,2L,Serializer.LONG)
repositoryImpl.setName(getName())
position < 0
Env.fromString(env)
grpCtx.config().getRebalanceDelay() == -1
!webSocket.resource().getAtmosphereResourceEvent().isSuspended()
ImmutableMap.<String,Type>of(StandardTypes.BOOLEAN,BOOLEAN,StandardTypes.BIGINT,BIGINT,StandardTypes.DOUBLE,DOUBLE,StandardTypes.VARCHAR,VARCHAR)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/DelegateToOtherObject.kt")
R
deopt2.action()
!mConfig.hasTransposedNavBar
TimeUnit.SECONDS.toMillis(5)
new PageException("分页参数不是合法的数字类型!",e)
private final MessageHeaderAccessor headerAccessor; 
consumer.receive(5000)
Assert.assertEquals(catalogsJson.get(0).getPriceLists().size(),7)
case 6: 
file.getName().getBaseName()
PostgreTableBase.class
requestRender()
LOG.warn("Process %s exited with error code %d",buckPyProcess,exitCode)
assertThat(System.currentTimeMillis() - startTime).isBetween(450L,600L)
Class bindingTargetType
grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED
serialVersionUID=1L
edge.getUpNode()
THUMBNAIL_APP_TRANSITION_DURATION=325
Assert.assertEquals(resJsonObject.getJSONArray("SERVER_TENANTS").length(),4)
indexMappingsDir.exists()
id=10870
config.getBroadcasterFactory().lookup(a.broadcaster(),path,true)
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus drPauseState(){   GridCacheProjectionImpl<K,V> prev=gate.enter(prj);   try {     return delegate.drPauseState();   }   finally {     gate.leave(prev);   } } 
sessionToken == null || !sessionToken.equals(stateParam)
awsClient.deleteImage(resource.getId())
(status & 0x80000000) != 0
ViewRecordSpreadsheetViewTest.class
"true".equalsIgnoreCase(mode)
mPluggedIn ? Tile.STATE_UNAVAILABLE : mPowerSave ? Tile.STATE_ACTIVE : Tile.STATE_INACTIVE
moveCursorTo(pac.getRow(),1)
version > 0
new IndexWriter(directory,autoCommit,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
@Override public Response example(String type,Object example){   if (examples == null) {     examples=new HashMap<String,Object>();   }   examples.put(type,example);   return this; } 
logger.getLogger().warning("Shut down master")
dir.mkdirs()
scan.getResourcesFound()
? extends CommitParents
accessor.valueOrNull()
PsiTreeUtil.getParentOfType(element,PsiClass.class,false)
this.instanceManager != null && this.scheduler != null
size=10.0f
depthError("modelY")
new IncorrectOperationException(getClass().getName())
object2StaticBuffer(expectedValue)
this.args.getNetNodeId()
flux.onErrorMap(UnsupportedMediaTypeException.class,ERROR_MAPPER)
getFastAdapter().notifyAdapterItemChanged(position)
Arrays.asList("bash",command)
new OptionValue<>(20)
userId > 0
LifecycleListener listener
@Specialization protected LLVMBoxedPrimitive fromShort(short value,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMBoxedPrimitive(value); } 
logExitAPICall(log,transactionType,account,payment != null ? payment.getPaymentMethodId() : null,payment != null ? payment.getId() : null,paymentTransaction != null ? paymentTransaction.getId() : null,paymentTransaction != null ? paymentTransaction.getProcessedAmount() : null,paymentTransaction != null ? paymentTransaction.getProcessedCurrency() : null,payment != null ? payment.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getExternalKey() : null,paymentTransaction != null ? paymentTransaction.getTransactionStatus() : null,paymentControlPluginNames,null)
System.out.println("--")
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReplicatedMapHitsAndLastAccessTimeTest extends ReplicatedMapAbstractTest {   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary() throws Exception {     testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime(  Config config) throws Exception {     final long startTime=Clock.currentTimeMillis();     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map1.entrySet()) {           assertRecord(getReplicatedRecord(map1,entry.getKey()),startTime);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        Map.Entry<String,String> entry : map2.entrySet()) {           assertRecord(getReplicatedRecord(map2,entry.getKey()),startTime);         }       }     } );   }   private void assertRecord(  ReplicatedRecord<String,String> record,  long startTime){     assertNotNull(record);     long hits=record.getHits();     long lastAccessTime=record.getLastAccessTime();     long now=Clock.currentTimeMillis();     assertTrue(String.format("Hits should be greater than 0: %d > %d",hits,0),hits > 0);     assertTrue(String.format("Hits should be less than 1000: %d < %d",hits,1000),hits < 1000);     assertTrue(String.format("LastAccessTime should be greater than startTime: %d > %d",lastAccessTime,startTime),lastAccessTime > startTime);     assertTrue(String.format("LastAccessTime should be less or equal than current time: %d <= %d",lastAccessTime,now),lastAccessTime <= now);   }   @Test public void test_hitsAreZeroInitially_withSingleNode_object() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreZeroInitially_withSingleNode_Binary() throws Exception {     testHitsAreZeroInitiallyWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreZeroInitiallyWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(0,replicatedRecord.getHits());     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_object() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetWithSingleNode(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_object() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary() throws Exception {     testHitsAndLastAccessTimeAreSetFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAndLastAccessTimeAreSetFor1Of2Nodes(  Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");       map1.containsKey(key);     }     for (    String key : keys) {       final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map1,key);       assertNotNull(replicatedRecord);       assertEquals(1,replicatedRecord.getHits());       assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> replicatedRecord=getReplicatedRecord(map2,key);           assertNotNull(replicatedRecord);           assertEquals(0,replicatedRecord.getHits());           assertTrue("Last access time should be set for " + key,replicatedRecord.getLastAccessTime() > 0);         }       }     } );   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_object() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_withSingleNode_Binary() throws Exception {     testHitsAreIncrementedOnPutsWithSingleNode(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsWithSingleNode(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map=instance1.getReplicatedMap(randomMapName());     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       map.put(key,"bar");     }     for (    String key : keys) {       final ReplicatedRecord<String,String> record=getReplicatedRecord(map,key);       assertNotNull(record);       assertEquals(1,record.getHits());     }   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_object() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void test_hitsAreIncrementedOnPuts_with2Nodes_Binary() throws Exception {     testHitsAreIncrementedOnPutsFor1Of2Nodes(buildConfig(InMemoryFormat.BINARY));   }   private void testHitsAreIncrementedOnPutsFor1Of2Nodes(  final Config config) throws Exception {     final TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     final HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     warmUpPartitions(instance1,instance2);     final String mapName=randomMapName();     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap(mapName);     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           final ReplicatedRecord<String,String> record1=getReplicatedRecord(map1,key);           assertNotNull(record1);           assertEquals(1,record1.getHits());           final ReplicatedRecord<String,String> record2=getReplicatedRecord(map2,key);           assertNotNull(record2);           assertEquals(0,record2.getHits());         }       }     } );   } } 
post.isLocalChange()
elementType == null || elementType == Object.class
fail("IllegalArgumentException is expected")
dfa == null || dfa.states.isEmpty()
mPwCollection.getGroupedPwPairsSortedByRank(Utils.newDistanceComparator())
id=26
curRowNum >= segmentSize && segmentSize > 0
ImmutableMap.of(BuildInfo.BUILD_TIMESTAMP,Key.of(KeyType.INTEGER,"0","0"),BuildInfo.BUILD_SCM_REVISION,Key.of(KeyType.STRING,"0","0"),BuildInfo.BUILD_SCM_STATUS,Key.of(KeyType.STRING,"","redacted"))
consumed | ((AndroidJoyInput14)joyInput).onKey(event)
return useProfilingInfo; 
lock.isHeldByCurrentThread()
mSettings.writeRuntimePermissionsForUserLPr(userId,false)
type == null || type.equalsIgnoreCase("text/css") == true
new JGroupsFilter(bc)
new PlainMenuItem(iconId,null,text,needLinks,isUrl,collapsable,collapsableView,onClickListener)
intent.putExtra(EXTRA_THEME,0)
unbox(watched,movie.watched)
offset <= 0
Settings.Secure.getInt(mResolver,NETSTATS_ENABLED,0)
new LinkedList<>(0)
new IllegalArgumentException(sm.getString("pojoMethodMapping.pongWithPayload",m.getName(),m.getClass().getName()))
_layout.isTypePortlet()
bundleRoot.getParent()
StaxUtils.writeDocument(doc,writer,true,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false),true)
PROJECTS=100
resource.removeExtractor(input.getId(),extractorId)
sm.getString("managerBase.sessionAttributeValueClassNameFilter",name,value.getClass().getName(),sessionAttributeValueClassNamePattern)
maxLifetime < 120000 && maxLifetime != 0
ep.getLoaderForClass()
new FontComboBox(false)
results != null && results.getCount() > 0
calendar.set(Calendar.DAY_OF_WEEK,4)
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n"+ "Checkstyle ends with 2 errors.%n",expectedPath)
moveToState(fragment,fragment.mStateAfterAnimating,0,0,true)
Build.VERSION.SDK_INT < 11 || CamcorderProfile.hasProfile(CamcorderProfile.QUALITY_LOW)
_fragmentCollectionLocalService.deleteFragmentCollection(fragmentCollectionId)
session.setMaxInactiveInterval(getMaxInactiveInterval(),false)
LOG.debug("Creating split : " + split + ", bytes in split: "+ currentSplitSize)
port == 443
size() > this.capacity
Object minIntDigits=properties.get(NumberFormatSample.PROP_MIN_INT_DIGITS); 
childCalendarBooking.isMasterBooking() || ArrayUtil.contains(childCalendarIds,childCalendarBooking.getCalendarId())
hr != null && normalMode
orderBook.getTimeStamp()
processInstance.getProcessDefinitionId()
Map<String,U>
Collector.<T,ImmutableSet.Builder<T>,ImmutableSet<T>>of(ImmutableSet.Builder::new,ImmutableSet.Builder::add,(ImmutableSet.Builder<T> left,ImmutableSet.Builder<T> right) -> {   left.addAll(right.build());   return left; } ,ImmutableSet.Builder::build,Collector.Characteristics.UNORDERED)
Thread.sleep(30000)
whitePoint=9f
processGoType(resolveType,processor,state)
/**   * @see ConceptService#getCountOfConceptReferenceTerms(String,ConceptSource,boolean)  */ public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException ; 
reportsE.appendChild(reportE)
new ServerPartition(partitionKey,rowType,0.0)
changed || !getExternalFile().exists()
i < 11
return 61; 
day=20
"abcdefghijklmnop".getBytes("UTF-8")
ViewPortletSMTest.class
mPowerRequest.policy == DisplayPowerRequest.POLICY_DIM && !mAllowAutoBrightnessWhileDozingConfig
return 5; 
Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.SYSTEM_NAVIGATION_KEYS_ENABLED,1)
pbBmp.setProcessListener(pBmpHandler)
app.getSettings().WIKIVOYAGE_SHOW_IMAGES
config.swapChase()
-flexibleSpace <= translationY
nextOffsetStart >= rangeToRemove.getEndOffset()
sendObjectInfoResult.getCompressedSizeLong()
e instanceof NoSuchUserException || e instanceof RequiredReminderQueryException || e instanceof SendPasswordException|| e instanceof UserActiveException|| e instanceof UserLockoutException|| e instanceof UserReminderQueryException
spec.getReflection()
items[28]
measureRun(0,0,offset,mLen,false,fmi)
public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory){   configBuilder.setSSLEngineFactory(sslEngineFactory);   return this; } 
id=10847
(filterMap.getDispatcherMapping() & FilterMap.INCLUDE) != 0
nestedSimpleIA.setContext(context)
win == null || !startPositioningLocked(win,true,startX,startY)
new ByteBuddy().subclass(MemoryDatabase.class).method(named("load")).intercept(MethodDelegation.to(ChangingLoggerInterceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
public static TimeArray timeArray(OffsetTime[] values){   return new TimeArray(values); } 
/**   * Executes the given task in a new thread that is authenticated as the daemon user. <br/> <br/> This can only be called from  {@link TimerSchedulerTask} during actual task execution  * @param task the task to run  * @should not be called from other methods other than TimerSchedulerTask  * @should not throw error if called from a TimerSchedulerTask class  */ public static void executeScheduledTask(final Task task) throws Exception {   Class<?> callerClass=new OpenmrsSecurityManager().getCallerClass(0);   if (!TimerSchedulerTask.class.isAssignableFrom(callerClass)) {     throw new APIException("This method can only be called from the TimerSchedulerTask class, not " + callerClass.getName());   }   DaemonThread executeTaskThread=new DaemonThread(){     @Override public void run(){       isDaemonThread.set(true);       try {         Context.openSession();         TimerSchedulerTask.execute(task);       }  catch (      Exception e) {         exceptionThrown=e;       }  finally {         Context.closeSession();       }     }   } ;   executeTaskThread.start();   try {     executeTaskThread.join();   }  catch (  InterruptedException e) {   }   if (executeTaskThread.exceptionThrown != null) {     throw executeTaskThread.exceptionThrown;   } } 
hasColumn("MicroblogsEntry","creatorClassNameId")
this.principalSuffix != null && userPrincipalName.indexOf('@') < 0
order.getSize()
/**   * Add a  {@link Publication} for publishing messages to subscribers.  * @param channel  for receiving the messages known to the media layer.  * @param streamId within the channel scope.  * @return the new Publication.  */ public ConcurrentPublication addPublication(final String channel,final int streamId){   clientLock.lock();   try {     return conductor.addPublication(channel,streamId);   }   finally {     clientLock.unlock();   } } 
assertBusy(() -> {   GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();   SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);   logger.info("Snapshot status [{}], successfulShards [{}]",snapshotInfo.state(),snapshotInfo.successfulShards());   assertThat(snapshotInfo.state(),equalTo(SnapshotState.SUCCESS));   assertThat(snapshotInfo.successfulShards(),equalTo(shards)); } ,30L,TimeUnit.SECONDS)
/**   * Signal the maps/reduces to start.  */ static void signalTasks(MiniDFSCluster dfs,FileSystem fileSys,boolean isMap,String mapSignalFile,String reduceSignalFile) throws Exception {   writeFile(dfs.getNameNode(),fileSys.getConf(),isMap ? new Path(mapSignalFile) : new Path(reduceSignalFile),(short)1); } 
Observable.create(takeWhile(source,new Func1<String,Boolean>(){   @Override public Boolean call(  String s){     return false;   } } )).toBlockingObservable().lastOrDefault("")
BitUtil.check(status,9)
Throwable t
unresolvedReferenceDiagnostic.getPsiElement()
mUserManager.getUsers(true)
new ConcurrentHashMap<Class<?>,PropertyDescriptor[]>(256)
Assert.assertEquals(122L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
new EnterSelectionDialog(shell,files,Messages.getString("ExcelInputDialog.FilesRead.DialogTitle"),Messages.getString("ExcelInputDialog.FilesRead.DialogMessage"))
new ShardRouting(indexName,0,"_node_id",null,null,true,state,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
GitBranch.list(myProject,myDir,true,true,branches,null)
assertEquals(1,conceptStopWords.size())
EnterpriseMapPublisherCreateWithValueCodec.decodeResponse(response).response
"unable to parse " + optionStr
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"cpuinfo",pw)
readBuffer.position() == 0
currentPosition < input.size() && (next=this.input.get(currentPosition++)) != null
telephony.getForbiddenPlmns(subId,appType,mContext.getOpPackageName())
JournalArticleFinderUtil.countByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
targetColumn.getTable() != null && !diffResult.getUnexpectedTables().contains(targetColumn.getTable())
mLinearLayout.setVisibility(View.GONE)
rootMBMessage.getMessageId()
Long.parseLong(subSecs)
!canPTR
targetPrincipal == null || targetPrincipal.getName() == null
promise.setFailure(new ClosedChannelException())
replace(wmlTemplateString,new StringBuilder(),mappings)
new IntRangeValidator(1,true,true)
new StringBuilder(726)
mapperContextRootRedirectEnabled=true
context.proxyOf(entity,true)
DDMStructureLocalServiceUtil.getJournalFolderStructures(PortalUtil.getCurrentAndAncestorSiteGroupIds(groupId),containerModelId,true)
data.length != columnCount
preferences.put("cityAdminLevel",s)
/**   */ public class S3SnapshotRestoreOverHttpTest extends AbstractS3SnapshotRestoreTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","http");     return settings.build();   } } 
HexaDecimalToBinary objConvert=new HexaDecimalToBinary(); 
oldVb.getBufferType() == VertexBuffer.Type.Index || oldVb.getBufferType() == VertexBuffer.Type.HWBoneIndex || oldVb.getBufferType() == VertexBuffer.Type.HWBoneWeight
SampleObservables.numberStrings()
createTx(blockchain,sender,receiveAddress,data,0)
items[25]
out.writeByte(CONSTANT_VALUE_ARRAY_TAG)
segs == null
buttons.size() > 3 && categoryTypes.size() > 4
tx != null
mAlarmManager.setExact(AlarmManager.RTC,timestampMs,mAnomalyAlarmIntent)
available=false
sessionConf != null && sessionConf.get("tez.queue.name") != null
params.getConsole().getStdOut()
holder.createWarningAnnotation(element,composeTooltipString(descriptor,deprecated))
id=10845
new Exception("data still remaining in inflater",e)
_relanuchCounter >= maxRelaunch
Directory dir=newDirectory(); 
block.getChildren()[1]
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
VERSION=9
/**   * Closed connections.   */ @GridToStringExclude private final LongAdder8 closed=new LongAdder8(); 
bin_dir.findChild("python")
refreshTitle()
callback.done(false)
public class RetryFailure extends AssertionError {   private static final String MESSAGE="Test failed despite retries";   public RetryFailure(  Throwable cause){     super(MESSAGE,cause);   } } 
new NamespaceFilter("-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN",XmlUtil.FACELETS_TAGLIB_URI,XmlUtil.FACELETS_TAGLIB_URI2)
any()
ensureExpectedToken(Token.FIELD_NAME,token,parser::getTokenLocation)
data[1] < 10
DATABASE_VERSION=501
viewRect.width > 0 && targetLocation.x >= hOffset + viewRect.width
aClass.isInterface() || aClass.isAnnotationType() || aClass.isEnum()
statistics.addGetTimeNanos(System.nanoTime() - start)
get(nom)
s > 1e-4
endPos < bufEnd
num.set(j,numbers.get(keys[j]))
startTest(getMethodName())
body[0][0][1]
mService.setWifiApConfiguration(wifiConfig)
assertEquals(0.314813341867078,mse,1e-8)
assertEquals(message,v1,v2)
GL.glPolygonOffset(factor,units)
solrDocument2.getFieldNames()
new String(jsonExpectation,Charset.forName(CharEncoding.UTF_8))
buildArchiveContext(persistenceUnit,true,resultCollector)
(NON_DOUBLE_LONG & in) == 0L
new FloatValue(Float.parseFloat(text))
cls.getDeclaredMethod(mtdName,paramTypes)
HttpComplianceSection#METHOD_CASE_SENSITIVE
tryExtractRequired(buildingInfo.entitiesRequiredItems.get(schematicEntity),buildingInfo.entitiesRequiredFluids.get(schematicEntity),true).isPresent()
recipe.hasKey("energy",3)
logger.warn("Cannot parse " + str + " using 0 minutes")
formatTilesDefsXML(fileName,newContent)
surfaceHolder.setSizeFromLayout()
FileSystemMaster.class
i < 10000
mMat[7]
VersionPrinter.printVersion()
doInvoke(args.first(),args.rest())
Collectors.joining("\n")
util.getDataTestDirOnTestFS(table)
logger.trace("Creating Object {}",count.getAndIncrement())
new IocException("_mirror_factory_init",e,"Mirror Factory init fail")
portalTopLevelBuildData.getTopLevelMasterHostname()
config.isList("socialspy-commands")
assertEquals(8,executionContext.getLong(ClassUtils.getShortName(FlatFileItemWriter.class) + ".written"))
equalTo(9)
factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)
desc.getName()
new StreamingModeExecutionState(NameContextsForTests.nameContextForTest(),"testState",null,NoopProfileScope.NOOP,null)
CollectionUtils.filter(filteredFeaturedProducts,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((FeaturedProduct)arg).getProduct()).getArchived();   } } )
s2 <= s1
factory.getDestination(getEndpointInfo("sna","foo2","https://localhost:9003"),bus)
wait <= 0 && BlockUtil.canChangeBlock(worldObj,target.x,target.y,target.z)
psiFile == null || psiFile instanceof PsiCompiledElement
sendPackageBroadcast(Intent.ACTION_PACKAGE_FIRST_LAUNCH,pkgSetting.name,null,pkgSetting.installerPackageName,null)
layoutFriendlyURLLocalService.updateLayoutFriendlyURLs(user.getCompanyId(),groupId,plid,privateLayout,friendlyURLMap,serviceContext)
jniGetLocalAxisA(addr,tmp)
!isLost && this.service != null
e.getPresentation().setEnabledAndVisible(false)
result.setBytes(8L)
new HazelcastProperty("hazelcast.invalidation.reconciliation.interval.seconds",60,SECONDS)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new GridBag().setDefaultInsets(new Insets(0,0,DEFAULT_VGAP,DEFAULT_HGAP)).setDefaultWeightX(1).setDefaultWeightY(0)
origin.absoluteValue().doubleValue() < complexNumber.absoluteValue().doubleValue()
fs.renameFile(file,new File(file.getParent(),newName))
t.getState() == Thread.State.RUNNABLE
args[0].length() == 51 || args[0].length() == 52
offset >= i
assertCompletionVariants(myProjectPom,"combine.children","combine.self")
IMPL_HTTP_CLIENT4.equals(impl) || IMPL_HTTP_CLIENT3_1.equals(impl)
new GitException(ERROR_ADD_REMOTE_NAME_MISSING)
templatesToAddressList(engine,cc,model)
new ModelNode().set(25000L)
Slog.d(TAG,"Unable to bind FusedProxy.")
logger.debug("copy {} to {}",srcFile.getAbsolutePath(),destPath)
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),UNSET)
Double.valueOf(parser.group(index++)) / 600000
defaultMavenProfile.setOutputRelativeToContentRoot(true)
Context.packingClass(config)
new Scale(1,0.01,0,0)
Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2)
dimensionsSpec.getDimensionNames()
getConversionByClass(value.getClass(),logicalType)
assertThat(context).getBeans(HandlerMapping.class).hasSize(5)
types != null && type != null
entry.key == k || (entry.key != null && k != null && k.equalsIgnoreCase(entry.key))
new InputStreamReader(is,"UTF-8")
cSet.getConceptSet()
GetDataMessage getdata=new GetDataMessage(params); 
new NoteDrawerCategoryAdapterViewHolder()
/**   * Tests for  {@link ClosureSortedDependencies}  */ public class ClosureSortedDependenciesTest extends SortedDependenciesTestHelper {   @Override public SortedDependencies<SimpleDependencyInfo> createSortedDependencies(  List<SimpleDependencyInfo> shuffled) throws CircularDependencyException {     return new ClosureSortedDependencies<>(shuffled);   }   @Override public boolean handlesCycles(){     return false;   } } 
JZVideoPlayer.onScrollAutoTiny(view,firstVisibleItem,visibleItemCount,totalItemCount)
XmlSuite.DEFAULT_PRESERVE_ORDER.equals(m_preserveOrder)
LOG.error("Operation failed - may be retried. Service component host: " + schName + ", host: "+ hostname+ " Action id"+ report.getActionId())
wsdlLocation != null && wsdlLocation.length() > 0
EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)
new Rectangle(5,2,ERROR_ICON_WIDTH,ERROR_ICON_HEIGHT)
String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n" + "<checkstyle version=\"" + version + "\">%n"+ "<file name=\""+ expectedPath+ "\">%n"+ "</file>%n"+ "</checkstyle>%n",version,expectedPath)
!or.isYNegated()
(PyQualifiedExpression)expression
MESSAGES.failToReplicateAttribute(name,value.getClass().getCanonicalName())
setUseSynchronousMode(false)
URLDetail wd
new VideoMediaDeviceSession(this,oldSession)
baseComparator.compare(first,second)
StringUtils.isEmpty(name)
result != null && endpointId <= result.getInstances()
URL.encodeComponent(content)
entry.getValue().getTimeWindowSet().size() < 1
return mChangingAppearingDelay; 
calendar.get(HOUR_OF_DAY)
callBacks.stream()
jobLogText.getText()
(ElasticSearchException)actual
new NagiosNscaStub(25669,"password")
getDelegate().handle(exchange).onErrorResume(ex -> {   if (logger.isDebugEnabled()) {     logger.debug("Could not complete request",ex);   }   response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
OptionBuilder.create(CMD_HOST)
notebook.cloneNote(note.getId(),"clone note with Exception result",null)
addDaysAndCheckForCompletion(1,NextEvent.PAYMENT_ERROR)
dir.setMaxSizeInBytes(3)
info.getSubscriberIdForSubscriber(subId,mContext.getOpPackageName())
classNode.hasMethod(mixinMethod.getName(),mixinMethod.getParameters())
mime == null || mime.value().length == 0
id=47
assertEquals(false,StringUtils.isNumeric(""))
rangeTable.getRowCount(session)
20000 * 4 * 3
@Override public CharsRefBuilder append(CharSequence csq,int start,int end){   if (csq == null) {     return append(NULL_STRING);   }   grow(ref.length + end - start);   for (int i=start; i < end; ++i) {     setCharAt(ref.length++,csq.charAt(i));   }   return this; } 
KeyWords link=new KeyWords(); 
new ReactorManager(Collections.EMPTY_LIST,ReactorManager.FAIL_FAST)
modificationDateField != null && "".equals(((String)modificationDateField.get()).trim())
4 * MB
mExternalOnScrollListener=listener
Math.min(titleRight,subtitleRight)
this.client.get().accept(TEXT_EVENT_STREAM).exchange().expectStatus().isOk().expectHeader().contentTypeCompatibleWith(TEXT_EVENT_STREAM)
computator.getContentRectMinusAllMargins()
new JComboBox(accounts)
CompilerDirectives.inCompilationRoot()
Flusher.register(handler)
HashMapDB<byte[]>
zzStartRead == zzCurrentPos
CallParticipantRecordImpl cpr=new CallParticipantRecordImpl((String)callParticipantIDs.get(i),new Date(Long.parseLong((String)callParticipantStart.get(i))),new Date(Long.parseLong((String)callParticipantEnd.get(i)))); 
rangedRegion.getUniqueId()
targetMeta.convertData(sourceMetaCopy,r[rowcolumn])
fetchDefaultLayout(groupId,privateLayout)
protected final MethodFlatteningResolver methodFlatteningResolver; 
state.getItemCount() <= 0
mContext.bindService(i,mConnection,Context.BIND_AUTO_CREATE,UserHandle.USER_CURRENT)
LOG.warn("Failed to find " + baseDirectory.getAbsolutePath())
propResource.get(BOOT_TIME).asBoolean(false)
"Expanded " + before + " to "+ repository
targetCondn == null || (nodeCondn.size() != targetCondn.size())
eventFunc.equals("conf_api_sub_unmute") || eventFunc.equals("conference_api_sub_unmute")
diagnosedRanges.remove(3)
TimeUnit.SECONDS.toMillis(5)
CLOCK_DAEMON.schedule(timerTask,period,period)
entry.getKey().subscribeToRootRefreshEvents(entry.getValue(),refresher)
new String(payload,"UTF-8")
drivers.keySet()
TypeMirror maybeWildcardType
LOG.trace("removing shm " + shm)
System.getProperty("line.separator")
check(given("HEAD","master","origin/master"),ContainerUtil.list("HEAD"),Pair.create("Local",ContainerUtil.list("master")),Pair.create("Tracked",ContainerUtil.list("origin/master")),Pair.create("origin/...",ContainerUtil.list("origin/master")))
limitOrder.getType() == OrderType.BID || limitOrder.getType() == OrderType.EXIT_ASK
defaultFloat=UNSET
Math.max(1000L,connectionTimeout)
INDEX_VERSION=17
ohCache.memUsed()
Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,String.format("%s+%s+%s+%s",appId,env,clusterName,namespaceName))
getExecutionContext()
new Insets(2,5,2,6 + 6)
resultBits <= 32
dao.meta().isSqlServer() || dao.meta().isHsql() || dao.meta().isDerby()
generateBitmapFromImageData(rotateImage(mImageData,mWidth,mHeight),mHeight,mWidth)
myTypeChecker.checkExpressionIsAssignableToType(arguments[0],BOOLEAN_CLASS_NAME,"javascript.argument.type.mismatch",null,false)
row2 * layerTileHeight
assertCompletionVariants(myProjectPom,"jar","pom","war","ejb","ejb-client","ear","bundle","maven-plugin")
mapper.getTypeFactory().constructType(Event.class)
super.executeInternal()
nai.networkCapabilities.satisfiedByImmutableNetworkCapabilities(networkCapabilities)
Screen.dp(33)
new GridDrStatus(pauseReason,errMsg)
editor == null && this.formattingService != null
STUB_VERSION=46
isChecked
is(5)
(calling != null || mPersistentVrModeEnabled) && !Objects.equals(calling,mCurrentVrModeComponent) || mRunning2dInVr != running2dInVr
!msg.isResponseRequired() && !connection.isAlwaysSyncSend() && (!msg.isPersistent() || connection.isUseAsyncSend() || txid != null)
Class data
0 <= f
id.provider != null && id.provider.info != null
this.decoder.decodeToMono(message.getBody(),elementType,contentType,hints).onErrorMap(this::mapError)
unsafeBuffer.wrap(byteBuffer)
closeTo(2889.0,200.0)
state.registerDeleted(myContext,descriptor.getTarget(),file)
val > mMaxValue || result.length() > String.valueOf(mMaxValue).length()
mHeartbeatExecutor != null
CloudScanConfiguration.class
ti >= 0
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     if (!myProject.isOpen())     return;     myFrameworkInstanceLibraryManager.updateFrameworkInstanceLibraries();     myAlarm.cancelAllRequests();     myAlarm.addRequest(new Runnable(){       @Override public void run(){         rebuildOSGiIndices();       }     } ,500);   } } ,myProject.getDisposed())
mv.visitAnnotation(Type.getDescriptor(NotNull.class),false)
metadata.getClassName()
m.setContent(OutputStream.class,os)
ddmStructureLocalService.deleteStructure(ddmStructure.getStructureId())
pinScrollBy(hdelta,vdelta,false,0)
FragmentActivity activity=fragment.getActivity(); 
bulkInsertableMap.containsKey(persistentObjectClass)
_closed=true
this.seperator=separator
ArrayList<ElementNode>
new Button("submit"){   private static final long serialVersionUID=-2842881187264147131L;   @Override public void onSubmit(){     GeoServer gs=(GeoServer)geoServerModel.getObject();     GeoServerInfo global=gs.getGlobal();     global.setJAI((JAIInfo)jaiModel.getObject());     gs.save(global);     doReturn();   } } 
getBatchId()
if (DBG) {   Log.d(LOG_TAG,"registerPhone(" + phone.getPhoneName() + " "+ phone+ ")"); } 
parseLibraryFileChunk(jar,libDescription,zip,classesPerChunk)
"Executing SQL script from " + scriptPath
Preconditions.checkArgument(argv.length == 2,"usage: value(\"attr\", \"value\")")
new EditText(getDialogContext(true),attrs)
trip ? (val & 0x3F) : 63
"could not execute request: " + request
new StringBuilder(253)
manualClock.addTimeMs(1001)
DestinationFactoryManagerImpl.class
component.setObfuscated(object.get("obfuscated").getAsBoolean())
new ObjectMapper().readerFor(HashMap.class)
home.getAbsolutePath()
public T withCancellationToken(CancellationToken cancellationToken){   operationParamsBuilder.setCancellationToken(Preconditions.checkNotNull(cancellationToken));   return getThis(); } 
mValues[8]
HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(refElement).descriptionAndTooltip(message)
final ImportControl root=ImportControlLoader.load(new File(getPath("import-control_complete.xml")).toURI()); 
getFirstByType(type)
List<String>
getVirtualMachine().canRedefineClasses()
mPackageUsage.write(false)
@Override public ExtendedCell deepClone(){   byte[] copy=Bytes.copy(this.bytes,this.offset,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
!get(key).equals(that.get(key))
SystemInfo.isMac || myTestModeFlag
for (SampleStream sampleStream : streams) {   if (sampleStream instanceof ChunkSampleStream) {     @SuppressWarnings("unchecked") ChunkSampleStream<DashChunkSource> stream=(ChunkSampleStream<DashChunkSource>)sampleStream;     sampleStreamList.add(stream);   }  else   if (sampleStream instanceof EventSampleStream) {     eventSampleStreamList.add((EventSampleStream)sampleStream);   } } 
setNextBackupId(buf,1)
fixes != null && fixes.length > 0
log.debug(sm.getString("contextConfig.invalidSciHandlesTypes",className),t)
rm.add(new QueryPath(cfName,null,cosc.column.name),cosc.column.value,cosc.column.timestamp,cosc.column.ttl)
!AnkiDroidApp.colIsOpen()
pane.getFirstComponent()
trimmedLine.contains(delimiter)
element.isRoot()
editor1 == editor && !editor.isDisposed()
new IndexWriter(ramDir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
socket != null
processLink(curi,codebase,context)
METADATA_KEYS_TYPE.put(METADATA_KEY_RDS_PI,METADATA_TYPE_INT)
JavaSmartCompletionContributor.processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){   public void consume(  final PsiType type){     addExpectedType(result,type,identifierCopy);   } } ,result.getPrefixMatcher())
"-n".equals(arg) || "-s".equals(arg) || "-g".equals(arg)
mSeekBar.setProgress(0,true)
constraintSystem.getTypeParameterDescriptors()
DB_VERSION=2
lookup="java:comp/ds"
fileName.contains("-ext") && !isJarFile(file)
longSize >= 960
new NodeStats(new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,Version.CURRENT),0,new NodeIndicesStats(new CommonStats(),statsByShard),null,null,null,null,new FsInfo(0,pathInfo),null,null,null,null,null,null)
getReduceValuesForReduceSinkNoMapAgg(parseInfo,destination,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
application.isWriteAccessAllowed() || application.isDispatchThread()
Throwable e1
req.getSession().getMaxInactiveInterval() * 1000L
new SkeletonControl(meshes,animData.skeleton)
data.cx.initStandardObjects(null,false)
hasFocus() && showClearButton && !TextUtils.isEmpty(getText())&& isEnabled()
CLIENT_SNAPSHOT=0x08
LOG.warn(msg)
CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider<XmlNSDescriptorImpl>(){   @Override public Result<XmlNSDescriptorImpl> compute(){     return Result.create(doCreateDescriptor(kind),PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT);   } } ,false)
toggleBreakpoint(getScriptPath(),15)
writer.getSourceFile(2)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.BACKUP,"isBackupServiceActive")
JournalTemplateServiceUtil.getTemplate(webDavRequest.getGroupId(),journalTypeId,true)
UpgradeStepRegistrator.class
mockServerLogger.info("resetting all expectations and request logs" + NEW_LINE)
Log.w(TAG,"releaseInfoLock error",e)
mBluetoothGatt.registerScanner(this,mWorkSource)
create.isInternal()
delegate.open(filename,grabSize,idType,highIdSupplier,maxId)
Arrays.binarySearch(vipAddresses,key.getName()) >= 0
doTest("va","val ... = ...","var ... = ...","vararg","private","values","variables")
mAssetManager.openFd(mAssetName)
t != null && t.st == ST.LABEL
@NotNull GitLocalBranch branch
Arrays.asList("com.google.errorprone.MaskedClassLoader$MaskedFileManager","com.google.devtools.build.buildjar.javac.BlazeJavacMain$ClassloaderMaskingFileManager","com.google.devtools.build.java.turbine.javac.JavacTurbineCompiler$ClassloaderMaskingFileManager","org.netbeans.modules.java.source.parsing.ProxyFileManager","com.sun.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager","com.sun.tools.javac.main.DelegatingJavaFileManager$DelegatingSJFM")
CodecUtil.checkHeader(in,CODEC_NAME,VERSION_START,VERSION_CURRENT)
doConfigureRemote(fork)
Exception e
(pInfo.applicationInfo.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0
TEST_DATA_SIZE=2516
handshake == 0 || status == SocketStatus.ERROR
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicLocalTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
@Override protected Text setParent(Parent parent){   throw ImmutableElement.immutableError(this); } 
JournalArticleLocalServiceUtil.addArticle(TestPropsValues.getUserId(),groupId,JournalFolderConstants.DEFAULT_PARENT_FOLDER_ID,JournalArticleConstants.CLASSNAME_ID_DEFAULT,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,descriptionMap,content,ddmStructure.getStructureKey(),ddmTemplate.getTemplateKey(),null,displayDateCalendar.get(Calendar.MONTH),displayDateCalendar.get(Calendar.DAY_OF_MONTH),displayDateCalendar.get(Calendar.YEAR),displayDateCalendar.get(Calendar.HOUR_OF_DAY),displayDateCalendar.get(Calendar.MINUTE),0,0,0,0,0,true,0,0,0,0,0,true,true,false,null,null,null,null,serviceContext)
p.getQuery()
Mono.subscriberContext()
mFlexItemInEdit.setWrapBefore(isChecked)
cachedValues.put(entry,NULL) == null
new AntTypeDefinitionImpl(id,typeClass.getName(),isTask,attributes,nestedDefinitions,helper.getExtensionPointTypes(),null)
new KeyguardStatusViewManager(this,updateMonitor,lockpatternutils,callback,true)
{NOTIFY_INIT,NOTIFY_CONNECT,NOTIFY_ABANDON,SLOW_QUERY_NOTIFICATION,FAILED_QUERY_NOTIFICATION,SUSPECT_ABANDONED_NOTIFICATION,POOL_EMPTY,SUSPECT_RETURNED_NOTIFICATION}
A a
case Incoming: 
callNode.call(evaluateArgs(frame))
Integer.class
addTest(13,13,180.0f)
registeredService.getAccessStrategy().doPrincipalAttributesAllowServiceAccess(principal.getId(),principalAttrs)
periodStr.equals("null") || periodUnit == 'n'
DirectoryReader.open(writer.w)
new Rect(28,14,272,14)
@Override public final Chunk reloadFromBytes(byte[] ary){   _mem=ary;   initFromBytes();   return (D)this; } 
UPDATING
Math.min(filterExplanations.get(i).getValue(),factor)
version.getUpdate().getAsInt() >= 151
new StringBuilder(246)
location.getExtent()
Map<ShardId,ShardRestoreStatus>
accountInfo.compareTo(order.getTotalAmount()) < 0
((MapActivity)getActivity()).getMyApplication().getIconsCache().getIcon(R.drawable.ic_action_search_dark,true)
invertedIndex.getMutable(i)
new ColorUIResource(0x356936)
VERSION=1
Arrays.asList("jar","ejb-client","war","rar","ejb3","par","sar","wsr","har","app-client")
new SafeTextModel(value,Mode.relaxed)
i == j && i > 1
componentClasses != null && !componentClasses.isEmpty()
MultiMap.create()
os.write(bytes,0,len)
imeWin.getFrameLw()
assertEquals(SIZE * COUNTDOWN,c1.counts + c2.counts)
AdviceWithTasks.removeByType(route,type,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
assertFalse(isBufferCopyNeededForWrite(byteBuf.asReadOnly()))
equalAny(Symbol.LT_GT,DefaultKeyword.LIKE)
StringUtil.isNotEmpty(functionName) && !"_".equals(functionName) && o.getContainingFile().getImportMap().containsKey(functionName)
readBytes > 0
new Box(1,1,1)
currentToken.hasType("operator","comment","numeric","text")
Exception e
sslConfig.getBoolean(CONFIG_OF_ENABLE_SERVER_VERIFICATION,true)
mHeader.callOnClick()
writeDirectly(serverInfo + columnEnd)
Criterion.and(MetadataCriteria.withKey(TagMetadata.KEY),Metadata.DELETION_DATE.eq(0),TagMetadata.TASK_UUID.eq(taskUuid),TagMetadata.TAG_UUID.eq(tagUuid))
waiting - addConnectionQueue.size() >= 0
Messages.showErrorDialog(component,getErrorTextFromException(e),title)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     new Task.Backgroundable(project,"Synchronizing OSGi dependencies",false){       @Override public void run(      @NotNull ProgressIndicator indicator){         indicator.setIndeterminate(true);         ModuleManager instance=ModuleManager.getInstance(project);         Module[] modules=instance.getModules();         for (        Module module : modules) {           getInstance(module).syncDependenciesFromManifest();         }       }     } .queue();   } } ,project.getDisposed())
log.trace("Failed to deploy!!",res2.cause())
!isAllFiles()
!binding.getName().equals("compareTo") || node.getBody() == null
TimeUnit.SECONDS.toMillis(5)
Exception e
new SimpleTextSegmentInfoFormat()
LOG.info("Local or anonymous class " + psiClass + " has no non-local parent, parents:"+ sb)
i >= speedBumpIndex
clientBuilder.connectTimeout(timeout,TimeUnit.MILLISECONDS)
world.setBlock(i,j,k,blockId,meta,3)
new SQLException(e.getMessage(),e)
is(2)
LOGGER.debug("-- submitted {} items with {}ms in normalization, {}ms indexing and {}ms refresh({}). Total: {}ms",bulkRequestBuilder.numberOfActions(),normTime,indexTime,refreshTime,indices,(normTime + indexTime + refreshTime))
new ProtocolException(sm.getString("upgradeHandler.upgrade.fail",connectionId))
Status.createStatuseList(get(getBaseURL() + "statuses/retweets_of_me.json",null,paging.asPostParameterList(),true))
@Override @NotNull public FrameworkSupportConfigurable createConfigurable(final @NotNull FrameworkSupportModel model){   return new FrameworkSupportConfigurableBase(this,model,getVersions(),getVersionLabelText()); } 
method.getDeclaringClass()
GroupFinderUtil.findByLayouts(TestPropsValues.getCompanyId(),parentGroupId,true,-1,-1,new GroupNameComparator(true))
isFormat(format,F40,F60)
checkField(clazz,"octets")
getOptional(HTABLE_DEFAULT_COMPRESSION_CODEC,"")
callTimeout=10000
docTag != null && docTag.matchName != null
Boolean.parseBoolean(BytesUtil.readUTFString(buffer))
resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.VOICE_INTERACTION_SERVICE),false,this,UserHandle.USER_ALL)
(encoded >> 32) & 0xFFFF_FFFFL
c.setNickname(nickName)
doTestWithLanguageLevel(getTestName(false),inspection,LanguageLevel.PYTHON27)
mPackages.add(0,coreModulesPackage)
new OptionParser(false)
!shouldCreateOut() || !DELETE_OUT
getAsShortText(get(instant),locale)
WebStorage.getInstance().deleteAllData()
R resource
field.createField(fieldType.indexedToReadable((String)sortValue),1.0f)
isReturnGeneratedKeys() || isReturnGeneratedKeys() && generatedKey.isPresent()
PendingIntent.getActivityAsUser(ams.mContext,0,runningIntent,PendingIntent.FLAG_UPDATE_CURRENT,null,UserHandle.of(userId))
renderUpdate(errorChannel,results)
(T)item
UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()|| (SystemInfo.isWindows && Registry.is("ide.intellij.laf.win10.ui"))
renditionTypes=new int[0]
"frame".equals(provides) || "sasl-frame".equals(provides)
List<JetType>
UpgradeStepRegistrator.class
this.get(0)
anyOf(nullValue(),(Matcher)allOf(instanceOf(Long.class),greaterThan(0L)))
ThreadFactoryBuilder.create().withName(THREAD_NAME)
assertEquals(10,rows.size())
returnFalseIfFailed(code,"super." + superMtd,BUF_VAR,"reader")
sentHeaders.size() > 0 && sentHeaders.get(0).getNumber() > bestKnownBlock.getNumber()
sender().send(new StashIgnore(new SequenceActor.UpdateProcessed()))
assertEquals(20,sqlStatements.get(2).getLineNumber())
!f
assertEquals(9,set.size())
SimpleAttributeDefinitionBuilder.create("min-level",ModelType.STRING,true)
HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)
level < 96 && status != BatteryManager.BATTERY_STATUS_UNKNOWN
par == null || par.isEmpty()
analysis.getTypeWithCoercions(aggregate)
factory.getEmbeddedServletContainer()
condition.signalAll()
doTestNoDocValues(type)
group != null && !"0".equals(group)
OverrideResolver.generateOverridesInFunctionGroup(methodName,null,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
buffer.putInt(nextMarker + 4,0)
queueAccess.get(0) == selectedItem.getId()
this.doIntrospect(extendedInterfaces,matchedInterfaces)
column.getValueClobFile() != null || (column.getType() != null && column.getType().equalsIgnoreCase("CLOB"))
metrics.density * 45
Assert.fail(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message),supplier.get())
132 + (USE_OLD_HISTORY ? 1000 : 0)
Helper.interpretSizeSource(jaxbElement.getLength(),jaxbElement.getScale(),jaxbElement.getPrecision())
city.getId()
-33.86523340256843
myClassName.length() == 0 || myClassName.startsWith("javax.swing")
element != null && !(element instanceof PsiCompiledElement)
RepositoryDirectoryUI.getTreeWithNames(newCat,rep,dircolor,sortColumn,includeDeleted,ascending,true,false,directoryTree,null,null)
keymapManager == null || actionId == null
args != null && args.size() > 1
replace(str,0,searchStr,replacement,ignoreCase)
!JavaNetNetUtil.NET_SockaddrEqualsInetAddress(remote_addr,packetAddress)
resolveTypeParametersForCallableDescriptor(propertyDescriptor,writableScope,typeParameters,trace)
!ops.graph().isFrozen() && vertex.vertexID() == newVertex.vertexID()
pluginContainer.lookup(ComponentConfigurator.ROLE,pluginRealm)
remaining == 0
public Exception getCause(){   return reason; } 
new ChunkedUploadRemoteFileOperation(mContext,mFile.getStoragePath(),mFile.getRemotePath(),mFile.getMimetype(),mFile.getEtagInConflict())
Settings.Secure.getIntForUser(mContentResolver,Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED,UserHandle.USER_CURRENT)
classType.getCanonicalText()
new BottomEntity()
LOG.debug("Artifacts compiler version changed (" + myFile.getAbsolutePath() + "): "+ version+ " -> "+ VERSION)
fields[i] >= 0 && in1 != null
Gson.class
mimeType == null || context == null
new KsqlTopic("FOO","TEST_TOPIC1",new KsqlJsonTopicSerDe(),true)
JBUI.Borders.empty(6,0)
assertEquals(265L,response.rowCount())
graph.addOrUnique(new OSRLocalNode(i,proxy.stamp().unrestricted()))
setNetworkTimeout(connection,originalTimeout)
gateway.sendAndReceive(requestMessage)
new IllegalStateException(sm.getString("wsRemoteEndpoint.wrongState",this.state))
specModel.getRawProps()
viewPort.setClearFlags(true,true,true)
"Refreshing storefiles of region " + bestRegionReplica + " due to global heap pressure. memstore size="+ StringUtils.humanReadableInt(server.getRegionServerAccounting().getGlobalMemstoreSize())
log.error(e.getMessage(),e)
PermissionCacheUtil.clearResourceCache()
graph.getNewNodes(expectedMark)
pGLState.loadModelViewGLMatrixIdentity()
@Specialization protected LLVMVirtualAllocationAddressTruffleObject escapingJavaByteArray(LLVMVirtualAllocationAddress address,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMVirtualAllocationAddressTruffleObject(address.copy()); } 
allGpxAdapter.getGroupCount() > 0 && allGpxAdapter.isShowingSelection()
webView.evaluateJavaScript(injectJavaScript,null)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),100,50)
LOGGER.info("Register profile {}",qualityProfile.getQProfileName())
mTfs.delete(mTfs.open(path),true)
/**   * Opened connections.   */ @GridToStringExclude private final LongAdder8 opened=new LongAdder8(); 
@CheckForNull @Override public Long getVersion(){   return version; } 
cors.isAllowCredentials()
LOG.warn(ex,"Distributed build step failed.")
uri.toString().equals(future.getURI().toString())
CodegenUtilKt.calcTypeForIEEE754ArithmeticIfNeeded(expression,bindingContext,context.getFunctionDescriptor(),state.getLanguageVersionSettings())
serviceInfo.getRequiredServices() == null || serviceInfo.getRequiredServices().size() == 0
WikiTestUtil.addPage(TestPropsValues.getUserId(),_node.getNodeId(),ServiceTestUtil.randomString(),originalContent,true,true,serviceContext)
CollectionUtils.isEmpty(factoryRealms)
matcher.group(2)
JDBCUtils.safeGetStringTrimmed(resultSet,"ROLENAME")
Integer id=Integer.parseInt(reader.getAttributeValue(null,"id")); 
new TextPaint(Paint.ANTI_ALIAS_FLAG)
builder.humanReadableField(WatchField.THROTTLE_PERIOD.getPreferredName(),WatchField.THROTTLE_PERIOD_HUMAN.getPreferredName(),defaultThrottlePeriod)
Character.isLetterOrDigit(c)
index > maxHeadersLength - headersLength
columnDefinition.getLoadFromCursorMethod(isModelContainerAdapter)
AtlasBuildContext.atlasMainDexHelper.getMainSoFiles()
ColorRGBA.White.mult(0.02f)
receiver != null && mjConnector.canConnect(receiver) && receiver.canConnect(mjConnector)
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)
new XExpressionImpl(expression.getExpression().trim(),expression.getLanguage(),expression.getCustomInfo(),expression.getMode())
removedTerrains.add(tq)
new FastPathBalancedQueueRpcExecutor("deafult.FPBQ",handlerCount,maxQueueLength,priority,conf,server)
startUnicastCluster(4,new int[]{0},-1)
logger.debug("There is no alarm running on {}",getUDN())
new ClusterConfiguration(initialConfig.getName(),initialConfig.getMemberURIs())
duration <= 0 && IDLE_TIMEOUT > 0
convert(connection.getRedisClient().getAddr())
LOG.debug("Getting asynchronous method stub from channel")
String value
!isVideoScalingModeSupported(mode)
lp.resolveLayoutDirection(layoutDirection)
LOG.debug("Consumer subtask {} is trying to discover new partitions ...",getRuntimeContext().getIndexOfThisSubtask())
proxyFactory.createClass().getDeclaredConstructor()
ProductSummaryWrapper wrapper=(ProductSummaryWrapper)context.getBean(ProductSummaryWrapper.class.getName()); 
scopeGroup.isLayoutSetPrototype() || scopeGroup.isRegularSite() || scopeGroup.isUser()
LOG(5)
extractTimeValue(settings)
mgr.checkPermission(new AWTPermission("accessClipboard"))
cache.localPeek(1)
awaitMessages(4,6,20000)
new CountDownLatch(2)
Flags.BITFIELD.isSetIn(mdType.getFlags()) || (baseType != UNKNOWN_TYPE && baseType.getSize() != size)
new ZLNetworkRequest(url,quietly){   @Override public void handleStream(  InputStream inputStream,  int length) throws IOException, ZLNetworkException {     new OpenSearchXMLReader(getURL(),descriptions).read(inputStream);   } } 
assertNotNull(store.getId())
ctx.setInputSourceFile(context,file)
mViewModel.getNewsDataSource()
SAMPLE_RATE_3D_VERT=8
policy_init == UltimateRecyclerView.STARTWITH_OFFLINE_ITEMS
DirectoryReader r; 
checkpoint(true,true)
convert(BigDecimal.class,value,defaultValue)
setAttributeInternal(inodePath,true,entry.getOpTimeMs(),options)
buf.getUnsignedByte(buf.readerIndex() + 2)
UIUtils.drawMessageOverControl(viewPlaceholder,e,"Press " + hidePanelCmd + " to hide this panel",20)
"user_not_found".equals(code) || "missing_param".equals(code)
view.getFloatZoom()
log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values())
FileUtil.loadFile(new File("injector-generator/copyright.txt"))
new RuntimeDroolsException(this.getEvalExpression() + " : " + e,e)
pathGroup.paths.get(j)
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR)
new IndexWriter(dir,analyzer,IndexWriter.MaxFieldLength.LIMITED)
@NotNull T value
testError("class Foo extends BaseFoo { method() { Foo.base(this, 'method'); } }",BASE_CLASS_ERROR)
filter.setAngle(mAngle)
SDK_INT >= JELLY_BEAN && SDK_INT <= LOLLIPOP_MR1
clearFromMember.join()
getChildFragmentManager().beginTransaction().replace(R.id.stats_pager_container,fragment)
new FormAttachment(spacer,20)
actualTarget != null && SwingUtilities.getWindowAncestor(actualTarget) == null
directories.getDirectoryForNewSSTables()
!query.getDimensionSpec().preservesOrdering()
MAP.put(UPPER_BOUND_VIOLATED,"Type argument is not within its bounds: should be subtype of ''{0}''",RENDER_TYPE,RENDER_TYPE)
TypeParameterDescriptorImpl.createWithDefaultBound(function,Collections.<AnnotationDescriptor>emptyList(),false,Variance.OUT_VARIANCE,Name.identifier("R"),parameterCount + 1)
httpRequest.getSession().removeAttribute(ACEGI_SECURITY_TARGET_URL_KEY)
DEBUG_STARTING_WINDOW_VERBOSE || false
new WondexProtocolDecoder(ServerManager.this)
new RStudioThemedFrame(url,true,"allow-same-origin",null,null,false,true)
ImmutableList.of(bang,qmark)
throwParserError(e)
new TextField<String>(ConnectionConfiguration.CONNECTION_KEY,String.class)
SystemClock.uptimeMillis()
LOG.debug(message)
existingFile.refresh(true,toWatchRecursively)
justBootedUp
maxAge == -1
application.map(version::compareTo).orElse(0) > 0
source.putNodeMetaData(StaticTypesMarker.INFERRED_TYPE,getterNode.getReturnType())
myParametersInContext < that.myParametersInContext
Transaction gview=null; 
doTest(false)
onNoteBlockTextClickListener != null && textView != null
sb.index() - 1
_vresponse == null && _parms._response_column != null
!mapReader.getRegionNames().isEmpty() || mapReader.isBasemap()
Exception iae
new MainMenu(Gdx.app)
IllegalStateException.class
@Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Integer id; 
y + r
logger.warn("Configuration for influxdb not yet loaded or broken.")
ReflectionUtil.setAccessible(m).invoke(executor,new Object[1])
event.setHandled(true)
p.getParent()
pubKeyStore == null
c == Double.class || c == Double.TYPE
state == AsyncState.STARTING || state == AsyncState.TIMING_OUT || state == AsyncState.ERROR
chatRoomsList.add(chatRoomID)
PaymentMethodResource.class
Long.parseLong(timeString)
node.actor.getY() <= high && !selectedNodes.contains(node,true)
fragmentManager.beginTransaction().add(rxPermissionsFragment,TAG).commitAllowingStateLoss()
contact != null
(ExpiringCell)cell
SimpleHandler.getInstance().post(new Runnable(){   @Override public void run(){     guideDownloadThumb();   } } ,300)
dir.getAbsolutePath()
projectTemplatesArgs.getName()
verify(connection,exception)
new IndexWriter(directory,new KeywordAnalyzer(),create,IndexWriter.MaxFieldLength.LIMITED)
new FileOutputStream(file)
session.executePost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler)
isNotNull(overriderParameters.get(i)) && !(isNullable(overriddenParameters.get(i)) || isNotNull(overriddenParameters.get(i))) && !errorElements.contains(overriderParameters.get(i))&& warnedElements.add(overriderParameters.get(i))
Model.getSingleton().getDb().getTableHistory().getHistoryIdsOfHistType(session.getSessionId(),HistoryReference.TYPE_PROXIED,HistoryReference.TYPE_ZAP_USER,HistoryReference.TYPE_SPIDER,HistoryReference.TYPE_SPIDER_AJAX)
result.setEncodingAndType(st.getResponseSOAPContext().getContentType())
BeanUtils.instantiateClass(this.executorType)
FitNesseUtil.makeTestContext()
uri.equals(patterns[k]) || patterns[k].length() == 0 && uri.equals("/")
StorageProxy.read(commands,select.getConsistencyLevel())
DiagnosticFactory1<JetFunction,DeclarationDescriptor>
info.getType() & 0xf
Class<Object>
result.getSuccess()
assertLeftRightCategory(11,category2c)
taken > 50
isBookmarksList()
new IOSMobileDriverImpl(projectDirName,portalURL)
parts != null && parts.size() % 2 != 0
m.executeAsync()
((ScreenCoordinatorComponent)activity).getScreenCoordinator().dismiss(Activity.RESULT_OK,payloadToMap(payload))
SingleMapBlock.class
Injection.provideDesignerNewsCommentsRepository(this)
lookup=Resources.REQUEST_QUEUE
Utils.writeUtf8File(parentDir.getAbsolutePath(),FILE_NAME,xmlBuffer.toXML())
imageViewFuture.setComplete(e,imageView)
scale.getScaleX() != 1f
TYPE_ADD_VOTE=10004
layoutChildLayoutsList.sort(Comparator.comparing(Layout::getPriority))
GitFileUtils.delete(project,root,removed,"--ignore-unmatch","--cached")
private TestMtpManager mMtpManager; 
Settings.Secure.getInt(mContext.getContentResolver(),NETSTATS_ENABLED,1)
testIncludeFilter(query,1,"Filter",34)
lengthInWords >> 8
this.exchanges.remove(requestId)
assertEquals("pick_first",builder.defaultLbPolicy)
curr.end < intervals[i].start
new File(this.file,child)
!tagData.containsNonNullValue(TagData.NAME) || tagData.getValue(TagData.NAME).length() == 0
NavigateAction.prepareAppModeView(map,selected,true,(ViewGroup)confirmDialog.findViewById(R.id.TopBar),true,new View.OnClickListener(){   @Override public void onClick(  View v){     if (selected.size() > 0) {       view.getSettings().APPLICATION_MODE.set(selected.iterator().next());       listAdapter.notifyDataSetChanged();     }   } } )
getMemberships().stream().filter(m -> m.isActive() && m.getPatientId().equals(patient.getPatientId())).findFirst()
createListFromPropertyString(license)
LOG.warn("Plugin " + plugin.getName() + " has an artefact "+ shortName+ " without a package name "+ "This could lead to artefacts being excluded from the application")
this.args=newArgs
lineArgs[2]
AndroidDistinguishedNameParser dnParser=new AndroidDistinguishedNameParser(cert.getSubjectX500Principal()); 
Class... sources
hashSymbols.values()
LOGGER.warn("Unable to process JSON",exception)
new AlreadyExistsException(cfm.ksName,cfm.cfName)
log.debug("Metric=[%s] has no StatsD type mapping",statsDMetric)
DeprecationLogger.nagUserWith("<someIdeTask>.whenConfigured is deprecated! Replaced by whenMerged() method placed on the relevant model object of eclipse/idea.\n" + "As a starting point, refer to the dsl guide for IdeaProject or EclipseProject")
new EnterSelectionDialog(shell,dbNames,"Select the database","Select the partitioned database to import from")
errorMsgJson.put("ERROR",errorMsg)
mPm.queryIntentActivitiesAsUser(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0))
cluster.close()
doTest()
env.dynamicLookup(PARSE_CONTEXT)
assertEquals(939,trackPoints.size())
context.declareTables()
Assert.assertTrue(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
Collection<SkyKey>
RegexFilter.createFilter(".*(\n.*)*",new String[0],false,null,null)
createTestBlockCapsule(1533529947843L + 3000L * i,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
clazz.getDeclaredField("commandProcessor")
new HTTPResponseResult(resEntity,httpClient)
GATEWAY_TIMEOUT=504
Arrays.asList("net.bull","java")
assertThat(client).replicationController("doesNotExist").hasName("fabric8-console-controller")
PendingIntent.getBroadcast(context,0,new Intent(Intent.ACTION_TIME_TICK).addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY),0,UserHandle.ALL)
super.performAccessibilityActionInternal(action,arguments)
target.getParentFile().isDirectory()
String[]
private final RulesProfile qProfile; 
idleTimeout < 30000 && idleTimeout != 0
contentType.equals(ContentTypes.PRESENTATIONML_MAIN) || contentType.equals(ContentTypes.PRESENTATIONML_TEMPLATE)
sentence.length() <= 30
public final TFAgentStatMapper tFAgentStatMapper=new TFAgentStatMapper(); 
currentJBUIScale()
new HashMap(1)
methodName.startsWith("getUseScope")
View repost_flag; 
arrayName=options.get(ARRAY_NAME)
!ApplicationManager.getApplication().isInternal()
LOG.d(TAG,"We have a callback to send this result to")
new NeuralNetConfiguration.Builder().iterations(100).layerFactory(new PretrainLayerFactory(RBM.class)).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createUniform(0,1)).activationFunction("tanh").momentum(0.9).optimizationAlgo(OptimizationAlgorithm.LBFGS).constrainGradientToUnitNorm(true).k(1).regularization(true).l2(2e-4).visibleUnit(RBM.VisibleUnit.GAUSSIAN).hiddenUnit(RBM.HiddenUnit.RECTIFIED).lossFunction(LossFunctions.LossFunction.RMSE_XENT).learningRate(1e-1f).iterationListener(new ScoreIterationListener(2)).nIn(4).nOut(3).list(2).hiddenLayerSizes(new int[]{3}).override(1,new ClassifierOverride(1))
new PrintStream(bos,false,"UTF-8")
type == QUADS || type == QUADS
EventLogTags.writeNotificationCanceled(canceledKey,reason,r.getLifespanMs(now),r.getFreshnessMs(now),r.getExposureMs(now),listenerName)
portletRequestDispatcher == null
@Specialization public String change(){   FrameInstance frameInstance=Truffle.getRuntime().getStackTrace().iterator().next();   Frame frame=frameInstance.getFrame(FrameAccess.READ_WRITE,false);   FrameSlot slot=frame.getFrameDescriptor().findOrAddFrameSlot("hello");   frame.setObject(slot,"world");   return null; } 
mTargetSdk > O
converterRegistry.addConverter(new EnumToStringConverter((ConversionService)converterRegistry))
sourceHeight > 0
mNotificationInfo.bindNotification(mMockPackageManager,mMockINotificationManager,TEST_PACKAGE_NAME,Arrays.asList(mNotificationChannel),mNotificationChannel.getImportance(),mSbn,null,null,null,null,null)
fragmentEntryPersistence.findByG_FCI_LikeN(groupId,fragmentCollectionId,_customSQL.keywords(name,WildcardMode.SURROUND)[0],start,end,orderByComparator)
Arrays.asList("viel","nichts","wenig")
HDR_TYPE_NAK=0x02
DarkIconDispatcher.getTint(tintArea,mMobileActivity,tint)
Arrays.asList("ich","du","er","sie","es","wir","mir","uns","ihnen","euch","ihm","ihr","ihn","dessen","deren","sich","unser","aller","man","beide","beiden","beider","wessen","a","alle","etwas","was","wer","jenen","diejenigen")
Log.warn("Disable autoInstallOSGiBundles as the contexts folder '" + getMonitoredDirResource().getURI() + " does not exist.")
new FunctionIntrinsicWithReceiverComputed(){   @NotNull @Override public JsExpression apply(  @Nullable JsExpression receiver,  @NotNull List<JsExpression> arguments,  @NotNull TranslationContext context){     return new JsInvocation(new JsNameRef("substring",receiver),arguments);   } } 
innerLoader.parseClass(inputStream,name)
BungeeCord.instance.pluginManager.onLogin(event)
Long.parseLong(nfcid2,16)
Column c
it.getJavadocComment()
inUtc || allDay
DATABASE_VERSION=65
urlConnection.getContentLengthLong()
new VelocityTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_velocityEngine,_templateContextHelper,false)
((PsiManagerImpl)manager).getFileManager().findViewProvider(file)
/**   * Needed for statistics.   */ private final LongAdder8 startedJobsCnt=new LongAdder8(); 
ensureExpectedToken(XContentParser.Token.VALUE_NUMBER,parser.nextToken(),parser::getTokenLocation)
getPagesAndOrPostsString(postItemsNotUploaded)
LOGGER.warn("Could not execute copy",ex)
longSize >= 640
lastPosition <= positionCount
volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.getMountUserId() == userId
mAuth.signInWithEmailAndPassword(email,password).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     Log.d(TAG,"signIn:onComplete:" + task.isSuccessful());     hideProgressDialog();     if (task.isSuccessful()) {       onAuthSuccess(task.getResult().getUser());     }  else {       Toast.makeText(SignInActivity.this,"Sign In Failed",Toast.LENGTH_SHORT).show();     }   } } )
log.debug("'{}' extracting credentials from {} http authenticator",e1.toString(),httpAuthenticator.getType(),e1)
Base.getContentFile("modes/java")
StringUtils.isNotEmpty(xml)
IOException e
hStack.getScrollWidth() + 10
String[] value(); 
assertEquals(CodecFactory.deflateCodec(i).toString(),serdeC.getCodec().toString())
adapter.getCustomArgumentResolvers()
httpclient.query(query)
sentenceCount >= maxDocs
/**   * {@link Builder#replace(Tree,String)}   */ public static SuggestedFix replace(Tree tree,String replaceWith){   return builder().replace(tree,replaceWith).build(); } 
appContext.getSystemService(Context.WINDOW_SERVICE)
SKELETONS_VERSION=15
mLocation != null && isMyLocationEnabled()
@SuppressWarnings("unchecked") private SubType _this=(SubType)this; 
StringBuilder pattern=new StringBuilder(this.prefix); 
!MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player,entity))
this.getContactJid().split("/",2)
primitiveType != null || arrayComponentType != null
new String(bs2.toByteArray(),"UTF-8")
(filterMap.getDispatcherMapping() & FilterMap.ASYNC) != 0
(int)(editor.getLineHeight() * 0.1)
TestShardRouting.newShardRouting(index,0,"_node_id",null,true,ShardRoutingState.STARTED)
String.format("%s: Xmx value has exceeded the allowed limit (max Xmx = %s)",getId(),maxXmx)
LAST_VERSION=547
!value.isStatic() && value.isPublic() && classNode.equals(value.getDeclaringClass())&& value.getLineNumber() > 0
myCache1.getCacheConfiguration().getMaxEntriesLocalHeap()
LOG.info("Unable to unmarshall exception content",e)
_activeBC.proxPen(_beta)
IndexSettingsModule.newIndexSettings(new Index("_index"),Settings.EMPTY)
ImmutableSet.of("key","vertex","edge","element","property","label")
ParceledListSlice.emptyList()
Hooks.resetOnLastOperator()
log.info("Reset to factory defaults : onErrorDropped")
assertEquals("[]",q.toString())
ref.getParentObject()
Assert.assertEquals(256,intValue)
mContext.sendBroadcastAsUser(intent,UserHandle.ALL)
new Integer(getIntValue(workingMemory,object))
entry.getValue().getLastAccessed() < expireTime
Assert.assertEquals(permissions.size(),1)
PropertyListParser.saveAsXML(x,outputFile)
simpleQueryString("spaghetti").field("body",1000.0f)
someBatchInterval * 5
assertThat(ex.code()).isEqualTo(404)
T id
public <A>SubType from(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).from((Expr<?>)entity);   return self; } 
params[0]
status.getCode().getNumber()
assertThat(System.currentTimeMillis() - start).isGreaterThan(1900)
((BaseActivity)getActivity()).injectJava(UserAccountsController.class).isTeamAccount()
UpgradeStepRegistrator.class
assertThat(expiresDateFormat.parse(response.getHeader("Expires"))).isBeforeOrEqualsTo(new Date())
splitVert.setDividerLocation(0.5d)
TupleDomain.all()
new EmoteClue("Panic by the mausoleum in Morytania. Wave before you speak to me. Equip a mithril plate skirt, a maple longbow and no boots.",new WorldPoint(3504,3576,0),PANIC,WAVE,item(MITHRIL_PLATESKIRT),item(MAPLE_LONGBOW),emptySlot("No boots",BOOTS))
((ContainerLifeCycle)contextHandler).addManaged(clientContainer)
LOG.assertTrue(false,"Invalid element: " + elementAt)
/**   * Reads next record from input  */ public String read() throws Exception {   return input[index++]; } 
!isNodeHealing(node.getNodeId())
new PsiArrayType(mappedComponent,type.getAnnotations())
id=53
UploadUtils.onMediaUploadedSnackbarHandler(getActivity(),getActivity().findViewById(R.id.coordinator),false,event.mediaModelList,event.successMessage)
table.averageFloat(columnIndex)
final StringBuilder replacement=new StringBuilder(tag.getText()); 
for (IMethodInterceptor methodInterceptor : m_methodInterceptors) {   tr.addMethodInterceptor(methodInterceptor); } 
CLOSE_TIMEOUT=100
remaining <= 0
mLayout.getPaint().getTextWidths(mTransformed,offsetStart,offsetEnd,widths)
i < 100
/**   * Returns first child <b>element</b> node or <code>null</code> if no element children exist.  */ public Element getFirstChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[0]; } 
new HashMap<>(queryMemoryRevocableReservations)
((IPowerReceptor)pipe).powerRequest(from)
elementClass != null && Modifier.isPublic(elementClass.getModifiers())
props.getProperty(SAVE_THREAD_COUNTS,TRUE)
CvsVfsUtil.refreshAndFindFileByIoFile(targetFile)
new TermInfosWriter(store,"words",fis,IndexWriter.DEFAULT_TERM_INDEX_INTERVAL)
operation.equals("in") || operation.equals("not in")
getMockServerClient(mockServerPort).stop(ignoreFailure)
ListWithDefault<T>
renderBlock(util,world,0,0,0,lightX,lightY,lightZ,false,true)
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
MAX_DIMEN_FOR_ROUNDING=1920
Lists.newArrayList(PROPERTY_PROJECT_BASEDIR,CoreProperties.WORKING_DIRECTORY,PROPERTY_MODULES,CoreProperties.PROJECT_DESCRIPTION_PROPERTY)
bundle != null && bundle.containsKey(key)
testAllocation("test3snippet",4,0,0)
new Parameter(new IdentifierImpl("_" + f.getIdentifier().getName()),f.getType(),true)
classDirectoryName.contains("bin") || classDirectoryName.contains("classes") || classDirectoryName.contains("retrolambda")
Build.VERSION.SDK_INT > 14
bo.write(0x08)
Optional.ofNullable(target)
!collectDependencies().equals(myInitialDependencies)
getContext().registerReceiver(mReceiver,filter,null,mHandler)
new ScriptField_Point(mRS,PART_COUNT)
backgroundOut.getDouble(i,0)
selectedPageLabel_.removeClassName("selected")
getValueController().updateValue(editedValue,true)
!locations.isEmpty() && locations.get(0).distanceTo(start) > 200
flags.add(STATICMETHOD)
assertNotNull("Should find entry",getThreadCacheEntry(LOCAL_HOST))
limit != 0
IOException ioe
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,userWhen,lockSender)
mUserManagerHelper.getAllUsers()
assertThat(new XooPlugin().getExtensions()).hasSize(17)
pod.setName(expectedId)
return 22; 
StubTree fileStub=derefStub(); 
Throwable failure=lastException; 
getOptionalDate(singletonMap("date","2017-04-03"),list)
def.finished()
Optional.fromNullable(dynamicProperties)
Person person=new Person(); 
walk.close()
registerTags(ACTION_REFERENCE_PROVIDER,"action",NAMESPACE_TAGLIB_STRUTS_UI,"form","submit","url")
requestHeaderRegex == null || requestHeaderRegex.length() == 0
focusedStack == null || focusedStack.getTaskCount() == 0
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapLoadingTest extends ReplicatedMapAbstractTest {   @Test public void testAsyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(true);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   @Test public void testSyncFillUp() throws Exception {     Config config=new Config();     String mapName=randomMapName();     ReplicatedMapConfig replicatedMapConfig=config.getReplicatedMapConfig(mapName);     replicatedMapConfig.setAsyncFillup(false);     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     fillMapsAndAssertMapSizeEventually(nodeFactory,config,mapName);   }   private void fillMapsAndAssertMapSizeEventually(  TestHazelcastInstanceFactory nodeFactory,  Config config,  String mapName){     final int first=1000;     final int second=2000;     final int third=3000;     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap(mapName);     fillMap(map1,0,first);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",first,map1);         assertMapSize("map2",first,map2);       }     } );     fillMap(map2,first,second);     HazelcastInstance instance3=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map3=instance3.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",second,map1);         assertMapSize("map2",second,map2);         assertMapSize("map3",second,map3);       }     } );     fillMap(map3,second,third);     HazelcastInstance instance4=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<Integer,Integer> map4=instance4.getReplicatedMap(mapName);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertMapSize("map1",third,map1);         assertMapSize("map2",third,map2);         assertMapSize("map3",third,map3);         assertMapSize("map4",third,map4);       }     } );   }   private void fillMap(  ReplicatedMap<Integer,Integer> map,  int start,  int end){     for (int i=start; i < end; i++) {       map.put(i,i);     }   }   private void assertMapSize(  String mapName,  int expectedMapSize,  ReplicatedMap<Integer,Integer> map){     assertEquals(format("%s should contain %d elements",mapName,expectedMapSize),expectedMapSize,map.size());   } } 
new FileSystemWebDavServer(cryptoFileSystem())
DiagnosticFactory2<JetBinaryExpression,JetElement,DeclarationDescriptor>
requestJSONObject.optInt(Article.ARTICLE_EDITOR_TYPE)
MimeUtil.ENC_7BIT.equalsIgnoreCase(encoding) || MimeUtil.ENC_8BIT.equalsIgnoreCase(encoding) || MimeUtil.ENC_BINARY.equalsIgnoreCase(encoding)
logger.info("--> checking snapshot status after it is done with empty repository")
StyleableProperty<Number>
builder.addDependency(DependencyType.OPTIONAL,RegistryInstallerService.SERVICE_NAME)
defaults.put(PREVIEW_PANEL_HEIGHT,0.65)
op2.z()
expected == byte.class || expected == Byte.class
StringBuffer result=new StringBuffer(); 
new ModelNode().set(10L)
put("1.7",CompilerOptions_VERSION_1_7)
actual_train_samples_per_iteration / correction <= 10 * tspiGuess && actual_train_samples_per_iteration / correction >= 0.1 * tspiGuess
AnnotatedElementUtils.findAnnotationAttributes(controllerType,annotType)
win.mAppToken != null ? win.mAppToken.mAppStopped : true
new URLClassLoader(new DefaultClassPath(runSpec.getClasspath()).getAsURLArray(),null)
tl.set(paint,mText,start,end,dir,directions,hasTabs,tabStops)
Mutation rm=new Mutation("Keyspace1",key); 
editedGroup != null && editedGroup.getClass() == SearchGroup.class
((Cell)atom).localCopy(HeapAllocator.instance)
public KeywordTokenizer create(Reader input){   return new KeywordTokenizer(input); } 
viewHolder.getItemViewType() == TYPE_EDIT || viewHolder.getItemViewType() == TYPE_DIVIDER
getProperties().requestCacheEnabled()
buffer.length() != 0
layer.initializer().numParams(nnc)
enSearch.executeQuery()
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteBuffer,false,indexBoolean,indexSession)
PApplet.splitTokens(transform)
this.clsName.equals(transformedName)
"simple".equalsIgnoreCase(language) && expression.indexOf("${") >= 0
file != null && file != file.getOriginalFile()
BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)
myInitialSelection >= 0 && myIpnbPanels.size() > myInitialSelection
PreconditionViolationException.class
Slog.i(TAG,"Activity doesn't have category Intent.CATEGORY_LAUNCHER " + component)
notation.map(new Transformer<ArtifactFile,Object>(){   @Override public ArtifactFile transform(  Object value){     ArtifactFile artifactFile;     if (value instanceof FileSystemLocation) {       FileSystemLocation location=(FileSystemLocation)value;       artifactFile=new ArtifactFile(location.getAsFile(),module.getVersion());     }  else     if (value instanceof File) {       artifactFile=new ArtifactFile((File)value,module.getVersion());     }  else {       throw new InvalidUserDataException(String.format("Cannot convert provided value (%s) to a file.",value));     }     return artifactFile;   } } )
serviceLocalException(new Throwable("remoteBrokerInfo is null"))
exchange.getResolvedPath()
String.format("[PanelView(%s): expandedHeight=%f maxPanelHeight=%d closing=%s" + " tracking=%s justPeeked=%s peekAnim=%s%s timeAnim=%s%s" + "]",this.getClass().getSimpleName(),getExpandedHeight(),getMaxPanelHeight(),mClosing ? "T" : "f",mTracking ? "T" : "f",mJustPeeked ? "T" : "f",mPeekAnimator,((mPeekAnimator != null && mPeekAnimator.isStarted()) ? " (started)" : ""),mHeightAnimator,((mHeightAnimator != null && mHeightAnimator.isStarted()) ? " (started)" : ""),mTouchDisabled ? "T" : "f")
expirationTime * 1000L
ImmutableSet.of("reportUnknownTypes","analyzerChecks")
Optional.ofNullable(BuckAddDependencyIntention.create(referenceElement,psiClass))
cat.getDefaultParentCategory() != null && cat.getAllParentCategories().indexOf(cat.getDefaultParentCategory()) < 0
replace(str,0,searchStr,replacement,true)
assertFalse(found)
/**   * <p>Formats the receiver using the given format.</p> <p>This uses  {@link Formattable} to perform the formatting. Two variable maybe used to embed the left and right elements. Use  {@code %1$} for the leftelement (key) and  {@code %2$} for the right element (value).The default format used by  {@code toString()} is {@code (%1$s,%2$s)}.</p>  * @param format  the format string, optionally containing {@code %1$} and {@code %2$}, not null  * @return the formatted string, not null  */ public String toString(String format){   return String.format(format,getLeft(),getRight()); } 
new IllegalArgumentException(error)
UpgradeStepRegistrator.class
v2 & 0xc0
new ZooKeeperServer(dataDir,dataLogDir,tickTime)
actionName.startsWith("android.net.netmon.lingerExpired") || actionName.startsWith("com.android.server.sip.SipWakeupTimer") || actionName.startsWith("com.android.internal.telephony.data-reconnect")|| actionName.startsWith("android.net.netmon.launchCaptivePortalApp")
sampleFormat != null && trackOutput != null
new String(bytes,"UTF-8")
Integer.valueOf(setting)
ImmutableList<INPUT>
TypeConversionUtil.isAssignable(myT,myS)
authenticator.executeCommandAndAuthenticateIfNecessary(project,repo,source,"pull",arguments,arguments.size() - 1)
profile.getMaximumInstances()
callNode.call(packArguments(frame,arguments,toLLVMNodes,cachedLength))
new String(buffer,0,len,"UTF-8")
Number value=iterator.next(); 
"access-control/default is missing operations: " + defaults
ViewConfiguration.getLongPressTimeout() * 2.5f
d.setMinorVersion(1)
setSDesEncryptionOnDescription(mediaType,description,null)
other instanceof ValueLobDb
BonusPackHelper.requestStringFromUrl(url,mUserAgent)
DiagnosticType.error("JSC_REDECLARED_VARIABLE","Redeclared variable: {0}")
from=PERSISTENT_ANIMATION_CACHE
initializationData != null && initializationData.size() > 0
!f.getName().equals(unzipped.getName()) || (targetDirectory != null && !targetDirectory.equals(directory))
id=6
ref != null && ref.trim().length() > 0
transGraph.screen2real(transGraph.getLastMove().x,transGraph.getLastMove().y)
new Dimension(480,300)
remoteUidMap.get(localMessage.getUid()) == null && !localMessage.isSet(Flag.DELETED)
componentRealm.importFrom(componentRealm.getParentRealm().getId(),"org.codehaus.plexus.util.xml.pull")
private WelcomePagerAdapter mAdapter; 
remaining + (long)pos
connector.accept(new ConnectEventAction(action),true)
rollbackCount != -1 && rollbackCount <= 0
pos + toFind.length() <= limit
LOG.warn("Ignoring duplicate class " + className)
public Builder setUserAgent(String userAgent){   configBuilder.setUserAgent(userAgent);   return this; } 
myIcon == null || IconLoader.isGoodSize(myIcon)
fieldInfos.size() == 6
target == null || target.getNumFields() < this.mappings.size() + 1
zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 2,0)
directory == null || (!directory.exists() && !directory.mkdirs())
planRouteContext.getSnappedMode().getMapIconId()
parent instanceof View
mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION
logger.debug("Cannot update the group coordinator ({})",e.getMessage())
List<HostAddress>
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),false,policy,IndexWriter.MaxFieldLength.LIMITED)
FileUtil.join(sdkHomePath,"bin",GoConstants.GO_EXECUTABLE_NAME)
ObjectAnimator.ofFloat(mView,"alpha",1f,dimAlpha)
Map<Long,Object>
Integer.parseInt(v)
this.messageService.monoPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
ActionListener[]
JSONValue.parseWithException(value)
MAX_LOW_POWER_STATS_SIZE=2048
logger.trace("Error while matching regex [" + matcher + "] for string ["+ matched+ "] "+ pse.getMessage())
assertThat(registration.getScopes()).containsOnly("openid","profile","email")
message.getContact()
logger.trace("attempting to login")
conn.setTargetDecoration(srcDec)
intention.processIntention(element,myFixture.getProject(),myFixture.getEditor())
object instanceof RegexEngineBuilder
notifyAll()
Timber.i("Creating SAVING_DIALOG")
getAndAppendComparator(i,bb,sb)
list != null && node.findMethodByName(method.getName(),false) == null
Utils.convertDpToPixel(dataSet.getBarBorderWidth())
attribute.startsWith(keyPrefix) && attribute.length() > keyPrefix.length()
getSsl(ClientAuth.NEED,"password","src/test/resources/test.jks","src/test/resources/test.jks")
prefs.getBoolean(AUTO_START,false)
targetDirectory.file("unwritable")
metadata.addHaving((Predicate)null)
getString(R.string.osmo_tracker_id_share,ci.trackerId,"")
new ConnectionException(sm.getString("http2Parser.processFramePushPromise",connectionId,Integer.valueOf(streamId)),Http2Error.PROTOCOL_ERROR)
new ShardPath(false,shardPath,shardPath,new ShardId(index,0))
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]   */ LIGHTEN(17)
rematchAllNetworksAndRequests(networkAgent,oldScore)
el.getPropertyAsString(HTTPSampler.METHOD)
hasGuestViewPermission(layout)
Conv2DConfig.builder().kH(kernel[0])
new PixelFormat(settings.getBitsPerPixel(),0,settings.getDepthBits(),settings.getStencilBits(),samples,0,0,0,settings.useStereo3D())
logger.warn("failed engine [{}]",failure,reason)
config.enterpriseConfig != null && config.enterpriseConfig.getEapMethod() != WifiEnterpriseConfig.Eap.NONE
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
FMLPacket.makePacket(Type.ENTITYSPAWN,er,entity,instance().findNetworkModHandler(er.getContainer()))
getLsResultStr("/testRoot/testDir",files[1].getCreationTimeMs(),1,LsCommand.STATE_FOLDER,testUser,testUser,files[1].getPermission(),files[1].isFolder())
public Builder setConnectionTimeoutInMs(int connectionTimeuot){   configBuilder.setConnectionTimeoutInMs(connectionTimeuot);   return this; } 
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),false)
sampleOffset * 1000L
showMessage(context.getString(R.string.error_calculating_route) + " : " + res.getErrorMessage(),Toast.LENGTH_LONG)
myTabs.getPresentation().setPaintBorder(1,-1,rightIds.size() > 0 ? 1 : 0,-1)
start != stop && wordStart == index
withModifiers(SynchronizationState.PLAIN)
builder(SingleSignOnDefinition.INSTANCE).addAttributes(SingleSignOnDefinition.DOMAIN,SingleSignOnDefinition.PATH,SingleSignOnDefinition.HTTP_ONLY,SingleSignOnDefinition.SECURE,SingleSignOnDefinition.COOKIE_NAME)
getPredicate()::apply
accessLevel1 == accessLevel2 && myNextComparator != null
rep.saveJobEntryAttribute(id_job,getID(),"success_condition",getSuccessConditionCode(successCondition))
sceneToLocalTransformation.preConcat(parent.getSceneToLocalTransformation())
isAssignableFrom0(supertypeName,iface,cl)
System.err.printf("\"%s\" #%d%n",thread.getName(),thread.getId())
assertEquals(24,instance.getCapacity())
!_pds._job.isStopped()
HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT("hive.server2.async.exec.shutdown.timeout",10)
i >= stripeStats.size()
ApplicationManager.getApplication().invokeAndWait(new Runnable(){   @Override public void run(){     postUiTask.run(roots);   } } )
getPackageManager().addPreferredActivity(filter,bestMatch,set,intent.getComponent())
LOG.debug(e)
"Predefined " + pkg + " blocked="+ pblocked+ " unused="+ punused+ " roaming="+ proaming
Log.w(TAG,e.getMessage(),e)
wCompression.getText()
AtmosphereRequest request
new ScaledResolution(mc)
!isSecureText
fileSpecs.size() > 0
HEIGHT=626
capacityOrValue >= 0
reader.getType(reader.readSmallUleb128())
body.invoke(_super(),onDetachedFromWindowMethod)
response.getBytes(Charset.defaultCharset())
event.fromDisplayDensityChange || event.fromDeviceOrientationChange
s <= 14000
new IndexWriter(indexStoreB,new StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
spoon.saveToRepository(jobMeta,false)
id=10860
Math.min(20,myListModel.getSize())
descriptor.setCachedChildren(new PyTypeHierarchyNodeDescriptor[]{newDescriptor})
/**   * Call WebModuleUtil.startModule on each started module  * @param servletContext  * @throws ModuleMustStartException if the context cannot restart due to a{@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}  */ public static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {   Log log=LogFactory.getLog(Listener.class);   List<Module> startedModules=new ArrayList<Module>();   startedModules.addAll(ModuleFactory.getStartedModules());   boolean someModuleNeedsARefresh=false;   for (  Module mod : startedModules) {     try {       boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);       someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;     }  catch (    Exception e) {       mod.setStartupErrorMessage("Unable to start module",e);     }   }   if (someModuleNeedsARefresh) {     try {       WebModuleUtil.refreshWAC(servletContext,true,null);     }  catch (    ModuleMustStartException ex) {       throw ex;     } catch (    Exception e) {       Throwable rootCause=getActualRootCause(e,true);       if (rootCause != null) {         log.fatal("Unable to refresh the spring application context.  Root Cause was:",rootCause);       }  else {         log.fatal("Unable to refresh the spring application context. Unloading all modules,  Error was:",e);       }       try {         WebModuleUtil.shutdownModules(servletContext);         for (        Module mod : ModuleFactory.getLoadedModules()) {           if (!mod.isCoreModule() && !mod.isMandatory()) {             try {               ModuleFactory.stopModule(mod,true,true);             }  catch (            Throwable t3) {               log.trace("Unable to shutdown module:" + mod,t3);             }           }         }         WebModuleUtil.refreshWAC(servletContext,true,null);       }  catch (      MandatoryModuleException ex) {         throw new MandatoryModuleException(ex.getModuleId(),"Got an error while starting a mandatory module: " + e.getMessage() + ". Check the server logs for more information");       } catch (      Throwable t2) {         log.warn("caught another error: ",t2);         throw t2;       }     }   }   for (  Module mod : ModuleFactory.getStartedModules()) {     WebModuleUtil.loadServlets(mod,servletContext);     WebModuleUtil.loadFilters(mod,servletContext);   } } 
ps.saveRelationship(rel)
retry.attempt()
adapterCount <= MIN_ADAPTER_STACK
createProject(path,creationPlace,false)
new Histogram(1,10,100,1000,10 * 1000,100 * 1000)
playerArgs == null
!isConsole && !isOpOverride && (permissionResult.resultType.equals(PermissionCheckResult.Type.NOTFOUND) || permissionResult.resultType.equals(PermissionCheckResult.Type.NEGATION))
PropertiesComponent.getInstance().getBoolean(getAutoUpdateEnabledProperty(),getAutoUpdateDefault())
memOffsetData.intValueSafe()
Item extends IItem
key.equals("authmechanismproperties")
CreateClassOrInterfaceFix.getApplicableTemplates(FLEX_TEMPLATES_EXTENSIONS,context.getProject())
buttonOrder.setPrefSize(300,30)
new TransientPropertyValueException("object references an unsaved transient instance - save the transient instance before flushing",childEntityName,parentEntityName,propertyName)
return GCM; 
DualViewColumnInfo<TreeNodeOnVcsRevision,T>
protected OSGIConfigPropertiesService configProperties; 
writeOwners.clear()
type.equals(SyncConstants.TYPE_FILE) || type.equals(SyncConstants.TYPE_PRIVATE_WORKING_COPY)
GL11.glTranslatef(0.5F,0.5F,0.5F)
mHotspotBounds.set(left,top,right,bottom)
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
AbstractUpgradeCatalog.class.getDeclaredMethod("updateConfigurationProperties",String.class,Map.class,boolean.class,boolean.class)
super.visitVariable(variable)
id=20
extra != -38
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator(),searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
PrefGetter.getNotificationTaskDuration(this) == -1
height <= 0
currentCondition.toString().trim().equals(condition.trim())
!importedClassIndex.isEmpty()
tok.getIdentifier()
new Handler(IoThread.getHandler().getLooper()){   @Override public void handleMessage(  Message msg){     if (msg.what != ENTROPY_WHAT) {       Slog.e(TAG,"Will not process invalid message");       return;     }     addHwRandomEntropy();     writeEntropy();     scheduleEntropyWriter();   } } 
isPlaybackActive(false) || hasFlag(MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY)
userId != UserHandle.getCallingUserId() && checkCallingPermission(INTERACT_ACROSS_USERS) != PackageManager.PERMISSION_GRANTED
Arrays.equals(valSrcQueries,other.valSrcQueries)
GrClosureSignatureUtil.mapParametersToArguments(signature,callExpression.getNamedArguments(),callExpression.getExpressionArguments(),callExpression.getClosureArguments(),callExpression,false,true)
CLOSE_TIMEOUT=1000
/**   * Saves the size and the location of a specific <tt>Component</tt> through the <tt>ConfigurationService</tt>.  * @param component the <tt>Component</tt> which is to have its size andlocation saved through the <tt>ConfigurationService</tt>  * @throws PropertyVetoException if the <tt>ConfigurationService</tt> doesnot accept the saving because of objections from its <tt>PropertyVetoListener</tt>s.  */ static void saveSizeAndLocation(Component component) throws ConfigPropertyVetoException {   Map<String,Object> props=new HashMap<String,Object>();   String className=component.getClass().getName().replaceAll("\\$","_");   props.put(className + ".width",component.getWidth());   props.put(className + ".height",component.getHeight());   props.put(className + ".x",component.getX());   props.put(className + ".y",component.getY());   UtilActivator.getConfigurationService().setProperties(props); } 
CodeStyle.getProjectOrDefaultSettings(project)
StringBuffer builder=new StringBuffer(); 
innerConfig.containsKey(LAYER_FIELD_DROPOUT_W)
handleShowingDetail(detail,x,y,false)
Thread.sleep(500)
assertEquals(302,status.getStatusCode())
PsiTreeUtil.getParentOfType(context,JetClassBody.class,true,JetBlockExpression.class,JetProperty.class)
FileUtils.write(fileWithBom,FileUtils.readFileToString(jsFile),"UTF-8",true)
Assert.assertEquals(101200L,ret.getFee())
type > 26
transfer.getId()
new PojoMessageHandlerAsyncString(pojo,m,session,params,indexString,false,indexBoolean,indexSession)
mService.getWifiServiceMessenger(mContext.getOpPackageName())
ImmutableSet.of(UNDERWALL_TUNNEL_16529,UNDERWALL_TUNNEL_16530,STEPPING_STONE_16533,FENCE_16518,ROCKS_16549,ROCKS_16550,WALL_17049,CRUMBLING_WALL_24222,UNDERWALL_TUNNEL,UNDERWALL_TUNNEL_16528,CREVICE_16543,UNDERWALL_TUNNEL_19032,UNDERWALL_TUNNEL_19036,BROKEN_RAFT,STEPPING_STONE_16513,ROCKS_3803,ROCKS_3804,ROCKS_16523,ROCKS_16524,ROCKS_3748,ROCKS_16545,ROCKS_16521,ROCKS_16522,ROCKS_16464,LOG_BALANCE_16540,LOG_BALANCE_16541,LOG_BALANCE_16542,BROKEN_FENCE,LOG_BALANCE_16546,LOG_BALANCE_16547,LOG_BALANCE_16548,CASTLE_WALL,HOLE_16520,WALL_17047,NULL_31852,ROCKS_16534,ROCKS_16535,STRONG_TREE_17074,STEPPING_STONE_16466,NULL_26884,NULL_26886,STEPPING_STONES,STEPPING_STONES_23646,STEPPING_STONES_23647,A_WOODEN_LOG,SPIKEY_CHAIN,SPIKEY_CHAIN_16538,STRANGE_FLOOR_16544,CREVICE_16539,STEPPING_STONE_14918,STEPPING_STONE_14917,ROCKY_HANDHOLDS_26404,ROCKY_HANDHOLDS_26405,ROCKY_HANDHOLDS_26406,LOG_BALANCE_23274,ROCKS_27984,ROCKS_27985,BOULDER_27990,ROCKS_27987,ROCKS_27988,GAP_29326,TUNNEL_30174,TUNNEL_30175,OBSTACLE_PIPE_16509,STRANGE_FLOOR,ROCKS,ROCKS_14106,LOOSE_RAILING_28849,CREVICE_9739,CREVICE_9740,HOLE_31481,HOLE_31482,LADDER_30938,LADDER_30939,LADDER_30940,LADDER_30941,ROPE_ANCHOR,ROPE_ANCHOR_30917,RUBBER_CAP_MUSHROOM,ROCKS_31757,ROCKS_31758,ROCKS_31759,PILLAR_31809,ROPESWING_23568,ROPESWING_23569,VINE_26880,VINE_26882,PIPE_21728,STEPPING_STONE_19040,PIPE_21727,LOG_BALANCE_20882,LOG_BALANCE_20884,STEPPING_STONE_21738,STEPPING_STONE_21739,TIGHTGAP,STILE_12982,MONKEYBARS_23566,OBSTACLE_PIPE_16511,STEPPING_STONE_11768,CREVICE_16465,ROCKS_19849,CROSSBOW_TREE_17062,ROCKS_17042,ROCKS_2231,STEPPING_STONE_29728,STEPPING_STONE_29729,STEPPING_STONE_29730,JUTTING_WALL_17002,ROCKS_16514,ROCKS_16515,LOG_BALANCE_3933,STEPPING_STONE_13504,DARK_TUNNEL_10047,WEATHERED_WALL,WEATHERED_WALL_16526,STEPPING_STONE_19042,ROCKS_16998,ROCKS_16999,STEPPING_STONE_10663,BALANCING_LEDGE_23548,OBSTACLE_PIPE_23140,MONKEYBARS_23567,PILE_OF_RUBBLE_23563,PILE_OF_RUBBLE_23564,CREVICE_19043,PILLAR_31561,LOG_BALANCE_3931,LOG_BALANCE_3930,LOG_BALANCE_3929,LOG_BALANCE_3932,DENSE_FOREST_3938,DENSE_FOREST_3939,DENSE_FOREST_3998,DENSE_FOREST_3999,DENSE_FOREST,LEAVES,LEAVES_3924,LEAVES_3925,STICKS,TRIPWIRE,GAP,GAP_2831,STEPPING_STONE_5948,STEPPING_STONE_5949,ROCK_16115,CLIMBING_ROCKS_11948,CLIMBING_ROCKS_11949,NULL_25337,NULL_29868,NULL_29869,NULL_29870,ICE_CHUNKS_31822,NULL_31823,ICE_CHUNKS_31990)
mapLayerConfiguration.setOpacityFactor(((float)cachedMapTransparency) / 255.0f)
assertTrueEventually(new AssertTask(){   @Override public void run() throws Exception {     assertFalse(lock.isLocked());   } } ,20)
mock.expectedFileExists("target/failed/error/bye.txt")
c == separatorChar || c == '/'
sentBytesCnt.longValue()
config.getBoolean("single.reader.only",false)
current instanceof InvokeWithExceptionNode
this.encoding == null || this.encoding.isNil()
Arrays.binarySearch(_id,0,_sparseLen,i)
id=54
_buildTemplateWithGradle("portlet","portlet-dependency-management","--dependency-management-enabled")
showedPlugins.get(i)
in.indexOf("{") >= 0
a == null || a.isFinishing()
new FormAttachment(wAttributes,margin * 3)
executor.execute(new NamedRunnable("OkHttp %s ping %08x%08x",hostName,payload1,payload2){   @Override public void execute(){     try {       writePing(reply,payload1,payload2,ping);     }  catch (    IOException ignored) {     }   } } )
javaSource
poiCategory != null && poiCategory.length() > 0
Preconditions.checkArgument(!(msDir == null && s3Dir == null),"The path does not exist in metadata store and on s3.")
dlg.getListView().addFooterView(footerView,null,false)
routes.InputTypesResource()
participantAddresses.get(1)
Headers.FORWARDED.asString()
StringBuilder buf=new StringBuilder(); 
resolveImpl(incomplete,null,true)
tsdb.metrics.getIdAsync(sub_query.getMetric()).addCallbackDeferring(new MetricCB())
new CatchResult(response)
final IgniteKernal grid=(IgniteKernal)ignite; 
new Box2DTestCollection()
getSupportFragmentManager().beginTransaction().add(android.R.id.content,commentFragment).commitAllowingStateLoss()
windowToken != null && !mHideLockScreen
mEnginesHelper.isEngineEnabled(mRequestedEngine)
machine.getConfig().getLimits().getRam() * 1024L * 1024L
i=2
CassandraSplitManager.class
selection != null && selection != ""
BufferUtil.toDetailString(prefilled)
args == null || args.isEmpty()
!myComposite.equals(composite)
Beans.newDuration(registry.getJpa().getJpaLockingTimeout()).getSeconds()
featureType.getQualifiedName()
data.position()
new NodeStats(discoveryNode,no,indices,os,process,jvm,threadPool,fs,null,null,null,null,null,null,null)
GameData.injectSnapshot(snapshot,false,true)
cfStandardTable != null && cfStandardTable.getType() != Resource.Type.UNDEFINED
@Override protected LibraryTree getTreeByKey(FBTree.Key key){   return key != null ? myLibrary.getLibraryTree(key) : myLibrary.getRootTree(); } 
case 3: 
{0,0,1,1,1,2,2,2,2}
reportMissingOverride.isOn() && !declaredOverride && interfaceHasProperty&& !"__proto__".equals(propertyName)
testBit(access,Opcodes.ACC_PROTECTED)
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,"addOnSubscriptionsChangedListener")
myUnqualifiedOrLocalResolve && localProcessor.isEncounteredDynamicClasses()
buf.discardReadBytes()
assertResultExchange(result.getExchanges().get(0),true)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_FONT_SIZE,true)
interceptorParamTypes.length - 3
IOConverter.toInputStream(s,null)
protected abstract T getThis(); 
DEFAULT_HEAP_LIMIT_CAP=700
!locale.getLanguage().equals(casProperties.getLocale().getDefaultValue())
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
temporaryFolder.newFile()
logger.debug("Authentication request failed: " + failed.toString(),failed)
countNewlines(fragment) + 1
myUi._select(newSelection,new Runnable(){   public void run(){     final Set<Object> hangByParent=new HashSet<Object>();     processUnsuccessfulSelections(newSelection,new Function<Object,Object>(){       public Object fun(      final Object o){         if (myUi.isInStructure(o) && !adjusted.get(o).value(o)) {           hangByParent.add(o);         }  else {           addAdjustedSelection(o,adjusted.get(o),null);         }         return null;       }     } ,originallySelected);     processHangByParent(hangByParent).notify(result);   } } ,false,true,true)
robot.getBattery().receiveEnergy(1000,true)
!isExpanded()
new ServletHolder(getTransactionCountByBlockNumServlet)
new RedisTimeoutException("Command execution timeout for " + command + " with params "+ Arrays.toString(params))
transferCallButton != null
speed < 5
private static class ToolbarPanel extends TransparentPanel implements Skinnable {   private Image logoBgImage;   public ToolbarPanel(  LayoutManager layoutManager){     super(layoutManager);     loadSkin();   }   public void paintComponent(  Graphics g){     super.paintComponent(g);     if (logoBgImage != null) {       g.drawImage(logoBgImage,(this.getWidth() - logoBgImage.getWidth(null)) / 2,0,null);     }   }   /**   * Reloads bg image.  */   public void loadSkin(){     Image logoBgImage=ImageLoader.getImage(ImageLoader.WINDOW_TITLE_BAR);     if (logoBgImage != null)     logoBgImage=ImageUtils.scaleImageWithinBounds(logoBgImage,80,35);     this.logoBgImage=logoBgImage;   } } 
parent.getChildCount() > 0 && mAdapter.getItemCount() > 0
assertEquals(3,tool.check("I can give you more a detailed description.").size())
PostgreSQLConnectorConfig.class
expected=4
input.isSpecifyingFormat()
timeout=90000
lastTime >= 0 && nowELAPSED < minTime
((-3 * t + 4) * t + 1) * t / 2.0
settings.setTextSize(WebSettings.TextSize.LARGER)
parser.nextHexInt()
res.getString(R.string.data_usage_warning_body)
host == null || host.isAlias()
tm != null && tm.getNeighboringCellInfo() != null
media != null && media.getMediaType() == MediaType.AUDIO
setColors(color)
pMotionEvent.getY(1)
new InvalidDestinationException("Cannot publish to a deleted Destination: " + destination)
controllerErrors != null && errors != null
config.enabled() && config.showInfobox() && counter != null
UpgradeStepRegistrator.class
id=10804
expandedItemsList.valueAt(i)
distFromStart
DateUtils.getLocalTime()
zkController.getZkStateReader().getReplicaProps(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName())
"maxHeaderSize must be a positive integer: " + maxHeaderSize
"application/json".equals(contentType) || "json".equalsIgnoreCase(contentType)
DLStoreUtil.addFile(portletDataContext.getCompanyId(),CompanyConstants.SYSTEM_STRING,GroupConstants.DEFAULT_PARENT_GROUP_ID,CompanyConstants.SYSTEM,fileName,serviceContext,bytes)
this.presence.isAvailable() && oldPresence.getPriority() != this.presence.getPriority()
@Test public void testNoPendingAfterTrim() throws OutOfCapacityException, BrokenBarrierException, InterruptedException {   MultiLevelPriorityQueue queue=createQueue();   queue.put(createQueryRequest(groupOne,metrics));   queue.put(createQueryRequest(groupTwo,metrics));   TestSchedulerGroup testGroupOne=groupFactory.groupMap.get(groupOne);   TestSchedulerGroup testGroupTwo=groupFactory.groupMap.get(groupTwo);   testGroupOne.peekFirst().getQueryRequest().getTimerContext().setQueryArrivalTimeNs(1000);   testGroupTwo.peekFirst().getQueryRequest().getTimerContext().setQueryArrivalTimeNs(1000);   QueueReader reader=new QueueReader(queue);   reader.startAndWaitForQueueWakeup();   assertTrue(reader.readQueries.isEmpty());   assertTrue(testGroupOne.isEmpty());   assertTrue(testGroupTwo.isEmpty());   queue.put(createQueryRequest(groupOne,metrics));   sleepForQueueWakeup(queue); } 
new NeuralNetConfiguration.Builder().list()
logError(lcurly,"lcurly",lcurlyPos,curlyIndent())
LOGGER.warn("Could not attach file",ex)
matchingUri.equals(targetUri) || pathString.equals(targetUri)
remoteMsgId != null && conversation.findMessageWithRemoteId(remoteMsgId,counterpart) != null
assertEquals(800f,animator.getFrame())
Objects::nonNull
methodsToImplement(type,methods)
tag_values.getId("web03")
new FormAttachment(100,0)
MD5Loader.loadModel(Gdx.files.internal("data/zfat.md5mesh").read(),true)
spendTime < 2010
client == null || client.getGameState() != GameState.LOGGED_IN
GridNode sndNode
getTelecomService().silenceRinger(mContext.getOpPackageName())
!comboBox.isPopupVisible() || component == null
mEditText.getCompoundPaddingBottom()
IndexReader.open(dir)
StorageUtils.getCacheDirectory(context)
destination.isQueue()
map.lock(key,1,TimeUnit.SECONDS)
return 1; 
mClearPaint.setColor(0x0000ff00)
localScale.multLocal(scale)
Drawable.class
PropertyValuesAnimationAdapter<T>
public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNPathComplexityTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
config.setTenantIsolationEnabled(false)
response.getStatus().getCode() / 100
DEFAULT_ROW_FLUSH_BOUNDARY=75000
Threads.sleep(3000)
logger.debug("Using override port of %d on client %s",overridePort,clientName)
matchAxisFilter != 0 || wrapAxisFilter != 0
SimpleAttributeDefinitionBuilder.create("max-inclusive",ModelType.BOOLEAN,true)
log.warn(sm.getString("contextConfig.role.link",link))
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_SHOW_SPLASH_SCREEN,true)
Messages.showErrorDialog(IdeBundle.message("error.list.of.plugins.was.not.loaded"),IdeBundle.message("title.plugins"))
channel.getId()
new InternalTestCluster("network",randomLong(),createTempDir(),2,2,cluster2Name,cluster2SettingsSource,0,false,SECOND_CLUSTER_NODE_PREFIX,true)
Set<Object>
~View.SYSTEM_UI_TRANSPARENT
map.get(beanName).getType()
@Override public O getDefaultOutput(I input){   return input; } 
DEFAULT_PLAYER_EYE_HEIGHT=0.7f
Server server
animation.setDuration(300L)
"content".equals(scheme) || "android.resource".equals(scheme)
super.destroyProcessImpl()
typeTmp.get(1)
consumer.consume(new PlainTextFileType(),new ExactFileNameMatcher(".gitignore"),new ExactFileNameMatcher(".gitmodules"))
new TypeConversionDescriptorFactory("$it$.toMap($f$)","$it$.collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), $f$))",true)
db.getQueryFields(sNewSQL,param,info)
@SuppressWarnings("unused") public TypeaheadV3 files(int version,TypeaheadV3 t){   ArrayList<String> matches=H2O.getPM().calcTypeaheadMatches(t.src,t.limit);   t.matches=matches.toArray(new String[matches.size()]);   return t; } 
{type}
superClass == Object.class || superClass == null
Exception nre
AtomicReader indexReader=tuple.v1(); 
firstLine.indexOf(':')
adapter.item(R.string.layer_underlay).selected(underlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_down_dark,R.drawable.ic_action_down_light).listen(listener).position(15)
encoding == null
parent.incrementPrioritizableForTree0(amt,oldParent)
annotationHolder.createWarningAnnotation(expression,"Cannot resolve target pattern")
reportInteraction.performInteraction(context,config,reportBuilder,reportFile)
(exifIFD0Directory == null) || !exifIFD0Directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)
makeReplyMessage(pathname)
LOGGER.error("{} - Failed to execute isValid() for connection, configure connection test query. ({})",poolName,e.getMessage())
tableHistory.getHistoryIds(Model.getSingleton().getSession().getSessionId())
hasProperty("key2").withValue(1234L)
60L + 120L
mCurrentTheme != null && (themeId != null || !themeId.isEmpty())
in1 >= 0x7f
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:10500}")
args.length > 1
currentTime >= stage.getLastAttemptTime(hostName,role) + taskTimeout
prevNerEndIndex != (start - 1) || nextNerStartIndex != end
assertEquals(1024,((CacheHashTable)db.engine).cacheMaxSize)
configTimeRegionFactoryHolder.remove()
reg != null && reg.useEnglishNames() != osmandSettings.USE_ENGLISH_NAMES.get()
MAX_PER_SIZE=8
LOG.debug("AFTER decResourceRequest:" + " applicationId=" + applicationId.getId() + " priority="+ priority.getPriority()+ " resourceName="+ resourceName+ " numContainers="+ remoteRequest.getNumContainers()+ " #asks="+ ask.size())
Func1<Throwable,Observable<R>>
Sets.difference(queryIdsSnapshot,liveQueries)
System.currentTimeMillis() - start + 750
TokenSet.create(mSL_COMMENT,mML_COMMENT,mREGEX_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,WHITE_SPACE,mGSTRING_CONTENT,mDOLLAR_SLASH_REGEX_CONTENT,mREGEX_CONTENT)
textureView != null && Build.VERSION.SDK_INT >= 14
Arrays.asList("internal:discovery/zen/fd*","internal:coordination/fault_detection/*",TransportLivenessAction.NAME)
callback.onPulseFinished()
"memberOf".equalsIgnoreCase(attribute.getId()) || "isMemberOf".equalsIgnoreCase(attribute.getId())
new WorldPoint(2973,3489,0)
List<Object>
public static BuildConfigSpec addBuildParameterCustomStrategy(BuildConfigSpecBuilder builder,String image,List<EnvVar> envVars){   return builder.withNewStrategy().withType("Custom").withNewCustomStrategy().withImage(image).withEnv(envVars).endCustomStrategy().endStrategy().build(); } 
ImmutableMap.of("CHECK_THIS_VARIABLE","1","PATH",System.getenv("PATH"))
RegexFilteringInterceptor.class
delay=5000
isPost(request)
PRAYER_ENHANCE(ItemID.PRAYER_ENHANCE_4,GameTimerImageType.ITEM,"Prayer enhance",290,ChronoUnit.SECONDS)
callTimeoutMillis=6000
LOGGER.debug("Skipped over attribute [{}] since it's already contained by the principal",k)
mavenProject.getDisplayName()
VertexAttribute.ColorPacked()
id=11
DIODE(356)
Number value=iterator.next(); 
SystemProperties.getInstance().getUserHome()
new byte[17]
findState > 0
MAX_EXCEPTION_EDGE_OP_DISTANCE_FROM_END=3
mTargetNames == null
service.getDataStore().getEnsembleContainers()
InspectionGadgetsBundle.message("unnecessarily.qualified.static.usage.problem.descriptor1",element.getText())
SyslogTcpTransport.class
MATCH_SYSTEM_ONLY | MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE| MATCH_DISABLED_COMPONENTS
WebSocketEventListener.class.cast(l).onClose(event)
actionForm.getMultipartRequestHandler()
LOG.debug("Connecting to port {}...",port)
static public final PowOut fastSlow=pow2Out; 
new String(encoded,B2CConverter.ISO_8859_1)
LensPositionSelectors.back()
VersionedFlowsEntity.class
Timber.e(msg)
((BigDecimal)getConfig().get(INTERVAL)) != null && ((BigDecimal)getConfig().get(INTERVAL)).intValue() > 0
(MergedObject<T>)cur
getServiceGuarded().importMultimediaMessage(callingPkg,contentUri,messageId,timestampSecs,seen,read)
routeApplicationState(true)
SingleModel<U>
endPosition.getPosition() <= logfileoffset
LOG.info("Working dir: " + workDir.getAbsolutePath())
prefs.getInt(ACRA.PREF_LAST_VERSION_NR,0)
ai != null && ai.enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED
adminMaxThreads / 2
buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,Character.class) || buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement,char.class)
nextPos < mBoundPos
workerCount=2
ParamUtil.getLong(actionRequest,"publicLayoutSetPrototypeId")
Log_OC.e(TAG,"Incorrect action sent " + intent.getAction())
TestMapUsingMapStoreBuilder.create().mapName(mapName).withMapStore(mapStore).withNodeCount(nodeCount).withBackupCount(1)
size >= 0
CANCELED_WAIT_TIMEOUT=3000
currentModelTransform=renderable.modelTransform
formatCommand(command,"SA200CMD;{%s};0{%s};Enable{%s}\r",Command.KEY_UNIQUE_ID,Command.KEY_DATA,Command.KEY_DATA)
dataSourceContainer.getDriver().getFullName()
Assert.assertEquals("Unexpected number of Unusable hosts found count.",5,rule.clientMetrics.getFoundUnusableHosts().count())
info.getOldIndex() != -1 && info.getOldIndex() < oldParameters.length
descriptorDecoder.originalChannel()
testSame(js)
/**   * Specify an ending condition for this trigger. If the  {@code until} fires then the combinationfires. <p>The expression  {@code t1.orFinally(t2)} fires every time {@code t1} fires, and finishesas soon as either  {@code t1} finishes or {@code t2} fires, in which case it fires one last timefor  {@code t2}. Both  {@code t1} and {@code t2} are executed in parallel. This means that{@code t1} may have fired since {@code t2} started, so not all of the elements that {@code t2}has seen are necessarily in the current pane. <p>For example the final firing of the following trigger may only have 1 element: <pre>  {@code Repeatedly.forever(AfterPane.elementCountAtLeast(2)) .orFinally(AfterPane.elementCountAtLeast(5))} </pre><p>Note that if  {@code t1} is {@link OnceTrigger}, then  {@code t1.orFinally(t2)} is the sameas  {@code AfterFirst.of(t1, t2)}.  */ public OrFinallyTrigger orFinally(OnceTrigger until){   return new OrFinallyTrigger(this,until); } 
id=10998
context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)
new UnsupportedOperationException("Query " + this + " does not implement createWeight")
mState != STATE_INITIALIZED
new RuntimeException("Container " + containerName.asString() + " failed to execute "+ Arrays.toString(args),e)
q.setTimeout(timeoutParam.intValue())
ImmutableSet.of(UNUSED_VARIABLE,UNUSED_PARAMETER,ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE,VARIABLE_WITH_REDUNDANT_INITIALIZER,UNUSED_FUNCTION_LITERAL,USELESS_CAST,UNUSED_VALUE)
JSONFactoryUtil.looseDeserialize(cmd)
CLEAN_DELAY=0
channel.getPipeline().sendUpstreamLater(new DefaultExceptionEvent(channel,cause))
!disableBluetoothContactSharing
Long.parseLong(timeout)
assertEquals("Unexpected events " + publisher.events,3,publisher.events.size())
void receiveEndOfStream(int streamId) throws ConnectionException ; 
log.warnf("Duplicate @At mapping ? path=" + path)
UI_MODE_SERVICE.equals(name)
new File(themeDirStr)
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_KB_ARTICLE_ADDED_BODY)
Long.toString(v,16)
new HgMaterialConfig(new HgUrlArgument(hg.getUrl()),hg.isAutoUpdate(),toFilter(crScmMaterial),false,hg.getDirectory(),toMaterialName(materialName))
VIBRATE_LENGTH_MS=50
IDAUTHORITY_RETRY_COUNT_DEFAULT=20
status().isSeeOther()
candidatePriority < highestPriority
InetAddress.getByName("127.0.0.1")
DataType.set(datatype)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     Disposer.dispose(module);   } } ,module.getDisposed())
person.getPersonType() == Person.PersonType.USER || person.getPersonType() == Person.PersonType.VIEWER
/**   * Run transport tests over the Netty in-process channel.  */ @RunWith(JUnit4.class) public class Http2NettyLocalChannelTest extends AbstractInteropTest {   /**   * Start server.   */   @BeforeClass public static void startServer(){     startStaticServer(NettyServerBuilder.forAddress(new LocalAddress("in-process-1")).flowControlWindow(65 * 1024).channelType(LocalServerChannel.class));   }   /**   * Stop server.   */   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return NettyChannelBuilder.forAddress(new LocalAddress("in-process-1")).negotiationType(NegotiationType.PLAINTEXT).channelType(LocalChannel.class).build();   } } 
@Override public final DivideByOnConditionStep andNot(Condition c){   return and(c.not()); } 
url != null
generateRandomStringArray(20,10,false,false)
final ImageButton buttonShare=(ImageButton)view.findViewById(R.id.context_menu_share_button); 
final ContiguousIntervalCapacityUsageInArrear intervalCapacityInArrear=createContiguousIntervalCapacityInArrear(usage,ImmutableList.<RawUsage>of(),targetDate,false,createMockBillingEvent(targetDate.toDateTimeAtStartOfDay(DateTimeZone.UTC),BillingPeriod.MONTHLY,Collections.<Usage>emptyList())); 
MVCCModel value=new MockMVCCModel(_VERSION_1); 
StringUtil.shortenTextWithEllipsis(modulesToRestoreText.toString(),50,0)
window.onBackwardSliceLoaded(topSortKey)
plugin.getKey()
LOGGER.lifecycle(msg.apply())
Executors.newScheduledThreadPool(1)
time < 7
new ObjectMapper().readerFor(BlockIteratorState.class)
isShortcutProxyActivity(stubIntent)
NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,true)
db.assertColumnDefinition(TABLE,"b_qualifier",Types.VARCHAR,10,true)
tz.getOffset(System.currentTimeMillis())
serverSocket.setReuseAddress(true)
masm.movq(AMD64.r13,object)
mQuery.appendSpaceSeparated("WHERE")
ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ,700,0)
ImmutableMap.of(storeName,mutations)
eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_DOCUMENT
new IllegalArgumentException("This code called statusNotice(null)")
LinkedHashMap<String,ArrayList<String>>
onProgressUpdate(progress,max)
mg.maximumGap(input)
assertEquals(1,artifacts.size())
offset=0
secondCacheCfg.setMemoryPolicyName(POLICY_40MB_EVICTION)
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",true))
currentVersions.get(flowFile.getId()) != null && originalVersions.get(flowFile.getId()) == null
paramDefines.hashCode()
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } 
comp.exitUtil()
ran.nextInt(250)
element instanceof AntProject || element instanceof AntCall || element instanceof AntAnt
KtPsiUtil.getEnclosingElementForLocalDeclaration(this,true)
new GrammaticalRelation(Language.UniversalChinese,"amod:ordmod","ordinal numeric modifier",ADJECTIVAL_MODIFIER,"NP|QP",tregexCompiler,"NP < (QP=target < OD !< CLP)")
BLOCK_INTENSITY_FACTOR=0.7f
originalRemoteAddr != null
/**   * Gets the value of the val property.  * @return possible object is {@link String }  */ public String getVal(){   return val; } 
expressionWithRecoverUntilParenOrComma(b,l + 1)
Publisher<V>
doesAddToastWindowRequireToken(attrs.packageName,callingUid,parentWindow)
part.getPartitionPath()
@Override public Variable emitBitScanReverse(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IBSR,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LBSR,result,asAllocatable(value)));   }   return result; } 
adapter != null && getMyApplication() != null && getActivity() != null
Ordered.LOWEST_PRECEDENCE - 2
((OfflineProblemDescriptorNode)node).isQuickFixAppliedFromView()
Thread.sleep(10000)
file.getOriginalFilename()
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,PortletRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
MathUtils.PI * (this.width * this.height) / 4
builder.getErrors().getErrors()[3]
List.class
resultMetaData.getColumnLabel(i)
setMargins(view.findViewById(R.id.studyoptions_mainframe),LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT,4f,4f,4f,4f)
Preconditions.checkNotNull(firstOperand)
Executors.newCachedThreadPool()
value.toString().getBytes(StandardCharsets.UTF_16)
Math.max(limit,1L)
value[clu][col] / mults[col]
a.getDimensionPixelSize(attr,DEFAULT_MAX_WIDTH)
memoryReservation.addAndGet(bytes)
topologyConfigs(topologyBinaryFile,topologyDefnFile,topology)
hasProperty("key3").withValue(5678L)
Executor.class
field.tokenStream(docMapper.mappers().indexAnalyzer())
groupField.createField(group.groupValue.utf8ToString(),1.0f)
Minecraft.getMinecraft().renderEngine.getMissingIcon(0)
Log_OC.d(TAG,"onPause() start")
private void feedOtherPlayers(final Server server,final CommandSender sender,final String name) throws PlayerNotFoundException {   boolean skipHidden=sender instanceof Player && !ess.getUser(sender).isAuthorized("essentials.vanish.interact");   boolean foundUser=false;   final List<Player> matchedPlayers=server.matchPlayer(name);   for (  Player matchPlayer : matchedPlayers) {     final User player=ess.getUser(matchPlayer);     if (skipHidden && player.isHidden()) {       continue;     }     foundUser=true;     try {       feedPlayer(sender,matchPlayer);     }  catch (    QuietAbortException e) {     }   }   if (!foundUser) {     throw new NotEnoughArgumentsException(_("playerNotFound"));   } } 
ShortBuffer target
INITIAL_LAUNCH_IDLE_TIMEOUT=60000
Object msgObj=messageClass.newInstance(); 
editedGroup != null && editedGroup.getClass() == ExplicitGroup.class
JavaModuleType.getModuleType().modifyProjectTypeStep(settingsStep,moduleBuilder)
MonitoringPortlet.setMonitoringPortletRenderRequest(monitoringPortletRenderRequest)
Arrays.asList("Prozent","Gramm","Kilogramm","Uhr")
/**   * Decode a given JWT token. <p> Note that this method <b>doesn't verify the token's signature!</b> Use it only if you trust the token or you already verified it.  * @param token with jwt format as string.  * @return a decoded token.  * @throws JWTDecodeException if any part of the token contained an invalid jwt or JSON format of each of the jwt parts.  */ public static DecodedJWT decode(String token) throws JWTDecodeException {   return new JWTDecoder(token); } 
url.toServiceStringWithoutResolving()
logger.fine(String.format("decoded %s as %s",str,p))
this.data=newData
delegate.upsert(entity)
SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
highlightInfo != null && !(rType instanceof PsiMethodReferenceType)
client.get(path,MIMETYPE_XML)
mShadowDrawable != null && mSlideableView != null
createOrcWriterOptions(oi,conf,cacheWriter,allocSize)
registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT,ModClusterStopContext.INSTANCE,stopContext,false,runtimeOnlyFlags)
myNodeComparator.compare(node,node1) > 0 || isLoadingNode(node1)
primTarget && !ClassHelper.boolean_TYPE.equals(targetType) && !primTop&& ClassHelper.getWrapper(targetType).equals(top)
new AsyncTask<Void,Void,Void>(){   @Override protected Void doInBackground(  Void... voids){     RecipientDatabase db=DatabaseFactory.getRecipientDatabase(getContext());     db.setMessageRingtone(recipient,NotificationChannels.getMessageRingtone(context,recipient));     db.setMessageVibrate(recipient,NotificationChannels.getMessageVibrate(context,recipient) ? VibrateState.ENABLED : VibrateState.DISABLED);     return null;   } } .executeOnExecutor(AsyncTask.SERIAL_EXECUTOR)
Arrays.asList("http://schemas.xmlsoap.org/soap/","http://schemas.xmlsoap.org/wsdl/soap/","http://schemas.xmlsoap.org/wsdl/soap12/","http://schemas.xmlsoap.org/wsdl/soap/http","http://www.w3.org/2003/05/soap/bindings/HTTP/","http://www.w3.org/2010/soapjms/")
checkDirectory(config.getString("tsd.http.cachedir"),MUST_BE_WRITEABLE,CREATE_IF_NEEDED)
ANIMATE_TRANSITIONS=false
Long tillId
new CacheCreateConfigRequest(cacheConfig,false,partitionId)
flux.onErrorResume(ex -> Flux.error(getReadError(bodyParameter,ex)))
tabAlias.equalsIgnoreCase(tableAlias)
LOG.info("Staging files complete: {} files cached, {} files newly uploaded",numCached.get(),numUploaded.get())
List<IItem>
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
addDaysAndCheckForCompletion(20,NextEvent.BLOCK,NextEvent.INVOICE,NextEvent.INVOICE_PAYMENT_ERROR)
gauge.getValue() instanceof Number
rteCl.readableBytes()
config.getClientNumThreads()
new IllegalStateException("too big")
dkSign.getSignatureId()
mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,null)
hc.notifyFirstSampleAfterLoopRestart()
_parms._intercept
getConfig().getBoolean(SPIDER_PARSE_ROBOTS_TXT,true)
WorkflowDefinitionLinkLocalServiceUtil.getDefaultWorkflowDefinitionLink(company.getCompanyId(),assetClassName,0,0)
new InstrumentedHttpRequestExecutor(metricRegistry,metricNameStrategy,name)
next != null
references.get() <= 0
client.loginWithFacebook(fbAccessToken,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
asList(DERBY,CUBRID,FIREBIRD,ORACLE,SQLSERVER,SQLITE,SYBASE)
textRange.getEndOffset() <= ref.length()
close.setContentDescription("Close Button")
assertTrue(cache.context().systemTx())
new MediaFormat(MimeTypes.APPLICATION_ID3,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,NO_VALUE,null)
child.resetRtlProperties()
DEFAULT_MAX_METHODS=100
inputProcessor.touchDragged(event.x,event.y,event.pointer)
!languageContribution.isValid(credentials)
myStoredLength > 16384
assertThat(configs.get(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG)).isEqualTo(123)
bulkInsertableMap.get(persistentObjectClass)
DBSSchema.class.isAssignableFrom(childType) || DBSEntity.class.isAssignableFrom(childType)
order=1
r != null && r.pid != Process.myPid() && Settings.Secure.getInt(mContext.getContentResolver(),Settings.Secure.WTF_IS_FATAL,0) != 0
getOrCreateContainer().forceUnlock(dataKey)
h.addParameters("--merge")
out.println(indent + "public void setup() {")
testWarning("goog.require('a.c');\ngoog.require('a.b')",REQUIRES_NOT_SORTED)
_jsonObjectFile.getParent()
t.getMessage()
LOG.debug("Removed connection {} for {} - open: {}",connection,this,open)
/**   * Gets the key of service port.  * @return key of service port  */ public PropertyKey getPortKey(){   return mPortKey; } 
CacheData<RealmObject>
1 << 15
id=33
group.getAvatar() != null && group.getAvatar().getFullImage() != null
Mockito.verify(mockTMasterEvaluator,Mockito.timeout(1000).times(1))
super(false); 
Thread.sleep(sleptAlready ? 10 : delay)
event.getTime() > currentPlayTime || event.getTime() == DURATION_INFINITE
appendValue(collection,sb,variables)
myTypeChecker.checkExpressionIsAssignableToType(lOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null,false)
new AndFilter(fromRoomFilter,MessageWithSubjectFilter.INSTANCE,new NotFilter(MessageTypeFilter.ERROR))
-0f
new String[2][]
TextUtils.isEmpty(realPath)
copy.isInternal()
filesizeMb * 1024L * 1024L
retryHandler.onComplete(results)
SyncToAsyncChannelServer.class
if (moveSelection) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } 
new SemanticException(TYPE_MISMATCH,node,"%s",e.getMessage())
recordingDescriptorDecoder.endPosition()
serialVersionUID=879945540
StringBuilder retval=new StringBuilder(); 
hasColumn("Calendar","timeZoneId")
variableName.substring((scopeName + ".").length())
public class XpathRegressionRightCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     final String[] expectedViolation={"8:9: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_SAME,"}",9)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"9:15: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_NEW,"}",15)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyTwo']/OBJBLOCK" + "/METHOD_DEF[@text='fooMethod']/SLIST/LITERAL_TRY/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.ALONE.toString());     final String[] expectedViolation={"5:72: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_ALONE,"}",72)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testFour() throws Exception {     final String checkName=RightCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionRightCurlyFour.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(RightCurlyCheck.class);     moduleConfig.addAttribute("option",RightCurlyOption.SAME.toString());     final String[] expectedViolation={"7:27: " + getCheckMessage(RightCurlyCheck.class,RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE,"}",27)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionRightCurlyFour']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST/RCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
layerFilter != null && readParameters != null
Build.VERSION.SDK_INT >= 21
i <= depth[depthIndex]
SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID=2
@Deprecated
LOGGER.info("Generated {} star-tree records from {} segment records",numStarTreeRecords,numSegmentRecords)
element != null && PsiTreeUtil.isAncestor(node,element,true) && PsiTreeUtil.getParentOfType(element,PyRaiseStatement.class) != null
1 << 15
computeAntiJoin(inputStatistics,inputStatistics,unknown,u)
element == null || !element.getValid()
assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions("-Xlint:-processing","-implicit:none")
new UnsupportedOperationException("Image format " + format + " is not supported")
i.view_count >= 1000
new Neo4jGraph(database.graph,false)
editText.setTextKeepState(task.getValue(property))
TunablyAggressiveChaosMonkey chaos=new TunablyAggressiveChaosMonkey(ctx); 
null == lvElement(buffer,calcWrappedOffset(index + 1,mask))
Validator.equals(type,"toggle-card") || Validator.equals(type,"toggle-switch")
removeBlock(sessionId,blockId,BlockStoreLocation.anyTier())
UpgradeStepRegistrator.class
GoExecutor.in(module).withParameterString(task.getCommand())
s.charAt(i) > ' '
cb.onWifiSignalChanged(mWifiEnabled,mQSWifiIconId,wifiIn,wifiOut,mContentDescriptionWifi,wifiDesc)
pm.runMigrationTasks(tasks,partitionId,replicaIndex,from)
getStageWithServerAction(1,977,payload,"test",1200)
Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USERS)
_parms._force_load_balance || _parms._reproducible
mLinearLayout.setVisibility(View.VISIBLE)
module.getProject()
playerState >= HTML5VideoView.STATE_PREPARED
WikiPageLocalServiceUtil.renamePage(userId,node.getNodeId(),frontPageTitle,WikiPageConstants.FRONT_PAGE,false,serviceContext)
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
AbstractItem<SimpleImageItem,SimpleImageItem.ViewHolder>
1 << 27
decoder.readInbound()
keyProvider.getAuthKey(activity)
primaryGroupHasCea608TrackFlags[i]
new TrustException("DERIVED_KEY_ERROR",e,LOG)
id=16700
Nd4j.create(new int[]{1,nParams},'c')
Response.ok()
client.filter(basicAuthentication("rob","rob")).get().uri("/").exchange().expectStatus().isOk().expectHeader().valueMatches(HttpHeaders.CACHE_CONTROL,".+").expectBody(String.class)
~PFLAG3_FITTING_SYSTEM_WINDOWS
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.PositionAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.ValueAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
final UUID userToken=getUUID(r,"user_token"); 
reference.resolve() == null && reference.getReferenceName() != null
myBook.addUidWithNoCheck(uid)
verifyAttributes(decoder,binary("79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"))
getObjectMapper().readerFor(clazz)
in.readStringFixed(8)
previewData == null || mediaPager == null || mediaPager.getAdapter() == null
i > 0
wKey.indexOfString(v.getName(),2)
ImmutableSet.Builder<ImplementationMethodDescriptor>
Build.VERSION.SDK_INT < 21 && mDrawerLayout != null
recompile(source,name,oldClass)
odbcUrl.lastIndexOf(project)
factory.lookup(DefaultBroadcaster.class,id,true)
this.loggingSystem.initialize(this.initializationContext,null,null)
assertEquals(2,prop.getValues().size())
assertEquals(2,binder.getDisallowedFields().length)
actor.addCaptureListener(listener)
mv.visitVarInsn(ALOAD,resultIdx)
i=10000
DLFileEntryTypeFinderUtil.filterCountByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},StringPool.BLANK,true)
if (VDBG) {   log("returning Blocked NetworkInfo for ifname=" + lp.getInterfaceName() + ", uid="+ uid); } 
return 5030; 
Arrays.asList("Int","Float","Double","Bool","Void","String","Character","AnyObject")
json.writeObjectFieldStart("custom")
? extends CharStream
target == null || !target.equals(element)
!portletAddDefaultResourceCheckWhiteList.contains(portletId)
MORE_DEBUG && okay && mAgent != null
weightsFloatData.put(index * MAXIMUM_WEIGHTS_PER_VERTEX,0.0f)
functionFactory.lossNegativeLogLikelihood(getFunctionInput(iX),getFunctionInput(i_y),dimensions)
ErrorReportRequestProto.newBuilder().setErrorCode(errorCode).setMsg(msg).setRegistration(PBHelper.convert(registration))
StringBuilder output=new StringBuilder(inName.length()); 
note == null || mAddNote
CoreMatchers.anyOf(is(NestedStaticTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"),is("net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType" + ".net.bytebuddy.description.type.AbstractTypeDescriptionGenericTest$NestedStaticTypeVariableType$Placeholder<java.lang.String>"))
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,StringPool.BLANK,true,JournalArticleConstants.VERSION_DEFAULT,titleMap,null,content,"general",structureId,templateId,StringPool.BLANK,1,1,2008,0,0,0,0,0,0,0,true,0,0,0,0,0,true,true,false,StringPool.BLANK,null,null,StringPool.BLANK,serviceContext)
-X_MIN_VELOCITY
resultSet.getInt(index)
N > 1
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicateSessionParam",m.getName(),m.getClass().getName()))
new DeoptimizeNode(action,reason,speculation)
app.getSettings().AVOID_UNPAVED_ROADS.getModeValue(params.mode)
fileContent.getFileName().indexOf('$') < 0
params.appendExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){   @Override public ImmutableSortedSet<BuildRule> get(){     return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();   } } )
mergedDDMFormFieldValues.contains(text2DDMFormFieldValue)
queue.removeFirst()
id=22
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,false,false,searchTerms.isAndOperator())
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class UserCodeDeploymentPermissionTest extends PermissionTestSupport {   @Override protected Permission createPermission(  String name,  String... actions){     return new CardinalityEstimatorPermission(name,actions);   }   @Test public void checkDeployPermission_whenAll(){     new CheckPermission().of("deploy").against("deploy").expect(true).run();   }   @Test public void checkDeployPermission(){     new CheckPermission().of("deploy").against("all").expect(true).run();   }   @Test public void checkAllPermission_whenDeploy(){     new CheckPermission().of("all").against("deploy").expect(false).run();   } } 
WordPress.wpDB.getShownAccounts()
configServerSpec.size() > 0
items[26]
turnImminent=0
(byte)210
0 - originX
Messages.showInfoMessage(myProject,"Dependencies were successfully collected in \"" + ToolWindowId.DEPENDENCIES + "\" toolwindow",FindBundle.message("find.pointcut.applications.not.found.title"))
isStarted() || isStarting()
new SortField(fieldName,nullStringLastComparatorSource,true)
new ServletException("Authentication failed for " + username + " in "+ _authentication)
path != null && path.indexOf(mHostContext.getPackageName()) < 0
MAX_OPEN_TRANSACTIONS=65535
TypeEvalContext.fastStubOnly(file)
pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false)
position <= firstPos
collector.awaitFinish(4000)
filterTypes.length()
info.getLine1NumberForSubscriber(subId,mContext.getOpPackageName())
is(1)
encounter.getObsAtTopLevel(true)
gc.createCompatibleImage(wide,high,Transparency.TRANSLUCENT)
expression instanceof PsiJavaCodeReferenceElement && !aClass.equals(PsiTreeUtil.getParentOfType(expression,PsiClass.class)) && PsiTreeUtil.getParentOfType(expression,PsiTypeElement.class) != null
appOpsManager.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
this(Icon.createWithResource("",icon),title,intent,new Bundle(),null,true); 
public static DurationArray durationArray(DurationValue[] values){   return new DurationArray(values); } 
new CrypticClue("This crate is mine, all mine, even if it is in the middle of the desert.",CRATE_18889,new WorldPoint(3289,3022,0),"Center of desert Mining Camp. Search the crates. Requires the metal key from Tourist Trap to enter.")
m21 * m02
deserialze(parser,type,fieldName,0)
new RuntimeIOException("No input file provided (use -parseFile)",e)
new Dialog(ActivityApp.this)
Preconditions.checkState(entry.isPresent(),"Could not parse R.txt entry: '%s'",input)
Character.isDigit(ch) || ch == '+'
LOG.warn("Unable to delete {} because listInternal returns null",path)
LOG.debug(ex.getLocalizedMessage(),ex)
Name.identifier(name)
new HashMap<>()
new HttpSender(connectionParam,true,HttpSender.SPIDER_INITIATOR)
mv.visitInsn(DUP)
displayList != null && displayList.isValid()
/**   * Returns the next pseudorandom  {@link ArrayValue} of time elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of time elements.  */ public TimeArray nextTimeArray(){   OffsetTime[] array=nextTimeArrayRaw(minArray(),maxArray());   return Values.timeArray(array); } 
Boolean.parseBoolean(attrValue)
SCROLL_BAR_SIZE=10
_isNegInf(text)
maxZoom=24
delta + end
line.substring(0,p).trim().toLowerCase(Locale.US)
classNameLocalService.getClassNameId(rendererFactory.getClassName())
Map<Jid,Drawable>
meterRegistry.summaryBuilder(METRIC_NAME_USAGE).tags(METRIC_CATEGORY,poolName)
new IOException("Storing a directory is not yet supported.")
new ProtoFile("nestedmaps.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
mControllers.get(controller)
getSQL()
level.toUpperCase(Locale.ROOT)
temporalType < TYPES.length && temporalType >= 0
appOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
j--
mService.disableNetwork(netId,mContext.getOpPackageName())
child.disposeUIResources()
new InputStreamReader(localStream,StandardCharsets.UTF_8)
_log.error("Error encountered while re-indexing",e)
cluster.restartDataNode(dnp)
replicaId < nReplicas
@Override public Variable emitArrayEquals(Kind kind,Value array1,Value array2,Value length){   Variable result=newVariable(LIRKind.value(Kind.Int));   append(new SPARCArrayEqualsOp(this,kind,result,load(array1),load(array2),asAllocatable(length)));   return result; } 
callButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_PRESSED))
config(" ",1)
assertOpenEventually(countDownLatch)
new ItemStack(Items.slime_ball)
uniqueConcreteType != null && !uniqueConcreteType.equals(type)
line.startsWith("ProGuard, version") || line.startsWith("Reading ") || line.startsWith("    processed in")
/**   * [Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]   */ DARKEN(12)
CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)
response != null && response.getBitmap() != null
type=200
@Deprecated protected static <T extends Contract>T deploy(Class<T> type,Web3j web3j,TransactionManager transactionManager,BigInteger gasPrice,BigInteger gasLimit,String binary,String encodedConstructor,BigInteger value) throws RuntimeException, TransactionException {   return deploy(type,web3j,transactionManager,new StaticGasProvider(gasPrice,gasLimit),binary,encodedConstructor,value); } 
mContext.sendStickyBroadcastAsUser(mStorageLowIntent,UserHandle.ALL)
sm.getString("deltaManager.waitForSessionState",getName(),mbr,getStateTransferTimeout())
JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,"dict",className)
!myApplicationActive || !myEnabled || e.getArea() != EditorMouseEventArea.EDITING_AREA
!externalEditCheckInterval_.hasElapsed()
t == null
model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0
state.addNullness(false,y)
logger.debug("tried to fail engine but could not acquire lock - engine should be failed by now [{}]",failure,reason)
getExecutionException()
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA("ADH-DES-CBC3-SHA",KeyExchange.EDH,Authentication.aNULL,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_anon_WITH_3DES_EDE_CBC_SHA")
c <= 'z'
orderedGroups.size() > n
previousDataInputs != null
RepositorySpoonStartExtensionPoint.class
pubnub.unsubscribe(channel)
CHECKIN_VERSION=29
Arrays.asList(0,1,2,3,4,5,6,7,8)
FBReader.Instance != null && myControlPanel != null
new ObjectMapper().readerFor(List.class)
maximumGridSize=512
CommandLineUtils.createDatabaseObject(artifactClassLoader,url,username,dbPassword,driver,defaultSchemaName,databaseClass,null)
private final StringBuilder tmpSb=new StringBuilder(); 
channel.getRTCPPort()
logger.trace("Retreiveing door data")
120L * dbManager.getDynamicPropertiesStore().getTransactionFee()
isOptionalTagEnd || "body".equalsIgnoreCase(tagName) || "html".equalsIgnoreCase(tagName)
new ScheduledJob(job,jobName,delay,period)
new SQLExecuteTemplate(executeEngine,backendConnection.isSerialExecute())
config.memory || config.cipher != null
parent instanceof PyListLiteralExpression || parent instanceof PyParenthesizedExpression || parent instanceof PySetLiteralExpression|| parent instanceof PyKeyValueExpression|| parent instanceof PyNamedParameter|| parent instanceof PyArgumentList
invalidateDataSource(monitor,dataSource,false)
private String selectePathTemp; 
log.debug("Double activation of navigator context")
head.equals("ntpath") || head.equals("posixpath") || head.equals("path")
PrivacyManager.getSettingBool(-mAppInfo.getUid(),PrivacyManager.cSettingOnDemand,false,false)
frustum(xmin,xmax,ymax,ymin,zNear,zFar)
UpgradeStepRegistrator.class
Class<CommitColumnClass>
public abstract Number execute(); 
name.equals(Context.CLIPBOARD_SERVICE) || name.equals("clipboardEx")
new DefaultDependentsSet(true)
parameters.length >= 2
read.getStartDate()
page.getResourcePrimKey()
bridgeMethod.getActualModifiers(true,getVisibility())
public CharSequence getText(){   return text; } 
entry.getCreateStore()
StringBuilder buf=new StringBuilder(name.length() + parameters.length * 10); 
id=14240
crashInfo != null && crashInfo.durationMillis != -1
new RuntimeException("One thread threw an exception",exception.get())
!registrarTransport.equals(ListeningPoint.UDP) && !registrarTransport.equals(ListeningPoint.TCP) && !registrarTransport.equals(ListeningPoint.TLS)
rowKeyColumnIO.writeColumnWithoutDictionary(encodedRecord.getBytes(),encodedRecord.offset(i),encodedRecord.length(i),recordBuffer,digest.offset(i),rowKeyColumnIO.getColumnLength(column))
SAVE_TRACK_TO_GPX.setModeValue(ApplicationMode.DEFAULT,false)
value == null || value.size() == 0
new SolrException(500,"Schema Parsing Failed",e,false)
readLock.lock()
is(4)
position <= mSrcDragPos
Runnable t=new RunAfterTester(new DisconnectionBehavior(h2,h1),new MultiCallBuilder(h2)); 
assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON,MediaType.parseMediaType(MediaTypes.HAL_JSON_VALUE + ";charset=UTF-8"))
targetType.getDeclaredConstructor()
Number value=list.get(i); 
dbStat.setInt(1,sessionType.getPid())
UniqueId.forEngine(engineId)
fieldType.storeTermVectors()
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",false,false,false)
(contentType == null) || (contentType.startsWith("text")) || (contentType.endsWith("xml"))|| (contentType.contains("/javascript"))
basicDLTest_Regression("./smalldata/gbm_test/alphabet_cattest.csv","alphabetRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     return fr.find("y");   } } ,10,4.975570190016591E-6,DeepLearningParameters.Activation.Rectifier)
public <A>SubType fullJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).fullJoin((Expr<?>)entity);   return self; } 
serversByLoad.firstKey()
listener.iterationDone(mln,iterationCount,epochCount)
params.getInt("numPages",PageRankData.getNumberOfPages())
allocSize=32
assertOpenEventually("responseLatch",responseLatch)
r.thread != null && !r.isolated
r.remoteCommits != 0 && r.commits.size() != 0
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw)
PortalTopLevelBuildData portalTopLevelBuildData=getBuildData(); 
ref.getAssociatedEntity()
gatecoinOrder.getSide()
new IntPreference("overlay_transparency",200,false)
deriveFontMethod.invoke(baseFont,new Object[]{floatSize})
entry.getType() != null && entry.getType() != MarketEntryType.Platform
FBUtilities.getBroadcastAddress()
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRole"),e.getCause().getMessage())
4 * Constants.KB
MetricsLogger.histogram(getContext(),DEMO_SESSION_DURATION,sessionDuration)
structureAssistant.findObjectsByMask(monitor,container,typesToSearch.toArray(new DBSObjectType[typesToSearch.size()]),nameMask,false,1000)
marketDataService.getBittrexOrderBook(pairString,50)
Validator.isNotNull(ppe.getCause().getMessage())
CodeSigning.hasValidSignature(context.getProcessExecutor(),binaryOutputPath)
value.toLowerCase().startsWith(constraintLowerCase)
LeveledManifest.class
Event.warn(String.format("Cannot delete sandbox directory after action execution: %s (%s)",sandboxPath.getPathString(),e))
public AfterWatermarkEarlyAndLate withEarlyFirings(OnceTrigger earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
runtime.lookupType(parameters.get(index),(HotSpotResolvedObjectType)accessingClass,false)
Predicate<CharSequence>
LatencyContainer.class
stateMap.get("EnqueuedTransportURIMetaData") != null && !stateMap.get("EnqueuedTransportURIMetaData").isEmpty()
lock.tryLock()
new BufferedImage(region.width,region.height,page.getType())
!newDefaultSubIdObj.equals(mDefaultSubId)
lineCount == 5
Arrays.asList("-d",outputDir,"-classpath",ForTestCompileRuntime.runtimeJarForTests().getPath())
cache.remove(key)
mPhone.getContext().enforceCallingPermission("android.permission.SEND_SMS","Sending SMS message")
classResolver.resolveMandatoryClass(type)
PsiMethod constructor
strongClassCache.putIfAbsent(beanClass,results)
ApplicationManager.getApplication().invokeLater(new Runnable(){   @Override public void run(){     myLabelEditor.setText(myLabelEditor.getText());     myChildrenEditor.setText(myChildrenEditor.getText());     myChildrenExpandedEditor.setText(myChildrenExpandedEditor.getText());     myListChildrenEditor.setText(myListChildrenEditor.getText());   } } ,ModalityState.any(),myProject.getDisposed())
region == null
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM))
id=10854
private static final KeyStrokeMap ourMap=new KeyStrokeMap(); 
taskName.contains(":buildSrc:")
size.height * 5 + 10
!AuthFactory.supportsScram()
return mChangingDisappearingDelay; 
Optional<DescriptorDigest>
/**   * Returns a client with all our selected properties / params.  * @param timeout - socket timeout to set  * @return client  */ public static final HttpClient getClient(int timeout){   HttpClientBuilder client=HttpClientBuilder.create();   client.setConnectionManager(connectionManager);   client.setRetryHandler(new DefaultHttpRequestRetryHandler(0,false));   RequestConfig config=RequestConfig.custom().setSocketTimeout(timeout).build();   client.setDefaultRequestConfig(config);   client.disableRedirectHandling();   client.setUserAgent(userAgent);   if ((System.getProperty("http.proxyHost") != null) && (System.getProperty("http.proxyPort") != null)) {     HttpHost proxy=new HttpHost(System.getProperty("http.proxyHost").toString(),Integer.valueOf(System.getProperty("http.proxyPort")));     client.setProxy(proxy);   }   return client.build(); } 
returnTypeCache == null || !(returnTypeCache instanceof ResolvedJavaType)
whiteSpaceAfterEnd << 1
wifiConfig == null || wifiConfig.isValid()
assertLeftRightCategory(3,category1b)
file.getAbsolutePath()
Map.Entry<String,Object>
rootNode instanceof DBNDatabaseFolder
LOG.error("Fetch holidays failed. Aborting.",e)
nativeSetFlags(mNativeObject,sc.mNativeObject,0,SURFACE_OPAQUE)
id=17
Arrays.toString(volumes.get())
BTreeRow.unsortedBuilder()
recycle(false)
appearance.getFloat(attr,0)
offset + len > buf.length
new GitException(String.format(ERROR_BRANCH_LIST_UNSUPPORTED_LIST_MODE,listMode))
queue.poll(15,TimeUnit.SECONDS)
getLocalization(xml,languageId,false)
myWindow.getManager().openFileImpl3(myWindow,composite.getFile(),false,null)
/**   * A decorator around a  {@link org.gradle.caching.BuildCacheService} that passes through the underlying implementationuntil a number  {@link BuildCacheException}s occur. The  {@link BuildCacheException}s are counted and then ignored. After that the decorator short-circuits cache requests as no-ops.  */ public class ShortCircuitingErrorHandlerBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private static final Logger LOGGER=LoggerFactory.getLogger(ShortCircuitingErrorHandlerBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   private final int maxErrorCount;   private final AtomicBoolean enabled=new AtomicBoolean(true);   private final AtomicInteger remainingErrorCount;   public ShortCircuitingErrorHandlerBuildCacheServiceDecorator(  int maxErrorCount,  RoleAwareBuildCacheService delegate){     this.delegate=delegate;     this.maxErrorCount=maxErrorCount;     this.remainingErrorCount=new AtomicInteger(maxErrorCount);   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader){     if (enabled.get()) {       try {         return super.load(key,reader);       }  catch (      BuildCacheException e) {         recordFailure();       }     }     return false;   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer){     if (enabled.get()) {       try {         super.store(key,writer);       }  catch (      BuildCacheException e) {         recordFailure();       }     }   }   @Override public void close() throws IOException {     if (!enabled.get()) {       LOGGER.warn("The {} build cache was disabled during the build after encountering {} errors.",getRole(),maxErrorCount);     }     super.close();   }   private void recordFailure(){     if (remainingErrorCount.decrementAndGet() <= 0) {       if (enabled.compareAndSet(true,false)) {         LOGGER.warn("The {} build cache is now disabled because {} errors were encountered",getRole(),maxErrorCount);       }     }   } } 
_context != null
clientPortAddress == null
topCallFrameView == null || topCallFrameView.getCallFrame() != topCallFrame
report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n)
cnt=1
new QueryException(e,"Error in preloading targets. %s",e.getMessage())
123 + (USE_OLD_HISTORY ? 1000 : 0)
Expression.eq("searchable",searchable)
NSNumber.numberWithLongLong(val)
bitstampAuthenticated.getBitcoinCashDepositAddress(exchange.getExchangeSpecification().getApiKey(),signatureCreator,exchange.getNonceFactory())
jsonObject.optLong(KEY_DATE_ADDED,0)
organization.toUnescapedModel()
id=19
private ClassLoader getSystemFilteringClassLoader(DefaultClassLoaderFactory defaultClassLoaderFactory,boolean java9compatible){   FilteringClassLoader.Spec filterSpec=new FilteringClassLoader.Spec();   if (java9compatible) {     filterSpec.allowPackage("com.sun.tools");   }   return defaultClassLoaderFactory.createFilteringClassLoader(getSystemClassLoader(),filterSpec); } 
isCompressionSupported(httpRequest) && !(httpResponse instanceof CompressionServletResponseWrapper) && !(httpResponse.getClass().getSimpleName().startsWith("Compression"))
expected.getAll()
params.getSimulatedPlatformVersion()
MavenHelpers.getOrCreateElementBuilder(build,"from")
StringBuilder newKeys=new StringBuilder(); 
busHandler.pushExpectedEvents(NextEvent.CHANGE,NextEvent.INVOICE,NextEvent.NULL_INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
old + 23
Log_OC.e(TAG,"Trying to send a NULL OCFile")
PsiTreeUtil.getParentOfType(location.getPsiElement(),PyElement.class,false)
_buildTemplateWithGradle("content-targeting-tracking-action","tracking-dependency-management","--dependency-management-enabled")
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","A a.txt")
handoffExecutor != null
loadingFinished || loader.isLoading()
downloaderProvider.downloadPart(fileUrl,fileOffset,blockSize,fileReference.getFileSize(),new FileDownloadCallback(){   @Override public void onDownloaded(  final byte[] data){     self().send(new Runnable(){       @Override public void run(){         downloaded++;         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " completed");         }         if (!outputFile.write(fileOffset,data,0,data.length)) {           reportError();           return;         }         currentDownloads--;         reportProgress(downloaded / (float)blocksCount);         checkQueue();       }     } );   }   @Override public void onDownloadFailure(){     self().send(new Runnable(){       @Override public void run(){         if (LOG) {           Log.d(TAG,"Download part #" + blockIndex + " failure");         }         reportError();       }     } );   } } )
hidePrivateMembers=false
Math.max(leftLen,rightLen)
log.debug("Can not check and authorize " + user.getName() + " due to "+ e.toString(),e)
event.getRawX()
MARKER_FILE_VERSION=3
getLookupString()
~(1L << n)
shouldPause.or(this::shouldPauseOnTargetNodeJobsCounter)
KotlinFacetSettingsProvider.Companion.getInstance(myProject).getInitializedSettings(getModule())
new Duration(TimeUnit.MILLISECONDS,CREATED_EXPIRY_TIME_IN_MSEC)
driver.evaluate(threadId,frameIndex,stringExpression)
FileTime.fromMillis(1)
pending.get()
prefs.getBoolean("manage_system",false)
Assertions.checkArgument(isTopLevelSource,"AdsMediaSource must be the top-level source used to prepare the player.")
_traceInfo.get(key)
new OptiqSemanticException("Invalid Column Reference: " + grpbyExpr.dump())
PortletLocalServiceUtil.getPortletById(portletDataContext.getCompanyId(),portletId)
ONE_MINUTE=1800
DRAGGING_ANIMATION_TIME=1200f
new Byte(getByteValue(workingMemory,object))
new RelationshipLinkbackStage(topic,config,neoStore.getRelationshipStore(),nodeRelationshipCache,nextRelationshipId,relationshipStage.getNextRelationshipId(),true)
Math.abs(path.getDistance() - tmpDist) > 5
IOException e
Map.class
Timber.e(errorMsg)
"no".equals(chWeightingsStr) || "false".equals(chWeightingsStr)
new RepositoryElementsManager(psiManager,myRepositoryManager)
new ImportControl(pkg,regex)
id=19911
LOG.info("Heart rate: " + heartRate)
activity.getMyApplication().getSettings().MAP_EMPTY_STATE_ALLOWED
@Override public T dependsOnModules(String... dependencyArtifactIds){   backingModule.dependsOnModules(dependencyArtifactIds);   return t(); } 
new Point(6,4)
_assertAttibutes(sourcesJSONArray.getJSONObject(1),200,50)
constraint.hasCondition()
!mapServiceContext.hasRegisteredListener(mapName)
GitBekParentFixer.prepare(myProject,root,this)
file.getFileNameOnly()
checkFalsified(listsOf(doubles()),l -> isSorted(l.stream().sorted().collect(Collectors.toList())),28)
Simple.forClass(MutableList.class)
H2O.waitForCloudSize(x,30000)
isTerminated()
LinkedHashSet<PyType>
e.getMessage().equals("Error decoding XML-RPC response")
-StringUtil.notNullize(name1).compareToIgnoreCase(StringUtil.notNullize(name2))
assertFalse(blockDirectory.isBlockCacheWriteEnabled())
getLogger().debug("Building MavenProject instance: " + mavenProject)
getLogger().debug("Scanning for extensions: " + mavenProject)
ConcurrentLRUCache<String,Long>
exclude.hashCode()
position >= 0
new WorldDataHolder(worldNameLowered)
fix.android.opengl.GLES20.glVertexAttribPointer(maVelocityHandle,3,GLES20.GL_FLOAT,false,0,0)
sourceObject instanceof PostgreProcedure || sourceObject instanceof PostgreTrigger || sourceObject instanceof PostgreViewBase
-v1
ListeningPoint.TCP.equalsIgnoreCase(transport) || ListeningPoint.TLS.equalsIgnoreCase(transport)
Boolean.parseBoolean(getOptional("kylin.htrace.show-gui-trace-toggle","false"))
battery.addPower(Math.min(target,battery.getCapacity() - battery.getStored()),false)
context.getRuntime().getNil()
JSParameterTableModel.createInitializerCellFragment("",createFakeClass(),JavaScriptSupportLoader.ECMA_SCRIPT_L4)
startServer(new HttpServlet(){   @Override protected void doGet(  HttpServletRequest req,  HttpServletResponse resp) throws ServletException, IOException {     if (req.getHeader("Via") != null)     resp.addHeader(PROXIED_HEADER,"true");     if (target.equals(req.getRequestURI())) {       if (query.equals(req.getQueryString())) {         resp.setStatus(200);         return;       }     }     resp.setStatus(404);   } } )
screenX != 0 || screenY != 0
@Override public Variable emitBitCount(Value operand){   Variable result=newVariable(LIRKind.derive(operand).changeType(Kind.Int));   if (operand.getKind().getStackKind() == Kind.Int) {     append(new SPARCBitManipulationOp(IPOPCNT,result,asAllocatable(operand),this));   }  else {     append(new SPARCBitManipulationOp(LPOPCNT,result,asAllocatable(operand),this));   }   return result; } 
MockWeakReference<Object>
Settings.Global.getInt(getContext().getContentResolver(),Settings.Global.NETWORK_WATCHLIST_ENABLED,1)
var.setValueType(guessType(value))
mAttributes.getAllFlags()
JDBCUtils.safeGetStringTrimmed(dbResult,"SOURCESCHEMA")
public Order mapLine(FieldSet fieldSet,int lineNum){   Order order=new Order();   order.setOrderId(fieldSet.readLong(ORDER_ID_COLUMN));   order.setOrderDate(fieldSet.readDate(ORDER_DATE_COLUMN));   return order; } 
executing != null && (executing.getFlags() & JobInfo.FLAG_WILL_BE_FOREGROUND) == 0
connectionManager.write(getName(),new SyncOperation<V,V>(){   @Override public V execute(  RedisConnection<Object,V> conn){     return conn.blpop(unit.toSeconds(timeout),getName()).value;   } } )
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENT_DETAILS))
editorFactory.createViewer(historyDocument,getProject(),EditorKind.CONSOLE)
NoteDrawerCategoryAdapterViewHolder holder; 
process == null || !process.willAutoInsert(AutoCompletionPolicy.SETTINGS_DEPENDENT,result.getPrefixMatcher())
new VectorDrawableAnimatorUI(this)
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaConstant.MethodType.ofLoaded(loadedMethodType)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
itemRenderer.func_82406_b(fontRenderer,mc.renderEngine,item,cornerX + x,cornerY + y)
needsUpdate || stepping || paused
public Long getIndex(){   return index; } 
selectedPageLabel_.addClassName("selected")
getWrapper(rightRedirect)
lockMode == InodeTree.LockMode.READ
FieldAccess.forField(implementationTarget.getInstrumentedType().getDeclaredFields().filter(ElementMatchers.named(FN_DELEGATE_FIELD_NAME)).getOnly()).write()
assertCorrectionsByOrder(rule,"Rytmus","Rhythmus","Remus")
serialVersionUID=1164829031
StringUtils.escapeForHtml(text,false)
expandableView.getIntrinsicHeight()
raw.getOutParameters()
/**   * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.  * @param key  * @return value of the key  */ V load(K key); 
new ResultSetIterator(conn,generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())
threadSafe=true
synchronized (CONFIG) {   ++threadCount;   if (session == null) {     try {       options=BigtableOptionsFactory.fromConfiguration(CONFIG);       session=new BigtableSession(options);       client=session.getDataClient();     }  catch (    IOException e) {       throw new DBException("Error loading options from config: ",e);     }   }  else {     client=session.getDataClient();   }   if (clientSideBuffering) {     heapSizeManager=new HeapSizeManager(Long.parseLong(getProperties().getProperty(ASYNC_MUTATOR_MAX_MEMORY,Long.toString(AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT))),Integer.parseInt(getProperties().getProperty(ASYNC_MAX_INFLIGHT_RPCS,Integer.toString(AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT))));     asyncExecutor=new AsyncExecutor(client,heapSizeManager);   } } 
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package has a different signature: " + pkgName)
poList[2]
KieSessionModel kSessionModel
field.getType().toJavaName()
KotlinTestUtils.navigationMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt")
name.equals("getSimCountryIso") || name.equals("gsm.sim.operator.iso-country")
assertDurationAround(startedAtDate - firstLogDate,38_000)
private final ProjectionsFactory projections=new ProjectionsFactory(Module.HQL,getTarget()){   @Override public <A,Q extends SimpleExpression<A>>Collection<Expression<?>> list(  ListPath<A,Q> expr,  ListExpression<A,Q> other,  A knownElement){     return Collections.<Expression<?>>singleton(expr.size());   } } ; 
mService.mAppTransition.isTransitionSet()
byteBuddy.subclass(InstanceCreator.class).method(not(isDeclaredBy(Object.class))).intercept(MethodDelegation.toConstructor(dynamicUserType)).make().load(dynamicUserType.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
assertEquals("Response header " + name,value,result.getResponse().getHeader(name))
myNameDefiners == null
dgtest <= 0
x509ExtendedTrustManager.checkClientTrusted(chain,authType,engine)
this.configuration.getMappedStatement(id,false)
new AsyncDispatch<MethodInvocation>(executor,new FailureHandlingDispatch<MethodInvocation>(new ReflectionDispatch(targetObject),failureHandler),Integer.MAX_VALUE)
invokerFilterHelper.destroy()
_start >= 0
mActionBar != null && mActionBar.isOverflowReserved()
log.debug("Error invalidating SSH tunnel",e)
super.hashCode()
i <= size
new DefaultSerializer<ModuleSource>(ModuleSource.class.getClassLoader())
new ClassWriter(ClassWriter.COMPUTE_MAXS)
other.getLimit()
!"".equals(textArr[10])
Long.parseLong(time)
LOG.debug("Failed to get mount information: {}",e.getMessage())
Outcome.noMatch("missing database driver " + driverClassName)
JournalArticleLocalServiceUtil.addArticle(userId,groupId,0,0,0,journalArticleId,false,JournalArticleConstants.VERSION_DEFAULT,getMap(articleDefaultLocale,title),descriptionMap,content,ddmStructureKey,ddmTemplateKey,StringPool.BLANK,1,1,2010,0,0,0,0,0,0,0,true,0,0,0,0,0,true,indexable,smallImage,smallImageURL,null,new HashMap<String,byte[]>(),StringPool.BLANK,serviceContext)
hl[]
maxTotalConnections <= 0
SourceStreamT[]
new CargoWithHistoryDTO(cargo.trackingId().idString(),cargo.origin().unLocode().idString(),cargo.finalDestination().unLocode().idString(),StatusCode.CLAIMED,"AAAAA","BALO")
myTemplatesMap.get(fullUrl)
startingWindow != null && ttoken.startingView != null
FLYING(0f,4f,true,false,false,3f,true)
old + 9
this.keycloakSession.users().getServiceAccount(clientModel)
c == Byte.class || c == Byte.TYPE
blockUri.getIdentifier().toLowerCase()
CellNames.simpleDense(SuperColumns.scName(name))
tmpnames[i]
new FrameTask.DataInfo(train,1,false,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE)
endpoint.setDataSource(target)
(Number)array[this.index]
CharSequence channel
private final QSDetailClipper mClipper; 
setTimeToIdleSeconds(Long.valueOf((String)cacheSettings.get("timeToIdleSeconds")).longValue())
Assert.assertEquals(8,resources.size())
RedisSessionExpirationPolicy.class
ISOChronology.getInstance(PARIS)
(this.getExecContext().getLocalWork() != null && this.getExecContext().getLocalWork().getInputFileChangeSensitive()) && mapJoinTables != null
!ExternalSystemApiUtil.isOneToOneMapping(project,projectDataNode.getData())
Color.fromRGB(0x287697)
OUTPUT_SLOT_INVENTORY_INDEX=2
monochrome=false
PRESSED_STATE_DURATION=64
new XValueChildrenList(myVariables.size())
protected Block createSimpleChild(final ASTNode child,final Indent indent,final Wrap wrap,final Alignment alignment){   return new XmlBlock(child,wrap,alignment,myXmlFormattingPolicy,indent,null,isPreserveSpace()); } 
XContentType.SMILE.mediaType()
IccUtils.cdmaBcdByteToInt((byte)0x8c)
getValidator().call(result)
this.restTemplate.postForEntity(webhookUrl,message,Void.class)
ActorSDK.sharedActor().style.getTextPrimaryInvColor()
meta.getColumnLabel(i)
sceneCam.getDirection(vars.vect6)
listener.iterationDone(policyNet,policyIterationCount,policyEpochCount)
log.debug("Can't set transaction isolation level",e)
declarationDescriptors == null
prefSize(new Fixed(width),new Fixed(height))
DirectoryReader.openIfChanged(reader)
lastPos < mTargetPos
new DefaultConfiguration(new DefaultConnectionProvider(connection),null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
MavenLog.LOG.info(e)
isClosed.get()
FindByIndexNameSessionRepository<S>
postfix.equals("id")
batch.getMutations(keyspace,clientState,variables)
encodeMapValue(value)
moduleBuilder.addSourceRoot(SOURCE_DIR)
gran.next(input)
super.execute(executor,processStarter,patchers)
method.invoke(node)
classes.addAll(defaultCastorList)
new URI(sb.toString(),false)
hasCdmaDataConnectionChanged || hasNetworkTypeChanged
pyClass.findClassAttribute(PyNames.DUNDER_METACLASS,false)
@SkipWhenEmpty
checksums(sourceSyncFile)
ObjectUtils.tryCast(myContentElementType,IFileElementType.class)
Watcher<DeploymentConfig>
configureReadBufferForWrite()
sr0.getValue().f2
Throwable ignored
getOverrideConfiguration()
Thread.sleep(0,1)
endIndex > value.length()
KafkaEightFirehoseFactory.class
max() < 32
op == ASSIGN || op == ASSIGNMENT_OPERATOR
nonce.timeStamp <= now
uncompressedProto.length < 2500000
new NullSafeComparator<>(comparator,true)
Throwable e
MAX_STATUS_WIDTH=7
List<Item>
QueryBuilder.stripQuotes(autoIncrementDefinition.columnName)
timeNanos >= DateTimeUtils.NANOS_PER_DAY
assertMockEndpointsSatisfied(30,TimeUnit.SECONDS)
myFile.getPath()
expectedCountsForADoc(weights,e4Update,ind)
mRouter.selectRouteInt(mRouteTypes,route)
public <A>SubType leftJoin(Expr<A> entity,Iterable<A> col){   query.alias(entity,col).leftJoin((Expr<?>)entity);   return self; } 
invalidateOptionsMenu()
tmpHopp.getGraphHopperStorage()
toolWindow.setContentUiType(ToolWindowContentUiType.COMBO,null)
mySchedulesQueue.setPassThrough(false)
FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP=5
new StreamException(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame,stream.getIdentifier().intValue())
System.arraycopy(cur,i + 1,ret,i,N - i - 1)
cluster.getTypeFactory().createSqlType(SqlTypeName.DECIMAL,unscaled.toString().length(),bd.scale())
EditText croutonDurationEdit=(EditText)findViewById(R.id.edit_text_duration); 
new CaptureStrategy(true,"com.zhihu.matisse.sample.fileprovider","test")
expectedType.equivalent(schema.getField(field).getType(),Schema.EquivalenceNullablePolicy.IGNORE)
JobQueueUtils.getFeedbackQueueName(jobClientNodeGroup)
ModalityState.any()
Thread.sleep(1)
cam.getDirection().mult(5)
(CacheEntryEventFilter)in.readObject()
TypeRemapper.createFrom(typeRemapper,additionalTypeMappings,isInliningLambda && !this.isInliningLambda)
/**   * called by handle  */ public static String coerceToString(Object o){   return o.toString(); } 
(dispatcherMapping & ERROR) != 0
UADEntityAggregator::getApplicationName
Long.valueOf(p.getProperty("numberid.id"))
new InfoData(null,awayMsg,MY_CAPS,null)
new Documentation(__ -> Optional.empty(),__ -> Optional.empty(),null,null,null,null)
exists
apk.getUrl()
LOGGER.warn("Could not parse URL",nfe)
ClassUtil.verifyMustOverride(BeanSerializerFactory.class,this,"withConfig")
lastPos > mBoundPos
NODE_ADMIN_LOGGER.error("Failed to create HTTP client with custom SSL Context, proceeding with default",e)
new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Error Instantiating " + msg + ", "+ className+ " failed to instantiate "+ cast.getName(),e,false)
new FileHyperlinkRawData("/home/karma-chai-sample/test/test.js",0,-1,3,s.length())
!paused.get()
CollectionResult<Tuple>
credentials.getPassword()
buildMode.getBuildMode()
speed=4.2f
resp.setHeader("Access-Control-Allow-Credentials",credentials)
input.getCharSequence(action)
PromotionMessageDTO promotionMessage=(PromotionMessageDTO)input; 
writerNotify.wait(1000)
l.contains("</pre>")
schematicEntity.buildWithoutChecks(localWorld,FakeWorld.BLUEPRINT_OFFSET)
CalendarLocalServiceUtil.updateCalendar(existingCalendar.getCalendarId(),calendar.getNameMap(),calendar.getDescriptionMap(),calendar.getTimeZoneId(),calendar.getColor(),calendar.isDefaultCalendar(),calendar.isEnableComments(),calendar.isEnableRatings(),serviceContext)
JsonNode::isNumber
!getInstance(project).ensureFilesWritable(files).hasReadonlyFiles()
Variable emitCompareAndSwap(Value address,Value expectedValue,Value newValue,Value trueValue,Value falseValue); 
connector.apply(context)
dist == 0 || dist > p.dist
myModuleBuilder.modifyProjectTypeStep(settingsStep)
session.sessions().createUserSession(adminRealm,admin,"user",null,"form",false,null,null)
getMyApplication().getSettings().getLastKnownMapLocation()
new Color(0xbfbfbfff)
ColorProperties.getColor("desktopBackgroundColor")
node.getStarNode()
mIsMainPageLoader && mIsMainResourceLoader && mUserGesture&& Pattern.matches(XML_MIME_TYPE,mMimeType)&& !mMimeType.equalsIgnoreCase("application/xhtml+xml")
Disposer.register(myProject,myDisposable)
nameResolver.generatedTypeNameOf(referenceElement).orElseThrow(IllegalStateException::new)
newDecl.isNovel()
assertThat(pod).hasName(expectedId)
flushStatements(true)
/**   * Saves the  {@link CacheWriteEntry}.  * @param cacheWriteEntry the {@link CacheWriteEntry}  * @return the {@link CacheReadEntry} for the written {@link CacheWriteEntry}  * @throws IOException if an I/O exception occurs  */ CacheEntry write(CacheWrite cacheWrite) throws IOException ; 
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PROVIDERS_ENABLED,0,null,false)
sizeModeClass.equals("ProportionalSizeMode")
time.put(current)
myInjectedFile.getVirtualFile()
filename == null || filename.trim().equals("")
position.set(0,0,mRight - mLeft,mBottom - mTop)
globalScheme.getAttributes(DiffColors.DIFF_DELETED).getErrorStripeColor()
((BufferControl)ctl).setBufferLength(30)
mBiometricUnlock.stop()
storedOverlayInfos.valueAt(i)
new LabelSet.ArrayBasedLabelSet(labels)
/**   * {@inheritDoc}  */ @Override public StringProperty clone(){   StringProperty prop=(StringProperty)super.clone();   prop.value=value;   return prop; } 
new EntitlementUserApiException(ErrorCode.ENT_INVALID_REQUESTED_DATE,now.toString(),requestedDate.toString())
List<Callable<HTTPSampleResult>>
limitOrder.getOriginalAmount()
methodFlatteningResolver.hashCode()
BED(355)
i=0
u.isUnknownType() || u == Indexer.idx.builtins.None
JSONValue.parseWithException(isr)
object1.getName()
EventLog.writeEvent(EventLogTags.NOTIFICATION_CANCEL_ALL,pkg,mustHaveFlags,mustNotHaveFlags)
V
mActionBarTop.getVisibility() != GONE
Assert.assertEquals(46,classes.size())
vf != null && !vf.isDirectory()
Foundation.log("[debug] " + tag + ": "+ message)
args.length == 2
file == null || file instanceof PsiCompiledElement
public Customer mapLine(FieldSet fieldSet,int lineNum){   Customer customer=new Customer();   if (Customer.LINE_ID_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setCompanyName(fieldSet.readString(COMPANY_NAME_COLUMN));     customer.setRegistered(true);   }   if (Customer.LINE_ID_NON_BUSINESS_CUST.equals(fieldSet.readString(LINE_ID_COLUMN))) {     customer.setLastName(fieldSet.readString(LAST_NAME_COLUMN));     customer.setFirstName(fieldSet.readString(FIRST_NAME_COLUMN));     customer.setMiddleName(fieldSet.readString(MIDDLE_NAME_COLUMN));     customer.setRegistered(TRUE_SYMBOL.equals(fieldSet.readString(REGISTERED_COLUMN)));   }   customer.setRegistrationId(fieldSet.readLong(REG_ID_COLUMN));   customer.setVip(TRUE_SYMBOL.equals(fieldSet.readString(VIP_COLUMN)));   return customer; } 
Collections.emptyList()
_imageTrain.loadParam(networkParms)
verifyPosition(decoder,binary("02080000251848470afa010262daa690013aa4046da83745f8812560df010001126a"))
framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)
StringBuilder sb=new StringBuilder(100); 
new Composite(wTabFolder,SWT.NONE)
additionalProperties.put(DATE_FORMAT,defaultDateFormat)
typeSettingsProperties.toString()
telephony.isRinging(getOpPackageName())
Boolean.TRUE.equals(getAttribute(CASE_INSENSITIVE))
fontBuffer != null && fontBuffer.capacity() > 0
SYNC_OK=0
catalog.getStyleByName(info.getWorkspace(),info.getName())
beansXml.getOrCreateAlternatives()
GridFailFastNodeFailureDetectionSelfTest.class
mode == Mode.COMPILED || mode == Mode.ROOTS
buildVersion=5
internalRemoveChild((Object3D)tasks[i],AFrameTask.UNUSED_INDEX)
buffer.toByteArray()
i >= size
cs[c].setNA(r)
target.getShortNameOnly()
setBuffer(Type.Index,2,new short[]{0,1})
c.getParent() != originalParent
mTfs.setPin(mTfs.open(path),true)
Math.min(m,s.size())
!location.isConstant() || location.asConstant().isNull()
poi_tag != null && poiParentCategory.length() > 0
!expectedItemClass.isAssignableFrom(baseItem.getClass())
logger.fine(String.format("emitting packet with ack id %d",ids))
new ConfigRepoConfig(new GitMaterialConfig("https://github.com/tomzo/gocd-indep-config-part.git"),"myplugin","id2")
engine.execute(query).dumpToString()
initiator == HttpSender.CHECK_FOR_UPDATES_INITIATOR || initiator == HttpSender.AUTHENTICATION_INITIATOR
origin.realComponent().doubleValue() >= other
UpgradeStepRegistrator.class
public Trade read() throws Exception {   if (counter < limit) {     counter++;     return new Trade("isin" + counter,counter,new BigDecimal(counter),"customer" + counter);   }   return null; } 
reason != null && !UploadService.hasInProgressMediaUploadsForPost(post)
60 * 1000
listView.setSelectionFromTop(checkedItem,a.getDimensionPixelSize(R.styleable.AlertDialog_selectionScrollOffset,0))
KotlinBuiltIns.getInstance().isExactFunctionOrExtensionFunctionType(type)
variableIdentifier instanceof PsiIdentifier
ckj * (-puf)
-1072268288
routes.IndicesResource().delete(index)
@GUIMenuSortOrder(1)
LinkedList<String>
r.getRequest(false)
this.messageService.fluxPostAuthorizeFindById(1L).subscriberContext(withUser)
ArrayInjectorTest.class
getFragmentManager()
matrix.preApply(transform)
arguments.setSourceMapBaseDirs(sourceMapSourceRoots.toString())
new WorkflowException("Unable to lock workflow task " + workflowTaskInstanceId,pe)
lastJetty.toString()
return batchSize; 
offset < range.getEndOffset()
getUserBadgedIcon(dr,new UserHandle(mContext.getUserId()))
ImmutableList.of("jinput.jar","lwjgl.jar","lwjgl_util.jar","rt.jar")
fMethodDescriptions.putIfAbsent(method,description)
keyCode == KeyEvent.KEYCODE_SEARCH && event.getRepeatCount() < 1
addGroupedInterceptor(filter,interceptorClassName,null,group,executionPolicy)
String.format("Keyspace mismatch (found %s; expected %s)",cf_def.keyspace,ksName)
((IWorkbenchPropertyPage)prefPage).setElement(originalDataSource)
IOUtils.close(reader,w,dir,analyzer)
timeout=300000
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
s.cancel()
public void runMayThrow() throws ExecutionException {   if (Schema.instance.getKSMetaData(mutation.getKeyspaceName()) == null)   return;   if (clr.pointInTimeExceeded(mutation))   return;   final Keyspace keyspace=Keyspace.open(mutation.getKeyspaceName());   Mutation newMutation=null;   for (  PartitionUpdate update : clr.replayFilter.filter(mutation)) {     if (Schema.instance.getCF(update.metadata().cfId) == null)     continue;     ReplayPosition rp=clr.cfPositions.get(update.metadata().cfId);     if (segmentId > rp.segment || (segmentId == rp.segment && entryLocation > rp.position)) {       if (newMutation == null)       newMutation=new Mutation(mutation.getKeyspaceName(),mutation.key());       newMutation.add(update);       clr.replayedCount.incrementAndGet();     }   }   if (newMutation != null) {     assert !newMutation.isEmpty();     Uninterruptibles.getUninterruptibly(Keyspace.open(newMutation.getKeyspaceName()).applyFromCommitLog(newMutation));     clr.keyspacesRecovered.add(keyspace);   } } 
View tv=getChildAt(LAST_OBJECT_IN_STACK); 
Assert.assertEquals(1,configs.size())
child2.setBytes(200L)
skyDaylightBrightness=0.6f
bdtemp.doubleValue()
regionUrl != null && ec2 != null
assertEquals("val-1",mock.getExchanges().get(0).getIn().getBody(String.class))
public T setStandardOutput(OutputStream outputStream){   operationParamsBuilder.setStdout(outputStream);   return getThis(); } 
topLevelEditor.getDocument()
event.getParent()
getCamelContext().getTypeConverter().convertTo(int.class,timeout)
CaseInsensitiveString pipelineName
_matcher.group(1)
texCoordIdx >= 2
commandExecutor.evalWriteAsync(getName(),codec,EVAL_CONTAINS_VALUE,"local s = redis.call('hgetall', KEYS[1]); " + "for i, v in ipairs(s) do " + "if i % 2 == 0 then "+ "local t, val = struct.unpack('dLc0', v); "+ "if ARGV[2] == val then "+ "local key = s[i-1];"+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], key); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return 0;"+ "end; "+ "return 1; "+ "end; "+ "end; "+ "end;"+ "return 0;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),value)
public Object execute(Context context){   KieSession ksession=((KnowledgeCommandContext)context).getKieSession();   if (this.outIdentifier != null) {     ((StatefulKnowledgeSessionImpl)ksession).getExecutionResult().getResults().put(this.outIdentifier,object);   }   ksession.setGlobal(this.identifier,this.object);   return null; } 
method.getMessageType()
DEFAULT_VIRTUAL_DISPLAY_HEIGHT=1800
mavenBundle().groupId("org.conscrypt").artifactId("conscrypt-openjdk-uber").versionAsInProject()
vb.getData() != null && vb.getUsage() != VertexBuffer.Usage.CpuOnly
mCanSeekBack=mCanSeekForward=true
beanDefinition.isAbstract() || beanDefinition.isLazyInit()
case 3: 
cacheSkipStore.removeAll(data.keySet())
System.currentTimeMillis()
watching != null && watching.movie != null
StatBuckets.prettyUptimeStr(secs)
this.messageService.monoPreAuthorizeBeanFindById(1L).subscriberContext(withUser)
/**   * Visits the specified list result.  * @param listResult the list result  * @return the result of the visit  */ T visitListResult(ListResultData listResult); 
new CacheWriterException("Failed to remove object: " + key,e)
user2.id()
dlFileEntryFinder.filterFindByG_U_F_M(groupId,0,folderIds,mimeTypes,queryDefinition)
new ArrayList<RowSorter.SortKey>(1)
supportSession=false
logger.error("Failed to evaluate permissions",cause)
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/idea-completion/testData/basic/common/staticMembers"),Pattern.compile("^(.+)\\.kt$"),true)
from("direct:c").delay(1000)
Formatter.getInstance().createContinuationIndent()
httpResponseCode != 204
"Unable to get queryfields for SQL: " + Const.CR + sNewSQL
assertPhoneNumberNotEqual("123123","0123123",false)
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.","Ursache waren die hohe Arbeitslosigkeit und die Wohnungsnot.","Ursache waren unter anderem die hohe Arbeitslosigkeit und die Wohnungsnot.")
result.whenComplete((StateResponse.Builder responseBuilder,Throwable t) -> outboundObserver.onNext(t == null ? responseBuilder.setId(request.getId()).build() : createErrorResponse(request.getId(),t)))
DEFAULT_PERIOD_MS=60_000L
log.info("Reset to factory defaults : onNextDropped")
ModuleIdentifier.fromString(moduleName)
/**   * Returns the error code.  * @return The error code.  */ public Integer getErrorCode(){   return _errorCode; } 
!val
usr.getUUID().equalsIgnoreCase(usr.getLastName())
new ClassicTableTypeMapping()
toPatterns("gradle-core","gradle-cli","slf4j-api","logback-classic","logback-core","jul-to-slf4j")
ImmutableList<String>
group.getGroupId()
LOG.error("Cannot close the writer for {}",recordPathTemp,e)
DateTieredCompactionStrategyOptions.class
QueryProcessor.executeInternal("SELECT * FROM cql_keyspace.table2;")
XMLRPCClient.parseXMLRPCResponse(is,null)
/**   * Helper method, has same effect as <pre>return enhance(cls, interfaces, ih, null, null);</pre>  * @see #enhance(Class,Class[],MethodInterceptor,ClassLoader,Method,MethodFilter)  */ public static Factory enhance(Class cls,Class interfaces[],Callback callback){   return enhanceHelper(cls,interfaces,callback,null,null); } 
currentCountry.getCountryShortName()
logger.info("failed indexing {}",e,i)
create().select(t1,t2,t3,t4,t6,t7,t8,t9,ta,tb)
typeLength == 0 && tnf != NdefRecord.TNF_UNKNOWN
ImmutableList.of("/bin/bash","-e","-c",bash)
hasColumn("KBTemplate","cacheable")
jscx.initStandardObjects(null,false)
SystemKeyspace.removeEndpoint(DatabaseDescriptor.getReplaceAddress())
!swapEnabled
dest.writeInt(mSubId)
new SimpleDateFormat("dd-MMM-yyyy",Locale.US)
items[17]
Math.min(1 << (pulseCount - 1),64)
focused == null || focused == root
NativeLibraryHelper.Handle.create(pkg)
model.getName()
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest {   @Test public void testReadYourWritesBySize() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     final ReplicatedMap<Integer,Integer> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<Integer,Integer> map2=instance2.getReplicatedMap("default");     HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();     final int count=100;     for (int i=0; i < count; i++) {       map.put(i,i);     }     map1.putAll(map);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(count,map1.size());         assertEquals(count,map2.size());       }     } );   }   @Test public void testReadYourWritesByGet() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByGet(instance2,map1,i);       assertReadYourWriteByGet(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsKey(instance2,map1,i);       assertReadYourWriteByContainsKey(instance1,map2,i);     }   }   @Test public void testReadYourWritesByContainsValue() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory();     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     HazelcastInstance instance2=nodeFactory.newHazelcastInstance();     ReplicatedMap<String,Integer> map1=instance1.getReplicatedMap("default");     ReplicatedMap<String,Integer> map2=instance2.getReplicatedMap("default");     for (int i=0; i < 1000; i++) {       assertReadYourWriteByContainsValue(instance2,map1,i);       assertReadYourWriteByContainsValue(instance1,map2,i);     }   }   private void assertReadYourWriteByGet(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertEquals(value,(int)map.get(key));   }   private void assertReadYourWriteByContainsKey(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsKey(key));   }   private void assertReadYourWriteByContainsValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     generateKeyAndPutValue(instance,map,value);     assertTrue(map.containsValue(value));   }   private String generateKeyAndPutValue(  HazelcastInstance instance,  ReplicatedMap<String,Integer> map,  int value){     String key=generateKeyOwnedBy(instance);     map.put(key,value);     return key;   } } 
log.info("Hooking new default : onOperator")
CopyOnWriteArrayList<MessageListener<Object>>
sharedElements.get(localName)
mContentView.findViewById(android.R.id.list)
private String getAndroidManifest(String aarImport) throws Exception {   return getConfiguredTarget(aarImport).getProvider(AndroidResourcesProvider.class).getDirectAndroidResources().toList().get(0).getManifest(); } 
getBackgroundLocalFileFetchToEncodeMemorySequence()
body.toByteArray()
sLon == null || "".equals(sLon)
Object model
mUndoBarHideListener.onUndoBarHide(mUndoToken == null)
new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").layer("0",new DenseLayer.Builder().nOut(10).build(),"in1").layer("1",new DenseLayer.Builder().nOut(10).build(),"in2").layer("2",new DenseLayer.Builder().nOut(10).build(),"0").layer("3",new DenseLayer.Builder().nOut(10).build(),"1").layer("4",new DenseLayer.Builder().nOut(10).build(),"1").layer("5",new DenseLayer.Builder().nOut(10).build(),"1").layer("6",new DenseLayer.Builder().nOut(10).build(),"2","3","4","5")
id=10809
new StandardTypeConverter(conversionService)
PsiTreeUtil.instanceOf(instruction.getElement(),PyStatementList.class)
TAuthor_ID()
privObj.getObjectName().equals("masking_test_druid") || privObj.getObjectName().startsWith("masking_test_druid_n")
IndexReader.open(spellindex)
/**   * Represents the default formatter for log message. Default log message format is: [SEVERITY LEVEL] filePath:lineNo:columnNo: message. [CheckName]  * @author Andrei Selkin  */ public class AuditEventDefaultFormatter implements AuditEventFormatter {   /**   * Length of all separators.   */   private static final int LENGTH_OF_ALL_SEPARATORS=10;   /**   * Suffix of module names like XXXXCheck.   */   private static final String SUFFIX="Check";   @Override public String format(  AuditEvent event){     final String fileName=event.getFileName();     final String message=event.getMessage();     final SeverityLevel severityLevel=event.getSeverityLevel();     final String severityLevelName;     if (severityLevel == SeverityLevel.WARNING) {       severityLevelName="WARN";     }  else {       severityLevelName=severityLevel.getName().toUpperCase(Locale.US);     }     final int bufLen=calculateBufferLength(event,severityLevelName.length());     final StringBuilder sb=new StringBuilder(bufLen);     sb.append('[').append(severityLevelName).append("] ").append(fileName).append(':').append(event.getLine());     if (event.getColumn() > 0) {       sb.append(':').append(event.getColumn());     }     sb.append(": ").append(message);     final String checkShortName=getCheckShortName(event);     sb.append(" [").append(checkShortName).append(']');     return sb.toString();   }   /**   * Returns the length of the buffer for StringBuilder. bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength.  * @param event audit event.  * @param severityLevelNameLength length of severity level name.  * @return the length of the buffer for StringBuilder.  */   private static int calculateBufferLength(  AuditEvent event,  int severityLevelNameLength){     return LENGTH_OF_ALL_SEPARATORS + event.getFileName().length() + event.getMessage().length()+ severityLevelNameLength+ getCheckShortName(event).length();   }   /**   * Returns check name without 'Check' suffix.  * @param event audit ivent.  * @return check name without 'Check' suffix.  */   private static String getCheckShortName(  AuditEvent event){     final String checkFullName=event.getSourceName();     final String checkShortName;     final int lastDotIndex=checkFullName.lastIndexOf('.');     if (lastDotIndex == -1) {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(0,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(0,checkFullName.length());       }     }  else {       if (checkFullName.endsWith(SUFFIX)) {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.lastIndexOf(SUFFIX));       }  else {         checkShortName=checkFullName.substring(lastDotIndex + 1,checkFullName.length());       }     }     return checkShortName;   } } 
ActivityLauncher.viewPostPreviewForResult(getActivity(),mSite,post)
TextSecureCommunicationFactory.createManager(context,e164number,password)
@Override public ExtendedCell deepClone(){   throw new UnsupportedOperationException(); } 
priority > 127
context.getContentResolver()
timeSinceFirst > DateUtilities.ONE_DAY * 3
new IndexWriter(dir2,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
Foundation.log("[info] " + tag + ": "+ message)
cacheScaled5.setColors(red)
final MediaDriverBroadcastReceiver mediaDriverBroadcastReceiver
new HazeNode(context,writeOnlyGBufferConfig,hazeIntermediateConfig,aLabel)
id=10851
config().getDouble(BASE_PATH + "tolerance")
new PyClassType(project,typeName,false)
buildChannelsUriForInput(inputId,false)
DirectoryReader reader2=DirectoryReader.openIfChanged(reader); 
invoiceDao.create(invoice,1,true,context)
AuthUI.getInstance().silentSignIn(this,getSelectedProviders()).addOnCompleteListener(this,new OnCompleteListener<AuthResult>(){   @Override public void onComplete(  @NonNull Task<AuthResult> task){     if (task.isSuccessful()) {       startSignedInActivity(null);     }  else {       showSnackbar(R.string.sign_in_failed);     }   } } )
application.getBaseContext()
twitter1.getRetweeterIds(1021608606934822912L,-1)
/**   * Represents an Eclipse-specific external artifact dependency.  * @since 2.14  */ @Incubating public interface EclipseExternalDependency extends ExternalDependency, HasClasspathAttributes { } 
LOG.debug(msg,e)
handleJAXBException(e,false)
myDetailsHolder.setPreferredSize(new Dimension(IdeErrorsDialog.COMPONENTS_WIDTH,internalMode ? 500 : 205))
Throwable ex
sizeChanged || creating || !mRtHandlingPositionUpdates
markerYear == currentYear || markerYear == 1970
count=1
(S)capability
animData == null || skeleton == null
TYPE_ATSC_M_H=0x00030300
assertEquals(4,response.getHits().size())
pos < size - 1 && CharacterHelper.charType(chars.charAt(pos),skipPunc) != CharacterHelper.charType(chars.charAt(pos + 1),skipPunc)
!(receiver instanceof GroovyObject) || ((GroovyObject)receiver).getMetaClass() != metaClass
createShrinkFadeOutFromBottomAnimation(mContentContainer,0,new AnimatorListenerAdapter(){   @Override public void onAnimationEnd(  Animator animation){     mPopupWindow.dismiss();   } } )
doneAdvance(mark(),KEY)
Log.d(TAG,status)
System.err.println(s)
editorFactory.create("simple",getTerminal(),System.in,System.out)
(data + increment) % 4
List<T>
createInstanceOn(event)
this.getTheSocket()
new LongObject(300000000l,"foobar")
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
bitmap.getRowBytes()
layer.mDrawable == null && (layer.mThemeAttrs == null || layer.mThemeAttrs[R.styleable.LayerDrawableItem_drawable] == 0)
bundlesMap.getBundle(module)
previousTypeSettingsProperties.toSortedString()
assertEquals(156,map.getLocalMapStats().getHeapCost())
HashMap<Menu.Item,ZLApplication.Menubar.PlainItem>
stackIterator.remove()
getMockEndpoint("mock:start").expectedMinimumMessageCount(5)
thingType != null && thingType.getConfigDescriptionURI() != null
/**   * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.  * @param self          the proxy instance.  * @param thisMethod    the overridden method declared in the superclass or interface.  * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.  * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.  * @return              the resulting value of the method invocation.  * @throws Exception    if the method invocation fails.  */ Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Throwable ; 
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME,timestampMs,mPeriodicAlarmIntent)
a.length > count()
graphModel.isMixed()
"value".equals(key) || "weight".equals(key)
mRecyclerView.smoothScrollBy(hScroll,vScroll)
camelContext.getComponent(component,false)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"meminfo",pw)
UtilActivator.getSystrayService().checkInitialized()
UpgradeStepRegistrator.class
legacyValue.isDefined()
new IndexWriter(dir1,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
menu.findItem(R.id.menu_uncomplete_checklists).setVisible(false)
classNameLocalService.getClassNameId(className)
found != null && found.getElementType() == ElementType.XML_COMMENT_START
className.lastIndexOf(CONTROLLER_SUFFIX)
getLog().error(e.getMessage(),e)
return mappingDestFile; 
getContactType(getJsonString(email,"type"))
result.getType()
@NotNull ContainingClass owner
majorVersion < MSSQL_SERVER_VERSIONS.MSSQL2008
logger.error("An error occurred while executing a command: ",e)
!cncFile.exists() || cncFile.length() <= 0
registerError(elseToken,new DeleteElementFix(elseBranch))
model.getShadowConfig()
logger.fine(name)
showFullResult ? 999_999 : limit
!fixedValues
userQueryService.getUserNames(commentContent)
new EnterSelectionDialog(shell,err_lines,Messages.getString("SpoonLog.Dialog.ErrorLines.Title"),Messages.getString("SpoonLog.Dialog.ErrorLines.Message"))
args[0].trim().length() < 2
current != null && current.getTextLength() == 0
new ShareType(url,CLIPBOARD)
new RandomIndexWriter(random,dir,newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()))
type.mediaType()
waitUntilElement(feedbackText,"Feedback message should be present").is().visible()
!isNullOrEmpty(number)
parent.getChildPosition(v)
connectedHeaders.setVersion("1.1")
return 16; 
scheduler == null
testLogger.info("[v] Sync complete! The best block: " + bestBlock.getShortDescr())
"{{" + event + " to "+ focus+ " @ "+ time+ " lw="+ lastWin+ " lb="+ lastBinder+ " fin="+ finished+ " gfw="+ gotFirstWindow+ " ed="+ eventDispatching+ " tts="+ timeToSwitch+ " wf="+ wasFrozen+ " fp="+ focusPaused+ " mcf="+ curFocus+ "}}"
getCustomInitBinderArgumentResolvers()
Set<String>
user != null
buffersWrites() && (task=writeQueue().poll()) != null
ActivitySample activitySample
blog.getCapabilities() == null || !blog.getCapabilities().equals(capabilities)
urlString.lastIndexOf("/monitoring")
super.resolveLayoutDirection(layoutDirection)
InstanceCreationUtils.newInstance(view.getContext(),entry.getValue(),VIEW_DELEGATE_CONSTRUCTOR_SIGNATURE)
INVISIBILITY(14,PotionEffectType.INVISIBILITY,1)
sizeModeClass.equals("ScaledSizeMode")
mSplashScreen != null && mSplashScreen.getVisibility() == View.VISIBLE
i=3
request.getRemoteAddr()
BufferUtils.newUnsafeByteBuffer(fileSize)
Collections.sort(reflectionBackends,new Comparator<Nd4jBackend>(){   @Override public int compare(  Nd4jBackend o1,  Nd4jBackend o2){     return o2.getPriority() - o1.getPriority();   } } )
ChannelHandler handler=handler(); 
adapter.callback != null && getAdapterPosition() != RecyclerView.NO_POSITION
getLog().debug("Kotlin version " + KotlinCompilerVersion.VERSION + " (JRE "+ System.getProperty("java.runtime.version")+ ")")
/**   * @author Spencer Gibb  */ @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(classes=SpringDecoderTests.Application.class) @WebAppConfiguration @IntegrationTest({"server.port=0","spring.application.name=springdecodertest","spring.jmx.enabled=true"}) public class SpringDecoderTests extends FeignConfiguration {   @Value("${local.server.port}") private int port=0;   public TestClient testClient(){     return feign().target(TestClient.class,"http://localhost:" + port);   } protected static interface TestClient {     @RequestMapping(method=RequestMethod.GET,value="/hello") public Hello getHello();     @RequestMapping(method=RequestMethod.GET,value="/hellos") public List<Hello> getHellos();     @RequestMapping(method=RequestMethod.GET,value="/hellostrings") public List<String> getHelloStrings();   } @Configuration @EnableAutoConfiguration @RestController protected static class Application implements TestClient {     public Hello getHello(){       return new Hello("hello world 1");     }     public List<Hello> getHellos(){       ArrayList<Hello> hellos=new ArrayList<>();       hellos.add(new Hello("hello world 1"));       hellos.add(new Hello("oi terra 2"));       return hellos;     }     public List<String> getHelloStrings(){       ArrayList<String> hellos=new ArrayList<>();       hellos.add("hello world 1");       hellos.add("oi terra 2");       return hellos;     }     public static void main(    String[] args){       new SpringApplicationBuilder(Application.class).properties("spring.application.name=springdecodertest","management.contextPath=/admin").run(args);     }   }   @Test public void testSimpleType(){     Hello hello=testClient().getHello();     assertNotNull("hello was null",hello);     assertEquals("first hello didn't match",new Hello("hello world 1"),hello);   }   @Test public void testUserParameterizedTypeDecode(){     List<Hello> hellos=testClient().getHellos();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match",new Hello("hello world 1"),hellos.get(0));   }   @Test public void testSimpleParameterizedTypeDecode(){     List<String> hellos=testClient().getHelloStrings();     assertNotNull("hellos was null",hellos);     assertEquals("hellos was not the right size",2,hellos.size());     assertEquals("first hello didn't match","hello world 1",hellos.get(0));   } @Data @AllArgsConstructor @NoArgsConstructor public static class Hello {     private String message;   } } 
ast.createQueryTranslator(hql,hql,Collections.EMPTY_MAP,sessionFactory(),null)
in.readData()
SKELETONS_VERSION=4
aClass.findClassAttribute(name,true)
new AssertionError("failed to walk file tree starting at [" + shardLoc.toPath() + "]",e)
useEquals()
DEBUG_ADD_REMOVE=true
buffer.nextOneRow(changeColumns,true)
verifySorted(runSvn("status"),"","--- Changelist 'newOne':","M a.txt")
logger.error("failed to create index [{}]",t,indexMetaData.index())
initOpenSSLConfCmdCipher("CipherString",ENABLED_CIPHER,"MaxProtocol","TLSv1.2")
mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_BRIGHT || mDisplayPowerRequest.policy == DisplayPowerRequest.POLICY_VR
mOverlay != null && mBottomOverlay != null && mRotation != RotationUtils.getExactRotation(mContext)
factory.get(mResponseClass,NO_ANNOTATIONS,retrofit)
buffer[extLenIndex] << 8
generatePomXML(kfs,releaseId)
Mapper.class
callNode.call(getIndirectCallTarget(getContext(),function),arguments)
delegate.toJson(writer,new Envelope<>(value))
holder.textView.setBackgroundDrawable(mSelectedBackground)
File modSource
_resourceReferences.contains(file)
myTabs.isEditorTabs() && UISettings.getShadowInstance().getShowCloseButton() && hasIcons()
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())
new IndexWriter(ramDir,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
two.setAxisIndex(1)
"No class type found for " + classTypeName
return START_NOT_STICKY; 
mapper.getTypeFactory().constructType(AuthConfig.class)
addProperty(secondNode,"band","The Clash")
new TimeProfiler(LOG).setLevelToDebug()
mCallback.onInputUpdated(inputId)
public static IdeaTitledBorder createTitledBorderSimpleWithIndent(String title){   return new IdeaTitledBorder(title,UIUtil.getBorderFont(),UIUtil.getBorderColor(),15,1,new Insets(3,0,6,0)); } 
modulePropertyManager.setExternalModuleType(moduleType)
property("script",TypeEditor.TextAreaEditor)
lastVersionNumber + 1L
s5dir + ".dir"
sketchWidth < sketchWidth0
synchronized (this) {   return (Class[])classCache.values().toArray(new Class[0]); } 
assertLength(1,builder.getErrors())
match == null || predicate != null && !predicate.match(match,start,end,context)
new TileSourceManager.TileSourceTemplate(dir,dir.getName(),url)
tags[0]
cursor.getCurrentValueEndPosition()
JsonObject.createObjectMapper().getFactory()
logger.fine("Aliasing common strings")
new ProtoFile("descriptor.proto",null,NO_STRINGS,Arrays.asList("src/test/resources/unittest_import.proto"),NO_TYPES,NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
T value=null; 
CommonCoroutineCodegenUtilKt.isBuiltInSuspendCoroutineUninterceptedOrReturn((FunctionDescriptor)descriptor.getOriginal(),languageVersionSettings)
super.getBetweenDateProvider(path)
chunk.split("%n",-2)
savedInstanceState.containsKey(STATE_SELECTED_ITEMS)
addOn != null && AddOn.InstallationStatus.DOWNLOADING == addOn.getInstallationStatus()
hostsInPool.incrementAndGet()
15 * 60 * 1000
coverageDataManager.addCoverageSuite(myConfiguration.getName(),new DefaultCoverageFileProvider(coverageFileName),myConfiguration.getPatterns(),lastCoverageTime,myConfiguration.getSuiteToMergeWith(),myConfiguration.getCoverageRunner(),myConfiguration.isTrackPerTestCoverage() && !myConfiguration.isSampling(),!myConfiguration.isSampling())
to.getRegistryName()
this.mModel=model
new RanChangeSet("classpath:/db/file.log","1","author",null,null,null,null,null,null,null,null,null)
myType.isValid()
type.getDataFormat(routeContext)
configureAST(expressionStatement,code)
mpi < 135 || leftSide
containsInAnyOrder("VARIABLE=success")
LOG.info("recovered from " + StringUtils.stringifyException(e))
this.magicString
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
Number value=iterator.next(); 
StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName())
@Override public SyncSession create(){   return documentAccess.createSyncSession(new SyncParameters()); } 
Variable emitBitScanForward(Value operand); 
LOG.warn(String.format("%d ms elapsed since build job marked as finished, but still missing finished status from some workers.",elapseMillisSinceFirstFinishedStatus))
public static LayoutFriendlyURLSeparatorComposite getLayoutFriendlyURLSeparatorComposite(long groupId,boolean privateLayout,String friendlyURL,Map<String,String[]> params,Map<String,Object> requestContext) throws PortalException {   return getPortal().getLayoutFriendlyURLSeparatorComposite(groupId,privateLayout,friendlyURL,params,requestContext); } 
mapLayerConfiguration.setOpacityFactor(((float)cachedOverlayTransparency) / 255.0f)
createTestBlockCapsule(1533529947843L + 3000L * 6,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
result.getCause()
logger.debug("NODE {}: Retry timout: Advancing",node.getNodeId())
activityNdx <= topActivityNdx
clob.getCharacterStream()
command.runHelp(stdOut)
component.getSources()
Arrays.asList(new Dependency("org.grails","grails-docs",grailsVersion,true))
mContext.startActivityAsUser(intent,UserHandle.CURRENT)
AbstractBeginNode node
Boolean.valueOf(value)
Gdx.input.getX(i)
DAO_RESCUE_BLOCK=1_800_000
LAYERS=5
clist.clearUserDefinedDisplayName(metaContact)
new DatabaseExplorerDialog(shell,SWT.NONE,inf,transMeta.getDatabases())
o instanceof XidImpl
@Nullable JComponent label
getSupportFragmentManager()
stack.isVisible() && (imeOnBottom || isDockedOnBottom) && StackId.isStackAffectedByDragResizing(stack.mStackId)
mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed
showBadnessTrace("It was not meant to be","A serious problem happened during startup. Please report:\n" + "http://github.com/processing/processing/issues/new",t,true)
new DefaultPlexusContainer(null,null,classWorld)
DEFAULT_NUMBER_OF_WRITE_BUFFERS=256
new SpannedString(first,true)
builder.humanReadableField(HttpRequest.Field.CONNECTION_TIMEOUT.getPreferredName(),HttpRequest.Field.CONNECTION_TIMEOUT_HUMAN.getPreferredName(),connectionTimeout)
item.getMedia() != null && item.getMedia().getId() == id
commonRegisterProblem(message," not support this syntax. Raise with no arguments can only be used in an except block",len,node,null,false)
TextStyle.decodeEffect(encoded) & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH
panel.attachTo(viewPort,overlayView,guiViewPort)
ClassFileVersion.forThisVm()
JetTypeChecker.INSTANCE.isSubtypeOf(expectedType,type)
((SQLDataSource)dataSource).getSQLDialect().storesUnquotedCase()
update.metadata().name
checkGradients(graph,epsilon,maxRelError,minAbsoluteError,print,exitOnFirstError,inputs,labels,fMask,lMask,null)
byteLength >= VECTOR_SIZE && (srcOffset % VECTOR_SIZE) == (destOffset % VECTOR_SIZE)
new IncrementalIndexSegment(rtIndex,null)
Program.class
ImportEventsAction.class
mNetdEventListenerService.onDnsEvent(netId,EVENT_TYPE,RETURN_CODE,l,null,null,0,0)
blogVals.get(27)
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFilesWouldBeOverwrittenByMergeDetector.getFiles(),"merge",null)
getSettings()
getModel().getColumnCount()
maxInactiveInterval * 1000L
args.length > 4
urlMap == null || TextUtils.isEmpty(JCUtils.getCurrentUrlFromMap(urlMap,currentUrlMapIndex))
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_DOWN,x,y,0)
value instanceof Integer
res.setBytes(100L)
protected RuntimeException throwParserError(Throwable e){   if (e instanceof BytecodeParserError) {     return (BytecodeParserError)e;   }   BytecodeParser bp=this;   BytecodeParserError res=new BytecodeParserError(e);   while (bp != null) {     res.addContext("parsing " + bp.code.asStackTraceElement(bp.bci()));     bp=bp.parent;   }   return res; } 
id=16503
minIdle < 0 || minIdle > maxPoolSize
private final BuildMode buildMode; 
rootDependency.toBundleUrlWithType()
serialVersionUID=320L
assertEquals(id1,new Twitter(id3,pass3).verifyCredentials().getName())
public Builder setProxyPrincipal(String principal){   this.proxyPrincipal=principal;   return this; } 
ModelVersion.create(2,0,0)
i >= 0
className.equals(Classes.COROUTINE_NAME)
Thread.sleep(200)
folder.getAbsolutePath()
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_SELECT_AUDIO_INPUT_FUNCTION,false)
DirectoryReader open=null; 
variants.containsKey(variant)
public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OuterTypeNumberCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOuterTypeNumber.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OuterTypeNumberCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"1:1: " + getCheckMessage(OuterTypeNumberCheck.class,OuterTypeNumberCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList("/PACKAGE_DEF");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
WAIT_FOR_NETWORK_TIMEOUT_DEFAULT_MS=0
type == Short.class
Optional.fromNullable(resourceManagement.getStats())
Boolean.valueOf(value)
ColorKey.createColorKey("MT_" + allFileStatus.getId())
(sync != POSITION_SYNCHRONIZATION_NONE) && (sync != POSITION_SYNCHRONIZATION_CHECK)
getCurrentTab().handleHTMLCopy()
entry.notification.cloneLight()
Reflection.methodHandle(type,"sizeOf")
bareAddress != null && !names.containsKey(bareAddress)
MavenPublishAction deployTask=createDeployTask(publication.getPomFile(),mavenRepositoryLocator,artifactRepository); 
DataFormat.PAYLOAD == message.get(DataFormat.class) && params[0] instanceof CxfPayload
Lists.newCopyOnWriteArrayList()
notifyItemRangeChanged(positionStart,itemCount,payload)
Arrays.asList(RFXComValueSelector.RAW_DATA,RFXComValueSelector.SIGNAL_LEVEL,RFXComValueSelector.COMMAND,RFXComValueSelector.MOOD,RFXComValueSelector.DIMMING_LEVEL,RFXComValueSelector.CONTACT)
new ObjectToMapTransformer(jsonObjectMapper)
DataManager.getInstance().getDataContext()
JMeterUtils.getPropDefault(ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_PREFIX + ReportGeneratorConfiguration.KEY_DELIMITER + "statistic_window",20000)
LOG.warn("PriviledgedActionException as:" + this + " cause:"+ cause)
ticket.cancel(false)
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.web",Collections.<UpgradeProcess>singletonList(upgradePortletId),1,1,false)
@Override public void receiveEndOfStream(int streamId) throws ConnectionException {   Stream stream=getStream(streamId,true);   if (stream != null) {     stream.receivedEndOfStream();   } } 
new CrypticClue("Search for a crate in a building in Hemenster.",CRATE_357,new WorldPoint(2636,3454,0),"House north of the Fishing Contest quest area. West of Grandpa Jack.")
case 12: 
page.getMembersByIdx(0).manageGroupsOpen().manageGroupsSelect("owners").manageGroupsSave().shouldHaveGroups(1)
(float)getMax() / 20
log.debug("Committed all active tasks {} and standby tasks {} in {}ms",taskManager.activeTaskIds(),taskManager.standbyTaskIds(),timerStartedMs - now)
new DataSpec(uri,DataSpec.FLAG_ALLOW_GZIP | DataSpec.FLAG_ALLOW_CACHING_UNKNOWN_LENGTH)
ContextNameConverter.class
new UnsupportedOperationException("Cannot force ephemeral users on systems without split system user.")
String.format("null label in rule %s, %s",getLabel().toString(),context)
note.addNewParagraph(AuthenticationInfo.ANONYMOUS)
U.compareAndSwapLong(_counts,longRawIdx(x),o,o + 1)
Assert.assertTrue(semaphore.acquire(3,TimeUnit.SECONDS))
textureLink.getFieldValue("norfac")
file == null || !FileUtil.pathsEqual(configuration.getFilePath(),file.getVirtualFile().getPath())
String.format("Builder for coercable type %s had 2 setters named %s but they were not Optional " + "and non-Optional. Don't know how to coerce.",coercableType.getName(),entry.getKey())
CxxPlatform platform
assertEquals("Invalid content-length",11,outputMessage.getHeaders().getContentLength())
new IllegalArgumentException("refresh token invalidation cannot be serialized with version [" + out.getVersion() + "]")
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_DEFAULT_TO_FINALIZED,true)
Iterable<? extends IJsonNode>
Arrays.asList(TYPE,SUBSCRIBE_URL,MESSAGE,TIMESTAMP,SIGNATURE,SIGNATURE_VERSION,MESSAGE_ID,SUBJECT,TOPIC,TOKEN)
1 + 3
new LFWDataFetcher(imageWidth,imageHeight)
LogFactory.getLogger().debug("Could not find table or view " + tableName + " for column "+ columnName)
Math.abs(diff - maxAge) <= 2
subscriptionSender.setContextAttribute("[$CONTENT_URL$]",contentURL,false)
!file.getName().startsWith("branched-")
if (mSelecting) {   for (int i=0; i < this.getCount(); i++)   if (!mListAppSelected.contains(this.getItem(i)))   mListAppSelected.add(this.getItem(i)); }  else mListAppSelected.clear(); 
/**   */ class SctpServerPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpServerPipelineSink.class);   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpServerPipelineSink(  Executor workerExecutor,  int workerCount){     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     Channel channel=e.getChannel();     if (channel instanceof SctpServerChannelImpl) {       handleServerSocket(e);     }  else     if (channel instanceof SctpChannelImpl) {       handleAcceptedSocket(e);     }   }   private void handleServerSocket(  ChannelEvent e){     if (!(e instanceof ChannelStateEvent)) {       return;     }     ChannelStateEvent event=(ChannelStateEvent)e;     SctpServerChannelImpl channel=(SctpServerChannelImpl)event.getChannel();     ChannelFuture future=event.getFuture();     ChannelState state=event.getState();     Object value=event.getValue(); switch (state) { case OPEN:       if (Boolean.FALSE.equals(value)) {         close(channel,future);       }     break; case BOUND:   if (value != null) {     bind(channel,future,(SocketAddress)value);   }  else {     close(channel,future);   } case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) {   SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event;   bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); } if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); } break; } } private void handleAcceptedSocket(ChannelEvent e){ if (e instanceof ChannelStateEvent) { ChannelStateEvent event=(ChannelStateEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); ChannelFuture future=event.getFuture(); ChannelState state=event.getState(); Object value=event.getValue(); switch (state) { case OPEN: if (Boolean.FALSE.equals(value)) { channel.worker.close(channel,future); } break; case BOUND: case CONNECTED: if (value == null) { channel.worker.close(channel,future); } break; case INTEREST_OPS: channel.worker.setInterestOps(channel,future,(Integer)value); break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpServerChannelImpl channel,ChannelFuture future,SocketAddress localAddress){ boolean bound=false; boolean bossStarted=false; try { channel.serverChannel.bind(localAddress,channel.getConfig().getBacklog()); bound=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); Executor bossExecutor=((SctpServerSocketChannelFactory)channel.getFactory()).bossExecutor; DeadLockProofWorker.start(bossExecutor,new Boss(channel)); bossStarted=true; }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); }  finally { if (!bossStarted && bound) { close(channel,future); } } } private void bindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpServerChannelImpl channel,ChannelFuture future,InetAddress localAddress){ try { channel.serverChannel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void close(SctpServerChannelImpl channel,ChannelFuture future){ boolean bound=channel.isBound(); try { if (channel.serverChannel.isOpen()) { channel.serverChannel.close(); Selector selector=channel.selector; if (selector != null) { selector.wakeup(); } } channel.shutdownLock.lock(); try { if (channel.setClosed()) { future.setSuccess(); if (bound) { fireChannelUnbound(channel); } fireChannelClosed(channel); }  else { future.setSuccess(); } }   finally { channel.shutdownLock.unlock(); } }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { private final Selector selector; private final SctpServerChannelImpl channel; Boss(SctpServerChannelImpl channel) throws IOException { this.channel=channel; selector=Selector.open(); boolean registered=false; try { channel.serverChannel.register(selector,SelectionKey.OP_ACCEPT); registered=true; }   finally { if (!registered) { closeSelector(); } } channel.selector=selector; } @Override public void run(){ final Thread currentThread=Thread.currentThread(); channel.shutdownLock.lock(); try { for (; ; ) { try { if (selector.select(500) > 0) { selector.selectedKeys().clear(); } SctpChannel acceptedSocket=channel.serverChannel.accept(); if (acceptedSocket != null) { registerAcceptedChannel(acceptedSocket,currentThread); } }  catch (SocketTimeoutException e) { } catch (CancelledKeyException e) { } catch (ClosedSelectorException e) { } catch (ClosedChannelException e) { break; } catch (Throwable e) { if (logger.isWarnEnabled()) { logger.warn("Failed to accept a connection.",e); } try { Thread.sleep(1000); }  catch (InterruptedException e1) { } } } }   finally { channel.shutdownLock.unlock(); closeSelector(); } } private void registerAcceptedChannel(SctpChannel acceptedSocket,Thread currentThread){ try { ChannelPipeline pipeline=channel.getConfig().getPipelineFactory().getPipeline(); SctpWorker worker=nextWorker(); worker.register(new SctpAcceptedChannel(channel.getFactory(),pipeline,channel,SctpServerPipelineSink.this,acceptedSocket,worker,currentThread),null); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to initialize an accepted socket.",e); } try { acceptedSocket.close(); }  catch (IOException e2) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a partially accepted socket.",e2); } } } } private void closeSelector(){ channel.selector=null; try { selector.close(); }  catch (Exception e) { if (logger.isWarnEnabled()) { logger.warn("Failed to close a selector.",e); } } } } } 
parameterTokens.set(index,new ParameterDescription.Token(token.getParameterTokens().get(index).getType(),CompoundList.of(token.getParameterTokens().get(index).getAnnotations(),new ArrayList<AnnotationDescription>(annotations)),token.getParameterTokens().get(index).getName(),token.getParameterTokens().get(index).getModifiers()))
validateFriendlyURL(user.getCompanyId(),groupId,classNameId,classPK,friendlyURL)
addContactButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.ADD_CONTACT_BUTTON_SMALL_ROLLOVER))
LOGGER.debug("Register profile {} for organization {}",qualityProfile.getQProfileName(),organization.getKey())
900 * 1000L
request.getDueDate()
StepVerifier.create(Mono.just(1).thenEmpty(Flux.empty())).verifyComplete()
Transaction g
i <= 3
url.startsWith("http://") || url.startsWith("https://") || url.startsWith("file://")
DEBUG=false
new ByteBuddy().subclass(Baz.class).method(named("foo")).intercept(MethodDelegation.to(new Qux())).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
shard.applyDeleteOperationOnReplica(1,2,"test","id",VersionType.EXTERNAL,mappingConsumer)
groupCombo.setSelectedItem(metaContact.getParentMetaContactGroup())
event.getFile() != null && event.getFile().getLength() < 0
assertViolations(result,0,1,0)
isPlayerPrepared() && getSongProgressMillis() > 2000
new WSSecHeader(actor,mustUnderstand,saaj.getSOAPPart())
_buildTemplateWithGradle("template-context-contributor","context-contributor-dependency-management","--dependency-management-enabled")
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_RECORD_FUNCTION,false)
nextNextInfo.distanceTo < TURN_IN_DISTANCE_END
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) <= -1
ConfigUtils.absoluteStormLocalDir(stormConf)
isDoubleCategory(typeRe)
resource.toURI()
!result.isDigestQuery()
from("seda:a").delayer(1000)
((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject())).prepareForTest()
createRecord(value,now,expiryTime)
asList(CUBRID,DERBY,FIREBIRD,MYSQL,ORACLE,SQLITE,SQLSERVER,SYBASE)
(GrTypeDefinition)parent
final TcpChannel channel; 
/**   * Get the <i>i</i>th oldest event currently in the buffer. If <em>i</em> is outside the range 0 to the number of elements currently in the buffer, then <code>null</code> is returned.  */ public E get(int i){   if (i < 0 || i >= numElems)   return null;   return ea[(first + i) % maxSize]; } 
FileUtil.loadFile(new File(getTestDataPath() + getTestName(true) + ".txt"),true)
GuiPackage.getInstance().updateCurrentGui()
callButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CALL_BUTTON_SMALL_ROLLOVER))
name.equals("getSimOperatorName") || name.equals("gsm.operator.alpha")
logger.debug("Job triggered: " + event.getJobName() + ", "+ event.getScheduledTime()+ ", "+ event.getTriggeredTime())
KotlinPluginUpdater.Companion.getInstance().kotlinFileEdited(virtualFile)
vpms.add(0,vpm)
max.getBlockZ()
item.isChecked()
assertFalse("Previous test had an audit-related failure. All subsequent audit related assertions are bogus because we can't " + "guarantee that we fully cleaned up after the last test.",auditFailure)
new IllegalStateException("File " + file.getPath() + " should not exist")
h.addParameters("-n1","--pretty=format:%H","HEAD")
n.getNodeData().y()
new IOException("",se)
props.getProperty(ASSERTION_RESULTS_FAILURE_MESSAGE_PROP,TRUE)
probe.getIrradianceMap() != null
!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())
model.getCurrentResult() != null && graphModel != null
JetTypeChecker.INSTANCE.isSubtypeOf(returnType,expectedReturnType)
reads=true
@SuppressWarnings("MethodDoesntCallSuperMethod") @Override public CDATA clone(){   CDATA text=new CDATA();   text.value=value;   return text; } 
p.getUnknownSearchWordLength() >= 3
PreferenceManager.instantPictureUploadEnabled(context) || PreferenceManager.instantVideoUploadEnabled(context)
builder.types("Liferay:UserAccount","Person")
new IllegalStateException("Result is already complete: succeeded")
meta.getEncoding()
kernelWidth > (inWidth + 2 * padWidth)
xsr=null
attribute == null || attribute.getMetaAttribute().isReadOnly()
ColorProperties.getColor("scrollBarTrackHighlight")
FilterResult::isDeclined
new QuickAdapter(PAGE_SIZE)
type.length() == 0
expression.getContainingFile()
new FileHyperlinkRawData("spec/personSpec.js",21,-1,3,s.length())
HdmiCec.getTypeFromAddress(curAddress)
new FilePathImpl(new File(path.substring(0,pos)),true)
FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI),0.0f,client.field_6313_p,client.field_6324_e)
viewToModel == null || viewToModel.length != tableModel.getRowCount()
fromLongClick && (mViewFlags & ENABLED_MASK) != ENABLED
Key<Long>
new ObjectMapper().readerFor(DatanodeAdminProperties.class)
firstPos > mTargetPos
public PoshiRunner(String classCommandName) throws Exception {   LoggerUtil.startLogger();   SeleniumUtil.startSelenium();   System.out.println("\nRunning " + classCommandName);   _testClassCommandName=classCommandName;   _testClassName=PoshiRunnerGetterUtil.getClassNameFromClassCommandName(_testClassCommandName); } 
database instanceof DB2Database || database instanceof DerbyDatabase || database instanceof HsqlDatabase|| database instanceof MySQLDatabase
new StringBundler(5)
quoteMatcher.group(1)
new ObjectMapper().readerFor(Map.class)
mActivity.get() != null && !mActivity.get().isFinishing()
new StackState(1f,255)
assertNumUniqueNodeNameBuckets(2)
Time.currentTimeMillis()
NodeTraversal.traverseEs6(compiler,scriptRoot,this)
LeakHunter.checkLeak(usageView,PsiFileImpl.class,PsiFileImpl::isPhysical)
frustum.update(invProjectionView)
new QueryException(e,"Error in preloading targets. %s: %s",e.getClass(),e.getMessage())
new BTCMarketsPlaceOrderResponse(true,null,0,"11111",12345L)
String.format("Unable to resolve drawable \"%1$s\" in attribute \"%2$s\"",stringValue,mNames[index])
public T setStandardError(OutputStream outputStream){   operationParamsBuilder.setStderr(outputStream);   return getThis(); } 
mActiveAgents.remove(info)
new WeightedRandomChestContent(item,max,max,weight)
-uid
"Unsupported filesystem scheme found in the backup target url. Error Message: " + expMsg
public String getMethod(); 
new PathResourceManager(tmpDir,10485760,false,false,false)
conn.getResponseCode() != HttpURLConnection.HTTP_PARTIAL && conn.getResponseCode() != HttpURLConnection.HTTP_OK
getNextWindowIndex()
generator.emitMove(register.asValue(val.getKind()),val)
assertTrue(runtimeOptions.isMonochrome())
AbstractCallTargetNode directCall=(AbstractCallTargetNode)invoke.callTarget(); 
myLastSuspendContext == null || !myLastSuspendContext.equals(getSuspendContext())
String key=keys.next(); 
UploadUtils.onMediaUploadedSnackbarHandler(this,findViewById(R.id.tab_layout),false,event.mediaModelList,event.successMessage)
compressedProto.length < 340000
infos[2]
public Object getRequestCacheKey(){   return requestCacheKey; } 
new Setting<>("repositories.s3.access_key",CLOUD_S3.KEY_SETTING,Function.identity(),Property.NodeScope,Property.Filtered)
cf.setInMemory(false)
stall_till_cloudsize(5)
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),event.getStartTime(),endTime)
file.isValid() && file.getVirtualFile() != null
mDrawerLayout.openDrawer(mSliderLayout)
commandExecutor.evalWriteAsync(getName(),codec,new RedisCommand<Map<Object,Object>>("EVAL",new MapGetAllDecoder(args),7,ValueType.MAP_KEY,ValueType.MAP_VALUE),"local expireHead = redis.call('zrange', KEYS[2], 0, 0, 'withscores');" + "local expireIdleHead = redis.call('zrange', KEYS[3], 0, 0, 'withscores');" + "local maxDate = table.remove(ARGV, 1); "+ "local hasExpire = #expireHead == 2 and tonumber(expireHead[2]) <= tonumber(maxDate); "+ "local hasExpireIdle = #expireIdleHead == 2 and tonumber(expireIdleHead[2]) <= tonumber(maxDate); "+ "local map = redis.call('hmget', KEYS[1], unpack(ARGV)); "+ "for i = #map, 1, -1 do "+ "local value = map[i]; "+ "if value ~= false then "+ "local key = ARGV[i]; "+ "local t, val = struct.unpack('dLc0', value); "+ "map[i] = val; "+ "if hasExpire then "+ "local expireDate = redis.call('zscore', KEYS[2], key); "+ "if expireDate ~= false and tonumber(expireDate) <= tonumber(maxDate) then "+ "map[i] = false; "+ "end; "+ "end; "+ "if hasExpireIdle and t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], key); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], key, value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), key); "+ "else "+ "map[i] = false; "+ "end; "+ "end; "+ "end; "+ "end; "+ "end; "+ "return map;",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),args.toArray())
getFloatValue(key,0)
V
BACKGROUND_DEXOPT_JOB=800
new SolrException(500,"error parsing event listevers",e,false)
LARGER_DIMENSION=1280
8 + 8
cal.set(1900,0,1,hour,minute,second)
mEase3.setTextColor(mNextTimeTextRecomColor)
uploadProgressHandler.onProgress(downloaded,total)
getName()
ent.getValue().longValue()
numberOfPopulateTest=1000
staticCall("java.lang.System","exit").parameterCount(1)
assertFalse(storer().shouldProcess(curi1))
_subBlocks.size() >= newChildIndex
id=21
DEBUG_LOC
Mono<T>
createDouble(buffer.length(),init)
serialVersionUID=1725346764
cause.getMessage().contains("Different HTTP Scheme or Host Redirect detected on")
-1l
args.length != 7
releaseLock(lockName,transOwner)
s.contains("://") || s.startsWith(MAILTO_PREFIX) || s.startsWith("//")
/**   * Needed for statistics.   */ private final LongAdder8 finishedJobsCnt=new LongAdder8(); 
String key
new int[3600]
return encodedMatchedUris; 
adapter.item(R.string.layer_hillshade).selected(HILLSHADE.get() ? 1 : 0).icons(R.drawable.ic_action_hillshade_dark,R.drawable.ic_action_hillshade_light).listen(listener).position(13)
/**   * Enhances a public non-final class. Source class must have a public or protected no-args constructor. Code is generated for protected and public non-final methods, and package methods if the source class is not in a the java.* hierarchy.  * @param cls class to extend, uses Object.class if null  * @param interfaces interfaces to implement, can be null or empty  * @param ih interceptor used to handle implemented methods  * @param loader ClassLoader for enhanced class, uses "current" if null  * @param filter a filter to prevent certain methods from being intercepted, may be null to intercept all possible methods  * @return an instance of the enhanced class. Will extend the source class and implement the giveninterfaces, plus the CGLIB Factory interface.  * @see Factory  */ public static Factory enhance(Class cls,Class[] interfaces,Callbacks callbacks,ClassLoader loader,CallbackFilter filter){   return enhanceHelper(cls,interfaces,callbacks,loader,filter); } 
sp.vim_regsub_multi(regmatch,lnum,sub,1,false)
assertNotNull(catalog.getStoreByName("foo",CoverageStoreInfo.class))
GoPsiImplUtil.findTypeFromTypeRef(methodType.getTypeReferenceExpression())
e instanceof MaybePrimitiveExpr && e.hasJavaClass() && ((MaybePrimitiveExpr)e).canEmitPrimitive()
!Navigation.checkNavigationCategory(undoCategoryList.get(note))
contact.getWorldManifold()
ImmutableSet.copyOf(modules)
zoneId.equals("+00:00") || zoneId.equals("-00:00")
Class.forName(line,true,null)
startActivityAsUser(intent,UserHandle.CURRENT)
FileUtil.toContainerFile(u)
selectePathTemp != null
message.getExpiresInSeconds() * 1000L
operation == RESTORE_OPERATION || operation == BACKUP_OPERATION
new BadRequestException("Field " + field + " is not of a numeric type and the cardinality could not be calculated either.",e1)
containsString("cookieManagerShared")
supplement(self,aggregate)
((MainTimeLineActivity)getActivity()).setMentionsListView(listView)
index >= size || index < 0
new IllegalStateException("Should only attach offsets to local times, not zone ids.")
Assert.assertEquals(122L,ownerCapsuleNew.getNetUsage())
createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,false)
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_OVERWRITE_TABLES))
assertTrue(removed)
LOGD=false
ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(),e.getID(),CheckDirty.CHECK_DIRTY))
TokenSet.create(PyTokenTypes.STRING_LITERAL,PyElementTypes.STRING_LITERAL_EXPRESSION)
final URLDetail wd=detailIterator.next(); 
LOGGER.warn("Could not execute paste",ex)
new RunnableAdapter<T>(task)
sdk != null && sdk.getSdkType() instanceof PythonSdkType
Settings.Global.getInt(cr,Settings.Global.DOCK_AUDIO_MEDIA_ENABLED,0)
extensionsMap.put(mimeType,extensions)
updateExistingRefreshToken(currentRefreshToken,at)
addIndices != null
GL20.glUniform4iv(location,v)
Thread.sleep(300)
assertLeftRightCategory(3,category2b)
sPos >= 0
cancelNotification(pkg,tag,id,Notification.FLAG_AUTO_CANCEL,Notification.FLAG_FOREGROUND_SERVICE,false)
FAILURE_PATTERN.matcher(output)
logger.debug("Sonos SleepTimer: Invalid sleep time set. sleep time must be >=0 and < 68400s (24h)")
Long.parseLong(args[1])
VcsTestUtil.assertEqualCollections(tags,myTags)
!isPassword || shouldSpeakPasswordsForAccessibility()
new BigInteger(1,difficulty)
Status.createStatuseList(get(getBaseURL() + "statuses/retweeted_to_me.json",null,true))
(BasicFontMetrics)c.newInstance()
mProgressFooterView != null
fuel >> 14
service.getName()
mFlexItemInEdit.setAlignSelf(AlignSelf.AUTO)
this.typeDescriptorCache.putIfAbsent(pd,td)
Utilities.getInputPaths(jobConf,mapWork,emptyScratchDir,ctx,false)
new TextField<String>(JMSConfiguration.INSTANCE_NAME_KEY,String.class)
list.append(pi)
private final WriteResultPublisher resultPublisher=new WriteResultPublisher(); 
get(PLUGIN_GO_PROVIDED_PATH)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,0,UserHandle.USER_CURRENT)
new ConnectionException(sm.getString("http2Parser.processFrameContinuation.notExpected",connectionId,Integer.toString(streamId)),Http2Error.PROTOCOL_ERROR)
"RebaseInstrumentationTarget{" + "typeDescription=" + typeDescription + ", defaultMethods="+ defaultMethods+ ", bridgeMethodResolver="+ bridgeMethodResolver+ ", methodRedefinitionResolver="+ methodFlatteningResolver+ '}'
ProjectInspectionProfileManagerImpl.getInstanceImpl(project)
total=2000
hook.stopPlay(program)
assertEquals(defsPath + " children",8,children.size())
new byte[10]
searchHit.getThumbImageURL()
!mediaServCallback.getDeviceConfiguration().isVideoCaptureSupported() || !mediaControl.isLocalVideoAllowed()
IllegalStateException e=expectThrows(IllegalStateException.class,() -> {   try (XContentBuilder builder=XContentBuilder.builder(randomFrom(XContentType.values()).xContent())){     builder.startObject();     builder.field("status",randomFrom(RestStatus.values()));     builder.endObject();     try (XContentParser parser=createParser(builder.contentType().xContent(),builder.bytes())){       BytesRestResponse.errorFromXContent(parser);     }    }  } ); 
new SampleRoboApplication_()
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level)
functionFactory.expm1(iX)
getters.length > 0
{FieldManifestation.TRANSIENT,Opcodes.ACC_TRANSIENT,false,false,false,true,false}
LanguageUtil.isAvailableLocale(languageId)
!stopItem.isDisposed() && !stopItem.isEnabled() ^ !running
bitmap == null || bitmap.getWidth() == 0 || bitmap.getHeight() == 0
BLANK_LINES_AROUND_METHOD_IN_INTERFACE=1
size > Message.MAX_SIZE || size < 0
_response.reset(true)
Settings.Secure.getInt(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED,UserHandle.USER_CURRENT)
Assert.assertEquals(8,clients.size())
DEFAULT_DB_CACHE_COUNT=200
TURN_DEGREE_MIN=35
ImmutableSet.<String>builder().add(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JOURNAL_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ,CLUSTER_CONFIG_ENTRY_READ)
maxRecents > 0 && !doTrim
parser.parseLight(GroovyElementTypes.CONSTRUCTOR_BLOCK,builder)
"Footnote".equals(type) || "DocumentIndexMark".equals(type)
trade.getPrice()
app.getSettings().FAST_ROUTE_MODE.getModeValue(params.mode)
suppressLeadingZeroElements == false
cachedMessages=b.getBroadcasterConfig().applyFilters(r,t)
minor == TCN_RECOMMENDED_MIN
Slog.w(TAG,"Error opening " + SEAPP_HASH_FILE + ". Assuming first boot.")
selenium.isElementPresent("link=Control Panel")
pos >= 0
sublistsIndices.keySet().stream()
mService.reconnect()
mWm.addAppToken(0,null,0,0,0,false,false,0)
new MaterializingOperator(operatorContext,sourceTypes)
mExpandedChild.getHeight() <= mContractedChild.getHeight()
getProblems(domElement,includeXmlProblems)
n.getNodeData().getLabel().toLowerCase().equals(str)
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags)
javamelodyVersion.compareTo(Parameters.JAVAMELODY_VERSION) > 0
value.equals("")
Arrays.asList("spring-boot-starter-jetty-","jetty-continuation","jetty-util-","javax.servlet-","jetty-io-","jetty-http-","jetty-server-","jetty-security-","jetty-servlet-","jetty-servlets","jetty-webapp-","websocket-api","javax.annotation-api","jetty-plus","javax-websocket-server-impl-","asm-","javax.websocket-api-","asm-tree-","asm-commons-","websocket-common-","jetty-annotations-","javax-websocket-client-impl-","websocket-client-","websocket-server-","jetty-xml-","websocket-servlet-")
data == null || mData != data
populateUi()
validationInterval=3000
logger.fine("attaching ack callback to event")
assertEquals(1,result.x)
createTextAttributesKey("KOTLIN_EXTENSION_FUNCTION_CALL",DefaultLanguageHighlighterColors.STATIC_METHOD)
!result.restricted && !result.asked && usage&& PrivacyManager.isApplication(restriction.uid)
assertEquals(0.20430759039450014,mses[i],1e-4)
Object[]
ClassLoaderUtil.accept(cl,false,new ClassLoaderUtil.Visitor(){   @Override public void visit(  String resource,  URL url,  ClassLoader cl){     System.out.println("- " + resource + " "+ url);   } } ,false)
Thread.sleep(3000)
null != mData && mData.size() > 0
new IndexWriter(store,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
HEAT_PER_MJ=0.0023F
underlying.next()
DurationType.getMillisType()
log.error("Problem in JSR223 script " + e,e)
field.getFieldInfo2()
!onDemand
Thread.currentThread().interrupt()
config.getCredentialsProvider() != null
UpgradeStepRegistrator.class
myFixture.getAllQuickFixes("struts-action-method.xml")
update.getName()
type == null || type instanceof PsiWildcardType
!"".equals(textArr[9])
GregorianCalendar.getInstance()
camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)
_TestUtil.randomFixedByteLengthUnicodeString(random,fixedBytesLength)
network.predecessors(producedNode)
Object command
waitForDecommission(CCMBridge.IP_PREFIX + '5',c.cluster,60)
activity instanceof AstridActivity && ((AstridActivity)activity).getFragmentLayout() != AstridActivity.LAYOUT_SINGLE
NonNullList.func_191197_a(size,ItemStack.field_190927_a)
ft.add(R.id.layout_fragment_container,readerFragment,tagForFragment)
File.listRoots()[0].getPath()
mHandler.obtainMessage(MSG_RESULT,status,0,currentPackage)
MacMessages.showYesNoDialog(title,message,YES_BUTTON,NO_BUTTON,WindowManager.getInstance().suggestParentWindow(project))
PropertyExtKt.getFoo("")
qualifiedName(node)
waitForJobExecutorToProcessAllJobs(5000,500)
lowestWeightAndIndex != null && lowestWeightAndIndex.getKey() < weight
1024 * 200
id=16510
getListView() != null && getListView().getFirstVisiblePosition() > 0
buf.getShort()
mService.factoryReset()
index > -1 && subtype.getSuperType() != null
mContext.sendBroadcastAsUser(intent,UserHandle.CURRENT)
directContext.timers().deleteTimer(gc,TimeDomain.EVENT_TIME)
ServiceManager.addService(Context.INPUT_SERVICE,inputManager,false,DUMP_FLAG_PRIORITY_CRITICAL)
@Override public final DivideByOnConditionStep and(Condition c){   condition.addConditions(c);   return this; } 
log.error("Error creating class:'" + className + "' in JavaSampler "+ getName()+ ", check for a missing jar in your jmeter 'search_paths' and 'plugin_dependency_paths' properties",ex)
Simple.forClass(value.getClass())
mService.getConnectionInfo(mContext.getOpPackageName())
p != null && p.type() != Proxy.Type.DIRECT
IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0023F)
new RuntimeException("Error loading MultiDataSet at path " + path + " - DataSet may be corrupt or invalid."+ " Spark MultiDataSets can be validated using org.deeplearning4j.spark.util.data.SparkDataValidation",e)
assertTrue(user.isGeoEnabled())
m.getDeclaringClass().getName().startsWith("org.gridgain") || m.getDeclaringClass().getName().startsWith("org.apache.ignite")
log.error("Cannot evaluate type() for {} due to {}",requestClass,e,e)
fragment.getEndVisualColumn()
final LongAdder8 locAdder=new LongAdder8(); 
Never
@UriPath
return str2; 
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest","true")
conf.getInt("rabbitmq.port",5672)
pur.getFileById(dirId.getId())
planDetailJson.getPlan()
new AnnotationHolderImpl(new AnnotationSession(file),true)
Slog.w(TAG,"APK " + fileName + " has compressed dex code "+ entry.getName())
statusCode >= 500
mAppOps.checkOp(AppOpsManager.OP_GET_USAGE_STATS,TEST_UID,TEST_PKG)
this.clss=listener
caught.isArrayPattern()
format(arg,false)
JedisException e
myConfiguration.getPersistantData().getScope().getSourceScope(myConfiguration).getGlobalSearchScope()
expected == float.class || expected == Float.class
settings.setTextSize(WebSettings.TextSize.NORMAL)
Throwable t
matcher.group(1)
getFluid().getFluid().getLocalizedName(getFluid())
!PyPackageUtil.hasManagement(packages)
fla != null && getFragmentLayout() != LAYOUT_SINGLE
readSync.notifyAll()
LocaleUtil.getSiteDefault()
Id
new ContiguousIntervalUsageInArrear(usage,accountId,invoiceId,rawSubscriptionUsage,targetDate,rawUsageStartDate,invoiceConfig,internalTenantContext)
add2(yact[0],ds[2])
/**   * @param ctx Transaction context.  * @param key Key.  * @throws IgniteCheckedException If failed.  */ private void unlock(TxContext ctx,Object key) throws CacheException {   if (ctx.unlocked(key)) {     txCtx.remove();     Transaction tx=cache.tx();     assert tx != null;     try {       tx.commit();     }   finally {       tx.close();     }     assert cache.tx() == null;   } } 
Exception e
public Integer getId(){   return id; } 
noteTmp.isLocked()
private SAPEntryService _sapEntryService; 
value.equals(values[i])
callback != null && mLastTimeReadUs != 0
new Font("SansSerif",Font.PLAIN,10)
getConfigurables()
vb.getData().rewind()
new TaskRunnerFactory("ActiveMQ Session Task",ThreadPriorities.INBOUND_CLIENT_SESSION,false,1000)
completion.switchOnError(ex -> handler.handle(exchange,ex))
doGetIsTypeCheckCallable(type)
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,158}
UpgradeStepRegistrator.class
new AnalyzedToken(word,lowerTaggerTokens[i + 1],lowerTaggerTokens[i],pos)
n <= who3d.lastVertex
bicycleNotDefinedValues.put("footway",4d)
isXop
MessagingService.instance().sendRR(message,target,handler,true)
initClient=6
h2o.completeExceptionally(ex)
return 211; 
runGradle(0,"error","clean","flywayMigrate")
Strings.isNotBlank(newPassword)
slot_name_value_pair(context,fc)
this.cli.jar("secure.groovy","data-jpa.groovy")
getClassInternalName(exceptionType)
super(defaultStore,persistentPropertiesSource,auditedPropertiesHolder,globalCfg,reflectionManager,propertyNamePrefix); 
DEFAULT_VERIFY_ENABLE=false
orderUsingCustomerPayment && !cartHasTemporaryCreditCard
mockRegionInfo.isMetaTable()
req.getServletPath()
LOG.error("Couldn't upload logs for " + containerId + ". Skipping this container.",e)
new WorldPoint(2636,3453,0)
o instanceof ArticleTravelCard
chatTabbedPane.addTab(currentChatPanel.getDefaultContact().getDisplayName(),new ImageIcon(Constants.getStatusIcon(currentContactStatus)),firstChatPanel)
TestFileEntry testFileEntry=new TestFileEntry(fileName,folderId,groupId,inputStream); 
CollectionUtils.filter(filteredCrossSales,new Predicate(){   @Override public boolean evaluate(  Object arg){     return 'Y' != ((Status)((CrossSaleProductImpl)arg).getRelatedProduct()).getArchived();   } } )
Pair.of(buf,volumeBox)
new IllegalStateException("Buffer already freed, free point: ",freePoint)
/**   * Indicates only the user is able to see posts made by the application.  */ ONLY_ME(NativeProtocol.AUDIENCE_ME)
exp instanceof ConnectTransportException || exp.getCause() instanceof ConnectTransportException
JsonParseException jse
true || DEBUG_WALLPAPER
Subqueries.lt(0L,subquery)
MiddleEntity middle2=new MiddleEntity(); 
ObjectConverter.toBool(scriptValue)
localTransportStopRoutes != null && localTransportStopRoutes.size() > 0
public AfterWatermarkEarlyAndLate withEarlyFirings(OnceTriggerStateMachine earlyTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
getString(R.string.known_issue_wrong_base_directory,appInfo.dataDir)
new File(propertyFiles.get(fileName),fileName)
result != node.isNegated()
new RxNettyHttpServer()
opSetSMS.addMessageListener(messageSourceService)
return areaWidth; 
logger.debug("No such directory: " + dir.getAbsolutePath())
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.SYSTEM_NAVIGATION_KEYS_ENABLED,1,UserHandle.USER_CURRENT)
StringBuilder pattern=new StringBuilder(this.prefix); 
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_script_name"))
Lists.newArrayList()
subCursor.getString(COLUMN_VALUE)
mock.expectedBodiesReceivedInAnyOrder("Hello World")
state == null || state.equals("") || state.equals("available")
LOGGER.warn(msg.apply())
new EnterSelectionDialog(shell,options,"Partioning method","Select the partitioning method")
log.info(message,exception)
@Override public Response headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
times(1)
TimeValue.timeValueNanos(delay)
logger.debug("condition not met, returning existing state")
new JettySolrRunner(solrHomeDirectory.getAbsolutePath(),"/solr",0,null,null,true,null,sslConfig)
four.setAxisIndex(LEAF)
Restart.class
mService.mAppOps.noteOpNoThrow(w.mAppOp,w.getOwningUid(),w.getOwningPackage())
id=10840
CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize)
messageId.getEntryLocator()
ServiceApiUtil.validateAndResolveApplication(application,sfs,CONF_DEFAULT_DNS)
obj.setContentType(Mimetypes.MIMETYPE_BINARY_OCTET_STREAM)
new SmileXContentParser(smileFactory.createParser(reader))
config.getDouble("modulus")
entry.getName().equals(BOOT_INF_CLASSES)
QueryLogger.builder()
new IndexWriter(indexStore,new StandardAnalyzer(new String[]{}),true,IndexWriter.MaxFieldLength.LIMITED)
mFinishing && mSupportHardware && mHwCenterX != null
new AndroidMobileDriverImpl(projectDirName,portalURL)
w1.getGradient(i,alpha,alpha)
TCN_REQUIRED_PATCH=28
/**   * Create Reactive Redisson instance with default config  * @return Redisson instance  */ public static RedissonRxClient createRx(){   Config config=new Config();   config.useSingleServer().setAddress("redis://127.0.0.1:6379");   return createReactive(config); } 
resources.nextElement().toURI()
new ApiEventBuilder().setSubscriptionId(subscription.getId()).setEventPlan(newPlan.getName()).setEventPlanPhase(currentTimedPhase.getPhase().getName()).setEventPriceList(newPriceList.getName()).setActiveVersion(subscription.getActiveVersion()).setProcessedDate(now).setEffectiveDate(effectiveDate).setRequestedDate(requestedDate)
analyzer.analyze(parser.createStatement(sql),false)
Assert.assertEquals(permissionEntity.getOptionalFields().size(),3)
NoResolvedType noResolvedType=new NoResolvedType(this); 
logger.error("Caught exception while processing get request",e)
myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,4)
List<Expression>
greaterThanOrEqualTo(0L)
_connector.getResponse("METHOD /f" + ooo + " HTTP/1.0\n\n")
Intent.ACTION_SEND.equals(action) || Intent.ACTION_SENDTO.equals(action) || "android.intent.action.SEND_MULTIPLE".equals(action)
LOG.d(TAG,"Incoming Result")
entityRef.destroy()
/**   * @author Sergey.Malenkov  */ public class GradientViewport extends JBViewport {   private final Insets myInsets;   private final boolean myAlways;   public GradientViewport(  Component view,  Insets insets,  boolean forScrollBars){     myInsets=new Insets(insets.top,insets.left,insets.bottom,insets.right);     myAlways=forScrollBars;     setView(view);   }   protected Component getHeader(){     return null;   }   @Nullable protected Color getViewColor(){     Component view=getView();     return view == null ? null : view.getBackground();   }   @Override public void paint(  Graphics g){     super.paint(g);     paintGradient(g);   }   protected void paintGradient(  Graphics g){     g=g.create();     try {       Color background=getViewColor();       Component header=getHeader();       if (header != null) {         header.setBounds(0,0,getWidth(),header.getPreferredSize().height);         if (background != null) {           g.setColor(background);           g.fillRect(header.getX(),header.getY(),header.getWidth(),header.getHeight());         }       }       if (g instanceof Graphics2D && background != null && !Registry.is("ui.no.bangs.and.whistles")) {         paintGradient((Graphics2D)g,background,0,header == null ? 0 : header.getHeight());       }       if (header != null) {         header.paint(g);       }     }   finally {       g.dispose();     }   }   private void paintGradient(  Graphics2D g2d,  Color background,  int x1,  int y1){     Component view=getView();     if (background != null && view != null) {       int x2=x1, x3=getWidth() - x2, x4=x3;       int y2=y1, y3=getHeight() - y2, y4=y3;       if (myInsets.left > 0 && view.getX() < 0) {         x2+=myInsets.left;       }       if (myInsets.top > 0 && view.getY() < 0) {         y2+=myInsets.top;       }       if (myInsets.right > 0 && view.getX() > getWidth() - view.getWidth()) {         x3-=myInsets.right;       }       if (myInsets.bottom > 0 && view.getY() > getHeight() - view.getHeight()) {         y3-=myInsets.bottom;       }       Component parent=myAlways ? null : getParent();       if (parent instanceof JScrollPane) {         JScrollPane pane=(JScrollPane)parent;         JScrollBar vBar=pane.getVerticalScrollBar();         if (vBar != null && vBar.isVisible()) {           if (vBar.getX() < getX()) {             x2=x1;           }  else {             x3=x4;           }         }         JScrollBar hBar=pane.getHorizontalScrollBar();         if (hBar != null && hBar.isVisible()) {           if (hBar.getY() < getY()) {             y2=y1;           }  else {             y3=y4;           }         }       }       Color transparent=ColorUtil.toAlpha(background,0);       if (x1 != x2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x2,y1,transparent));         g2d.fillPolygon(new int[]{x1,x2,x2,x1},new int[]{y1,y2,y3,y4},4);       }       if (x3 != x4) {         g2d.setPaint(new GradientPaint(x3,y1,transparent,x4,y1,background));         g2d.fillPolygon(new int[]{x4,x3,x3,x4},new int[]{y1,y2,y3,y4},4);       }       if (y1 != y2) {         g2d.setPaint(new GradientPaint(x1,y1,background,x1,y2,transparent));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y1,y2,y2,y1},4);       }       if (y3 != y4) {         g2d.setPaint(new GradientPaint(x1,y3,transparent,x1,y4,background));         g2d.fillPolygon(new int[]{x1,x2,x3,x4},new int[]{y4,y3,y3,y4},4);       }     }   } } 
graph.getEdgesAndMetaEdges()
/**   * Implements all the default JDBC operations that are used by the JDBCPersistenceAdapter. <p/> Subclassing is encouraged to override the default implementation of methods to account for differences in JDBC Driver implementations. <p/> The JDBCAdapter inserts and extracts BLOB data using the getBytes()/setBytes() operations. <p/> The databases/JDBC drivers that use this adapter are: <ul> <li></li> </ul>  * @org.apache.xbean.XBean element="oracleJDBCAdapter"  * @version $Revision: 1.2 $  */ public class OracleJDBCAdapter extends BlobJDBCAdapter {   public void setStatements(  Statements statements){     statements.setLongDataType("NUMBER");     super.setStatements(statements);   }   protected byte[] getBinaryData(  ResultSet rs,  int index) throws SQLException {     Blob aBlob=rs.getBlob(index);     if (aBlob == null) {       return null;     }     return aBlob.getBytes(1,(int)aBlob.length());   } } 
K
name.endsWith(".mxml") && !name.startsWith("TestApp.") && !name.startsWith("Constructor.")
new RuntimeException()
mapper.getFactory()
!isStarted()
copy.replaceFirst("@" + maybeUserName,"")
creatorId=metadata.getValue(ProducteevTask.CREATOR_ID)
between(1,10)
_portal.getSiteDefaultLocale(portletDataContext.getScopeGroupId())
LOGGER.error("Unknown {} : {}",OAuthConstants.CLIENT_ID,clientId)
this.httpHandler.handle(req,resp).switchOnError(ex -> {   logger.error("Could not complete request",ex);   response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR);   return Mono.empty(); } )
append(myRepositoryRoot,myLastPath,false)
new GridBagConstraints(0,1,1,1,0.7,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(15,15,15,0),0,0)
theClass == MetadataGeneratingExpandoMetaClass.class
getParameterValues(request,param,null)
assertEquals(6,result.getBySeverity(Severity.NOTE).size())
shouldUpdateDefaultPaymentMethod
seq.length() < width || isMarked
/**   * Reads.   */ private final LongAdder8 reads=new LongAdder8(); 
addFilter=true
factory.getDestination(getEndpointInfo("foo","bar","http://localhost:9001"),bus)
index - 1 >= 0
SKELETONS_VERSION=9
Type.getObjectType(stubInternalName)
value < mean + statisticalDeviationFactor * std
Component invoker
displayAttachmentNotSavedMessage()
ldapConfig.getCrlFilter()
Collections.unmodifiableList(customNonFilteredExtensions)
region.getRegionHeight()
effects.equals(hEffects.effects)
previousException.compareToIgnoreCase(currentException)
Ports.Binding(11023)
r.get(11)
SitesImpl.class
synchronized (mAm) {   if (proc.executingServices.size() == 0 || proc.thread == null) {     return;   }   long maxTime=SystemClock.uptimeMillis() - (proc.execServicesFg ? SERVICE_TIMEOUT : SERVICE_BACKGROUND_TIMEOUT);   ServiceRecord timeout=null;   long nextTime=0;   for (int i=proc.executingServices.size() - 1; i >= 0; i--) {     ServiceRecord sr=proc.executingServices.valueAt(i);     if (sr.executingStart < maxTime) {       timeout=sr;       break;     }     if (sr.executingStart > nextTime) {       nextTime=sr.executingStart;     }   }   if (timeout != null && mAm.mLruProcesses.contains(proc)) {     Slog.w(TAG,"Timeout executing service: " + timeout);     anrMessage="Executing service " + timeout.shortName;   }  else {     Message msg=mAm.mHandler.obtainMessage(ActivityManagerService.SERVICE_TIMEOUT_MSG);     msg.obj=proc;     mAm.mHandler.sendMessageAtTime(msg,proc.execServicesFg ? (nextTime + SERVICE_TIMEOUT) : (nextTime + SERVICE_BACKGROUND_TIMEOUT));   } } 
Exception e
ImmutableList<Integer>
mGoogleApiConnectionTask.trySetResult(bundle)
expand("serializedforms/SimpleTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17","JDK18")
verifyAttributes(decoder,binary("232302004200000880316890202968001e02582d00000000000000050000320000018901920000001dc1e2001601081154255d0202005a0053875a00a57e5a00af80"))
rest.getEndpointUrlChange()
mService.mLockTaskController.checkLockedTask(tr)
increment != 1 || Registry.is("ide.scroll.default.unit.increment")
mClocks.uptimeMillis()
/**   * Returns last child <b>element</b> node or <code>null</code> if no such child node exist.  */ public Element getLastChildElement(){   initChildElementNodes();   if (childElementNodes.length == 0) {     return null;   }   return childElementNodes[childElementNodes.length - 1]; } 
super("NSIL",0,2); 
next.getField(1)
element.getText()
4 * sum / common / (common - 1)
report(n,MISPLACED_ANNOTATION,"@abstract","constructors cannot be abstract")
changeAffiliationByAdmin(jids,"admin")
definition.contains(" abstract ") || definition.contains(" native ")
new ByteArray(rowKeyBodyBuf,0,offSet)
Boolean.parseBoolean(getOptional("kylin.metadata.jdbc.json-always-small-cell","true"))
delegate.getBooleanValue("java","skip_checking_missing_deps",true)
Preconditions.checkNotNull(path,"path")
ISOChronology.getInstanceUTC()
lights != null && lights.shadowMap != null
"Searching class for device type " + deviceType
BASE=11000
this(true,16,arrayType); 
LOG.debug("Gradle execution error",e)
Thread.sleep(1000L)
writer.writeStartDocument(encoding,"1.0")
for (MediaType mediaType : result) {   if (mediaType.isConcrete()) {     return mediaType;   }  else   if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {     return MediaType.APPLICATION_OCTET_STREAM;   } } 
new PacketDecoder(jsonSupport,ackManager)
shortNameWithVariant.contains("-") && !shortNameWithVariant.endsWith("-ANY") && Language.REAL_LANGUAGES.length > 1
PApplet.splitTokens(pathDataBuffer,"|" + PConstants.WHITESPACE)
writeString(writer,fieldName,String.valueOf(reader.getByte()))
LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectFile)
factor >= 1.0
route.setDelay(5000)
/**   * Matches no characters.   */ public static final InputFastMatcher NONE=new InputFastMatcher(){   @Override public boolean matches(  char c){     return false;   }   @Override public String replaceFrom(  CharSequence sequence,  CharSequence replacement){     checkNotNull(replacement);     return sequence.toString();   }   private void checkNotNull(  CharSequence replacement){   }   @Override public String collapseFrom(  CharSequence sequence,  char replacement){     return sequence.toString();   }   @Override public String trimTrailingFrom(  CharSequence sequence){     return sequence.toString();   } } ; 
i > 0 && glyphPositions[i] - x <= x - glyphPositions[i - 1]
GithubNotifications.showInfoDialog(myPane,"Success","Connection successful")
_logHandle.invoke(sb,request,response)
LOG.debug("Exception occurred during processing request: {}",e.getMessage(),e)
newSelection >= 0 && newSelection < rowElements.length
length <= 0
paths.get(0)
Util.SDK_INT >= 25
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,notificationIntent)
mBuffer.remaining() >= toRead
version >= 2
new TraceBasedLocalRedeclarationChecker(trace,overloadChecker)
address.getHost()
id=10800
this(url,null,null,true); 
_log.warn(StringBundler.concat("Column ",columnName," in Table ",tableName," already is ",newTypeDefinition))
new InternetExplorerWebDriverImpl(projectDirName,portalURL)
private static final String DATE_FORMAT_PATTERN="yyyy-MM-dd'T'HH:mm:ss.SSSXXX"; 
mImageManager.load(holder.mImgFeatured,post.getFeaturedImageForDisplay(mPhotonWidth,mPhotonHeight),null,ScaleType.CENTER_CROP)
Double value
!isPrivateMessagingContact
coreLog.log(level,ex,String.format(format,data))
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS))
new TaipProtocolDecoder(new TaipProtocol())
!async || error
regenerateBackground()
assertThat(controller.actions()).hasSize(6)
fileInfo.getUfsPath()
singletonObject == null && allowEarlyReference
address != null
ContextResolver.class
projectsEntryPersistence.update(projectsEntry,false)
(r.info.flags & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0 && (r.intent.getFlags() & Intent.FLAG_ACTIVITY_CLOSE_SYSTEM_DIALOGS) == 0
ModuleOrderEntry myOrderEntry; 
myVfsEventNesting != 0
DirectoryReader.open(iw)
InputStream input=new BufferedInputStream(new FileInputStream(file)); 
"Stream " + importerName
Pair<Type,Accessor>
/**   * {@inheritDoc}  */ @Override public LongProperty clone(){   LongProperty prop=(LongProperty)super.clone();   prop.value=value;   return prop; } 
auditStrategy.addEntityAtRevisionRestriction(globalCfg,qb,rootParameters,INDEX_ENTITY_ALIAS + "." + revisionPropertyPath,INDEX_ENTITY_ALIAS + "." + verEntCfg.getRevisionEndFieldName(),false,indexIdData,revisionPropertyPath,originalIdPropertyName,INDEX_ENTITY_ALIAS,INDEX_ENTITY_ALIAS_DEF_AUD_STR,true)
DefaultKeyGenerator.setMaxTolerateTimeDifferenceMilliseconds(10)
BeanParamUtil.getInteger(contact,actionRequest,"suffixId")
new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,TypeDescription.OBJECT))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
numDataPoints - 1.0
stop <= start
Arrays.asList("/css/**","/js/**","/images/**","/webjars/**","/**/favicon.ico")
bulkSize > NO_BULK_REQUESTS && remainingUpstreams.get() > 0
normalizedUrl.toLowerCase(Locale.ROOT).startsWith(HTTPS_PROTOCOL)
dbCollection.save(clusterEvent,WriteConcern.FSYNCED)
wikiPagePersistence.findByR_N_H(page.getResourcePrimKey(),page.getNodeId(),false)
tsdb.metaTable()
new AtomicBoolean(false)
new Path(tblDesc.getLocation(),Warehouse.makePartPath(addPartitionDesc.getPartSpec()))
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,fromNode,direction,relTypes)
public static final OpenJPATemplates DEFAULT=new OpenJPATemplates(); 
d.split(" ")
new int[4700]
asList(8L)
new ConversationPrefsHelper(context,mThreadId)
new RegressionEvaluation(2)
DataBufferUtils.read(channel,this.bufferFactory,2)
Assert.assertTrue("First build time (" + timeOne + ") is not greater than second build time ("+ timeTwo+ ")",timeOne > timeTwo)
new RefCntRamDirectory()
parentOrActualGroup.isCompany() || parentOrActualGroup.isUser() || parentOrActualGroup.isUserGroup()
eocBound == Bound.END
messenger.sendCodeObsolete(res)
Assert.assertFalse(StringBundler.concat("After waited ",String.valueOf(time)," ",String.valueOf(timeUnit),". ",message))
DatabaseDescriptor.getRangeRpcTimeout()
System.currentTimeMillis() + 10000
title.substring(0,17)
new SimpleDateFormat(format,JSON.defaultLocale)
new SyncedFolderItem(UNPERSISTED_ID,mediaFolder.absolutePath,getString(R.string.instant_upload_path) + "/" + mediaFolder.folderName,true,false,false,AccountUtils.getCurrentOwnCloudAccount(this).name,0,false,mediaFolder.filePaths,mediaFolder.folderName,mediaFolder.numberOfFiles)
T stagedModel
30 * 365
@Override public String getMethod(){   return method; } 
RecentsActivity.EVENT_BUS_PRIORITY + 2
SimpleAttributeDefinitionBuilder.create(ModelDescriptionConstants.ANY_IPV4_ADDRESS,ModelType.BOOLEAN).setAllowExpression(false).setAllowNull(true)
exception.getMessage()
targetEditor.getScrollingModel()
CalendarBookingLocalServiceUtil.deleteCalendarBookingInstance(_user.getUserId(),calendarBooking,1,true,true)
CalendarBookingServiceUtil.addCalendarBooking(calendarId,childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext)
!allResources.isEmpty()
RCTCamera.getInstance().setFlashMode(_cameraType,flashMode)
completionContext.offset > end
r != null
message.get("org.apache.cxf.ws.rm.inbound") == null && message.get("javax.xml.ws.addressing.context.inbound") != null
Thread.sleep(100)
new ConnectionException(sm.getString("http2Parser.processFrameHeaders.decodingFailed"),Http2Error.COMPRESSION_ERROR)
/**   * Choose a default message to use if the applyAsync() method throws an exception.  * @return ZuulMessage  */ O getDefaultOutput(I input); 
args[5]
SLEEP_TIME=1500
Process.SYSTEM_UID != callingUid && nri.mUid != callingUid
Assert.assertNotNull(request.getContentType())
nativeDraw(canvas,color,extras,false)
InitialFact.class
formatWebXML(fileName,newContent)
new SyntaxException("Operator " + op + " not supported",op.getStartLine(),op.getStartColumn(),op.getStartLine(),op.getStartColumn() + 3)
Object minFractDigits=properties.get(NumberFormatSample.PROP_MIN_FRACT_DIGITS); 
components.contains(examplesMenu)
minBukkitBuildVersion=698
(StringBuilder)TransactionSynchronizationManager.getResource(bufferKey)
((FloatValue)input).getValue().doubleValue()
descriptorParser.parseMetaData(parserSettings,moduleDescriptorFile,false)
new float[initialPageCount]
CACHE.findOrInsert(classLoader,new TypeCache.SimpleKey(type,additionalInterfaces),new Callable<Class<?>>(){   @Override public Class<?> call() throws Exception {     return new ByteBuddy().with(new NamingStrategy.SuffixingRandom("SpockMock")).ignore(none()).subclass(type).implement(additionalInterfaces).implement(ISpockMockObject.class).method(any()).intercept(MethodDelegation.withDefaultConfiguration().withBinders(Morph.Binder.install(ByteBuddyInvoker.class)).to(ByteBuddyInterceptorAdapter.class)).transform(Transformer.ForMethod.withModifiers(SynchronizationState.PLAIN,Visibility.PUBLIC)).implement(ByteBuddyInterceptorAdapter.InterceptorAccess.class).intercept(FieldAccessor.ofField("$spock_interceptor")).defineField("$spock_interceptor",IProxyBasedMockInterceptor.class,Visibility.PRIVATE).make().load(classLoader).getLoaded();   } } ,CACHE)
getSupportFragmentManager().beginTransaction().add(android.R.id.content,postFragment).commitAllowingStateLoss()
GuiUtils.invokeLaterIfNeeded(() -> new VcsPushDialog(myProject,preselectedRepositories,GitBranchUtil.getCurrentRepository(myProject)).show(),modality,myProject.getDisposed())
j.next()
daysBack=7
left < chartCalculator.mContentRect.left
addTypes.get("subway_region")
new DefaultBinding<T,T>(new IdentityConverter<T>(type.getType()),type.isLob())
new int[3456]
currentMode == MODE_PULL_DOWN_TO_REFRESH
lp.type == WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL || lp.type == WindowManager.LayoutParams.TYPE_INPUT_METHOD
incomingMessage.getMessagePayloadByte(0)
resources[i].getFilename().equals(groovyFile)
user.isAuthorized("essentials.world." + user.getWorld().getName())
JBUI.scale(14)
DLFileEntryMetadataLocalServiceUtil.getFileVersionFileEntryMetadatas(dlFileVersion.getFileVersionId())
value.longLongValue()
ColorProperties.getColor("buttonGradientDark")
g.cachesx()
!BuildConfig.SUPPRESS_DOGFOOD_WARNING && BuildConfig.ENABLE_DEBUG_TOOLS && !SettingsUtils.wasDebugWarningShown(this)
logger.debug("Cannot play track ({})",e.getMessage())
GridGgfsTestUtils.jsonToMap(secondaryIpcEndpointConfiguration())
this.tvShows.removeAll(tvShows)
Messages.getString("TransMeta.Exception.ErrorOpeningOrValidatingTheXMLFile",fname)
setFloatingLabelInternal(mode)
Thread.sleep(5000)
mUserManager.hasUserRestriction(UserManager.DISALLOW_PRINTING,UserHandle.of(userId))
mWm.addAppToken(0,null,0,0,0,false,false,0,0,false,false)
mMountTable.resolve(getPath(next)).toString()
assertEquals(8,data.size())
ignoreUnknownFields=true
message.lastIndexOf(templateEnd,start)
ClassDirectoryBinarySpec.class
size=500
IndexSettingsModule.newIndexSettings(index,Settings.EMPTY)
fieldType.equals(SupportedFieldType.BROADLEAF_ENUMERATION.toString()) || fieldType.equals(SupportedFieldType.EXPLICIT_ENUMERATION.toString()) || fieldType.equals(SupportedFieldType.EMPTY_ENUMERATION.toString())
RESOLUTION_PATTERN.matcher(output)
!config.isAutoRead()
lastFailureException instanceof SocketTimeoutException
1L << QUOTIENT_BITS
callTimeoutMs=10000
DUMP_TIMEOUT_MS=100000
new Info("wchar_t","WCHAR").cast().valueTypes("char","int")
getBoolean(ASYNC_CLIENT + "acceptAnyCertificate",false)
isSingleTableOnly || shardingRule.tryFindTableRule(tableName).isPresent() || shardingRule.findBindingTableRule(tableName).isPresent()|| shardingRule.getDataSourceRule().getDefaultDataSource().isPresent()
new UnsupportedOperationException("Not implemented")
new CrypticClue("In a town where thieves steal from stalls, search for some drawers in the upstairs of a house near the bank.","Guard",DRAWERS,new WorldPoint(2611,3324,1),"Kill any Guard located around East Ardougne for a medium key. Then search the drawers in the upstairs hallway of Jerico's house, which is the house with pigeon cages located south of the northern East Ardougne bank.")
ExoPlayerFactory.newSimpleInstance(host,trackSelector,new DefaultLoadControl(),drmSessionManager,false,0)
serverService.getOutgoingInterceptors()
schedulerEventListenerWrapper.setClassName(groupName)
SocketUtils.findAvailableTcpPort(41000)
refreshableViewWrapper.addView(newEmptyView)
/**   * Gets the value of the miterlimit property.  * @return possible object is {@link BigDecimal }  */ public String getMiterlimit(){   return miterlimit; } 
1000 * 60 * 6
meta.getEnclosure()
_resourceExistsMap.get(key)
locator.getRegionLocation(regionName,true)
controller != null && controller.getMedia() != null
fields[i] >= 0 && in2 != null
Pattern.compile("^" + Pattern.quote(file.getAbsolutePath()) + "\\s*:\\s*\\d+\\s*:\\s*(?:warning:\\s*)?(.*)$",Pattern.DOTALL)
Integer.parseInt(leftStr)
logger.debug("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
relationshipCursor.type()
types.length > Tuple.MAX_ARITY
new IOException("Demo I/O error")
metaData.getColumnLabel(1)
SameValueContextualRule<ConfirmEmail,Email,String>
verificationResult.getCount() < 1
indexFile.isFile()
_vendorMySQL || _vendorPostgreSQL || _vendorSQLServer|| _vendorSybase
(BlockParentHandler)getParent()
i + 1L
view.getCompoundDrawablesRelative()
restRequestData.params.getPostBody()
sendCommand(CLIENT,Keyword.LIST.raw)
dataType.equalsIgnoreCase("NVARCHAR") || dataType.equalsIgnoreCase("NCHAR")
delegates.tabs.makeTabName(jobMeta,false)
LOG.trace(msg,this)
new StringPreference("map_tile_sources",TileSourceManager.getMapnikSource().getName(),false)
_cats + cid
myLastPoint.isNull() || myPressPoint.isNull()
closeCode <= 1001
shouldAutoCancel(sbn) || mRemoteInputManager.getKeysKeptForRemoteInput().contains(notificationKey)
content.contains(customCopyright)
/**   * Checkstyle frame model.   */ private final transient MainFrameModel model=new MainFrameModel(); 
Flux.from(this.messageService.publisherPreAuthorizeBeanFindById(1L)).subscriberContext(withUser)
instructions.setPeoplePropertyToValue("enabled_new_editor",false)
mAdapter.unregisterDataSetObserver(mObserver)
m_data.getFixString((int)m_length,charsetName)
Context.getPersonService().getRelationshipsByPerson(Context.getPersonService().getPerson(personId))
cfs.getSSTables().size() > 1 || !cfs.getTracker().getCompacting().isEmpty()
Exception ex
new RuleMatch(this,0,len,getMessage())
new ClearDatabaseChangeLogTableStatement(schema)
sm.getString("contextConfig.fixDocBase",context.getPath())
dockedBounds.bottom + dockDividerWidth
props.getArray(PropsKeys.TRANSACTIONAL_CACHE_NAMES)
new LightweightThread(null,null,new SuspendableRunnable(){   @Override public final void run() throws SuspendExecution {     SomeInterface i=new C();     System.out.println("i = " + i);     i.doStuff();   } } )
String.class
out.setSkipOnFault(value)
mContext.startActivityAsUser(intent,new UserHandle(mCurrentUser))
logger.debug("Cannot handle command ({})",e.getMessage())
assertEquals(0,calendar.get(Calendar.MONTH))
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS)
Assert.assertEquals(48,c.getInt(0))
context.registerSubsystem(SUBSYSTEM_NAME,1,1)
result == null ? 0L : result
setColor(barBackgroundColor)
new ArgumentPreparedStatementSetter(args)
MBTestUtil.addMessage(serviceContext.getScopeGroupId())
final T view
"found " + className + " -- "+ _className
mock.message(0).arrives().between(6,9)
new int[97]
10L * countStillActiveThreads()
request.getPathInfo()
zkWorker2.getWorker()
j < count
JavaAssistUtils.toPinpointParameterType(parameterTypes)
new IndexWriter(indexStoreA,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
en.getString(in)
case 2: 
minorVersion=18
MAKIBESF68(41)
new ConnectionException(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR)
Configuration.getMs(PropertyKey.USER_FILE_LOAD_TTL)
BTraceUtils.setIntrusionLevel(0)
9 + count
AttributeCache.instance().get(packageName,realTheme,styleable.Window,userId)
_logger.get().log(Level.WARNING,"Server seen down: " + _addr,e)
parent == null || !(parent instanceof PsiReferenceExpression)
KaleoTaskInstanceTokenLocalServiceUtil.searchCount(RandomTestUtil.randomString(),RandomTestUtil.randomString(),RandomTestUtil.randomStrings(10),false,true,serviceContext)
/**   * {@inheritDoc}  */ @Override public CollectionProperty clone(){   CollectionProperty prop=(CollectionProperty)super.clone();   prop.value=cloneCollection();   return prop; } 
d.getURIPath()
new PyStringLiteralLexer(PyTokenTypes.SINGLE_QUOTED_STRING)
new EndlessRecyclerOnScrollListener(footerAdapter){   @Override public void onLoadMore(  final int currentPage){     footerAdapter.clear();     footerAdapter.add(new ProgressItem().withEnabled(false));     Handler handler=new Handler();     handler.postDelayed(new Runnable(){       @Override public void run(){         footerAdapter.clear();         for (int i=1; i < 16; i++) {           fastItemAdapter.add(fastItemAdapter.getAdapterItemCount(),new SampleItem().withName("Item " + i + " Page "+ currentPage));         }       }     } ,2000);   } } 
Preconditions.checkNotNull(worker,"worker")
response.writeWith(Flux.error(error)).onErrorResume(ex -> Mono.empty())
rhs.getScore()
log.error(e1.getMessage(),e1)
startGridsMultiThreaded(NODES_CNT)
adapter.item(R.string.layer_overlay).selected(overlayLayer.getMap() != null ? 1 : 0).icons(R.drawable.ic_action_up_dark,R.drawable.ic_action_up_light).listen(listener).position(14)
new LocalComponentDependencyMetadata(componentId,selector,clientConfiguration,attributes,dependencyConstraint.getAttributes(),null,Collections.<IvyArtifactName>emptyList(),Collections.<ExcludeMetadata>emptyList(),false,false,false,true,dependencyConstraint.getReason())
Set<Class<? extends ITestNGListener>>
ICompactionScanner scanner
mViewAbove.setCurrentItem(0,animate)
assertEquals(4,possibleOutcomes.size())
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/SuperMethod2.kt")
createPermissionsXmlAsset(new SocketPermission("*:10389","connect,resolve"),new RuntimePermission("accessClassInPackage.com.sun.jndi.ldap"),new RuntimePermission("accessClassInPackage.com.sun.jndi.url.ldap"))
new OneRun(50.0780,9.1570,49.5860,9.9750,91715,1413)
0xffL << shift
_iterNumber=100
MinecraftServer.getServer().worldServers
Function.class
assertEquals(expected.ig,actual.ig,0.0000001)
FileTemplateManager.getInstance()
new DeleteResponse(shardId,delete.type(),delete.id(),randomInt(20),randomIntBetween(0,Integer.MAX_VALUE),true)
Assert.hasText(this.key,"A Key is required so CasAuthenticationProvider can identify tokens it previously authenticated")
Log.e(TAG,"This will become an error",ex)
String.format(Locale.ROOT,"%-15s: %s",entry.getKey(),String.join(",",markedRoles))
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.SERVER_ERROR,getHttpStatusSeries(result))
r != null && !r.finishing
KotlinTestUtils.navigationMetadata("idea/testData/quickfix/autoImports/indexCallExtensionImportSetOnNoOperatorWarning.test")
UUID.class
colDesc.getUpgradedType()
scheduler.scheduleAtFixedRate(positionalJob,0,thingConfig.getInterval(),TimeUnit.SECONDS)
String.format("Starting audit...%n" + expectedPath + ":3:14: "+ "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"+ expectedPath+ ":5:7: "+ "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"+ "Audit done.%n",expectedPath)
connection.getContentLength()
new IllegalArgumentException("the annotation is null")
LOGGER.error("{} - Failed to execute connection test query. ({})",poolName,e.getMessage())
protected abstract Block getBlock(); 
UpgradeStepRegistrator.class
GridCacheDataStructuresProxy.class
DLFileEntryTypeFinderUtil.filterFindByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
getString(R.string.agps_data_last_downloaded,"null")
ByteBuffer.allocate(16)
layoutAlgorithm.getStackTransform(t,stackScroll,mTmpTransform,null)
thrown.expect(UserCodeException.class)
loaded.getDeclaredConstructor()
this.deliveryDelay >= 0
new IndexWriter(dir,new StandardAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
FieldsWriter<S,?>
subscriptionMap.remove(sub)
new ObjectMapper().readerFor(DiskBalancerWorkStatus.class)
EntityCacheUtil.putResult(DefinitionModelImpl.ENTITY_CACHE_ENABLED,DefinitionImpl.class,definition.getPrimaryKey(),definition)
PsiTreeUtil.getParentOfType(anchor,PyParameter.class,PyDecorator.class)
log.info("Error registering JSP monitoring with jmx " + instance,ex)
spellParser.isParsing()
new LightweightThread(null,null,new Merge3Test())
table.get(i,j)
states.length >= 3
Loader.getResource(TEST_AUTOCONFIG_FILE,classLoader)
getVFile(name,false)
column.length > -1 && !column.isPrimaryKeyAutoIncrement
ArrayBlockingQueue<BodyChunk>
new QueryException(e,"Error in building dependency graph")
ArrayUtils.subarray(args,3,args.length)
simple.getToSentDate()
UpgradeStepRegistrator.class
projectMeasures.get(2L)
new LogicalRelationship(logicalModel,fromTable,toTable,fromColumn,toColumn)
graphHeight / 2
ImmutableList.of("content","datum","id","nested","nested.inner_nested","person","person.birthday","person.first_name","title","_id","_version","_score")
player.sendStatusMessage(new TextComponentString("Invalid schematic: " + e.getMessage()),true)
mState != STATE_PREPARE && mState != STATE_FINISHED
serviceLocalException(new Throwable("localBrokerInfo is null"))
transparencies != null && (faceTextures == null || faceTextures[face] == -1)
Arrays.asList("Die Katze ist schön.","Die eine Katze ist schön.","Eine Katze ist schön.","Beiden Filmen war kein Erfolg beschieden.","In einigen Fällen ist der vermeintliche Beschützer schwach.","Was Wasser für die Fische ist.","In den letzten Jahrzehnten ist die Zusammenarbeit der Astronomie verbessert worden.","Für Oberleitungen bei elektrischen Bahnen ist es dagegen anders.","... deren Thema die Liebe zwischen männlichen Charakteren ist.","Mehr als das in westlichen Produktionen der Fall ist.","Da das ein fast aussichtsloses Unterfangen ist.","Was sehr verbreitet bei der Synthese organischer Verbindungen ist.","In chemischen Komplexverbindungen ist das Kation wichtig.","In chemischen Komplexverbindungen ist das As5+-Kation wichtig.","Die selbstständige Behandlung psychischer Störungen ist jedoch ineffektiv.","Die selbstständige Behandlung eigener psychischer Störungen ist jedoch ineffektiv.","Im Gegensatz zu anderen akademischen Berufen ist es in der Medizin durchaus üblich ...","Im Unterschied zu anderen Branchen ist Ärzten anpreisende Werbung verboten.","Aus den verfügbaren Quellen ist es ersichtlich.","Das Mädchen mit den langen Haaren ist Judy.","Der Durchschnitt offener Mengen ist nicht notwendig offen.","Der Durchschnitt vieler offener Mengen ist nicht notwendig offen.","Der Durchschnitt unendlich vieler offener Mengen ist nicht notwendig offen.","Der Ausgangspunkt für die heute gebräuchlichen Alphabete ist ...","Nach sieben männlichen Amtsvorgängern ist Merkel ...","Für einen japanischen Hamburger ist er günstig.","Derzeitiger Bürgermeister ist seit 2008 der ehemalige Minister Müller.","Derzeitiger Bürgermeister der Stadt ist seit 2008 der ehemalige Minister Müller.","Die Eingabe mehrerer assoziativer Verknüpfungen ist beliebig.","Die inhalative Anwendung anderer Adrenalinpräparate zur Akutbehandlung asthmatischer Beschwerden ist somit außerhalb der arzneimittelrechtlichen Zulassung.","Die Kategorisierung anhand morphologischer Merkmale ist nicht objektivierbar.","Die Kategorisierung mit morphologischen Merkmalen ist nicht objektivierbar.","Ute, deren Hauptproblem ihr Mangel an Problemen ist, geht baden.","Ute, deren Hauptproblem ihr Mangel an realen Problemen ist, geht baden.","In zwei Wochen ist Weihnachten.","In nur zwei Wochen ist Weihnachten.","Mit chemischen Methoden ist es möglich, das zu erreichen.","Für die Stadtteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Für die Stadtteile und selbständigen Ortsteile ist auf kommunalpolitischer Ebene jeweils ein Beirat zuständig.","Die Qualität der Straßen ist unterschiedlich.","In deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren Installationen ist seit Version 3.3 ein neues Feature vorhanden.","In deren deutschen Installationen ist seit Version 3.3 ein neues Feature vorhanden.","Die Führung des Wortes in Unternehmensnamen ist nur mit Genehmigung zulässig.","Die Führung des Wortes in Unternehmensnamen und Institutionen ist nur mit Genehmigung zulässig.","Die Hintereinanderreihung mehrerer Einheitenvorsatznamen oder Einheitenvorsatzzeichen ist nicht zulässig.","Eines ihrer drei Autos ist blau und die anderen sind weiß.","Eines von ihren drei Autos ist blau und die anderen sind weiß.","Bei fünf Filmen war Robert F. Boyle für das Production Design verantwortlich.","Insbesondere das Wasserstoffatom als das einfachste aller Atome war dabei wichtig.","In den darauf folgenden Wochen war die Partei führungslos","Gegen die wegen ihrer Schönheit bewunderte Phryne ist ein Asebie-Prozess überliefert.","Dieses für Ärzte und Ärztinnen festgestellte Risikoprofil ist berufsunabhängig.","Das ist problematisch, da kDa eine Masseeinheit und keine Gewichtseinheit ist.","Nach sachlichen oder militärischen Kriterien war das nicht nötig.","Die Pyramide des Friedens und der Eintracht ist ein Bauwerk.","Ohne Architektur der Griechen ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","Ohne Architektur und Kunst der Griechen und Römer ist die westliche Kultur der Neuzeit nicht denkbar.","In denen jeweils für eine bestimmte Anzahl Elektronen Platz ist.","Mit über 1000 Handschriften ist Aristoteles ein Vielschreiber.","Mit über neun Handschriften ist Aristoteles ein Vielschreiber.","Die Klammerung assoziativer Verknüpfungen ist beliebig.","Die Klammerung mehrerer assoziativer Verknüpfungen ist beliebig.","Einen Sonderfall bildete jedoch Ägypten, dessen neue Hauptstadt Alexandria eine Gründung Alexanders und der Ort seines Grabes war.","Jeder Junge und jedes Mädchen war erfreut.","Jedes Mädchen und jeder Junge war erfreut.","Jede Frau und jeder Junge war erfreut.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und sozialen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben des Menschen einschließlich der biologischen und neurowissenschaftlichen Grundlagen ist die Psychologie interdisziplinär.","Als Wissenschaft vom Erleben und Verhalten des Menschen einschließlich der biologischen bzw. sozialen Grundlagen ist die Psychologie interdisziplinär.","Alle vier Jahre ist dem Volksfest das Landwirtschaftliche Hauptfest angeschlossen.","Aller Anfang ist schwer.","Alle Dichtung ist zudem Darstellung von Handlungen.","Allen drei Varianten ist gemeinsam, dass meistens nicht unter bürgerlichem...","Er sagte, dass es neun Uhr war.","Auch den Mädchen war es untersagt, eine Schule zu besuchen.","Das dazugehörende Modell der Zeichen-Wahrscheinlichkeiten ist unter Entropiekodierung beschrieben.","Ein über längere Zeit entladener Akku ist zerstört.","Der Fluss mit seinen Oberläufen Río Paraná und Río Uruguay ist der wichtigste Wasserweg.","In den alten Mythen und Sagen war die Eiche ein heiliger Baum.","In den alten Religionen, Mythen und Sagen war die Eiche ein heiliger Baum.","Zehn Jahre ist es her, seit ich mit achtzehn nach Tokio kam.","Bei den niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Bei den sehr niedrigen Oberflächentemperaturen ist Wassereis hart wie Gestein.","Die älteste und bekannteste Maßnahme ist die Einrichtung von Schutzgebieten.","Die größte Dortmunder Grünanlage ist der Friedhof.","Die größte Berliner Grünanlage ist der Friedhof.","Die größte Bielefelder Grünanlage ist der Friedhof.","Die Pariser Linie ist hier mit 2,2558 mm gerechnet.","Die Frankfurter Innenstadt ist 7 km entfernt.","Die Dortmunder Konzernzentrale ist ein markantes Gebäude an der Bundesstraße 1.","Die Düsseldorfer Brückenfamilie war ursprünglich ein Sammelbegriff.","Die Düssel ist ein rund 40 Kilometer langer Fluss.","Die Berliner Mauer war während der Teilung Deutschlands die Grenze.","Für amtliche Dokumente und Formulare ist das anders.","Wie viele Kilometer ist ihre Stadt von unserer entfernt?","Über laufende Sanierungsmaßnahmen ist bislang nichts bekannt.","In den letzten zwei Monate war ich fleißig wie eine Biene.","Durch Einsatz größerer Maschinen und bessere Kapazitätsplanung ist die Zahl der Flüge gestiegen.","Die hohe Zahl dieser relativ kleinen Verwaltungseinheiten ist immer wieder Gegenstand von Diskussionen.","Teil der ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der umfangreichen dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Teil der dort ausgestellten Bestände ist auch die Bierdeckel-Sammlung.","Der zweite Teil dieses Buches ist in England angesiedelt.","Eine der am meisten verbreiteten Krankheiten ist die Diagnose","Eine der verbreitetsten Krankheiten ist hier.","Die Krankheit unserer heutigen Städte und Siedlungen ist folgendes.","Die darauffolgenden Jahre war er ...","Die letzten zwei Monate war ich fleißig wie eine Biene.","Bei sehr guten Beobachtungsbedingungen ist zu erkennen, dass ...","Die beste Rache für Undank und schlechte Manieren ist Höflichkeit.","Ein Gramm Pfeffer war früher wertvoll.","Die größte Stuttgarter Grünanlage ist der Friedhof.","Mancher will Meister sein und ist kein Lehrjunge gewesen.","Ellen war vom Schock ganz bleich.","Nun gut, die Nacht ist sehr lang, oder?","Der Morgen ist angebrochen, die lange Nacht ist vorüber.","Die stabilste und häufigste Oxidationsstufe ist dabei −1.","Man kann nicht eindeutig zuordnen, wer Täter und wer Opfer war.","Ich schätze, die Batterie ist leer.","Der größte und schönste Tempel eines Menschen ist in ihm selbst.","Begehe keine Dummheit zweimal, die Auswahl ist doch groß genug!","Seine größte und erfolgreichste Erfindung war die Säule.","Egal was du sagst, die Antwort ist Nein.","... in der Geschichte des Museums, die Sammlung ist seit 2011 zugänglich.","Deren Bestimmung und Funktion ist allerdings nicht so klar.","Sie hat eine Tochter, die Pianistin ist.","Ja, die Milch ist sehr gut.","Der als Befestigung gedachte östliche Teil der Burg ist weitgehend verfallen.","Das Kopieren und Einfügen ist sehr nützlich.","Der letzte der vier großen Flüsse ist die Kolyma.","In christlichen, islamischen und jüdischen Traditionen ist das höchste Ziel der meditativen Praxis.","Der Autor der beiden Spielbücher war Markus Heitz selbst.","Der Autor der ersten beiden Spielbücher war Markus Heitz selbst.","Das Ziel der elf neuen Vorstandmitglieder ist klar definiert.","Laut den meisten Quellen ist das Seitenverhältnis der Nationalflagge...","Seine Novelle, die eigentlich eine Glosse ist, war toll.","Für in Österreich lebende Afrikaner und Afrikanerinnen ist dies nicht üblich.","Von ursprünglich drei Almhütten ist noch eine erhalten.","Einer seiner bedeutendsten Kämpfe war gegen den späteren Weltmeister.","Aufgrund stark schwankender Absatzmärkte war die GEFA-Flug Mitte der 90er Jahre gezwungen, ...","Der Abzug der Besatzungssoldaten und deren mittlerweile ansässigen Angehörigen der Besatzungsmächte war vereinbart.")
logError(BaseMessages.getString(PKG,"Abort.Log.Wrote.AbortRow",Long.toString(nrInputRows),getInputRowMeta().getString(r)))
args.toArray()
data[1] > 10
new EnumValidator<Mode>(Mode.class,false,true)
public LinearLayout llName; 
Y1
this.chatroom.getIdentifier().equalsIgnoreCase(chatRoomName)
value.length() < MAX_LENGTH
new AlertDialog(P.mContext,0,false)
Lists.<User>newArrayList(new DefaultUser().setLogin("john").setName("John"),new DefaultUser().setLogin("steven").setName("Steven"))
Long.valueOf(count1).compareTo(Long.valueOf(count2))
id=10871
Log_OC.e(TAG,"Trying to open a NULL OCFile")
client.disconnect()
context.getDialect() == POSTGRES && (type == null || !type.isTemporal())
(getSource().z() + getTarget().z()) / 3f
superClasses.length == 1 || node.isNewStyleClass()
getTelecomService().getVoiceMailNumber(accountHandle)
cc.serialize()
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(data,null),data.getSigVerCrypto(),data.getCallbackHandler())
ContainerUtil.newHashSet(EDITOR_POPUP,EDITOR_TAB_POPUP,COMMANDER_POPUP,PROJECT_VIEW_POPUP,FAVORITES_VIEW_POPUP,SCOPE_VIEW_POPUP,TESTTREE_VIEW_POPUP,TESTSTATISTICS_VIEW_POPUP,TYPE_HIERARCHY_VIEW_POPUP,METHOD_HIERARCHY_VIEW_POPUP,CALL_HIERARCHY_VIEW_POPUP,J2EE_ATTRIBUTES_VIEW_POPUP,J2EE_VIEW_POPUP,USAGE_VIEW_POPUP,STRUCTURE_VIEW_POPUP,TODO_VIEW_POPUP,COMPILER_MESSAGES_POPUP,ANT_MESSAGES_POPUP,ANT_EXPLORER_POPUP,UPDATE_POPUP,FILEVIEW_POPUP,CHECKOUT_POPUP,LVCS_DIRECTORY_HISTORY_POPUP,GUI_DESIGNER_EDITOR_POPUP,GUI_DESIGNER_COMPONENT_TREE_POPUP,GUI_DESIGNER_PROPERTY_INSPECTOR_POPUP,CREATE_EJB_POPUP,CHANGES_VIEW_POPUP,REMOTE_HOST_VIEW_POPUP,REMOTE_HOST_DIALOG_POPUP,TFS_TREE_POPUP,ACTION_PLACE_VCS_QUICK_LIST_POPUP_ACTION,PHING_EXPLORER_POPUP,NAVIGATION_BAR_POPUP,JS_BUILD_TOOL_POPUP,V8_CPU_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP,V8_HEAP_PROFILING_POPUP)
final CharSequence url
Thread.sleep(250)
MESSAGE_TUNE_DURATION_THRESHOLD_MILLIS=2000
createSubscriptionAndCheckForCompletion(bundle.getId(),productName,ProductCategory.BASE,term,NextEvent.CREATE,NextEvent.INVOICE,NextEvent.PAYMENT_ERROR)
Collect.getInstance().getString(R.string.file_fetch_failed,downloadUrl,response.getStatusLine().getReasonPhrase(),statusCode)
configurable.apply()
servletPath.equals("/") || servletPath.equals("/*")
Results.forbidden()
this.ctx.getActivity()
testProviderConfig()
argumentsLength == 1
@Override public final DivideByOnConditionStep or(String sql){   return or(condition(sql)); } 
Integer.parseInt(row.getValue(partitionCol).toString())
hitTestImpl(child,localPoint.x,localPoint.y,viewSelector,allowViewGroupResult)
TestUtils.randomByte() + 128
ColorProperties.getColor("selectionForeground")
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),13)
dockerClient.createContainerCmd("busybox")
invocation.addAttachments(context)
TermAllGroupsCollector c1=new TermAllGroupsCollector(groupField); 
context.getResources().getQuantityString(R.plurals.remote_search_downloading,numResults,numResults)
new StringBundler(10)
level < RF_STATUS_FULL_SIGNAL
grid(i).events().localListen(new IgnitePredicate<Event>(){   @Override public boolean apply(  Event evt){     if (nodeId.equals(((DiscoveryEvent)evt).eventNode().id()))     latch.countDown();     return true;   } } ,EVT_NODE_LEFT,EVT_NODE_FAILED)
attrs.size() > 0 && attrs.size() <= 4096
final ProtocolCommand cmd
logger.debug("Action Invalid Value Format Exception {}",ex.getMessage())
this.identityProvider.getAlias()
Objects.hash(expressions,withOrdinality)
symbolUsageValidator.validateCall(iteratorResolvedCall,iteratorFunction,context.trace,loopRangeExpression)
enabled=true
key.isInstance(v)
Blocks.dirt.getUnlocalizedName()
assertCorrectionsByOrder(rule,"Rytmus","Remus","Rhythmus")
NUM_DOCS_PER_TYPE=2000
currentPath == null || currentPath.isEmpty()
assertEquals(490,this.servletResponse.getContentLength())
logger.debug("Cannot play radio ({})",e.getMessage())
retries=1
inUseByte != Record.IN_USE.byteValue() && inUseByte != Record.NOT_IN_USE.byteValue()
Http11Processor.class
two.setAxisIndex(0)
new UnsupportedOperationException("Spatial index only supported with the MVStore")
AppLog.e(T.NOTIFS,"GCM Error: " + errorId)
new SSL((short)MIN_SSL_OPTIONS,(short)0,(short)sslPort)
new CacheException("Failed to unmarshall parameters.",e)
new ClosureCodeRemoval(compiler)
equalTo(12)
Object key=next.getKey(); 
declaringClass.isInterface() && directMethodCallCandidate.isStatic() && !(directMethodCallCandidate instanceof ExtensionMethodNode)
Iterables.filter(getPlayers(),new Predicate<ProxiedPlayer>(){   @Override public boolean apply(  ProxiedPlayer input){     return (input == null) ? false : input.getName().toLowerCase().contains(partialName.toLowerCase());   } } )
error(log,e,e.getMessage())
logger.debug("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice())
PathUtils.getTestDir(getClass()).getPath()
JavaConversions.mapAsJavaMap(logManager.logsByTopicPartition())
diffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT),filePath,revisions[1],revisions[0])
constructor.newInstance(conf,keyPrefix,options,writer,charset,fs)
map.keySet()
@Specialization protected String escapingString(String escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return escapingValue; } 
serviceContext.getModifiedDate(null)
!folder.isInTrashImplicitly()
public T valueOf(TreeNodeOnVcsRevision o){   return myBaseColumn.valueOf(o.getRevision()); } 
specification != null
!mIsPipRecentsOverlayShown || !mIsRecentsShown || !mIsPipFocusedInRecent|| !mPipManager.isPipShown()
argNr > 0
editor.commit()
oconf.getJSONObject("lapse").getDouble("mult")
public T parseNotation(Object notation){   assert canParse(notation) : "This parser only parses instances of " + typeToken.getName();   return parseType(typeToken.cast(notation)); } 
newWidth - BORDER_THICKNESS
null == remoteInterpreterProcess || !remoteInterpreterProcess.isRunning()
T event
currentDetails.getStorage().get(key)
templatesToAddressList(engine,to,model)
new KeycodeEntry(UNSUPPORTED_KEYCODE,CEC_KEYCODE_PAUSE_PLAY_FUNCTION,false)
assertEquals(2,visitor.getTables().size())
getExternalName(annotation.getOwner())
getXmppConnection().getAttempt() >= 3
new String(responseData,Charset.defaultCharset())
HDR_TYPE_ERR=0x04
getAsShortText(fieldValue,locale)
adapter.item(R.string.layer_osm_bugs).selected(settings.SHOW_OSM_BUGS.get() ? 1 : 0).icons(R.drawable.ic_action_bug_dark,R.drawable.ic_action_bug_light).listen(new OnContextMenuClick(){   @Override public void onContextMenuClick(  int itemId,  int pos,  boolean isChecked,  DialogInterface dialog){     if (itemId == R.string.layer_osm_bugs) {       settings.SHOW_OSM_BUGS.set(isChecked);     }   } } ).position(7)
UserHandle.of(mDeviceProvisionedController.getCurrentUser())
serviceFacade.updateProcessGroupContents(rev,groupId,versionControlInfoDto,flowSnapshot,getIdGenerationSeed().orElse(null),false,false,entity.getUpdateDescendantVersionedFlows())
savedNetwork.setParams(newParams)
dto.setVariables(variables)
SCHEMA(35,false)
from("direct:tap").delay(1000)
staticColumns.values()
"The adapter defined in " + c.getResources().getResourceEntryName(id) + " must be a <"+ assertName+ " />"
UClass sourceClass=UastUtils.findContaining(sourcePsi,UClass.class); 
signedResults.addAll(WSSecurityUtil.fetchAllActionResults(results,signedActions))
logger.debug("{}: unexpected repeat command; accepted values are ALL, ONE and OFF",command.toString())
length > 15
mContainerView.getHeight()
DEFAULT_PORT=8081
new SystemVibrator(context)
root != null && !tree.isRootVisible()
BaseMessages.getString(PKG,"RepositoryExplorerDialog.Partition.DoesNotExists.Message",partitionSchemaName)
HashMap<String,Object>
HttpClient.create().compress(true)
h.addParameters("-M","--name-status",parser.getPretty(),"--encoding=UTF-8")
first=word.substring(0,3)
ByteBuffer.allocate(4)
functionName != null
cache.remove(r)
delete.prepareRowMutations(keyspace,clientState,variables)
ArrayList<ActiveMQDestination>
!JiveGlobals.getBooleanProperty("xmpp.socket.directBuffer",false)
task == null || !task.isCompleted()
runUTRunner(testDir.getPath(),testFile.getPath() + "::GoodTest::test_passes","true")
currentTextFile + ".txt"
ImmutableMap.copyOf(System.getenv())
new IllegalArgumentException("Cacheability is null")
bar.setResultWaitTime(1000)
!regex.equals(lastRegex) || p == null
methodNode != null && closureExpression == null
new ByteBuddy().subclass(Loop.class).method(isDeclaredBy(Loop.class)).intercept(MethodDelegation.to(Interceptor.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
assertEquals(4,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size())
new IllegalStateException("Built-in library initialization failed. " + "Please ensure you have kotlin-runtime.jar in the classpath: " + e,e)
future1.get(2,TimeUnit.SECONDS)
contentHolder.getChildren().setAll(content)
serviceTester.systemRunning()
scrollSwipingToLoadMoreToDefault()
name == null || name.equals(yamlKeyValue.getKeyText())
firstItemVisible && lastItemVisible && lv.getChildCount() > 0
CompositeBlockWrapper parent
SegmentedFile.getBuilder(DatabaseDescriptor.getIndexAccessMode())
createReactive(config)
error.expectedMinimumMessageCount(1)
!inventory.getStackInSlot(i).isItemEqual(stack) || !ItemStack.func_77970_a(inventory.getStackInSlot(i),stack)
resultEndpoint.assertIsSatisfied(10000)
URLUtils.currentUrlEquals(uriBuilder.build().toASCIIString())
inLatch.endLatch.await(800,TimeUnit.MILLISECONDS)
Boolean.parseBoolean(System.getProperty("cassandra.test.flush_local_schema_changes","true"))
private CsvFilter filter; 
mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L
c.close()
args.argsLength() > 1 ? args.getDouble(1) : 5
@TruffleBoundary private static Object parseBooleanOrNull(String s){   if ("true".equals(s)) {     return Boolean.TRUE;   }  else   if ("false".equals(s)) {     return Boolean.FALSE;   }  else {     return null;   } } 
minorVersion=0
getTupledSet()
queueView.get().getExcerpt(index.longValue())
chatButton.setRolloverIcon(ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_ROLLOVER))
MAX_URL_LENGTH=1900
type.equals("document_library") || type.equals("image")
UUID cfId=Schema.instance.getId(ksName,cfName); 
case 7: 
UfsUtils.loadUfs(new AlluxioURI(AlluxioURI.SEPARATOR),new AlluxioURI(mUfsRoot + AlluxioURI.SEPARATOR),new PrefixList("alluxio;exclusions",";"),mLocalAlluxioClusterResource.get().getMasterConf())
hashInd != -1 && hashInd < 8
amp*=0.0
ColorProperties.getColor("primaryControlDarkShadow")
toPreProcess.getFeatures().divi(maxRange - minRange + Nd4j.EPS_THRESHOLD)
((WithNode)node).getNestedStatement()
schedule(new CheckQueue(),50)
provider.setClient(c2)
FileTemplateManager.getInstance(module.getProject())
mWPAndroidGlueCode.setTitle(title.toString())
PApplet.degrees(angle)
fireMessageReceived(ctx,completeMessage,e.getRemoteAddress())
myDispatcher.removeListener(l)
obtainMessage(MSG_LAYOUT_DIRECTION,layoutDirection,0)
params.height == LayoutParams.WRAP_CONTENT
methodFlatteningResolver.resolve(methodDescription)
i + skip < textLengthToProcess
sr.getLastStartId()
!isClassNameIdSpecified(classNameId,getRequiredClassNameIds())
assertEquals(1d / (totalTime / 1000d),calculator.getRate(),0.0001d)
authManager.refresh(conf,new HBasePolicyProvider())
value == null
SIDE_MARGIN_DIP=100
AnalyticsDataFactory.clearAnalyticsData()
shuttingDown
BUKKIT_VERSION=1846
new Attribute("implementationPackage",implementationPackage)
FileUtil.loadFile(new File(name + ".txt"),"UTF-8")
desc.getVersion()
from(Constants.PARALLEL_LOANBROKER_URI).process(new CreditScoreProcessor(Constants.CREDITAGENCY_ADDRESS)).multicast(new BankResponseAggregationStrategy()).setParallelProcessing(true)
/**   * GridGain handshake.   */ IGNITE_HANDSHAKE
assertEquals("test-bin",new String(serialized[0],US_ASCII))
parameters.getPositions().get(1)
LOGGER.warn("Could not execute markEntries",ex)
assertTrue("Expected special chars, got: '" + result + "'",result.indexOf("\u00f6\u00e4\u00fc\u00df") != -1)
new Dependency("org.grails","grails-project-api",grailsVersion,true,"org.grails:grails-core")
SC_FILE_SIZE_EXCEPTION=493
fromElement.getPropertyType(propertyPath,propertyPath)
new ConcurrentHashMap<String,InjectionMetadata>(256)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/SuperMembers.kt")
ClientCnxn.class
PoolResources.elastic("tcp-client-pool")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/handlers/basic/staticMembers/ImportJavaStaticMethod.kt")
getName()
GridCacheProjection<String,String>
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) - 100
backgroundColor=0xffCCCCCC
uri != null
CoerceFailedException.simple(pathRelativeToProjectRoot,object,getOutputClass(),e.getMessage())
new String(actualKeyBytes,StandardCharsets.UTF_8)
!typeTreeStruct.embedded()
hasColumn("Akismet_AkismetData","mbMessageId")
XMLHandler.getTagValue(jobnode,"shared_objects_file")
min.x <= max.x
ProtobufUtil.createSnapshotDesc(snapshot)
result == null
mTopFullscreenOpaqueWindowState == null && (win.getAttrs().privateFlags & WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR) != 0 || (win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD)
!context.maySwitchToAST(this) && stub != null
FluentIterable.from(method.getAnnotations())
/**   * Returns carrier name of the current subscription. <p>Carrier name is a user-facing name of carrier id  {@link #getSubscriptionCarrierId()}, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple  {@link #getSimOperatorName() SPN} but should have a single carrier name.Carrier name is not a canonical identity, use  {@link #getSubscriptionCarrierId()} instead.<p>The returned carrier name is unlocalized.  * @return Carrier name of the current subscription. Return {@code null} if the subscription isunavailable or the carrier cannot be identified.  * @throws IllegalStateException if telephony service is unavailable.  */ public CharSequence getAndroidCarrierNameForSubscription(){   try {     ITelephony service=getITelephony();     return service.getSubscriptionCarrierName(getSubId());   }  catch (  RemoteException ex) {     ex.rethrowAsRuntimeException();   } catch (  NullPointerException ex) {     throw new IllegalStateException("Telephony service unavailable");   }   return null; } 
random().nextInt(10)
new SolrException(400,"Operation requires schema to have a unique key field")
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.10,54.01)
internalViewSchema instanceof StructSchema
Assert.assertEquals(1,clusterEventListeners.size())
insertImport(node,target,asName,true)
jdbcTemplate.queryForObject("SELECT COUNT(0) FROM " + tableName,int.class)
ComplexityWidget.class
getCategoryMethodGetter(theClass,getterName,false)
Arrays.asList("SUM","MAX","MIN","AVG","TOPHITS","COUNT","STATS")
javaWriter.emitSingleLineComment("foo")
String.format("Could not convert URL %s to URI",resourceUrl)
new RuntimeException()
lineageInfo.getChildren()
directory.mkdirs()
BasicChaosMonkey.class
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("js/js.translator/testData/box/crossModuleRef"),Pattern.compile("^([^_](.+))\\.kt$"),TargetBackend.ANY,true)
this.cusolverDnDsyevd_bufferSize.invoke(null,solverDn,jobz,uplo,M,(DoublePointer)xAPointer.getDevicePointer(),M,(DoublePointer)xRPointer.getDevicePointer(),(IntPointer)worksizeBuffer.addressPointer())
(rsv & RSV_BITMASK) != 0
random()
toolWindow != null && toolWindow.getType() != ToolWindowType.SLIDING
!failureDesc.contains("14807") && !failureDesc.contains("14883") && !failureDesc.contains("11340")
hyphenationFile.toURI()
d.handledType()
Simple.forClass(String.class)
n + 1d
params.getBuckEventBus()
Boolean.parseBoolean(System.getProperty(INTRADC_TCP_NODELAY_PROPERTY,"true"))
new UnsupportedOperationException(msg)
gl.marginWidth=5
id=10838
ACTIVATION_CONFLICT
entityLabelProbVals.containsKey(label) && labelProbsForToken.get(label) < entityLabelProbVals.get(label)
bar.getValue() >= 0
T extends Model
vespaPortBase + 90
cell.localCopy(HeapAllocator.instance)
createTextAttributesKey(DART_DYNAMIC_PARAMETER_REFERENCE,PARAMETER_REFERENCE)
this.mPointerID == TouchEvent.INVALID_POINTER_ID
StringBuffer sb=new StringBuffer("Connection "); 
new LruCache<>(3)
fragment == null || !fragment.isVisible() || isFinishing()
1 / 5f
SUCCEEDED
CollectionUtils.isNotEmpty(blocks)
doNothing().when(safeOutputStreamConsumer).errOutput(anyString())
gatherDisableActionsLocked(mCurrentUserId)
FUNCTOR_PROCESS_DELAY=4
TypeUtils.isAnnotationMirrorOfType(mirror,Constants.ENTITY) || TypeUtils.isAnnotationMirrorOfType(mirror,Constants.MAPPED_SUPERCLASS)
String.format("%s/view/instances;_since=%d;state.name=running;tags.key=owner;" + "_expand:(instanceId,tags:(key,value))",eddaClient.getBaseUrl(region),startTime,BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY)
OverridingMethodsSearch.search(method,method.getUseScope(),false)
stateHolder.reloadDatapoints()
List<UIDMeta>
settings.setTextSize(WebSettings.TextSize.SMALLER)
usersResource != null
MigrationManager.instance.notifyDropUserType(ut)
new PropertyDescriptor.Builder().name("Return Type").description("Indicates the desired return type of the JSON Path expressions.  Selecting 'auto-detect' will set the return type to 'json' for a Destination of 'flowfile-content', and 'string' for a Destination of 'flowfile-attribute'.").required(true).allowableValues(RETURN_TYPE_AUTO,RETURN_TYPE_JSON,RETURN_TYPE_STRING)
new LinkedHashMap()
FLING_DIST_THRESHOLD=120
new TreeModelBuilder.GenericNodeData(filePath,fileStatus,i)
preambleLength=14
longitude >= MIN_LONGITUDE
SVID_SHIFT_WIDTH=8
dataSource.setInitExceptionThrow(false)
BatchServerInventoryViewProvider.class
win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden
new Location(target2.getWorld(),x,y,z,target2.getLocation().getYaw(),target2.getLocation().getPitch())
AstyanaxKeyColumnValueStore store=new AstyanaxKeyColumnValueStore(name,keyspaceContext.getClient(),this,retryPolicy); 
assertEquals(10,result.getBySeverity(AnalyticsMessageBase.Severity.WARNING).size())
!FileSystems.getDefault().canResolveSymbolicLink()
Long.valueOf(jvmName.split("@")[0])
private String mViewIdResourceName; 
(BigDecimal)config.get("location")
if (true) {   try {     int size=mOriginalWidth > mOriginalHeight ? mOriginalWidth : mOriginalHeight;     mBlackSurface=new Surface(session,0,"BlackSurface",-1,size,size,PixelFormat.OPAQUE,Surface.FX_SURFACE_DIM);     mBlackSurface.setAlpha(1.0f);     mBlackSurface.setLayer(0);   }  catch (  Surface.OutOfResourcesException e) {     Slog.w(TAG,"Unable to allocate black surface",e);   } } 
PrefUtils.setDefaultPreferenceValue(store,SQLPreferenceConstants.REFRESH_DEFAULTS_AFTER_EXECUTE,false)
mapper.setAttributePrefix("ROLE_")
configureSwipeToRefresh(view)
MSG_LOGIN_RESPONSE=0x4000
Math.round(value * 100) / 100d
public UrlCreator getReverseMapping(final String controller,final String action,Map params){   if (params == null)   params=Collections.EMPTY_MAP;   UrlMapping mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,action,params.keySet()));   if (mapping == null) {     mapping=(UrlMapping)mappingsLookup.get(new UrlMappingKey(controller,null,DEFAULT_ACTION_PARAMS));     if (mapping == null) {       return (UrlMapping)mappingsLookup.get(new UrlMappingKey(null,null,DEFAULT_CONTROLLER_PARAMS));     }   }   return mapping; } 
mDropDownAlwaysVisible || mDropDownHeight == ViewGroup.LayoutParams.FILL_PARENT
new int[15120]
proxyClassName.equals(otherClassName)
docData.length() > 0 && docData.charAt(0) == 65279
verbosity.shouldPrintOutput()
groupIndex.numOrd()
SubtleUtil.validateExists(inFile)
ConfigureUtil.configureSelf(configureClosure,this,delegate)
new WorldPoint(3498,3507,0)
Const.trim(optimizationLevelAsString)
commit.getTime()
getResultHandler(result).handleResult(exchange,result).switchOnError(ex -> result.applyExceptionHandler(ex).flatMap(exceptionResult -> getResultHandler(exceptionResult).handleResult(exchange,exceptionResult)))
info.gpx != null && info.file != null
this.findPreference(PREFERENCE_CATEGORY_ADVANCED).setIcon(advanced)
keySet.isEmpty()
sessionAboutToChange(session)
logger.error("connectionClosedOnError " + exception.getLocalizedMessage(),exception)
buffer.readableBytes() < 8
ThemeUtils.getDefaultDisplayNameForRootFolder(this)
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),completedTasks,false)
ConstantNode.forInt(config.logOfHRGrainBytes)
Futures.allAsList(resultList)
-16
Float.parseFloat(encoding.substring(equalsPos + 1))
resourceCollector.addIntResourceIfNotPresent(RType.ATTR,rawAttrName)
case 9: 
accountsList.get(j)
logger.debug("Skipping delivery of hint for deleted columnfamily",e)
JspUtil.makeJavaIdentifier(poolName)
log.logError(BaseMessages.getString(PKG,"JobUnZip.MoveToDirectoryEmpty.Label"))
{2,3,3,4,1}
error == null || error.isNetworkError()
List<Number>
y2 < bb.maxY
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type " + "<org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n"+ "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
patientState.getState().getUuid()
DEBUG && heightIn != height
clazz.getMethod(methodName,classArgs)
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope,Property.Filtered)
noPendingBlockIteration >= MAX_NO_PENDING_BLOCK_ITERATIONS
changeInfo.getNewParametersSignatureWithoutParentheses((JetCallableDefinitionUsage<PsiElement>)this)
new PseudoDescription().loadSilent(getClass().getClassLoader())
uri.getEncodedQuery()
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + '}')
fireCallPeerChangeEvent(CallPeerChangeEvent.CALL_PEER_STATE_CHANGE,oldState,newState,reason)
HIVE_TABLE_OFFLINE(2,USER_ERROR)
WSSec.getInboundWSSec(secProps,MessageUtils.isRequestor(soapMessage))
"LEVEL".equalsIgnoreCase(ident) || "CONNECT_BY_ISCYCLE".equalsIgnoreCase(ident)
_constructor.newInstance(0,fileEntry.getFileEntryId(),fileEntry.getFileEntryId(),_IMAGE_CROP_REGION,StringPool.BLANK,StringPool.BLANK)
/**   * Get a default <code>Factory</code> without a  {@link Connection}  */ final static Factory getNewFactory(SQLDialect dialect){   return getNewFactory(DEFAULT_INSTANCES[dialect.ordinal()]); } 
{8,10}
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
UpgradeStepRegistrator.class
LOG.warn("Error applying formatter '{}'. Skipping.",formatter.getClass().getName(),ex)
private final MediaDriverBroadcastReceiver mediaDriverBroadcastReceiver; 
super.onPause()
tree != null && tree.getLink() != null
_cloneFormat(DATE_FORMAT_ISO8601_Z,formatStr,DEFAULT_TIMEZONE,_locale,_lenient)
customReportContent != null && customReportContent.length != 0
assertEquals(0L,n2.expireLinkNodeRecid)
mDeviceProvisionedController.isCurrentUserSetup()
testModules("var foo = function () {var module = {};module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){var module={};module.exports={}};" + "var module$test=foo$$module$test")
(System.currentTimeMillis() - this.lastAccessedTime.getTime()) >= maxInactiveInterval
logger.trace("Received MyQ  JSON: {}",dataString)
this.policy.setMaxBinaryMessageSize(anno.maxBinaryMessageSize())
OnOffType.class
offset * 6
revisions.isEmpty()
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,calendar.getTimeInMillis(),AlarmManager.INTERVAL_DAY,reminderIntent)
JSInjectionController.getConcatenationText(value)
newArr[0]
serialVersionUID=914169633
assertEquals(3,steps.size())
initLocale || !mProcessesReady
logIndex <= lastSeenCommitIndex
Build.VERSION.SDK_INT < 21
depthError("modelZ")
@Override public S fillFromImpl(ModelMetricsBinomial modelMetrics){   super.fillFromImpl(modelMetrics);   r2=modelMetrics.r2();   logloss=modelMetrics._logloss;   AUC2 auc=modelMetrics._auc;   if (null != auc) {     AUC=auc._auc;     Gini=auc._gini;     String[] thresholds=new String[auc._nBins];     for (int i=0; i < auc._nBins; i++)     thresholds[i]=Double.toString(auc._ths[i]);     AUC2.ThresholdCriterion crits[]=AUC2.ThresholdCriterion.VALUES;     String[] colHeaders=new String[crits.length + 2];     String[] colHeadersMax=new String[7];     String[] types=new String[crits.length + 2];     String[] formats=new String[crits.length + 2];     colHeaders[0]="Threshold";     types[0]="double";     formats[0]="%f";     int i;     for (i=0; i < crits.length; i++) {       if (colHeadersMax.length > i)       colHeadersMax[i]="max " + crits[i].toString();       colHeaders[i + 1]=crits[i].toString();       types[i + 1]=crits[i]._isInt ? "long" : "double";       formats[i + 1]=crits[i]._isInt ? "%d" : "%f";     }     colHeaders[i + 1]="idx";     types[i + 1]="int";     formats[i + 1]="%d";     TwoDimTable thresholdsByMetrics=new TwoDimTable("Metrics for Thresholds","Binomial metrics as a function of classification thresholds",new String[auc._nBins],colHeaders,types,formats,null);     for (i=0; i < auc._nBins; i++) {       int j=0;       thresholdsByMetrics.set(i,j,thresholds[i]);       for (j=0; j < crits.length; j++) {         double d=crits[j].exec(auc,i);         thresholdsByMetrics.set(i,1 + j,crits[j]._isInt ? (Object)((long)d) : d);       }       thresholdsByMetrics.set(i,1 + j,i);     }     this.thresholds_and_metric_scores=new TwoDimTableV3().fillFromImpl(thresholdsByMetrics);     TwoDimTable maxMetrics=new TwoDimTable("Maximum Metrics","Maximum metrics at their respective thresholds",colHeadersMax,new String[]{"Threshold","Value","idx"},new String[]{"double","double","long"},new String[]{"%f","%f","%d"},"Metric");     for (i=0; i < colHeadersMax.length; i++) {       int idx=crits[i].max_criterion_idx(auc);       maxMetrics.set(i,0,idx == -1 ? Double.NaN : auc._ths[idx]);       maxMetrics.set(i,1,idx == -1 ? Double.NaN : crits[i].exec(auc,idx));       maxMetrics.set(i,2,idx);     }     max_criteria_and_metric_scores=new TwoDimTableV3().fillFromImpl(maxMetrics);   }   return this; } 
invocation.logger.finest("Asking if operation execution has been started: " + invocation)
420 * KB
Predicates.and(Predicates.containsPattern(".*/src/.+\\.py[c]{0,1}$"),Predicates.not(Predicates.containsPattern("third_party/")),Predicates.not(Predicates.containsPattern("integration_test/")))
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),workerAddress)
mPreferences.getBoolean(CLASSIC_NOTIFICATION,false)
@Override public final DivideByOnConditionStep or(String sql,Object... bindings){   return or(condition(sql,bindings)); } 
size=250
Localization.lang("Open SPIRES entry")
file.toURL()
ObjectHelper.loadClass(name,loader)
GL20.glUniform4fv(location,v)
6 * (float)Math.cbrt(radius)
LOG.debug("Skipping invalid VCS root: " + root)
LoggerSink.class
history2.getHistoryEntryId()
/**   * {@inheritDoc}   */ @Nullable @Override public GridDrStatus pauseState(){   return pause; } 
containsString("Could not load compiled classes for script-display-name from cache.")
PydevConsoleCli.setupPythonConsoleScriptInClientMode(cmd,sdk,port)
Looper.getMainLooper() == Looper.myLooper()
Fabric.with(this,crashlyticsKit)
titleListMergeable == null
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47),map(ProtocolConstants.MINECRAFT_1_11_1,0x47))
CopyOnWriteArrayList<IncomingServerSession>
dynamicType.getLoaded().getDeclaredConstructor()
lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())
_name + ".DEBUG"
new ConnectionException(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR)
synchronized (clz) {   mgr=managersCache.get(clz);   if (mgr != null)   return (T)mgr;   try {     Method method=clz.getDeclaredMethod("newInstance",KylinConfig.class);     method.setAccessible(true);     mgr=method.invoke(null,this);   }  catch (  Exception e) {     throw new RuntimeException(e);   }   managersCache.put(clz,mgr); } 
ServiceContextThreadLocal.getServiceContext()
new PackagesNotificationPanel()
from("direct:a").delay(1000)
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
info.getGroupIdLevel1ForSubscriber(subId,mContext.getOpPackageName())
executableType.getType().getPrimitiveType()
GceMockUtils.class
WeakSafeReadWriteLock strongReference
new IllegalArgumentException(sm.getString("pojoMethodMapping.partialPong",m.getName(),m.getClass().getName()))
CompletionServiceImpl.isPhase(CompletionPhase.EmptyAutoPopup.class,CompletionPhase.AutoPopupAlarm.class)
PsiTreeUtil.getParentOfType(element,PyClass.class,false)
GenericSendAndReceiveGateway.class
isEDT || app.isWriteAccessAllowed()
hashList.get(1)
e.printStackTrace(System.out)
options.checkProvides.isOn() || options.enables(DiagnosticGroups.MISSING_PROVIDE)
-1494091503
500 * 1000
ch == '&' && JdbcConstants.POSTGRESQL.equals(dbType)
ActorSDK.sharedActor().style.getDefaultBackgrouds()[3]
new FileNotFoundException(getURL() == null ? "null" : getURL().toString())
_releaseLocalService.updateRelease("com.liferay.dynamic.data.lists.service",upgradeProcesses,1,1,false)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
logger.trace("Propose response {} from {}",msg.payload,msg.from)
sendMsg(mAudioHandler,MSG_PERSIST_VOLUME,SENDMSG_QUEUE,PERSIST_LAST_AUDIBLE,device,streamState,PERSIST_DELAY)
Bytes.toBytes(tableNameOrRegionName)
last != null && (System.currentTimeMillis() - last.getTime()) <= maximumAge
private void _compareJarFiles(final Path expected,final Path actual) throws IOException {   Files.walkFileTree(expected,new SimpleFileVisitor<Path>(){     @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {       Path fileName=dir.getFileName();       if (_ignoredDirectories.contains(fileName.toString())) {         return FileVisitResult.SKIP_SUBTREE;       }       return FileVisitResult.CONTINUE;     }     @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {       Path relativize=expected.relativize(file);       Path fileInActual=actual.resolve(relativize);       Assert.assertTrue(Files.exists(fileInActual));       return FileVisitResult.CONTINUE;     }   } ); } 
rowsRet <= 0 || work.getLimit() == totalRows
LOG.warn("Could not append. Requesting close of wal",e)
pool != null && pool.getDataSource().getClass().isAssignableFrom(iface)
Long.parseLong(param.getValue())
new DirDiffViewer(context,(ContentDiffRequest)request)
includedGroup == null
MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))
UpgradeStepRegistrator.class
srcDir != sourceRoot && sourceRoot != null
value >= 0
moduleComponentSelector.getModule()
old + 10
new SAXException(e.getMessage(),e)
AudioSystem.isMicrophoneMuted()
new Duration(60,TimeUnit.SECONDS)
ThreadLocal<HttpServletResponse>
timedOut.await(1000,TimeUnit.MILLISECONDS)
!(layer instanceof FrozenLayer) && layer.type() == Layer.Type.CONVOLUTIONAL
minBukkitBuildVersion=731
new UnsupportedOperationException(String.format("Cannot apply plugin with id '%s' to '%s' (class: %s) as it is not a Project",pluginId,target.toString(),target.getClass().getName()))
x == -1
System.arraycopy(points,0,temp,0,pointCount)
isTouched(0.5f,1)
viewDefinition.getName()
enabledDisabled(checkNullability)
_buildTemplateWithGradle("spring-mvc-portlet","spring-mvc-dependency-management","--dependency-management-enabled")
assertEquals(7.5,((Object[])result[0][0])[1])
cache.localPeek(key)
new IndexWriter(dirName,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
Ints.min(startedSplits.get(),splits)
abandonSegment(entry.getKey(),entry.getValue())
sigmoidDerivative(ndArray,true)
IllegalArgumentException e
shortComment.lastIndexOf(')')
p.size()
TypeUtils.getKoltinConstructor(constructors,paramNames)
mImm.hideStatusIconInternal(mToken)
obj.getRequiredTokens()
logger.trace("observer timed out. notifying listener. timeout setting [{}], time since start [{}]",timeOutValue,new TimeValue(timeSinceStartMS))
target.isVectorOrScalar()
casProperties.getMonitor().getEndpoints().getSingleSignOnStatus()
refreshRotationLockTile()
expand("serializedforms/SimpleTriggerImplSerializationTest.testConstructed.{?}.ser","JDK16","JDK17","JDK18")
Call<RemoteCallResponseType>
mResources.getDrawable(id,null)
println_native(logId,ERROR,tag,msg + '\n' + getStackTraceString(localStack ? what : tr))
input.length() >= 4
Exception e
e.getTag(OSMTagKey.TUNNEL) != null && !e.getTag(OSMTagKey.TUNNEL).equalsIgnoreCase("no")
task.topRunningActivityLocked() != null && task.getTaskToReturnTo() != APPLICATION_ACTIVITY_TYPE
catalog.countEntries()
mLayerType != LAYER_TYPE_NONE
new ShardId(index,"_na_",0)
node == null || node.isRoot()
OperatorGroupBy<Long,T>
MBThread.class
queryProcessor.curJobRunning.get() <= 0
new byte[14]
invoiceBalance.divide(BigDecimal.TEN,BigDecimal.ROUND_HALF_UP)
this.soundButton
public static final HQLTemplates DEFAULT=new HQLTemplates(); 
builder().experimentalAnalysisTestingImprovements(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalRemapMainRepo(false).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowConflictingProviders(true)
testMissingJarReferences(_netBeansJars,_NETBEANS_PROPERTIES_FILE_NAME)
Path classpath=getClasspath(); 
8 * 1024 * 1024
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority())
exchange.getIn()
!connection.isClosed()
templatesToAddressList(engine,bcc,model)
NUM_DAYS_AGO=7
invoiceItem.getAmount().divide(BigDecimal.TEN,BigDecimal.ROUND_HALF_UP)
message == null || message.length <= MAC_LENGTH
partOfStatement.getLibraryId().getCanonicalText()
public T setStandardInput(InputStream inputStream){   operationParamsBuilder.setStdin(inputStream);   return getThis(); } 
log.warn(sm.getString("contextConfig.role.runas",runAs))
n.floatValue()
Assert.assertEquals(122L,ownerCapsuleNew.getFreeNetUsage())
? super K
new FileInputStream(engineSocket.getFileDescriptor(),true)
Allocation.createFromBitmap(mRS,outb,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT)
valueMono.switchIfEmpty(exchange.isNotModified() ? Mono.empty() : NO_VALUE_MONO)
Thread.sleep(400)
sampler.getFileField()
e.getKind().isClass() || e.getKind().isInterface()
Slog.w(LOG_TAG,"Trying to set ro.device_owner, but it has already been set?")
holders.remove(holder)
independentReserveOrderBook.getSellOrders()
shift > 0 && newroot.length == 1
new IntRangeValidator(1,true)
final JarBinarySpecInternal binary
rawType.getFullyQualifiedName(DBPEvaluationContext.DDL)
text.contentEquals(((TextButton)button).getText())
(MethodArgT)result
!handler.doProcess()
result.add(0,new InetSocketAddress("idontexist",80))
JblasBackend.class
group.isStagingGroup() || group.isStagedRemotely()
bb.get() == SEMICOLON_BYTE
mService.mHandler.obtainMessage(MSG_SYSTEM_UNLOCK_USER,userHandle,0)
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.ALPHA_8_BIT)
!"None".equals(tree.getClientProperty("JTree.lineStyle"))
GridGgfsTestUtils.jsonToMap("{type:'shmem', port:" + (GridIpcSharedMemoryServerEndpoint.DFLT_IPC_PORT + cnt) + "}")
comparePartitionOwnership(false,localMember,partition)
new GridServicesImpl(ctx,this)
Number reduceResult
new Mutation(KSNAME,ByteBufferUtil.bytes(key))
lsize < rsize
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB))
engine.getCurrentHeatValue()
attributes.setProperty(ATTRIBUTE_INITIAL_POOL_SIZE,Integer.toString(initialPoolSize))
LOG.info("Unable to parse HTTP response content",e)
DecorView.isNavBarToLeftEdge(bottomInset,leftInset)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers2.kt")
!task.isFreeformTask() || includeFreeformTasks
sliceSize * 10480
assertEquals(0,langTool.check("Certo, isto está bem. Este exemplo está correto. Certo que este também.").size())
table != null && type instanceof CustomFileType
mJSONObjectRequestListener=null
foregroundScanPeriod=p
DataWeDeployPlugin.class
res.setError(INSTALL_FAILED_UPDATE_INCOMPATIBLE,"New package not signed by keys specified by upgrade-keysets: " + pkgName)
logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'",option,value,channel,t)
pluginPanel.rebuild()
inflightRepository != null
text.indexOf('@') == -1 && textView.isEnabled()
final ImageView buttonNavigate=(ImageView)view.findViewById(R.id.context_menu_route_button); 
logger.debug("Playlist '{}' not found",playlist)
new JButton(Localization.lang("Browse"))
backups.length > 2
(Long)src
repository.loadForRequest(null)
i <= 10
private final WatcherRemoveCuratorFramework client; 
sendMsg(mAudioHandler,MSG_PERSIST_MASTER_VOLUME_MUTE,SENDMSG_REPLACE,state ? 1 : 0,0,null,PERSIST_DELAY)
activate(false)
delta=500
locale.getLocaleCode()
settings.ROUTER_SERVICE.getModeValue(routingHelper.getAppMode())
cnt=0
Helpers.exec(j4p,"setProfileRepositories(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
buf.halfOpenElement("conference")
previousAnnotation.compareToIgnoreCase(annotation)
detector == null || !detector.isInProgress()
PortalTopLevelBuildData portalTopLevelBuildData=getBuildData(); 
assertEquals("Incorrect number of fields",2,f.length)
AsyncProjectViewSupport.class
cache.clear()
Duration.between((Temporal)right,(Temporal)left)
ImmutableList.of(Substitution.of("%main%",main),Substitution.of("%python_binary%",pythonBinary),Substitution.of("%imports%",Joiner.on(":").join(imports)),Substitution.of("%workspace_name%",ruleContext.getWorkspaceName()))
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     SafeDeleteHandler.invoke(project,PsiUtilCore.toPsiElementArray(psiElements),false);   } } ,project.getDisposed())
parentGroupId <= 0
new Button("cancel"){   public void onSubmit(){     doReturn();   } } 
participantAddresses.get(2)
LOG.error("Failed to register State Store bean {}",e.getMessage())
ClassCastException e
@NotNull RemoteCredentialsHolder credentials
server_.copyFile(selectedFiles.get(0),targetFile,true,new VoidServerRequestCallback(progress){   @Override protected void onSuccess(){     view_.selectNone();   } } )
IllegalArgumentException e
DELAY=60000
StepVerifier.create(Flux.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).verifyError(IllegalStateException.class)
Color.fromRGB(0xDECF2A)
calleeAddress + ": jingle supported "
appOps.noteOpNoThrow(AppOpsManager.OP_GET_USAGE_STATS,uid,pkg)
index > widgets.length
Error ignored
logger.trace("Session created")
makeName(verb,parentName,dimensionPrefix,binaryType,target)
CORRELATION=5
inverterRealtimeResponse == null || inverterRealtimeResponse.getBody() == null || inverterRealtimeResponse.getBody().getData() == null
_paginator.concatMap(nextPage -> _itemsFromNetworkCall(nextPage + 1,10))
new ExportCSVTask(targetContext,habitList,selected,archiveFilename -> {   assertThat(archiveFilename,is(not(nullValue())));   File f=new File(archiveFilename);   assertTrue(f.exists());   assertTrue(f.canRead()); } )
assertFalse(mDisabled.hasFocus())
private Object requestCacheKey=UUID.randomUUID().toString(); 
info.getNaiForSubscriber(subId[0],mContext.getOpPackageName())
root.isDownloads()
StringBuilder detailBuffer=new StringBuilder(); 
(PropertyName)o
GraphicsUtil.setupAAPainting(gpt)
fieldMeta2.getString(field2)
a7 == a.a7
((DefaultHttpHeaderMapper)this.headerMapper).setOutboundHeaderNames(patterns)
provider.findValueSerializer(delegateType,property)
(JobFound)result
Optional<CacheEntry>
List<URLDetail>
endTime + EVENT_TIME_TOLERANCE
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws Exception {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
logger.debug("license [{}] - valid",license.uid())
MediaUploadReadyListener processor=new MediaUploadReadyProcessor(); 
!Version.isBlackberry(this) || !"qnx".equals(System.getProperty("os.name"))
new DhcpAckPacket(transactionId,(short)0,broadcast,serverIpAddr,relayIp,requestClientIp,yourIp,mac)
controller.system().equals(SystemName.cd) || deploymentId.zoneId().region().value().equals("aws-us-east-1a")
LOG.info("writeToDisk == true but configFilename == null")
private final StringBuilder sb=new StringBuilder(); 
myVMParameters.getComponent().setDialogCaption(myVMParameters.getRawText())
listJobInstances(project,cube,startTime,endTime)
new MockNode(settings.build(),Version.CURRENT,Arrays.asList(WatcherPlugin.class,LicensePlugin.class))
getFirstWindowIndexInSource(sourceIndex)
app.configuration().getString("timezone","")
childLeftTuple.reAddLeft()
jvmOptions.jvmArgs(DEFAULT_JVM_ARGS)
(Long)18003000L
mSearchFab.setScaleY(0.0f)
file == null || !file.isValid()
getSettings().SAVE_GLOBAL_TRACK_INTERVAL.get()
StorageEngineFactory.getStorageEngine(cube,false)
new IllegalArgumentException("permission cannot be null or empty")
CHECK_PKGNAME=true
arr.size(oi) != 1 && !isVector(arr.shape())
(paginatingData.second != null ? loadWithPaginationPath.call(paginatingData.second) : loadWithParams.call(paginatingData.first)).retry(2).compose(Transformers.neverError()).doOnNext(this::keepMorePath).map(envelopeToListOfData).map(pageTransformation).doOnSubscribe(() -> _isFetching.onNext(true)).doAfterTerminate(() -> _isFetching.onNext(false))
jarName.endsWith(".jar") || jarName.endsWith(".war")
odi.close()
config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
Simple.forClass(SkylarkList.class)
UpgradeStepRegistrator.class
cnt != 0
Character.isSurrogate(tmpBuffer[len - 1])
mbMessage.isDiscussion()
FileContentUtilCore.reparseFiles(fileSet)
revIdx < myParametersNotNull.length
new Paint(Paint.ANTI_ALIAS_FLAG)
private final Long id; 
testModules("var foo = function () {if (true) var module = {};" + "module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(){if(true)var module={};" + "module.exports={}};"+ "var module$test=foo$$module$test")
context.var("double",2)
instructionForm.getfulfillmentGroupId()
? super T
mWM.isKeyguardLocked()
termSourceField=p.get("termSourceField")
pY + pHeight
EnterpriseMapPublisherCreateCodec.decodeResponse(response).response
analyzedSentence.getTokensWithoutWhitespace()
Boolean.valueOf(viewContext.getProperties().get(PROPERTY_SLIDER_SECURITY_ENABLED))
myCards.add(card)
logger.error("failed to create index [{}]",e,indexMetaData.index())
@Priority(500)
(Integer)o * 1000L
new Jackson2HalModule.HalHandlerInstantiator(HalObjectMapperConfiguration.this.relProvider,HalObjectMapperConfiguration.this.curieProvider,null)
strategy.getFullJavaIdentifier(parameter)
adminClient.describeConsumerGroup(groupId,0)
Assert.assertEquals(peer.getSyncBlockRequested().isEmpty(),true)
IconGenerator.generateLauncherIconPreOreo(context,engineName.charAt(0))
getClass().getResource("porterTestData.zip").toURI()
new DBException("Error loading object metadata from database",ex,dataSource)
HttpStatus.FORBIDDEN.name()
PsiTypesUtil.isDenotableType(substitutor.substitute(typeParameter),expression)
mLastEvent.getMStartTime()
SimpleTextAttributes.merge(simpleTextAttributes,SimpleTextAttributes.fromTextAttributes(forcedAttributes))
assertThat(this.repository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username)).hasSize(1)
assertEquals(1,failures.size())
@Override public Response schema(Property property){   throw new RuntimeException("Not implemented"); } 
mService.getProfiles(UserHandle.myUserId(),false)
getSessionPool().returnObject(session)
!(listener instanceof ISuiteListener) && !(listener instanceof ITestListener) && !(listener instanceof IReporter)&& !(listener instanceof IAnnotationTransformer)
new SensitivityClassification(SUBSYSTEM_NAME,"web-connector",false,false,false)
new LightweightThread(null,null,new Merge2Test())
handleStartServer()
JPAQuery<?>
sharedOptsCount.containsKey(thread)
getDialect() instanceof PostgreSQLDialect || getDialect() instanceof HSQLDialect
/**   * <p>A  {@code TaskOutputs} represents the outputs of a task.</p><p>You can obtain a  {@code TaskOutputs} instance using {@link org.gradle.api.Task#getOutputs()}.</p>  */ @HasInternalProtocol public interface TaskOutputs extends CompatibilityAdapterForTaskOutputs {   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given closure is executed at task execution time. The closure is passed the task as a parameter. If the closure returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateClosure The closure to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Closure upToDateClosure);   /**   * <p>Adds a predicate to determine whether the outputs of this task are up-to-date. The given spec is evaluated at task execution time. If the spec returns false, the task outputs are considered out-of-date and the task will be executed.</p> <p>You can add multiple such predicates. The task outputs are considered out-of-date when any predicate returns false.<p>  * @param upToDateSpec The spec to use to determine whether the task outputs are up-to-date.  */   void upToDateWhen(  Spec<? super Task> upToDateSpec);   /**   * <p>Cache the results of the task only if the given closure returns true.  The closure will be evaluated at task execution time, not during configuration.  The closure will be passed a single parameter, this task. If the closure returns false, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param closure code to execute to determine if the results of the task should be cached.  */   @Incubating void cacheIf(  Closure closure);   /**   * <p>Cache the results of the task only if the given spec is satisfied. The spec will be evaluated at task execution time, not during configuration. If the Spec is not satisfied, the results of the task will not be cached.</p> <p>You may add multiple such predicates. The results of the task are not cached if any of the predicates return false.</p>  * @param spec specifies if the results of the task should be cached.  */   @Incubating void cacheIf(  Spec<? super Task> spec);   /**   * Returns true if this task has declared any outputs. Note that a task may be able to produce output files and still have an empty set of output files.  * @return true if this task has declared any outputs, otherwise false.  */   boolean getHasOutput();   /**   * Returns the output files of this task.  * @return The output files. Returns an empty collection if this task has no output files.  */   FileCollection getFiles();   /**   * Registers some output files for this task.  * @param paths The output files. The given paths are evaluated as per {@link org.gradle.api.Project#files(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder files(  Object... paths);   /**   * Registers some output file for this task.  * @param path The output file. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder file(  Object path);   /**   * Registers an output directory for this task.  * @param path The output directory. The given path is evaluated as per {@link org.gradle.api.Project#file(Object)}.  * @return a property builder to further configure this property.  */   TaskOutputFilePropertyBuilder dir(  Object path); } 
fileExtension.equals("testcase") || fileExtension.equals("prose")
iconsCache.getIcon(R.drawable.ic_action_keyboard,R.color.coordinate_input_keyboard_icon_color)
zkController.getZkStateReader().getReplicaProps(collection,shardId,leaderReplica.getName())
IOException e
exc.getXMPPError() != null && exc.getXMPPError().getCode() == 409
mGBDevice.getHardwareVersion()
right < startFromPixel + mWidthPerDay
NumberUtils.decodeHighUnsignedNibble(encodedInstruction[5])
Assert.assertEquals(transaction.getEffectiveDate().toLocalDate().compareTo(expected.getPaymentDate()),0,"Actual date " + transaction.getEffectiveDate() + ", expected date "+ expected.getPaymentDate())
this(name,i18nKey,icon,isEnableable,null); 
maxSize < (used / 1024 / 1024)
XMLHandler.closeTag(XML_DATA_TAG)
GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))
/**   * Creates a struct with the he given field values and message format for unknown fields. <p>The custom message is useful for objects that have fields but aren't exactly used as providers, such as the  {@code native} object, and the struct fields of {@code ctx} like{@code ctx.attr}.  */ public SkylarkInfo create(Map<String,Object> values,String errorMessageFormatForUnknownField){   return SkylarkInfo.createSchemalessWithCustomMessage(this,values,errorMessageFormatForUnknownField); } 
JSLinterUtil.validateInterpreterAndPackage(collectedInfo.getProject(),TsLintDescriptor.PACKAGE_NAME,collectedInfo.getState(),collectedInfo.getVirtualFile())
delegate.tokenize(token,regex,group)
LineNumberConvertor.Builder.createRight(data.getLines())
new TimedTransRunner("test/org/pentaho/di/run/sortedmerge/SortedMergeSimple.ktr",LogWriter.LOG_LEVEL_ERROR,AllRunTests.getOldTargetDatabase(),AllRunTests.getNewTargetDatabase(),1000000)
timeoutMs > 0
Color.fromRGB(0x3B511A)
buf.writeByte(1)
WebAppUtils.getResolvedRMWebAppURLWithScheme(conf)
jp.getDoubleValue()
ensureYellow()
minorVersion=4
settingId != null && runtimeInfos != null
false || mSpew
containerLats.length - 1
mTrustListeners.remove(i)
MonitoringPortlet.isMonitoringPortletResourceRequest()
page != Page.ARCHIVE && page != Page.CONVERSATION_MENU_OVER_CONVERSATION_LIST
mAdapter.getCount() > i && mAdapter.getItem(i) != null
previous != null && previous != data
assertQ("test date statistics values",req,"//long[@name='count'][.='2']","//long[@name='missing'][.='1']","//date[@name='min'][.='1970-01-02T10:17:36Z']","//date[@name='max'][.='1970-01-12T10:20:54Z']")
@RunWith(HazelcastParallelClassRunner.class) @Category(value={QuickTest.class,ParallelTest.class}) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest {   @After public void cleanup(){     System.clearProperty("hazelcast.serialization.custom.override");   }   @Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate() throws Exception {     Config config=new Config();     SerializationConfig serializationConfig=new SerializationConfig();     SerializerConfig serializerConfig=new SerializerConfig();     serializerConfig.setTypeClassName(PutOperation.class.getName());     serializerConfig.setImplementation(new PutOperationWithNoReplicationSerializer());     serializationConfig.addSerializerConfig(serializerConfig);     config.setSerializationConfig(serializationConfig);     System.setProperty("hazelcast.serialization.custom.override","true");     String mapName=randomMapName();     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance instance1=factory.newHazelcastInstance(config);     HazelcastInstance instance2=factory.newHazelcastInstance(config);     HazelcastInstance instance3=factory.newHazelcastInstance(config);     final ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map2=instance2.getReplicatedMap(mapName);     final ReplicatedMap<Object,Object> map3=instance3.getReplicatedMap(mapName);     final String key=generateKeyOwnedBy(instance2);     final String value=randomString();     map1.put(key,value);     assertEquals(value,map1.get(key));     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(value,map2.get(key));         assertEquals(value,map3.get(key));       }     } );   } public class PutOperationWithNoReplicationSerializer implements StreamSerializer<PutOperation> {     @Override public void write(    ObjectDataOutput out,    PutOperation object) throws IOException {       object.writeData(out);     }     @Override public PutOperation read(    ObjectDataInput in) throws IOException {       final PutOperationWithNoReplication operation=new PutOperationWithNoReplication();       operation.readData(in);       return operation;     }     @Override public int getTypeId(){       return 8778;     }     @Override public void destroy(){     }   } class PutOperationWithNoReplication extends PutOperation {     public PutOperationWithNoReplication(){     }     @Override protected Collection<Address> getMemberAddresses(){       return Collections.emptyList();     }   } } 
Long id
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).switchOnError(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
context.getString(R.string.notification_new_messages_title,newMessages)
myProject.isDisposed() || myProject.isDefault()
Arrays.asList(Http2OrHttpChooser.SelectedProtocol.HTTP_2.protocolName(),"h2-15","h2-16")
edgeId >= edgeCount
eventFunc.equals("conf_api_sub_transfer") || eventFunc.equals("conference_api_sub_transfer")
new HandlingEvent(cargo,new Date(10L),new Date(20L),HandlingEvent.Type.RECEIVE,b5,null)
!name.equals(currentMethod.getName())
ViewFileSystemTestSetup.createConfig()
WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)
insets.left != 0
portletDataContextClone.setCompanyGroupId(portletDataContext.getCompanyGroupId())
Nd4j.create(this.data,this.arrayShape)
functor != 0 && mWebView.getViewRootImpl()
new RouteCalculationResult(res,null,params,null,true)
validatePropertyElement(propertyElement,filePath)
commState.putBoolean("sys",sys)
AWAKE_INTERVAL_DEFAULT_MS=10000
Assert.assertEquals(result.getReceipt().getEnergyUsageTotal(),52439)
new ColorUIResource(0x7F6C00)
mFlags.get("debug")
connection.zrevrangeByLex(key,max,min)
new RMNodeImpl(nodeId,rmContext,null,0,0,null,null)
this.getOwnerAddress()
snapshotTypes != null && snapshotTypes.length > 0
newReader == null || newReader == this.reader
private JTextArea errorLabel; 
(Repository)ethereum.getRepository()
!mHasCallback || mCurrentViewId == null
thingGroupItem.getLabel() == null || !thingGroupItem.getLabel().equals(label)
stack == null || stack.mStackId != DOCKED_STACK_ID
onPackageDisappeared(pkgList[i],mChangeType)
comparator != null
1533529947843L + 3001
Encr.decryptPassword(r.searchValue("PASSWORD").getString())
new InputStreamReader(urlConnection.getInputStream(),StandardCharsets.UTF_8)
qs[1]
assertClusterSizeEventually(2,nodes[0])
ArraysUtil.toString(extensionArray)
log.logError(toString(),"File [" + realFilename + "] doesn't exist!")
decompiler.addPreservedComment(ts.getString())
new ProgressDialog(getActivity(),R.style.ProgressDialogTheme)
logger.error("{} is missing from the session and can not be retrieved.",OAuthConstants.OAUTH20_CALLBACKURL)
epi.initialise(ei,boi,engine,true,false)
graphModel.getUndirectedGraphVisible()
JwsUtils.getSignatureVerifier(key,jwt.getJwsHeaders().getSignatureAlgorithm())
newName.equalsIgnoreCase(code[i].getPrettyName())
assertEquals(6358482l,received.get(0)[1])
awaitPartitionMapExchange(true,true,null)
InboundHandshakeHandler.class
to.serialize()
m != null && m.size() > 0
Simple.forClass(Integer.class)
logger.trace(evt.getReason())
memoryMap.getInt("mappedWithJournal",-1)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
e2.getValue()
/**   * {@inheritDoc}  */ @Override public ObjectProperty clone(){   ObjectProperty p=(ObjectProperty)super.clone();   p.value=value;   return p; } 
!file.exists()
VersionedFlowSnapshotMetadataSetEntity.class
GL20.glGetVertexAttribiv(index,pname,params)
(NoteDrawerCategoryAdapterViewHolder)convertView.getTag()
MockRamDirectoryService.class
MotionEvent.obtain(downTime,eventTime,MotionEvent.ACTION_UP,x,y,0)
new InvoicePaymentModelDao(id,createdDate,type,invoiceId,paymentId,paymentDate,amount,currency,paymentCookieId,linkedInvoicePaymentId)
usingDrawingCache
mHomeStackResizable && adjustedForIme && !mIsInMinimizeInteraction
blackHoleGenerator.getDeclaredConstructor()
startActivity(in)
y <= 32
log.severe("Error executing SQL " + statement,e)
fileEntry.getMimeType(version)
idleTime=60000
f.getsEpicID().compareToIgnoreCase(ff.getsEpicID()) >= 1
RunnerMediator.injectRunnerCommand(super.postProcessCommandLine(commandLine),false)
AdviceWithTasks.afterByToString(route,toString,answer,selectFirst,selectLast,selectFrom,selectTo,maxDeep)
String.format("'%s'",targetPlatform.getName())
Iterator<Cell>
assertThat(pluginInfo.getRequiredPlugins()).extracting("key").containsOnly("java","pmd")
ConcurrentHashMap<String,Counter>
promise.tryFailure(new ClosedChannelException())
compareStepMeta != null
private final ParallelFields fields; 
new IllegalStateException(sm.getString("coyoteResponse.sendError.ise"))
put(TYPES,new MapTypeCaster(),Map.class)
new IllegalArgumentException(String.format("You cannot %s an empty string",operationDescription))
Json.createArrayBuilder().add(GET_BY_ID_METHOD_SPEC)
getExecutionContext(event,false)
SecurityUtil.remove(s)
mock.expectedMessageCount(1)
exportAttributes && attributeModel != null
timeout=120000
Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)
cache(1)
127 + (USE_OLD_HISTORY ? 1000 : 0)
new MilightV6SessionManager(queuedSend,bridgeID,scheduler,(SessionState state) -> {   if (state == SessionState.SESSION_VALID) {     s.release();   } } ,null)
DEBUG_CAMERA_LIFT=false
new org.apache.ws.security.message.token.UsernameToken(tokenElement)
sbn.getPostTime()
pgl.loadFragmentShader(fragFilename)
Long.valueOf(p.getProperty(screenName + ".id"))
get(0,0,0,0,225,0,0.4f)
private final ChannelPipeline pipeline; 
invoke(compile("testL2I"),12L)
new TelnetServerInitializer()
symbolUsageValidator.validateCall(resultingCall,resultingCall.getResultingDescriptor(),trace,byKeyword)
new ClassFormatException("Unexpected element value kind in annotation: " + type)
parent instanceof PsiReturnStatement || parent instanceof PsiResourceVariable
HttpUtil.removeParameters(uri)
retVal=(x == constValue)
@Override public HotSpotResolvedObjectType getDeclaringClass(){   return holder; } 
context.getSourcePathResolver().getAbsolutePath(resDir)
Arrays.asList("100b","100")
resultSetView.getGridControl()
new ByteBuddy().subclass(Foo.class).method(isDeclaredBy(Foo.class)).intercept(FixedValue.value("Hello World!")).method(named("foo")).intercept(FixedValue.value("Hello Foo!")).method(named("foo").and(takesArguments(1))).intercept(FixedValue.value("...")).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
epochNum=100
new EmoteClue("Cheer at the top of the agility pyramid. Beware of double agents! Equip a blue mystic robe top, and any rune heraldic shield.",new WorldPoint(3043,4697,3),CHEER,item(MYSTIC_ROBE_TOP),any("Any rune heraldic shield",item(RUNE_SHIELD_H1),item(RUNE_SHIELD_H2),item(RUNE_SHIELD_H3),item(RUNE_SHIELD_H4),item(RUNE_SHIELD_H5)))
XMLInputFactory::newInstance
EmailFilter.filter().receivedDate(EmailFilter.Operator.EQ,1524575533757L)
assertEquals(1,configsInJars.size())
Assert.assertEquals(values,expected)
deployments.get(deploymentName)
shell.setSize(740,678)
DeprecationLogger.nagUserWithDeprecatedBuildInvocationFeature(deprecation,String.format("This %s",suffix),null)
slow=false
Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)
ArrayNodeBaseTest<LazyHeadArrayNode>
!isProcessTerminated()
props.containsKey("log.adapter")
DateTimeFormat.getShortDateTimeFormat()
assertEquals("Unable to open ''.",iter.next().getMessage())
animateType != 8
snap.getGravity() == Gravity.CENTER_HORIZONTAL || snap.getGravity() == Gravity.CENTER_VERTICAL
FileUtil.loadFile(new File(testFileName),true)
!fields.contains(name)
deltaY >= 0
activity.createTimeListPreference(settings.SAVE_TRACK_INTERVAL,SECONDS,MINUTES,1000,R.string.save_track_interval,R.string.save_track_interval_descr)
Nd4j.createUninitializedDetached(shape)
"https".equals(uri.getScheme())
new BoBHash(SHA1.hex(bobData.getContent()),"sha1")
(article == null) || !hasViewPermission() || (articleDisplay == null)|| isExpired()|| article.isScheduled()|| article.isPending()
List<Exception>
countNewlines(headerFragment + lhsFragment + thenFragment) + 2
Strings.isNotBlank(jvmArguments)
session.executePost(urlPath,parameters,responseHandler)
formatter.format("%s",toString(Verbosity.Id))
currentTransform.getInputs()
JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent)
equalTo(7)
KeycloakHttpServerAuthenticationMechanism.class
yvel == 0.f || Math.abs(xvel) > Math.abs(yvel)
r.toLocalRuleString()
timeOut=240_000
mDownloadXtraDataPending=false
a.willChangeBounds()
LOG.info("Download " + fileURI + " in "+ toFile)
public String getValue(){   return value; } 
TypeUtil.getName(type)
new CommandLineException("The result couldn't be retrieved (perhaps the task was cancelled",e)
new ActivityMvpNonConfigurationInstances<>(presenter,nonMosbyConfigurationInstance)
@InSequence(6)
ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage())
WrapUtil.<Object>toList("src/main/java","src/main/java","src/main/resources")
HashMap<String,String>
length / 2.0f
mService.disableNetwork(netId)
new OptiqSemanticException(generateErrorMessage(tabref,"Schema of both sides of union should match: Column " + field + " is of type "+ lInfo.getType().getTypeName()+ " on first table and type "+ rInfo.getType().getTypeName()+ " on second table"))
_fragmentEntryLocalService.deleteFragmentEntry(fragmentEntryId)
T args
InternalAttribute attribute=(InternalAttribute)o; 
endpoints.add(entry.getValue())
builder.breakOp(" ")
Exception t2
scorecard.getUseReasonCodes()
nextMapping == null || column > getColumn(nextMapping)
!transmittableAudioEncodings.contains(sdp)
getAttributes(link,SystemInfo.areSymLinksSupported)
new PaymentApiException(e,ErrorCode.PAYMENT_GET_PAYMENT_METHODS,paymentMethodModelDao.getAccountId(),paymentMethodModelDao.getId())
String.format("%s: language=%s description=%s",commentFrame.id,commentFrame.language,commentFrame.description)
parentFile.isFile()
expected == int.class || expected == Integer.class
new BuckUncheckedExecutionException(e,"When starting activity.")
myConfigFiles.values()
bundleContext.getBundle().getResource(uri)
el instanceof GridSqlSubquery
new ResourceServlet()
TestSuiteEnvironment.getHttpAddress()
this.registrations.remove(handler)
getConnectTimeout()
Log_OC.e(TAG,"Access to unexisting list of files fragment!!")
grantAlias == null || "".equals(grantAlias)
DeploymentDescription.getReplaceDeploymentOperation(locale)
wf.setVersion(2)
operands.length != 2
return guess; 
LOG.error(exc)
/**   * Callback that is invoked after each test method has been invoked.  * @param context the current test extension context  */ void afterEach(TestExtensionContext context) throws Exception ; 
!service.mRequestFilterKeyEvents || (service.mServiceInterface == null)
synchronized (this) {   return (Class)classCache.get(name); } 
synchronized (mService) {   activityIdleInternalLocked(r != null ? r.appToken : null,true,null); } 
logger.fine("Recording function information")
LOG.warn("Transport ({}) failed {} attempting to automatically reconnect: {}",connectedTransportURI,(reconnectOk ? "," : ", not"),e)
LOGGER.info("Invoking authentication post processor [{}]",p)
assertValue(context,recordClass,Trait.INSTANTIABLE,Trait.MEMBERS,Trait.HOST_OBJECT)
employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100.1)
public static DurationArray durationArray(TemporalAmount[] values){   DurationValue[] durations=new DurationValue[values.length];   for (int i=0; i < values.length; i++) {     durations[i]=durationValue(values[i]);   }   return new DurationArray(durations); } 
analysis.getType(windowFunction)
properties.getProperty(protocol + ".extended")
setDiskExpiryThreadIntervalSeconds(Long.valueOf((String)cacheSettings.get("diskExpiryThreadIntervalSeconds")).longValue())
toString(includePrivateKeys,null,includeTransactions,includeExtensions,chain)
(fl & FLAG_LAYOUT_NO_LIMITS) != 0 && attrs.type != TYPE_SYSTEM_ERROR
dest.writeLong(this.milestone)
list(TYPES,newline(),CsmElement.newline(),CsmElement.none(),CsmElement.newline())
ClosedChannelException e
eventFunc.equals("conference_del_member") || eventFunc.equals("conference_member_del")
spaceProperty.getMinSpaces() >= 0 && getTotalSpaces() < spaceProperty.getMinSpaces()
new CuratorEventImpl(client,CuratorEventType.CHILDREN,rc,path,null,o,stat,null,strings,null,null,null)
new SeleniumBuilderFileUtil(".",".")
hook(new XMediaRecorder("setOutputFile",XRestriction.cMedia,new String[]{"RECORD_AUDIO","RECORD_VIDEO"}),"android.media.MediaRecorder")
this.internalNameMapping
new Selector(10000,failedAuthenticationDelayMs,metrics,time,"MetricGroup",channelBuilder,new LogContext())
parser.parseLight(GroovyElementTypes.GROOVY_FILE,builder)
new InetSocketAddress("localhost",0)
RuntimeException e
new ServletHolder(getAccountServlet)
S extends Capability
l_Inflater.inflate(R.layout.adv_user_sms_listview,parent,false)
public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
uncompressedProto.length < 2560000
getEffectiveHstsEnforced()
assertEquals(16,services.size())
Arrays.asList("Motorola IHF1000","i.TechBlueBAND","X5 Stereo v1.3","BMW","Audi")
PortletURLFactoryUtil.create(request,PortletKeys.EXPORT_IMPORT,plid,PortletRequest.RENDER_PHASE)
m.getProgress()
new Handler().postDelayed(new Runnable(){   @Override public void run(){     new AboutDialog().show(getSupportFragmentManager(),"ABOUT_DIALOG");   } } ,300)
TaskOutputPacker delegate
/**   * {@inheritDoc}  */ public Integer next(){   if (index++ > 0) {     if (index > size) {       return null;     }  else {       if (reverse) {         --value;       }  else {         ++value;       }     }   }   return Integer.valueOf(value); } 
BigInteger.valueOf(0xFFFFL)
(ChatRoomMessageReceivedEvent)obj
ImmutableSetMultimap<ChunkCoordIntPair,Ticket>
interpreterSetting.getGroup()
builder.add(fileDir).xy(3,5)
System.arraycopy(src,0,this.bytes,0,SIZE)
LinkedHashMap<DeclarationDescriptor,EnclosedValueDescriptor>
assertEquals(strangeVocab.getIndex(),0)
testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)
names[0]
valueFactory.bootstrapping(token)
SUBCMD_TRIGGER + " <channelUID> [<event>]"
mTxtLog.setText(llog)
logger.info("Updating the serviceUrls as they seem to have changed from {} to {} ",Arrays.toString(eurekaServiceUrls.get().toArray()),Arrays.toString(serviceUrlList.toArray()))
defaultSelectors(executor)
case 4: 
NeoStore.setRecord(pageCache,neoStore,NeoStore.Position.LAST_CLOSED_TRANSACTION_LOG_BYTE_OFFSET,LOG_HEADER_SIZE)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/subscriptions.json?cursor="+ cursor,true))
conceptAnswer.getAnswerConcept()
new URLClassLoader(new URL[]{myStdlib},AllModules.class.getClassLoader())
MessagingService.instance().sendRR(BatchlogManager.getBatchlogMutationFor(mutations,uuid,targetVersion).createMessage(),target,handler,false)
factory.get(fResultClass,NO_ANNOTATIONS,retrofit)
mDatabaseHandler == null || mDatabaseHandler.isClosed()
xfrm.getExt().getCy()
dependentMeasureRef.equals(that.getDependentMeasureRef())
StepVerifier.withVirtualTime(this::scenario).thenAwait(Duration.ofSeconds(123)).verifyComplete()
(dispatcherMapping & REQUEST) != 0
Util.killAsync(ffmpegLoadLibraryAsyncTask) || Util.killAsync(ffmpegExecuteAsyncTask)
attribute instanceof PreInvocationAttribute
columnDefinition.getContentValuesStatement(isModelContainerAdapter)
finishAndRemoveTask()
pCommandLineArg.indexOf(" ") != -1 && !(pCommandLineArg.startsWith("\"") && pCommandLineArg.endsWith("\""))
!(response instanceof Response) || baseRequest.getResponse().isWriting()
createAndTestKieContainer(releaseId,createKieBuilder(kfs),null)
SimpleFSIndexInput clone=(SimpleFSIndexInput)super.clone(); 
Math.min(desiredTileWidth,desiredTileHeight)
new ConnectionException(sm.getString("upgradeHandler.stream.old",key,Integer.valueOf(maxRemoteStreamId)),Http2Error.PROTOCOL_ERROR)
_hint != null || _snapshot
"false".equals(showRelationships) || result.hasErrors()
grantRuntimePermissions(globalSearchPickerPackage,LOCATION_PERMISSIONS,false,userId)
Assert.assertEquals(120L,ownerCapsuleNew.getFreeNetUsage())
id.getType()
jMethod.put("used",mUsed)
if (MORE_DEBUG) Slog.d(TAG,"Need to launch agent for " + pkg); 
mMenuView.setBackground(null)
GL20.glUniformMatrix3fv(location,transpose,value)
private Long measureId; 
/**   * @throws Exception  * @see org.springframework.batch.item.ItemReader#read()  */ public Order read() throws Exception {   recordFinished=false;   while (!recordFinished) {     process((FieldSet)super.read());   }   log.info("Mapped: " + order);   Object result=order;   order=null;   return result; } 
(((float)bytes.get()) * 8) / 1000
cam.near=1f
java.lang.System.currentTimeMillis() + 250
securityDomain != null && !securityDomain.isEmpty()
return 8; 
metadata.getModified().getTime() >= project.getLastSave().getTime()
l.onResume(request,response)
lp.width != panelWidth || lp.gravity != panelGravity
queueLength.asString()
checkDirectory(config.getString("tsd.http.staticroot"),!MUST_BE_WRITEABLE,DONT_CREATE)
minTopUpCredit != null && type != BlockType.TOP_UP
System.getenv(Tokens.FAUNUS_HOME)
assertEquals(5,dict.getSize())
socialActivitySetFinder.countByRelation(userId)
new ValueComparator(sortOrderAscending,type)
super.getBetweenProvider(path)
logger.fine(String.format("encoded %s as %s",obj,str))
found=true
!UIUtil.isUnderAquaBasedLookAndFeel() && !UIUtil.isUnderDarcula()
1L << quotientBits
System.arraycopy(startPoints,0,points[0],0,pointsNumber)
VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1
method.getGenericReturnType().toString()
Assert.assertEquals(3,json.size())
main.getOutput()
new PrestoException(INVALID_CAST_ARGUMENT,"Value cannot be cast to date: " + value.toStringUtf8(),e)
tagDataService.getTag(filter.title,TagData.ID)
return 1; 
CompilationAlarm.trackCompilationPeriod(options)
new KafkaComponent(context)
combine(getDefaultCamelKarafOptions(),provision(TinyBundles.bundle().add("META-INF/persistence.xml",BlobStoreBlueprintRouteTest.class.getResource("/META-INF/persistence.xml")).add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintCamelContext.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"CamelBlueprintJcloudsTestBundle").set(Constants.DYNAMICIMPORT_PACKAGE,"*").set("Meta-Persistence","META-INF/persistence.xml").build()),bundle(TinyBundles.bundle().add("OSGI-INF/blueprint/test.xml",BlobStoreBlueprintRouteTest.class.getResource("blueprintBlobStoreService.xml")).set(Constants.BUNDLE_SYMBOLICNAME,"org.apache.camel.jclouds.blobstore.service").set(Constants.BUNDLE_VERSION,"1.0.0").set(Constants.DYNAMICIMPORT_PACKAGE,"*").build()).start(),loadCamelFeatures("camel-blueprint","camel-jclouds"),workingDirectory("target/paxrunner/"))
MimeTypeUtil.isImage(mFile)
private Long id; 
config.trustStoreLocation == null
super.addHeader(name,value)
localNodeAckEvent.addListener(new ActionListener<Void>(){   @Override public void onResponse(  Void ignore){     assert Thread.holdsLock(mutex) : "Coordinator mutex not held";     assert committed;     receivedJoins.forEach(CoordinatorPublication.this::handleAssociatedJoin);     assert receivedJoinsProcessed == false;     receivedJoinsProcessed=true;     clusterApplier.onNewClusterState(CoordinatorPublication.this.toString(),() -> applierState,new ClusterApplyListener(){       @Override public void onFailure(      String source,      Exception e){ synchronized (mutex) {           removePublicationAndPossiblyBecomeCandidate("clusterApplier#onNewClusterState");         }         ackListener.onNodeAck(getLocalNode(),e);         publishListener.onFailure(e);       }       @Override public void onSuccess(      String source){ synchronized (mutex) {           assert currentPublication.get() == CoordinatorPublication.this;           currentPublication=Optional.empty();           logger.debug("publication ended successfully: {}",CoordinatorPublication.this);           updateMaxTermSeen(getCurrentTerm());         }         ackListener.onNodeAck(getLocalNode(),null);         publishListener.onResponse(null);       }     } );   }   @Override public void onFailure(  Exception e){     assert Thread.holdsLock(mutex) : "Coordinator mutex not held";     removePublicationAndPossiblyBecomeCandidate("Publication.onCompletion(false)");     FailedToCommitClusterStateException exception=new FailedToCommitClusterStateException("publication failed",e);     ackListener.onNodeAck(getLocalNode(),exception);     publishListener.onFailure(exception);   } } ,EsExecutors.newDirectExecutorService(),transportService.getThreadPool().getThreadContext())
9 * 60 * 1000
r != null && r.queue == this
mComment.getId()
recycle(true)
date(3908,10,12)
rng.nextInt() % 100 + 200
MessagingService.instance().sendRR(message,destination,responseHandler,true)
mIconId != 0
i < 0x8000
runtime.minus(provided)
waitOnThreads(f10)
publicType.getSimpleName()
BufferUtil.clearToFill(raw[i])
typeSer.writeTypeSuffix(generator,typeSer.typeId(value,JsonToken.START_OBJECT))
endOfArguments() || loopCount >= getEndIndex()
ConstantNode.forConstant(resolvedMethod.getEncoding(),tool.getMetaAccess())
getXMLProperty(parent + "." + propName)
settings.ANIMATE_MY_LOCATION.get() && !smallSpeedForAnimation && !movingToMyLocation&& settings.WAKE_ON_VOICE_INT.get() == 0
IR.thisNode()
new VelocityTemplate(new StringTemplateResource(_WRONG_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,null,_velocityEngine,_templateContextHelper,false)
StringUtils.isEmpty(finalFormKey)
Preconditions.checkNotNull(content)
new QueryBuilder.Options(getIdentifierQuoteString(),true,null,null,false,false)
mouse().pressAt(0,0)
assertTrue(indicesService.hasUncompletedPendingDeletes())
id=16502
highlightValue(highlight,false)
migrateXmlString(content,22,34)
public interface Constants extends ConstantsBase {   s String; } 
new File(normalTaskFilePath)
Utils.stackTrace(exception,false)
columnController.createColumns(false)
stmt.bind()
System.out.format("Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" + "\tfilter by optional regex patterns:%n" + "\t[type=<pattern>]%n"+ "\t[identity=<pattern>]%n"+ "\t[sessionId=<pattern>]%n"+ "\t[streamId=<pattern>]%n"+ "\t[channel=<pattern>]%n")
d.setDefaultEncoding(mergedMetaData.getDefaultEncoding())
mSpeakText
UPDATE=true
(SubscribeForm)actionForm
obj instanceof IntelliJLookAndFeelInfo
writer.flush()
!current.hasAccuracy() || Double.isNaN(current.getAccuracy())
current >= 0
GL15.glGetBufferParameteriv(target,pname,params)
idx >= 0
rs.getString(3)
EvictableCache<String,Class>
List<TaggedWord>
FilenameUtils.getFullPathNoEndSeparator(destination)
event.getX()
string.length() > 0
new RequestSignUp(modules.getPreferences().getString(KEY_TRANSACTION_HASH),name,sex,null)
DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=true
this.authDecisionStatementProviders
mImmersiveModeConfirmation.onPowerKeyDown(interactive,event.getDownTime(),isImmersiveMode(mLastSystemUiFlags))
node.getText()
request.mandatoryParamAsStrings("tags")
ImmutableSortedMap<Integer,Integer>
msbFragmentEntry.getMsbFragmentEntryId()
log.error(sm.getString("hostConfig.deployDescriptor.error",war.getAbsolutePath()),e)
rows != null && rows.length != 0
new ShowcaseViewBuilder(activity)
new WriteResult(translateCommandResult(new RemoveOperation(getNamespace(),remove,getDocumentCodec(),getBufferPool(),getSession(),false).execute()),aWriteConcern)
((ApplicationImpl)ApplicationManager.getApplication()).runWriteActionWithCancellableProgressInDispatchThread(templatePresentationText,project,null,performFixesTask::doRun)
AMQ3732Test.class
!type.getOpenWithApplication().isEmpty()
getSupportActionBar().setDisplayHomeAsUpEnabled(false)
scoreobjective1 != null
new String(data,0,read,"UTF-8")
load(key,false)
put(null,url,params,responseHandler)
childAttributes != null
appendOrderByComparator(sb,"CalendarResource.",orderByComparator,true)
new ZipAggregationStrategy(true,true)
handler.isProcessTerminating()
shardManager.commitShards(transactionId,tableId,columns,shardNodes,Optional.empty(),0)
myDiffContentFactory.create(myProject,content)
ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,"Override") || AnnotationUtility.containsAnnotation(methodDef,"java.lang.Override"))
HybridDecryptWrapper.class
LatLon location
perc(.10,4)
item.annotationType()
columnType.equalsIgnoreCase("string") || columnType.toLowerCase().startsWith("char") || columnType.toLowerCase().startsWith("varchar")
FILE_TYPE_STOREDIRECT=3
FlipComplexLayoutActivity.class
return testFileEntry; 
UpgradeStepRegistrator.class
buf.writeShort(0)
new InputStreamBody(content.getStream(),content.getContentType(),content.getName())
new WorldPoint(2473,3420,2)
ResponseEntity<String>
GridGgfsTestUtils.jsonToMap(primaryIpcEndpointConfiguration(gridName))
e instanceof IOException || e.getCause() instanceof IOException
sb.append(nc)
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_GOOGLE_ACCOUNT,true)
logger.info(e)
MESSAGES.pathEntryNotFound(relativeTo)
new Color(mParams.getCustomBackgroundColor(),true)
metadataDao.persist(metadata)
sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,VolumeStreamState.this,0)
v.size()
Math.sqrt(x[i] * y[i])
/**   * Returns the private data provider registered to the specified XML element name and namespace. For example, if a provider was registered to the element name "prefs" and the namespace "http://www.xmppclient.com/prefs", then the following packet would trigger the provider: <pre> &lt;iq type='result' to='joe@example.com' from='mary@example.com' id='time_1'&gt; &lt;query xmlns='jabber:iq:private'&gt; &lt;prefs xmlns='http://www.xmppclient.com/prefs'&gt; &lt;value1&gt;ABC&lt;/value1&gt; &lt;value2&gt;XYZ&lt;/value2&gt; &lt;/prefs&gt; &lt;/query&gt; &lt;/iq&gt;</pre> <p>Note: this method is generally only called by the internal Smack classes.  * @param elementName the XML element name.  * @param namespace the XML namespace.  * @return the PrivateData provider.  */ public static PrivateDataProvider getPrivateDataProvider(String elementName,String namespace){   String key=getProviderKey(elementName,namespace);   return (PrivateData)privateDataProviders.get(key); } 
ExprEval.ofLong(null)
partId == null
private Text wDirectory; 
LOG.warn("The given state from the response: " + shipToDTO.getAddressStateRegion() + " could not be found"+ " as a state abbreviation in BLC_STATE")
new ApiHelper.RefreshBlogContentTask(dummyBlog,new GenericCallback(){   @Override public void onSuccess(){     assertTrue(true);     countDownLatch.countDown();   }   @Override public void onFailure(  ErrorType errorType,  String errorMessage,  Throwable throwable){     assertTrue(false);     countDownLatch.countDown();   } } )
new FilteringClassLikeInfo(classLikeInfo,ONLY_ENUM_ENTRIES){   @Override public JetClassOrObject getCorrespondingClassOrObject(){     return null;   }   @NotNull @Override public ClassKind getClassKind(){     return ClassKind.OBJECT;   }   @NotNull @Override public List<? extends JetParameter> getPrimaryConstructorParameters(){     return Collections.emptyList();   }   @NotNull @Override public List<JetTypeParameter> getTypeParameters(){     return Collections.emptyList();   } } 
b == null || b.length == 0
READ_ITEM_DELAY=10
new ThreadPoolExecutor(1,5,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>())
View frame
@UriParam
j >= size
sDefaults.putBoolean(KEY_SHOW_4G_FOR_LTE_DATA_ICON_BOOL,false)
modulePath.split(File.pathSeparator)[0]
data.synonymForSchema.findTableOrView(data.session,data.synonymFor) == null
GroupServiceUtil.addGroup(GroupConstants.DEFAULT_PARENT_GROUP_ID,name,description,type,StringPool.BLANK,true,true,serviceContext)
Pattern.compile("(<style>.*</style>)|<[^<>]*>",Pattern.DOTALL)
customer.getId()
wikiPagePersistence.findByN_H(nodeId,true)
ConferenceChatPanel chatPanel=chatWindowManager.getMultiChat(chatRoomWrapper); 
entity.addComponent(delayedComponent)
expanded.toString().replaceAll("\\$\\$","\\$")
originalDocBase.toLowerCase(Locale.ENGLISH)
getMeasuredWidth()
getMockEndpoint("mock:" + i).expectedMessageCount(200)
new Insets(6,0,0,0)
SHOW_ZOOM_LEVEL_BUTTON_DELAY=1500
Assert.assertEquals(4,providers.size())
previousPropertyName.compareToIgnoreCase(propertyName)
sentencePartToEndOfError.length() - lastLineBreakPosInError
Arrays.asList(STANFORD_TOKENIZE,STANFORD_SSPLIT,STANFORD_POS,STANFORD_LEMMA,STANFORD_NER)
(propertySource != this) && !propertySource.getName().contains("plugin") && propertySource instanceof EnumerablePropertySource
Long divisor
badgeText.length() == 1 || badgeText.length() == 0
deck.addFact(editFact,cardModels,false)
parameters != null
size > Long.MAX_VALUE / unit.toBytes(1)
logger.info("No column family to repair for keyspace " + tableName)
holder.getListener().onCaptureSequenceAborted(CameraDeviceImpl.this,requestId,lastFrameNumber)
case 15: 
this.disconnect(account,true)
SSLParametersImpl.getDefaultX509TrustManager()
Assert.assertEquals(0L,key)
intBuffer.clear()
public ArabicNormalizationFilter create(TokenStream input){   return new ArabicNormalizationFilter(input); } 
getZoomLevel(false)
frame.removeWindowFocusListener(myIdeFrameFocusListener)
((HotSpotResolvedObjectType)type).getFingerprint() == 0
id=20
_buildTemplateWithGradle("npm-portlet","npm-portlet-dependency-management","--dependency-management-enabled")
new IndexWriter(ramDir1,new StandardAnalyzer(),create,IndexWriter.MaxFieldLength.LIMITED)
ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),parser::getTokenLocation)
onHold & ON_HOLD_LOCALLY
lock.release()
actionUrl.getActionType() == ActionUrl.DELETED && reordableChildren.size() != actionUrl.getAbsolutePosition()
new FileSystemWebDavServer(nioFileSystem())
logger.trace("Error while matching regex [" + matched + "] for string ["+ matcher+ "] "+ pse.getMessage())
mAppOpsService.checkOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
newDict.initParams(baseDir.replaceFirst(srcConfig.getHdfsWorkingDirectory(),dstConfig.getHdfsWorkingDirectory()),baseId,maxId,maxValueLength,nValues,bytesConvert)
schemeSpecificParts != null && data != null
connectionProperties.containsKey("oracle.user")
FileTypeIdIndexer indexer
msg.getType() == Message.Type.error || msg.getBody() == null
mNavigationBarView.inScreenPinning() || mStatusBar.isKeyguardShowing()
!url.startsWith("file") && !url.startsWith("/") && !JCUtils.isWifiConnected(getContext())&& !WIFI_TIP_DIALOG_SHOWED
USER_OPERAND_TYPE(true,3)
ALIASES.addOperationParameterDescription(resources,"infinispan.container",op)
factory.get(mResultClass,NO_ANNOTATIONS,retrofit)
terminal.println("%s",doc.get(docMapper.mappers().smartName("file").mapper().names().indexName()))
strippedQuotesLine.contains(StringPool.EQUAL)
serializedSettings != null
totalMessage++ % 10000 == 0
Format.createAudioSampleFormat(null,MimeTypes.AUDIO_FLAC,streamInfo.bitRate(),Format.NO_VALUE,streamInfo.channels,streamInfo.sampleRate,initializationData,null)
hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))
paths.get(1)
AccessibleObject executable
i < 10
getCurrentTab().handleDiscourseCopy()
outActivity != null && outActivity.length > 0
logger.info("OAuth clients imported: " + clients)
callVideoButton.setPressedIcon(ImageLoader.getImage(ImageLoader.CALL_VIDEO_BUTTON_SMALL_PRESSED))
KeyColumnValueStoreTest.class
new IndexWriter(index,new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
doNotUseAnimations ? 1 : ZOOM_MOVE_ANIMATION_TIME
field != null && field.getWrappedField() == wrappedField
((Scorecard)serializable).getUseReasonCodes()
header[4]
/**   * [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]   */ SCREEN(14)
from.getItem().shouldCauseReequipAnimation(from,to,changed)
spdy || spdyPlain || h2|| h2c|| ajp
rewardView::setCardBackgroundColor
return 4; 
Assert.assertTrue(System.currentTimeMillis() - now < 5000)
mPressedView != null && mPressedView.getBackground() != null
left < startFromPixel
Reflect.on(result).set(childName,Convert.convert(childElement.getTextContent().trim(),childType))
case 4: 
ConnectionFactory connectionFactory
new PullImageCmdImpl(NOP_EXEC,null,"")
BeginNode node
Pattern.compile(foundAuthor,Pattern.LITERAL)
DefaultCacheKeysFactory.staticGetCollectionId(cacheKey)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
final LongAdder8 cntr=new LongAdder8(); 
Preferences.getBoolean(AstridPreferences.P_FIRST_LIST,true)
myIconOpaque=false
(ret == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
DEFAULT_LABEL_MIPMAP=false
incomingCounter.getAndSet(0) / 1024d
new ModelNode().set(15000L)
limitRows < 0
!settings.FAST_ROUTE_MODE.getModeValue(params.mode)
sublistsProperty.get().stream()
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_DETAILS))
!mTFS.exists(turi)
new ValidatingDispatcher(threadPool.getThreadContext(),dispatcher,settings)
this(file,EXTENDED_NCSA_FORMAT); 
db.hashMapCreate("cache").expireAfterWrite(1,TimeUnit.HOURS)
myHeight - myDelegate.getIconHeight()
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.CLIENT_ERROR,getHttpStatusSeries(result))
URLUtils.currentUrlStartsWith(toString())
"System property " + LEGACY_SSTABLE_PROP + " not set"
Context.getGeofenceManager() != null && device.getGeofenceIds() != null
PatchedRouteInfo ipv6Default=new PatchedRouteInfo(Prefix("::/0"),null,"rmnet0"); 
EMERGENCY_ASSISTANCE_ENABLED=true
new StringInputRowParser(new DelimitedParseSpec(new TimestampSpec("ts","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),null,null),"\t",Arrays.asList(COLUMNS)),null,null,null,null)
case OPAQUE: 
(str.length() * 3) >> 2
searchType.convertToIds(requiredCandidates,myIndex.getByteSeqEum())
index < _paramAnnotations.length
Assert.notNull(patterns,"Patterns must not be null")
className.getClassName()
sum=1f
formatPoshiXML(newContent)
adaptTestForTrain(_output._names,null,_output._domains,adaptFrm,_parms.missingColumnsType(),true)
new IntentStarter(act,Intent.ACTION_VIEW,Uri.parse("market://search?q=text to speech engine"))
public class HorizontalBarChart extends BarChart {   public HorizontalBarChart(  Context context){     super(context);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs){     super(context,attrs);   }   public HorizontalBarChart(  Context context,  AttributeSet attrs,  int defStyle){     super(context,attrs,defStyle);   }   @Override protected void init(){     super.init();     setDrawXLabels(false);     setDrawYLabels(true);     mTrans=new ColumnToBarTransformer();     mValuePaint.setTextAlign(Paint.Align.LEFT);   }   /**   * Prepares a bar for drawing on the specified x-index and y-position. Also prepares the shadow-bar if enabled.  * @param x the x-position  * @param y the y-position  * @param barspace the space between bars  */   @Override protected void prepareBar(  float x,  float y,  float barspace){     super.prepareBar(x,y,barspace);     float spaceHalf=barspace / 2f;     float top=x + spaceHalf;     float bottom=x + 1f - spaceHalf;     mBarRect.set(0,top,y,bottom);     mTrans.rectValueToPixel(mBarRect,mPhaseY);     if (mDrawBarShadow) {       mBarShadow.set(mBarRect.left,mOffsetTop,mBarRect.right,getHeight() - mOffsetBottom);     }   }   @Override protected void drawXLabels(  float yPos){     if (!mDrawXLabels)     return;     mXLabelPaint.setTextAlign(Paint.Align.RIGHT);     float[] position=new float[]{0f,0f};     int step=mData.getDataSetCount();     for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {       position[1]=i * step + i * mData.getGroupSpace() + mData.getGroupSpace() / 2f;       if (mXLabels.isCenterXLabelsEnabled())       position[1]+=(step / 2f);       mTrans.pointValuesToPixel(position);       if (position[1] >= mOffsetTop && position[1] <= getHeight() - mOffsetBottom) {         String label=mData.getXVals().get(i);         mDrawCanvas.drawText(label,mOffsetLeft - 10,position[1],mXLabelPaint);       }     }   }   private static String TALL_VALUE="100%";   @Override protected float getPositiveYOffset(  boolean drawAboveValueBar){     Rect bounds=new Rect();     mValuePaint.getTextBounds(TALL_VALUE,0,TALL_VALUE.length(),bounds);     return bounds.height() / 2;   }   @Override protected float getNegativeYOffset(  boolean drawAboveValueBar){     return getPositiveYOffset(drawAboveValueBar);   }   /**   * Sets up the y-axis labels. Computes the desired number of labels between the two given extremes. Unlike the papareXLabels() method, this method needs to be called upon every refresh of the view.  * @return  */   @Override protected void prepareYLabels(){     mYLabels=new XLabelsAsYLabels();   } private class XLabelsAsYLabels extends YLabels {     /**   * Returns the longest formatted label (in terms of characters) the y-labels contain.  * @return  */     @Override public String getLongestLabel(){       String longest="";       for (int i=0; i < mData.getXValCount(); i+=mXLabels.mXAxisLabelModulus) {         String text=mData.getXVals().get(i);         if (longest.length() < text.length())         longest=text;       }       return longest;     }     /**   * Returns the formatted y-label at the specified index. This will either use the auto-formatter or the custom formatter (if one is set).  * @param index  * @return  */     @Override public String getFormattedLabel(    int index){       super.getFormattedLabel(index);       if (index < 0)       return "";       return mData.getXVals().get(index);     }   } } 
serialVersionUID=1138731961
formNavigatorEntryKeysProperties.getProperty(categoryKey)
handshake.getProtocolVersion()
sourceSet.getRuntimeOnlyConfigurationName()
heatpumpValues[66]
success >= 139
new SafeTextModel(value,Mode.none)
List<InternalTransactionPojo>
bc.getAsyncWriteService()
Assert.assertTrue("Was not expecting this output " + acc,System.currentTimeMillis() - now < 5000)
new Environment(settings,conf)
_connector.getResponse("GET /foo?data=42 HTTP/1.0\n\n")
Log log=catalinaContext.getLogger(); 
EnumSet.of(PROPERTY,CLASSMETHOD,STATICMETHOD,TYPING_OVERLOAD)
processSelectedKeys()
parts.length != 0
viewerPanel.layout()
completionLatch.await(2500,TimeUnit.MILLISECONDS)
DocumentUtil.isInsideSurrogatePair(myEditor.getDocument(),startOffset)
DataList<T>
new WithAccountLock<ReturnType,ExceptionType>(paymentConfig).processAccountWithLock(locker,accountId,callback)
Exception.class
S
!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null
historyRoot.mkdirs()
log.warn("Query failed to validate : '{}'",executionInput.getQuery())
RajLog.e("LoaderOBJ","File decode error")
aliases.get(a)
started.compareAndSet(true,false)
codeFormatter.processText(file,new FormatTextRanges(new TextRange(startOffset,endOffset),true),true)
!finished || !processorQueue.isEmpty()
flexItem.getMarginLeft()
new FirefoxWebDriverImpl(projectDirName,portalURL)
containerLats.length - 2
this.func_180475_a(scoreobjective1,res)
mEvdoEcio >= 0
client.resetPassword(email).compose(Transformers.pipeApiErrorsTo(resetError)).compose(Transformers.neverError()).doOnSubscribe(() -> isFormSubmitting.onNext(true)).doAfterTerminate(() -> isFormSubmitting.onNext(false))
listAdapter.notifyDataSetChanged()
xAppInfo.getIsSystem()
ImmutableList.of("/bin/bash","-e","-c","python convert_to_katana.py AndroidManifest.xml > $OUT")
i >>> 48
checkForMisplacedBindingAnnotations(method,errors) || !isValidMethod(injectableMethod,errors)
valueClass(NullWritable.class)
AndroidResource resourceRule2=graphBuilder.addToIndex(AndroidResourceRuleBuilder.newBuilder().setRuleFinder(ruleFinder).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(FakeSourcePath.of("android_res/com/example/res2")).build()); 
!myStates.containsKey(project)
generatorConfig.getModelPackageTargetFolder()
new NativeAllocationRegistry(Paint.class.getClassLoader(),nGetNativeFinalizer(),NATIVE_PAINT_SIZE)
List<Class>
origin > other
dataFolder.exists() && PdeBase.calcFolderSize(dataFolder) > 768 * 1024
new IllegalArgumentException("the name is null")
instruction.getNarrowLiteral()
logger.info("SSTables for user defined compaction are already being compacted.")
routeList == null || routeList.isEmpty()
Iterable<TransitiveInfoCollection>
new StepMeta(stepnode,transMeta.getDatabases(),transMeta.getCounters())
MiddleEntity middle
StringBuilder ret=new StringBuilder(100); 
_buildTemplateWithGradle("war-mvc-portlet","war-mvc-dependency-management","--dependency-management-enabled")
assertEquals("Commit subject is incorrect",expectedSubject,records.get(0).getSubject())
maxInvocationCountObservedDuringWarmup * 2
Collectors.groupingBy(OrderRoot::getFile,LinkedHashMap::new,Collectors.toList())
value instanceof Integer || value instanceof Boolean
transportRoutingHelper.getStartLocation()
/**   * Replace a tree node with a string, but adjust the start and end positions as well. For example, if the tree node begins at index 10 and ends at index 30, this call will replace the characters at index 15 through 25 with "replacement": <pre> {@code fix.replace(node, "replacement", 5, -5)}</pre>  * @param node The tree node to replace  * @param replaceWith The string to replace with  * @param startPosAdjustment The adjustment to add to the start position (negative is OK)  * @param endPosAdjustment The adjustment to add to the end position (negative is OK)  */ public static SuggestedFix replace(Tree node,String replaceWith,int startPosAdjustment,int endPosAdjustment){   return builder().replace(node,replaceWith,startPosAdjustment,endPosAdjustment).build(); } 
CompiledCursorUtils.nodeGetRelationships(read,cursors,nodeCursor,startNode,relDirection,relTypes)
SimpleScheduleBuilder.simpleSchedule().withIntervalInMilliseconds(this.refreshInterval)
10 * 60_000
optimize && item.isOnlyShared() && item.getSubStatus() == RosterItem.SUB_FROM
assertEvaluate(buildFile).moduleLookup("txts")
_connector.getResponse("GET /foo?status=206 HTTP/1.0\n\n")
new Double(((Integer)value).intValue())
Maps.newTreeMap()
ConduitInitiatorManagerImpl.class
private final CompoundShelfFileProcessor myFileProcessor; 
props.getProperty("exporter","com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter")
@Override public FunctionProperty clone(){   FunctionProperty prop=(FunctionProperty)super.clone();   prop.cacheValue=cacheValue;   prop.testIteration=testIteration;   prop.function=function;   return prop; } 
configMap.putAll(map)
Set<SkyKey>
nextArg()
constraintSystem.hasOnlyExpectedTypeMismatch() || constraintSystem.hasConflictingConstraints()
HashMap evaluator=new HashMap(); 
LOG.error("Halting process: ShellBolt died.",exception)
(mIncallPowerBehavior & Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP) != 0 && telephonyService.isOffhook() && interactive
itemCache.put(item.id,item)
Localization.menuTitle("Edit")
sTextLayoutBuilder.setTextDirection(TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR)
session == null
createArtifactSpec("b","1.0-SNAPSHOT")
file != null && file.isDirectory()
id=10874
mService.setWifiApConfiguration(wifiConfig,mContext.getOpPackageName())
ignite.log().warning("No mapped jobs: [task=" + getClass().getName() + ", topVer="+ ignite.cluster().topologyVersion()+ ", jobNids="+ nodeIds+ ", subGrid="+ U.toShortString(subgrid)+ "]")
Math.max(mXAxis.mAxisMinimum,pos.x)
status == PlayerStatus.INITIALIZED || status == PlayerStatus.INITIALIZING || status == PlayerStatus.PREPARING
fireTypingNotificationsEvent(sourceContact,evtCode)
getNumOfRenewsInLastMin() <= numberOfRenewsPerMinThreshold
trimmedText.equalsIgnoreCase(myModel.getElementName(e))
isGreaterOrEqual(platformVersion,M)
file.getPath()
this.getDrawnBoundingBoxE6().getLongitudeSpanE6()
logger.debug("File descriptor is: " + fd)
Map<RealmObject,RealmObject>
oldVersion=9
1
s == null || s.length() == 0
getLocalPort()
expected == double.class || expected == Double.class
Integer count=itr.next(); 
(baseDir == null) || !baseDir.exists()
javaType == null
ImageUtil.getUserHeight(myImage)
new MediaController(mContext,token)
dis.readFully(serializedData,0,length)
streamCachingStrategy.setSpoolThreshold(1L)
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(builder)
finalizationLock.wait(10)
Utils.convertDpToPixel(3f)
new DeadCodeEliminationPhase(Required)
classNameOptional.isPresent()
totTermCount.get() < 30
d("")
ti.setText(2,jobEntry.wildcard[i])
VectorAllocator.getAllocator(vv,200)
depthError("modelX")
info == null && persistentCache != null
suppressed.add(t)
setSelectedEditor(selectedComposite,false)
Exception lastException=null; 
pTMXTiledMap.getTileHeight()
status <= started
@Test public void testPutOutOfCapacity() throws OutOfCapacityException {   PropertiesConfiguration conf=new PropertiesConfiguration();   conf.setProperty(MultiLevelPriorityQueue.MAX_PENDING_PER_GROUP_KEY,2);   ResourceManager rm=new UnboundedResourceManager(conf);   MultiLevelPriorityQueue queue=createQueue(conf,rm);   queue.put(createQueryRequest(groupOne,metrics));   groupFactory.groupMap.get(groupOne).addReservedThreads(rm.getTableThreadsHardLimit());   queue.put(createQueryRequest(groupOne,metrics));   assertTrue(true);   try {     queue.put(createQueryRequest(groupOne,metrics));   }  catch (  OutOfCapacityError e) {     assertTrue(true);     return;   }   assertTrue(false); } 
useExpires.setSelected(true)
projectName.equalsIgnoreCase(executable.getProjectName())
ZLAndroidLibrary.Instance()
Strings.isNullOrBlank(password)
MIN_SENTENCE_TOKEN_COUNT=4
stopAllGrids()
return recoverTransactions; 
ruleIndex < runCount
dl.error("_sparsity_beta","Sparsity beta can only be used for autoencoder.")
appliesTo_.length > 2
Pattern.compile(".*[ \t\n\r]+(.+?)[ \t\n\r]*\\(.*",Pattern.DOTALL)
getServiceGuarded().sendMessage(subId,callingPkg,contentUri,locationUrl,configOverrides,sentIntent)
"User with email address " + emailAddress + " does not exist for company "+ companyId
success=false
getBeanClass(factoryClassName).getDeclaredMethods()
element.getStringValue()
printGraph("After Canonicalization",graph)
x > 10
new FunctionCall("substring",new PathExpression(new ObjectAccess("addresses"),new ArrayAccess(0),new ObjectAccess("zipCode")),new ConstantExpression(0),new ConstantExpression(2))
AbstractBottomUpTraversal<TargetNode<?>,RuntimeException>
f.isFile()
MonitoringPortlet.setMonitoringPortletActionRequest(monitoringPortletActionRequest)
new StringBundler(11)
this.sizeY=sizeY
final ColumnFamilyDescriptor hcd=htd.getColumnFamily(familyName); 
BeanUtil.fillBeanWithMap(this,bean,isToCamelCase,false)
animation.getAnimatedValue(ANIMATED_PROPERTY_ALPHA)
flags != 0 || !layersFromProviders.isEmpty()
end + 1
oldVersion < 1030005
latch.await(10000,TimeUnit.MILLISECONDS)
ImmutableList.of("es3.js","es5.js","w3c_event.js","w3c_event3.js","gecko_event.js","ie_event.js","webkit_event.js","w3c_dom1.js","w3c_dom2.js","w3c_dom3.js","gecko_dom.js","ie_dom.js","webkit_dom.js","w3c_css.js","gecko_css.js","ie_css.js","webkit_css.js","google.js","deprecated.js","fileapi.js","flash.js","gears_symbols.js","gears_types.js","gecko_xml.js","html5.js","ie_vml.js","iphone.js","webstorage.js","w3c_css3d.js","w3c_elementtraversal.js","w3c_geolocation.js","w3c_indexeddb.js","w3c_range.js","w3c_selectors.js","w3c_xml.js","window.js","webkit_notifications.js","webgl.js")
initialCapacity <= capacity
GL20.glGetActiveAttrib(program,index,256,size,typeTmp)
LOG.debug("Ganglia server component is not live")
GuiUtils.compareDatesOnly(date,System.currentTimeMillis())
JNIDecoder.matches(in,inputFormats)
(filterMap.getDispatcherMapping() & FilterMap.FORWARD) != 0
killBillClient.completePayment(completeTransactionByPaymentExternalKey,pluginProperties,createdBy,reason,comment)
socket.getPoller().add(socket)
now + 888888
ByteUtil.longToBytesNoLeadZeroes(0)
cart != null && !(cart instanceof NullOrderImpl)
assertNotSame("Cannot find text '" + element + "' in file "+ path,-1,index)
LOG.warn("Failed to delete path from UFS: {}",e.getMessage())
croutonDurationEdit.setVisibility(View.VISIBLE)
InvokerHelper.getMetaClass(obj.getClass()) == mc || !(mc instanceof ExpandoMetaClass)
defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))
BrokerService broker=null; 
this(null,null,null,true); 
split.length > 6 && split[6].length() > 0
mOneShot=false
var.isUseReferenceDirectly()
c == Short.class || c == Short.TYPE
BlockWorkerUtils.getWorkerAddress(mTachyonConf).getAddress().getHostAddress()
sharedPreferences.getBoolean(key,false)
LOG.info("touchbar-server isn't running, skip nst loading")
parameter.getType()
assertEquals(0,responseBody.get("bucket_count"))
public SubType orderBy(OrderSpecifier<?>... o){   query.orderBy(o);   return self; } 
XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT,parser.nextToken(),parser::getTokenLocation)
@Nullable
mContext.checkCallingPermission(android.Manifest.permission.CAPTURE_SECURE_VIDEO_OUTPUT) == PackageManager.PERMISSION_GRANTED
Strings.dup('C',300)
new ColorUIResource(0x743A3A)
mService.removePasspointConfiguration(fqdn,mContext.getOpPackageName())
isBuiltin || scope.getNamedElement(name) == null
buffer.remaining()
columnsCount >= limit
NullPointerException.class
GROUP_IDLE_TIME_S=25
TypeDescription declaringType=methodDescription.getDeclaringType().asErasure(); 
new MavenArtifactSearcher(true)
reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE,CHUNK_NULL_TYPE)
super.recyclePoolItem(pPoolItem)
new KeycodeEntry(KeyEvent.KEYCODE_TV_CONTENTS_MENU,CEC_KEYCODE_CONTENTS_MENU,false)
item == null || item.getContainer() != pipe.container
viewStateIndex|=VIEW_STATE_SELECTED
new BufferedInputStream(new GZIPInputStream(input))
ImageResource2x img; 
row + 2
setEnabledFunctions(mDefaultFunctions,true)
incomingConnector.accept(connectEvent,true)
new TwoColorsIcon(12,((MyInfo)infos.get(0)).myColor,((MyInfo)infos.get(1)).myColor)
loggerLevel=(String)level
GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,PythonFileType.INSTANCE)
this(0L,null); 
CharSequence url
-26
toLong(a,8)
Messages.MESSAGES.pathParameterNotProvided(param)
node1.isEquivalentToTyped(node2)
mock.expectedBodiesReceivedInAnyOrder("Hello World 2")
replacement instanceof PsiExpressionStatement && !(replacement.getLastChild() instanceof PsiJavaToken) && !(replacement.getLastChild() instanceof PsiComment)
type.getGenericType()
WATCHDOG_TIMEOUT_MILLIS=2000
public class XpathRegressionExplicitInitializationTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"a",0)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='a']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=ExplicitInitializationCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionExplicitTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(ExplicitInitializationCheck.class);     final String[] expectedViolation={"6:20: " + getCheckMessage(ExplicitInitializationCheck.class,ExplicitInitializationCheck.MSG_KEY,"bar","null")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionExplicitTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='bar']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
new SctpMessage(protocolIdentifier,streamIdentifier,unordered,msg.retain())
new Descriptor("OSR_migration_end",true,void.class,long.class)
log.debug("Error loading known hosts",e)
RedisTemplate<Object,Object>
presenceXML != null && !NULL_STRING.equals(presenceXML)
renderingAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
PsiTreeUtil.isAncestor(exceptPart,e,false)
new Integer(post.getId())
k++
LOGGER.info("Could not open folder",e)
getHomeButton()
constraints.weightx=0.5f
PROTOCOL_VERSION=2
myFindModel.isRegularExpressions()
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,1,46.26952683659,DeepLearningParameters.Activation.Rectifier)
super(position,message); 
StreamEx.of(1,2,3,2)
new int[297]
mCameraUser.submitRequest(request,true)
CANCELLED(125)
log.info(sm.getString("webappClassLoader.stackTraceRequestThread",threadName,getStackTrace(thread)))
heightMode == MeasureSpec.UNSPECIFIED
Stream.of("CYPHER 2.3","CYPHER 3.1","CYPHER 3.4")
assertCompletionVariants(myProjectPom,"3.8.1","3.8.2","4.0","RELEASE","LATEST")
Assert.assertEquals("Received string: " + baos.toShortString(),10000000,baos.size())
props.getProperty(CONNECT_TIME_PROP,TRUE)
NUM_PAGES=2
new DefaultConfiguration(connectionProvider,null,null,null,null,null,null,null,null,null,null,dialect,settings,null)
DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),running_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),stop_.getElement()) || DomUtils.isDescendant(Element.as(evt.getNativeEvent().getEventTarget()),launcherStop_.getElement())
result == null || result.size() == 0
!LineMarkerSettings.getSettings().isEnabled(new ColorLineMarkerProvider())
Assert.assertEquals(0,fastJsonConfig.getFeatures().length)
return EOF_DATA; 
new ImageIcon(image)
_userNotificationInterpreterClasses.isEmpty()
myTypeChecker.checkExpressionIsAssignableToType(rOperand,numberType,"javascript.expression.type.implicitly.coerced.to.unrelated.type",null,false)
touchEventPool.freeAll(touchEvents)
SemVer.parseFromText(text)
addValue(val,1L)
/**   * Logical name of the property; will be used as the field name under which value for the property is written. <p> NOTE: do NOT change name of this field; it is accessed by Afterburner module.  */ protected final SerializedString _name; 
displayOption=1
OverrideImplementUtil.getMethodSignaturesToOverride(aClass)
conf.getDouble("fuzz")
exportStatusCounts(exporter)
return facebookProperties; 
DBFactoryUtil.setDB(DB.TYPE_HYPERSONIC,null)
itemLeft >= headerRight
@Override public CDATA detach(){   throw ImmutableElement.immutableError(this); } 
classMapper.realClass(classAttribute)
new WorldPoint(2800,3074,0)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,LiferayRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
c == '\\' && i + 1 < cursor
ds.numExamples()
projectFilesystem.isFile(buckFile)
Log_OC.d(TAG,"Initializing Fragments in onAccountChanged..")
StringBuilder txt=new StringBuilder(); 
new CifarDataSetIterator(batchSize,numSamples,new int[]{height,width,channels},preProcessCifar,true)
processEngineConfiguration.getExpressionManager() == null && applicationContext != null
getConnector()
pageSize > pageCache.pageSize() || pageSize < 0
DateTimeFormat.getShortDateFormat()
expiring || !isValid
annotationHelper.printAnnotationError(element,"%s annotated element should not have a private constructor")
ScanResult.is5GHz(frequency)
paintInnerRect.setColor(0xddFFFFFF)
FIRST_CUSTOM=8192
StringBuilder charNum=new StringBuilder(); 
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_READ,evtOld,evtOld != null,evtOld,evtOld != null,subjId,transformClo.getClass().getName(),taskName,keepBinary)
@SuppressWarnings("unused") private final WeakSafeReadWriteLock strongReference; 
LOGGER.error("Error during file import",e3)
ParceledListSlice<ActivityManager.RecentTaskInfo>
TermAllGroupsCollector c3=new TermAllGroupsCollector(groupField); 
!webSocket.isOpen()
new IntPreference("map_transparency",255,false)
assertTrue(strayChild.isSafelyReplaceableBy(newChild))
HttpServletResponse.class.cast(response).sendError(501,"Websocket protocol not supported")
labelIndex > 0
i >= BY_WOOL_DATA.length
langModuleLanguageProperties.containsKey(languageKey)
assertTrue(jmsTemplate.isPubSubDomain())
mAutoScroller.autoScroll(-mHeaderOffset,mRefreshCompleteToDefaultScrollingDuration)
CodeStyleSettingsManager.getSettings(myProject).WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN
letters[1]
MetadataInstrument2.class.getSimpleName()
GL20.glUniform1fv(location,v)
Assert.assertTrue("Test output points to null",input.size() > 1)
Setting.listSetting("searchguard.audit.config.http_endpoints",Lists.newArrayList("localhost:9200"),Function.identity(),Property.NodeScope,Property.Filtered)
private class Tester extends AbstractInteropTest {   @Override protected ManagedChannel createChannel(){     if (!useOkHttp) {       InetAddress address;       try {         address=InetAddress.getByName(serverHost);         if (serverHostOverride != null) {           address=InetAddress.getByAddress(serverHostOverride,address.getAddress());         }       }  catch (      UnknownHostException ex) {         throw new RuntimeException(ex);       }       SslContext sslContext=null;       if (useTestCa) {         try {           sslContext=GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).build();         }  catch (        Exception ex) {           throw new RuntimeException(ex);         }       }       return NettyChannelBuilder.forAddress(new InetSocketAddress(address,serverPort)).flowControlWindow(65 * 1024).negotiationType(useTls ? NegotiationType.TLS : NegotiationType.PLAINTEXT).sslContext(sslContext).build();     }  else {       OkHttpChannelBuilder builder=OkHttpChannelBuilder.forAddress(serverHost,serverPort);       if (serverHostOverride != null) {         builder.overrideAuthority(GrpcUtil.authorityFromHostAndPort(serverHostOverride,serverPort));       }       if (useTls) {         try {           SSLSocketFactory factory=useTestCa ? TestUtils.newSslSocketFactoryForCa(TestUtils.loadCert("ca.pem")) : (SSLSocketFactory)SSLSocketFactory.getDefault();           builder.sslSocketFactory(factory);         }  catch (        Exception e) {           throw new RuntimeException(e);         }       }       return builder.build();     }   } } 
cfg.setMetricsUpdateFrequency(5_000)
System.getProperty("tests.coverage","false")
backgroundTaskPersistence.findByG_N_T(groupId,name,taskExecutorClassName,start,end,orderByComparator)
tfs.ls(Constants.PATH_SEPARATOR,true)
existingContents2.size() == 2
PsiTreeUtil.getParentOfType(position,PsiClass.class,false,PsiCodeBlock.class,PsiMethod.class,PsiExpressionList.class)
groupsById.remove(cachedGroupId)
!PixelFormat.formatHasAlpha(mRequestedFormat)
new HTTPArgument(getArgumentName(),value,true)
logger.debug("JSR-330 'javax.inject.Named' annotation found and supported for component scanning")
lexerEngine.equalAny(Symbol.LT_GT,Symbol.BANG_EQ,Symbol.BANG_GT,Symbol.BANG_LT,DefaultKeyword.LIKE)
new DatagramDnsQuery(null,addr,1)
authenticationBytes != null && authenticationBytes.length > 0
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
new ErrorDialogFragment()
DescriptorRenderer.TEXT.renderTypeWithShortNames(getActualParameterType(descriptor))
responseClass == Void.class || responseClass == Void.TYPE
clearIndex()
!myProject.isDisposed()
item(IRON_PLATEBODY)
mon.startsWith("okt") || mon.startsWith("oct")
p.getConfig().get("enabled") == null || (Boolean)p.getConfig().get("enabled")
this.maxSessionIdleTimeout=timeout
new NeuralNetConfiguration.Builder().nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).activationFunction("tanh").list(2).hiddenLayerSizes(3).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
AL_KHARID(180.0,30,13105,new WorldPoint(3299,3194,0))
createHandlerResult(tokenCredential,this.principalFactory.createPrincipal(uid))
value == null
prepared.charAt(start - 1)
!isTooLarge(vFile,contentText.length()) && getAffectedIndexCandidates(vFile).contains(requestedIndexId) && getInputFilter(requestedIndexId).acceptInput(vFile)
logger.warn("Error creating pool to " + host,t)
document.addText(name,valueString)
wErrorTab.setControl(wErrorSComp)
kindMismatchError=true
mRS.nScriptIntrinsicBLAS_Complex(getID(mRS),RsBlas_csyr2k,Trans,0,0,Uplo,0,0,C.getType().getX(),K,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),beta.x,beta.y,C.getID(mRS),0,0,0,0)
myLookup.getTopLevelEditor().getInlayModel().addInlineElement(caretOffset,true,createGrayRenderer(suffix))
TextAttributesKey.createTextAttributesKey("DEFAULT_PARAMETER")
Locale.getDefault().getLanguage()
sep < 0 || sep > j
selConnection > 0 && activeFile != null
Strings.isNotBlank(newAlgorithm)
lessThanOrEqualTo(3600000L)
new TabbedPaneWrapper(this)
new StringBuilder(238)
ctx.alloc().buffer()
newNode.makeNonIndexableRecursive()
configuration.getMemoryMode() == CacheMemoryMode.OFFHEAP_TIERED && configuration.getQueryEntities().size() > 2
new GroupPartitionId(grpId,partId)
new NeuralNetConfiguration.Builder().momentum(9e-1f).weightInit(WeightInit.DISTRIBUTION).dist(Nd4j.getDistributions().createNormal(1e-1,1)).lossFunction(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).iterations(10).learningRate(1e-1f).nIn(4).nOut(3).layerFactory(layerFactory).list(2).hiddenLayerSizes(new int[]{3}).override(1,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 1) {       builder.weightInit(WeightInit.ZERO);       builder.activationFunction("softmax");       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
UpgradeStepRegistrator.class
new StringBundler()
DEFAULT_VIBRATION=300L
HashCode.fromLong(hashCode())
new LazyHeadArrayNode(record,schema)
public String getFileId(){   return fileId; } 
clusterService().localNode().getName()
intermediatePoints != null && !intermediatePoints.isEmpty()
Void result
configurator.setExcludeAllEntriesMode()
Assert.assertNotEquals(otherEncodedBytesAndSampleCount,encodedBytesAndSampleCount)
id=10995
X.hasCause(e,IgniteInterruptedCheckedException.class,InterruptedException.class)
!interactive || end == 0
mExecutor.awaitTermination(1000,TimeUnit.MILLISECONDS)
IS_USED_QUALIFIED_OUTSIDE_PACKAGE_MASK=0x800
this.fileFilter
status == SocketStatus.DISCONNECT && !processor.isComet()
NTP_TIMEOUT=10000
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA("DH-DSS-DES-CBC3-SHA",KeyExchange.DHd,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA")
uriElementText.substring(myRange.getEndOffset())
!be.hasField(BibtexFields.MARKED)
Boolean.parseBoolean(getDefaultStr(key))
getMockEndpoint("mock:test.after.1").expectedMessageCount(10)
PluginServices.getTagDataService().getTag(tag.tag,TagData.ID,TagData.USER_ID,TagData.MEMBER_COUNT)
new FindResultUsageInfo(findManager,psiFile,prevOffset,findModel,result)
new String(_byteStore.get(dictId),UTF_8)
this(patchContent,true); 
routes.UsersController.editUserForm(username)
expected == char.class || expected == Character.class
ColorProperties.getColor("tableGrid")
checkArgument(fnSpec.getSpec().getUrn().equals(CUSTOM_JAVA_DO_FN_URN),"Expected %s to be %s with URN %s, but URN was %s",DoFn.class.getSimpleName(),FunctionSpec.class.getSimpleName(),CUSTOM_JAVA_DO_FN_URN,fnSpec.getSpec().getUrn())
ds.getFeatures()
estimatedLength < 0
filter == null || unfilteredAppPaths == null
FISHING_ROD(346,1,64)
peer.getSyncBlockToFetch().size() <= NodeConstant.SYNC_FETCH_BATCH_NUM
changes.serializeToJSON(null)
this.beanFactory.containsBeanDefinition(beanName)
value.length() <= 9
{MAGIC_HIGH,MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0}
LOG.warn("No references found at head " + head + " which corresponds to hash "+ myHashGetter.fun(head))
fmd.getInheritedFromType()
BuildRunResult result=ImmutableBuildRunResult.of(ExitCode.BUILD_ERROR,ImmutableList.of()); 
/**   * Changes the group of a file or directory specified by args.  */ public final class ChgrpCommand extends AbstractAclCommand {   public ChgrpCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chgrp";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String group=args[0];     TachyonURI path=new TachyonURI(args[1]);     chgrp(path,group,false);   }   @Override public String getUsage(){     return "chgrp <group> <path>";   } } 
Assert.assertEquals(getNotAllowedExceptionMessage("helloForRoles"),e.getCause().getMessage())
metadata.comparator.compare(tombstone.start.bound,first.stop.bound) <= 0
UndertowLogger.CLIENT_LOGGER.jettyALPNNotFound("HTTP2")
SPConstants.WSS_X509_PKI_PATH_V1_TOKEN10.equals(requiredVersionAndType)
payload.getBodySources() != null && payload.getBodySources().size() == 1
S
PlainJUnit4TestCaseWithSingleTestWhichFails.class.getSimpleName()
DirectoryReader reader=writer.getReader(); 
new NullPointerException("string cannot be null")
new LiferayRepository(repositoryService,dlRepositoryLocalService,dlRepositoryService,repositoryId)
/**   * t1.g4 -> t2.g4 -> t3.g4 ->t1.g4   */ CIRCULAR_DEPENDENCY(200,"your grammars contain a circular dependency and cannot be sorted into a valid build order",ErrorSeverity.ERROR)
private final ByteArrayOutputStream outStream=new ByteArrayOutputStream(1024); 
@Override public final DivideByOnConditionStep on(String sql,Object... bindings){   and(sql,bindings);   return this; } 
assertCompletionVariants(m,"RELEASE","LATEST","1")
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   if (clonedBaseCell instanceof ByteBufferCell) {     return new TagRewriteByteBufferCell((ByteBufferCell)clonedBaseCell,this.tags);   }   return new TagRewriteCell(clonedBaseCell,this.tags); } 
{12,14}
subCursor.getString(COLUMN_NAME)
result.expectedBodiesReceivedInAnyOrder("A+C+E+G+I","B+D+F+H+J")
size=10
Log.w("RemoteViews","Cannot setOnClickPendingIntent for collection item " + "(id: " + viewId + ")")
ClassLoader filteringClassLoader=getSystemFilteringClassLoader(defaultClassLoaderFactory,java9Compatible); 
AcidUtils.getTableSnapshot(hive.getConf(),tbl)
benchmark.expectAround("Duration to persist FILE_SOURCES",duration,125000,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
DumpUtils.checkDumpAndUsageStatsPermission(mContext,TAG,pw_)
max() <= 32
jmsConfig.getMaxSuspendedContinuations()
listener.iterationDone(valueNet,valueIterationCount,valueEpochCount)
(offset >= start && offset <= start + len) || (end >= start && end <= start + len) || (offset <= start && end >= start + len)
getConnection().setInstanceFollowRedirects(followRedirects)
match(rule,goodSentence.getSource(),goodSentence.getTarget(),srcTool,languageTool)
PARTIAL_ORDERBOOK_SIZE=200L
logger.debug("NODE {}: Device discovery resolved to thingType {}",node.getNodeId(),foundProduct.getThingTypeUID())
y > 9
return 9; 
checkNoPlanNodeMatches(exchange(),"Expected rules to be fired before 'AddExchanges' optimizer")
session.getPlaybackType() == MediaSession.PLAYBACK_TYPE_REMOTE && mRvc != null
new BasicSessionCredentials(accessKey,secretKey,sessionToken)
!selectedContacts.contains(recipient) && (existingContacts == null || !existingContacts.contains(recipient)) && recipient != null
issue.getRuleKey().toString()
new ContinueProcessOperation(commandContext,execution,true)
TreeState.write(cursor,5,7,7,8,9,10,11,12,13)
new PopupWindow(mContext,null,com.android.internal.R.attr.actionModePopupWindowStyle)
CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)
currentToken.hasType("operator","comment","numeric","text","punctuation")
new ShardRouting(WatchStore.INDEX,0,"_node_id",null,null,true,ShardRoutingState.UNASSIGNED,1,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,""))
media.getDuration() <= 0
Strings.isNullOrBlank(kubernetesContainerName)
n.getNodeData().getId().toLowerCase().equals(str)
@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new NoTagsKeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
file.toLowerCase(Locale.ENGLISH)
TRANSPORT_TRACE=false
mode.contains("creat") || mode.equalsIgnoreCase("1") || mode.equalsIgnoreCase("c")
mUserPaddingStart >= 0
position.setLongitude(field.getJsonNumber("Long").doubleValue())
mBoltPaint.setColor(fillColor)
inner.innerSetException((Throwable)result,true)
new DefaultDataType<Byte>(SQLDialect.SQLSERVER,SQLDataType.TINYINT,"signed tinyint","tinyint")
mode.contains("survi") || mode.equalsIgnoreCase("0") || mode.equalsIgnoreCase("s")
List<Integer>
new JsonUtf8Writer(sink)
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,myProject,myLastSelectedArtifact,false)
AckSchedulerKey key=new AckSchedulerKey(Type.ACK_TIMEOUT,client.getSessionId(),packet.getAckId()); 
DLFileEntryTypeFinderUtil.filterCountByKeywords(_group.getCompanyId(),new long[]{_group.getGroupId()},_DL_FILE_ENTRY_TYPE_NAME,true)
myPriorityRange.intersects(element.getTextRange())
norms=true
CacheData<RealmObject>
OVERRIDE_PREFIX + overridesLocation.replace('/','_')
RowMutation rm=new RowMutation("Keyspace1",dk.key,cf); 
Map<String,InspectionToolWrapper>
T value
adminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_SERVER,true)
EXPLICIT_NO_UNSAFE_CAUSE != null
getInitializerGroovy()
new ListenerInfo("http",server.getLocalAddress(),openListener,null,server)
locations.isDefined()
JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,name.fullName(),parent.fullName(),parent.declaration.source.getName(),String.valueOf(parent.declaration.node.getLineno()))
region == null || !region.isValid()
remoteCache.get(key)
new SimpleDateFormat("yyyy/MM/dd",Locale.ROOT)
selenium.waitForVisible("//li[@title='Asset Publisher']/p/a")
BASE_DEPTH + 4
bigFirstTokenBalance.multiply(bigTokenQuant).divide(bigSecondTokenBalance).longValueExact()
scheduleRemoveStartingWindowLocked(wtoken)
JournalStructureServiceUtil.getStructure(webDavRequest.getGroupId(),journalTypeId,true)
new GitException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS,remoteName))
lastVisibleIndex >= 0 && !justDeleted
QuickStartMySitePrompts.isTargetingBottomNavBar(mActiveTutorialPrompt.getTask())
Exception e
redisson.getMap("123")
cfstore.markCurrentSSTablesReferenced()
fieldTree.setStandalone(true)
(short)6
Mono<IN>
impl.getServerFactory().setBlockInjection(false)
getClass().getSimpleName() + "[populator:" + populator+ ", descriptor:"+ indexUserDescription+ "]"
i=2
dimensions != null && !dimensions.isEmpty()
NullPointerException.class
event instanceof LogEvent
Session.getDefaultInstance(prop,null)
GlobalContextKey.create("_prefer_target_jdk_javac_")
ParseUtils.parseS300THHumidity(S300TH_DATA_1)
ImmutableSet<SourcePath>
group.isUser() || group.isCompany() || group.isUserGroup()
DUE_DILIGENCE_MILLIS=100
(status & 0x20000000) != 0
!success
Throwable e
line.toString(charset)
SuperColumns.endOf(del.predicate.getSlice_range().finish)
new UpdateDeParser(expressionDeParser,selectDeParser,buffer)
providedScope=true
LOG.debug("Retrieving location for state={} of job={} from the key-value state location oracle.",queryableStateName,jobId)
this.connectTo(vertex,channelType,compressionLevel,indexOfOutputGate,indexOfInputGate,distributionPattern,true)
status_ != null && status != null
UnsatisfiedLinkError ex
ThemeEnforcement.obtainStyledAttributes(context,attrs,R.styleable.TabLayout,defStyleAttr,R.style.Widget_Design_TabLayout,R.styleable.TabLayout_tabTextAppearance)
sourceSet.getOutput()
new HashSet<RecordReplicationInfo>(recordStore.size())
OkHttpImagePipelineConfigFactory.newBuilder(this,okHttpClient).setRequestListeners(listeners).setProgressiveJpegConfig(new SimpleProgressiveJpegConfig()).setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this)).experiment().setMediaVariationsIndexEnabled(new Supplier<Boolean>(){   @Override public Boolean get(){     return true;   } } ).experiment().setBitmapPrepareToDraw(true,0,Integer.MAX_VALUE,true)
cache1.getAndRemove(1)
BufferUtil.zeroBuffer(1)
actionRequest.getAttribute(WebKeys.SOFTWARE_CATALOG_PRODUCT_ENTRY)
((String)toRender).toLowerCase(Locale.US)
is2D() && len != 4
TypesUtil.isAssignable(component,ltype,expression)
!ResultSetUtils.isServerSideFiltering(controller) || !controller.isHasMoreData()
new AssetPortletAddURL(portlet.getPortletId(),message,resourceBundle,locale,addPortletURL)
askForPermissions(new String[]{Manifest.permission.CAMERA},2)
decodeLast(ctx,e.getChannel(),replayable,state)
startActivity(mAdapter.intentForPosition(0))
Preconditions.checkState(Files.exists(dir),"Dir [%s] does not exist.",dir.toAbsolutePath())
minHandlingTime == 0 || minHandlingTime > handlingTime
DEFAULT_HOME_DB_CACHE_COUNT=500
UNDEFINED
log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '"+ value.getName()+ "'")
this.env
this.timeoutNs / Time.NS_PER_MS
DiagnosticFactory0.create(WARNING)
endpoint.getBus().getInInterceptors().size() >= 1
sizeNeeded > items.length
QualifiedNamesUtil.isSubpackageOf(fqName,fqn)
tree.getRowCount()
log.debug("Error while closing command context",exception)
!user.canAfford(getMoney())
Event.PREFIX_TEMP + i
Matrix.multiplyMM(m,0,matrix.getDoubleValues(),0,mTmp,0)
mFillFormatter=new DefaultFillFormatter()
op.get("address").add("host",host)
BROKER_PORT=11092
center.getZ()
public Object getBean() throws NoBeanAvailableException {   Object value=lookupBean();   if (value == null) {     throw new NoBeanAvailableException(name);   }   if (value != bean) {     bean=value;     processor=null;     if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {       beanInfo=null;     }   }   return value; } 
new HTTPArgument(getArgumentName(),value,false)
ApplicationManager.getApplication() != null && !ApplicationManager.getApplication().isDisposed()
s.toString().toLowerCase()
targetMethod.recordCall(posBefore,posAfter - posBefore,target,debugInfo,true)
lastModified < headerValue + 1000
frame.delete()
renderer.rect(x + rect.x + settings.paddingX,y + rect.y + settings.paddingY,rect.width - settings.paddingX,rect.height - settings.paddingY)
requireActivity()
(CancelReason.EXPIRED.equals(reason) || CancelReason.RENEWAL_FAILED.equals(reason)) && upnpService != null
new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies")
columnNames.size() + 2
EhcacheCacheListenerAdapter<Serializable,Object>
assertEquals(403,te.getStatusCode())
(ObjectSerializer)value
? extends A
!mSingleFolderMode || mMessageListFragment.isManualSearch()
mail.getClass().getSimpleName()
deltaY <= 0
new ChromeWebDriverImpl(projectDirName,portalURL)
ddmTemplateModel.setCacheable(true)
new DefaultHighlighter.DefaultHighlightPainter(HIGHLIGHT_COLOR)
MessageOutput.Factory<DiscardMessageOutput>
metastore.getHost()
Jid.class
partitions != null && partitions.size() > 0
T extends PsiStatement
speed < 53
assetUri.getAssetName().toLowerCase()
presentation.updateValueView()
this.finishedSeq
errorCode == FacebookRequestError.INVALID_ERROR_CODE
ColorProperties.getColor("controlDarkShadow")
PsiExpressionList.class
new IOException(e.getMessage())
new Exception(BaseMessages.getString(PKG,"JsonReader.Error.ReadFile.Null"))
MAX_ACTION_BUTTONS=3
assertThat(metrics).hasSize(151)
PortletProps.get(PortletPropsKeys.ADMIN_EMAIL_FROM_ADDRESS)
((AstridActivity)getActivity()).onFilterItemClicked(newFilter)
return worldVertices; 
return toSelect; 
public Integer getFileSize(){   return fileSize; } 
GridGgfsTestUtils.jsonToMap("{type:'tcp', port:" + DFLT_IPC_PORT + "}")
callerPackage == null
Assert.assertEquals(2,hits.getLength())
visible=false
List<String>
isText(mimeType) || APPLICATION_CEA608.equals(mimeType) || APPLICATION_CEA708.equals(mimeType)|| APPLICATION_SUBRIP.equals(mimeType)|| APPLICATION_TTML.equals(mimeType)|| APPLICATION_TX3G.equals(mimeType)|| APPLICATION_MP4VTT.equals(mimeType)|| APPLICATION_RAWCC.equals(mimeType)|| APPLICATION_VOBSUB.equals(mimeType)|| APPLICATION_PGS.equals(mimeType)
str == null || start >= str.length()
assertInCompletionList("app.<caret>name","status_bar_style=","codesign_certificate")
analysisResult.getPackageRoots()
headRef()
doConvertAndCast(returnType)
entityMetadata.getVersionProperty()
IOException e
request.paramAsBoolean("v",true)
!value.isNull()
nativePostCreate2(native_instance,shaderA.native_shader,shaderB.native_shader,pdMode != null ? pdMode.nativeInt : 0)
uri.append(AMPERSAND)
new ShowcaseViewBuilder(activity,showcaseTemplateId)
log.error(sm.getString("hostConfig.deployDescriptor.error",contextXml.getAbsolutePath()),e)
assertEquals(3L,countDownLatch.getCount())
annotations()
RecyclableBufferedInputStream bis=new RecyclableBufferedInputStream(is,tempBytes[0]); 
SpringBootVersion.class
assertEquals(12717,(long)stats.getCrawledBytes().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
PsiBundle.message("cannot.resolve.symbol")
new StreamException(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR,streamId)
fromTypeID != null && !"/type/object".equals(fromTypeID)
popupWindow.setContentWidth(menuWidth)
matcher.lookingAt()
mService.queryDisplayStatus(getCallbackWrapper(callback))
filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))
new ByteBuddy().subclass(SumExample.class).method(named("calculate")).intercept(SumImplementation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
manager.age(Locale.ENGLISH,10)
dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0
myVcsManager.hasExplicitMapping(validParent)
setFrame(0,false,mAnimationState.getChildCount() > 1 || !mAnimationState.mOneShot)
new Button(wSettings,SWT.CHECK)
Bytes.toString(qualifierName,start,end)
parsedResult.getType()
ServletRequestAttributes requestAttributes=new GrailsWebRequest(request,response,getServletContext()); 
total <= 0
roundDist == 1000
ANTIVENOM(ItemID.ANTIVENOM4,GameTimerImageType.ITEM,"Anti-venom",1,ChronoUnit.MINUTES,true)
new Random()
logger.fine(String.format("server disconnect (%s)",this.nsp))
connection.getRequestProperty("User-Agent") == null
LOG.warn("Could not correlate acknowledgment with dispatched message: " + ack)
Long.parseLong(deadline)
Assert.assertEquals(1,map.size())
attachViewToParent(view,index++,ensureLayoutParams(view.getLayoutParams()),true)
collectors.size() > 0
token.equals(";") && !prevToken.equals("\u00a0") && !prevToken.equals("\u202f")
listview.snappedTopInset()
inner.deletedRelationships()
oldVersion != 3
WrapAlloyTemplateTaskTest.class
factory.createCatchSection(exceptionType,name,tryStatement)
this.compilations.remove(optimizedCallTarget)
AbstractBottomUpTraversal<T,RuntimeException>
message.getMessage().getExpiresInSeconds() * 1000L
maxDistance=200
info != null
dirs[i].isDirectory() || dirs[i].getName().startsWith(".")
context.report(ISSUE,node,context.getLocation(node),"Don't call sleep. Use MockTimer instead.")
range.containsOffset(offset)
mNavigationView != null && item != NavigationItemEnum.INVALID
factory.getDestination(info,bus)
UIUtil.invokeLaterIfNeeded(new Runnable(){   @Override public void run(){     ProgressManagerImpl.runProcessWithProgressAsynchronously(new MyRefreshTask(myDataPack));   } } )
Matrix.multiplyMM(m,0,mTmp,0,matrix.getDoubleValues(),0)
immediate=true
id=10837
this.url=url
sm.getString("serverContainer.duplicatePaths",path,sec.getEndpointClass(),sec.getEndpointClass())
Integer.parseInt(rightStr)
Exception e
-982640606
formController.getEventLogger().logEvent(EventLogger.EventTypes.LOCATION_PERMISSIONS_NOT_GRANTED,0,null,false)
serverSocket == null || !serverSocket.isBound()
timeLeft <= 0
nativeEvent_.getKeyCode() == KeyCodes.KEY_TAB
getPolicy().getMaxBinaryMessageSize()
LOG.warn("Can not get java doc HTML text from autocomplete context menu in editor")
i < 5
assertOpenEventually(latch)
messageParts.remove(mpi)
!handle.parent().exists()
updateChildren()
oldOverride.addParameter("enabled","enabled")
DatabaseFactory.getInstance().openDatabase(config.getString("database.url"),config.getString("database.user"),config.getString("database.password"),config.getString("database.driver"),null,null,null,resourceAccessor)
getName().equalsIgnoreCase("LONG") || getName().equalsIgnoreCase("NCLOB") || getName().equalsIgnoreCase("BFILE")|| getName().equalsIgnoreCase("ROWID")
_buildTemplateWithGradle("npm-isomorphic-portlet","isomorphic-dependency-management","--dependency-management-enabled")
Math.max(mXAxis.mAxisMinimum,pos.y)
assertEquals(4,atl.size())
logger.debug("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning")
String.format((Locale)null,"%.4f",s.getValue())
TypeMirror formConverter=annotationHelper.getElementUtils().getTypeElement(FORM_HTTP_MESSAGE_CONVERTER).asType(); 
logger.warn("Timeout occured when executing commandLine '" + commandLine + "'",e)
new EmoteClue("Cheer in the Shadow dungeon. Equip a rune crossbow, climbing boots and any mitre.",ENTRANCE_OF_THE_CAVE_OF_DAMIS,new WorldPoint(2629,5071,0),CHEER,any("Any mitre",item(GUTHIX_MITRE),item(SARADOMIN_MITRE),item(ZAMORAK_MITRE),item(ANCIENT_MITRE),item(BANDOS_MITRE),item(ARMADYL_MITRE)),item(RUNE_CROSSBOW),item(CLIMBING_BOOTS),item(RING_OF_VISIBILITY))
getter.getContainingClass().findMethodsByName(suggestedName,true).length != 0
new EvaporateText()
COOKIE_SYNC_MANAGER=false
size() <= 0
new SimpleOrderedMap()
@Override public void headersEnd(int streamId) throws ConnectionException {   Stream stream=getStream(streamId,true);   StreamProcessor streamProcessor=new StreamProcessor(stream,adapter,socketWrapper);   streamProcessor.setSslSupport(sslSupport);   socketWrapper.getEndpoint().getExecutor().execute(streamProcessor); } 
RESOURCES_UNAVAILABLE_OR_UNSPECIFIED=47
(Number)array[this.index]
selectionChildIndices[j] == i || (selectionChildIndices[j] == C.INDEX_UNSET && streamChildIndices[j] == i)
loader.filePath != null && !loader.caretState.hasExplicitCaret()
assertEquals("Unable to read 1 bytes, got 0",ex.getCause().getMessage())
private File modSource; 
verify(workspaceFilesCleaner,timeout(2000))
stream2.getId()
assertNotNull(message + ": expected should not be null",expected)
hasColumn(oldTableName,"commentId")
TestUtil.nextInt(random(),3,IndexWriter.MAX_TERM_LENGTH)
EntryStream.of(1,1,2,null,3,null).nonNullValues()
jobStateClone.clearExceptions()
queueAccess.get(queueAccess.size() - 1) == selectedItem.getId()
NotebookSocket conn
/**   * @author yole  */ public class CoverageProjectViewClassNodeDecorator extends AbstractCoverageProjectViewNodeDecorator {   public CoverageProjectViewClassNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager dataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=dataManager.getCurrentSuitesBundle();     final Project project=element.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     if (element instanceof PsiClass) {       final String qName=((PsiClass)element).getQualifiedName();       if (qName != null) {         appendCoverageInfo(cellRenderer,javaCovAnnotator.getClassCoverageInformationString(qName,dataManager));       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager coverageDataManager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=coverageDataManager.getCurrentSuitesBundle();     final Project project=node.getProject();     final JavaCoverageAnnotator javaCovAnnotator=getCovAnnotator(currentSuite,project);     if (javaCovAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }  else     if (value instanceof PackageElement) {       PackageElement packageElement=(PackageElement)value;       final String coverageString=javaCovAnnotator.getPackageCoverageInformationString(packageElement.getPackage(),packageElement.getModule(),coverageDataManager);       data.setLocationString(coverageString);     }     if (element instanceof PsiClass) {       final GlobalSearchScope searchScope=currentSuite.getSearchScope(project);       final VirtualFile vFile=PsiUtilCore.getVirtualFile(element);       if (vFile != null && searchScope.contains(vFile)) {         final String qName=((PsiClass)element).getQualifiedName();         if (qName != null) {           data.setLocationString(javaCovAnnotator.getClassCoverageInformationString(qName,coverageDataManager));         }       }     }   }   @Nullable private static JavaCoverageAnnotator getCovAnnotator(  final CoverageSuitesBundle currentSuite,  Project project){     if (currentSuite != null) {       final CoverageAnnotator coverageAnnotator=currentSuite.getAnnotator(project);       if (coverageAnnotator instanceof JavaCoverageAnnotator) {         return (JavaCoverageAnnotator)coverageAnnotator;       }     }     return null;   } } 
i=2
new AndroidDownloader().downloadAsString(fileListURL,false)
UPPER_BOUND_VIOLATED.on(argumentTypeReference,substitutedBound,typeArgument)
!project.isInitialized()
DbSegmentPublisher.class
GridComponentType.HADOOP.create(ctx,true)
log.isDebugEnabled()
Primitive.longObjectMap(8)
this.getDefaultReadOnly()
Enumeration<Servlet>
l_Inflater.inflate(R.layout.adv_user_strings_list,parent,false)
req.getPieceRange()
application != null && !application.isDisposed()
mAdminPreferences.getBoolean(AdminPreferencesActivity.KEY_CHANGE_LANGUAGE,true)
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul","var")
dimension.height+=vGap
CONFIG_VERSION.getPath(container)
_buildTemplateWithGradle("activator","activator-dependency-management","--dependency-management-enabled")
TypedQuery<Number>
return endOffset; 
FunctionTypesKt.isFunctionType(((ClassDescriptor)containingDeclaration).getDefaultType())
percentComplete=0
new IllegalStateException("Comments are not consistent")
String p; 
metaContact.getDisplayName().contains(queryString)
mTfs.mkdirs(new TachyonURI(dirPath),true)
t.report(n,UNUSED_PRIVATE_PROPERTY,propName)
case 9: 
mSupportsBearing ? 1 : 0
targetHeight == 0
sshd.stop(true)
deletionRetentionStrategyConfig == null
major == 1 && minor < 5
columnFamily()
end <= textLength
outLatch.startLatch.await(400,TimeUnit.MILLISECONDS)
JacksonMessageBodyProvider.class
ConfigserverUtil.createExampleConfigserverConfig(true,false)
language.is(knownLanguage) || knownLanguage.getDialects().contains(language)
shouldFilter && sourceFile.length() > 10 * 1024 * 1024
app().gitblit()
assertEquals("ClassInfo's name should be non-null",ex.getCause().getMessage())
Arrays.sort(timestamps,unused + 1,11)
Throwable e1
USE_STEP_BY_STEP_RENDERING.setModeDefaultValue(ApplicationMode.CAR,false)
a.getBoolean(R.styleable.DragSortListView_use_default_controller,true)
Util.SDK_INT <= 26
assertEquals(1,tool.check("Een test test, die een fout moet geven.").size())
artifact.getExecPath()
reformatRangeImpl(element,startOffset,endOffset,false)
new byte[20]
findCodecForFormat(true,format)
document != null && document.getRootTag() != null
computeAntiJoin(inputStatistics,inputStatistics,x,unknown)
log.error("SQL Validation error",ex)
arguments[1]
x <= maxX
addEdge(i3,i0,false,false)
new AnchorScrollingLogger()
wpdb.savePost(post)
jsonArray.toString(1)
this.messageService.fluxPostAuthorizeBeanFindById(2L).subscriberContext(withUser)
constructors[TXN_REMOVE_ALL_BACKUP]
Validator.isNotNull(modified)
targetConfig.trimConfigurations()
getWriter().print("FAILED")
(Number)version
new CompilerException(sourcePath,e.line,e.getCause())
getActivity() != null && getActivity().findViewById(R.id.detail_title) != null
autoClear || !successful
TypeSpec.parse(builder,false)
replaces="doIntrinsicCachedTruffleObject"
assertEquals(5,ti.nrOfInvocations)
replaces="doCachedTypeCachedOffset"
super(expression," \t",startTime,zone,0,2); 
(device=1 << i) != AudioSystem.DEVICE_OUT_DEFAULT
new OneRun(43.733802,7.413433,43.739662,7.424355,2227,105)
LogManager.getContext(Log4jLog.class.getClassLoader(),false)
private static void hookResources() throws Throwable {   if (Build.VERSION.SDK_INT <= 16) {     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=1;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,CompatibilityInfo.class,callbackGetTopLevelResources);     }   }  else   if (Build.VERSION.SDK_INT <= 18) {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     try {       findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,boolean.class,callbackGetTopLevelResources);     }  catch (    NoSuchMethodError ignored) {       try {         findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;         GET_TOP_LEVEL_RES_PARAM_CONFIG=3;         GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       }  catch (      NoSuchMethodError ignored2) {         try {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,String.class,boolean.class,callbackGetTopLevelResources);         }  catch (        NoSuchMethodError ignored3) {           findAndHookMethod(ActivityThread.class,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,callbackGetTopLevelResources);         }       }     }   }  else {     GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=1;     GET_TOP_LEVEL_RES_PARAM_CONFIG=2;     GET_TOP_LEVEL_RES_PARAM_COMP_INFO=3;     GET_TOP_LEVEL_RES_PARAM_BINDER=4;     try {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,String[].class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);       GET_TOP_LEVEL_RES_PARAM_DISPLAY_ID=2;       GET_TOP_LEVEL_RES_PARAM_CONFIG=3;       GET_TOP_LEVEL_RES_PARAM_COMP_INFO=4;       GET_TOP_LEVEL_RES_PARAM_BINDER=5;     }  catch (    NoSuchMethodError ignored) {       findAndHookMethod("android.app.ResourcesManager",null,"getTopLevelResources",String.class,int.class,Configuration.class,CompatibilityInfo.class,IBinder.class,callbackGetTopLevelResources);     }   }   XC_MethodHook.Unhook paranoidWorkaround=null;   try {     paranoidWorkaround=findAndHookMethod(Resources.class,"paranoidHook",XC_MethodReplacement.DO_NOTHING);   }  catch (  NoSuchMethodError ignored) {   }   Resources systemResources=new XResources(Resources.getSystem(),null);   setStaticObjectField(Resources.class,"mSystem",systemResources);   if (paranoidWorkaround != null)   paranoidWorkaround.unhook();   XResources.init(); } 
Trade item=provider.read(); 
Math.max(dgg / gg,0.0)
new Notification(R.drawable.stat_sys_phone,"Incoming call from: Imperious Leader",System.currentTimeMillis() - (1000 * 60 * 60* 24),"Imperious Leader","(888) 555-5038",null)
object.realm != null && object.realm.id == this.id
assertParses("scan class path",CommandLineOptions::isScanClasspath,"--scan-class-path")
DirDiffViewer.canShowRequest(context,request)
mccStr.isEmpty() || mccStr.equals(String.valueOf(Integer.MAX_VALUE))
new FallbackPathSettings(_settings,_fallbackPaths)
ENABLE_SQLITE_LOG=false
c * c
wasRead
addDaysAndCheckForCompletion(30,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.INVOICE_PAYMENT_ERROR)
NettyHandlerSettings.class
public FieldType get(@NotNull ContainingClass owner){   return (V)unsafe.getObjectVolatile(owner,offset); } 
e.toString()
this.capNBT != null && serializable != null
responseBodyRegex == null || responseBodyRegex.length() == 0
clock.addDeltaFromReality(AT_LEAST_ONE_MONTH_MS)
contentLength >= 0
appWindowToken == null || !appWindowToken.isVisible()
new Insets(6,4,0,0)
_ginfo != null && _ginfo._gradient != null
assertEquals(message,obj,this.serializer.toObject(this.serializer.toBytes(obj)))
SimpleAttributeDefinitionBuilder.create("file",ModelType.OBJECT,false)
store.setZkSessionTimeout("15s")
tag2.getText()
RoleLocalServiceUtil.loadGetRole(companyId,name)
route.getOutputs() == null || route.getOutputs().isEmpty()
ServletUtil.prepareParameters(p,true,true,false)
a("")
sampler.getFilename()
Object useGrouping=properties.get(NumberFormatSample.PROP_USE_GROUPING); 
ar2.cause()
selectionArgs[0]
DefaultManagementMBeanAssembler.class
public static final BatooTemplates DEFAULT=new BatooTemplates(); 
Constant.messages.getString("start.gui.cmdline.session.does.not.exist",Constant.getZapHome())
fileType.isRd() || fileType.isJS() || canPreviewFromR|| fileType.isSql()
entry.type != DownloadActivityType.SRTM_FILE && entry.type != DownloadActivityType.HILLSHADE_FILE
UIUtil.createImage(myComponent,size.width,size.height,BufferedImage.TYPE_INT_RGB)
dimension.width + (dimension.width == 0 ? 0 : PADDING)
LOG.warn("Shortcuts of global AnActions should not be changed outside of KeymapManager",new Throwable())
_portalResiliencyAction.execute(null,_mockHttpServletRequest,_response)
note.getTitle()
JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING || JZVideoPlayerManager.getCurrentJzvd().currentState == JZVideoPlayer.CURRENT_STATE_PREPARING_CHANGING_URL
public Builder setProxyPassword(String password){   this.proxyPassword=password;   return this; } 
process.getErrorStream()
new Label(wSettings,SWT.RIGHT)
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod1.run();   } } 
recoveryFile.sync()
LOGGER.error("runCommand error: " + ex.getMessage(),ex)
r.locals.ast=locals
new CommandLineException(result.toString())
!isShowOffline
findTypeFromRefInner(expression)
!isPartialUpdate || id.views == null
id=10808
logger.debug("load {}",artifactResult.getArtifact().getFile().getAbsolutePath())
return ES8_MODULES; 
tableItem.setText(6,Const.NVL(meta.getPassword(),""))
createHandlerResult(yubiKeyCredential,this.principalFactory.createPrincipal(uid))
totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
@Override public final NullProperty clone(){   return this; } 
Object listener=myListeners.get(frame); 
assertEquals(324,error)
dataType.endsWith("Integer") || dataType.equals("int") || dataType.endsWith("Long")|| dataType.equals("long")
setIntegerPart(String.valueOf(integerPart))
zipInspector.assertFileDoesNotExist("assets/secondary-program-dex-jars/metadata.txt")
8 * data.length
-14
Column::getName
getCurrCapacityUsed()
entry.getType()
pluginContainer.lookup(ComponentConfigurator.ROLE,configuratorId,pluginRealm)
Arrays.asList("spring-boot-starter-tomcat-","tomcat-embed-core-","tomcat-embed-el-","tomcat-embed-logging-juli-","tomcat-embed-websocket-")
lookup="java:/ConnectionFactory"
ColorProperties.getColor("tabbedPaneBorderHighlight")
log.info("Hooking new default : onErrorDropped")
stepDone()
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,true))
optionsMenuHelper.item(R.string.settings_activity).icons(R.drawable.ic_action_settings_dark,R.drawable.ic_action_settings_light)
TagPluginManager.class
private GenericSendAndReceiveGateway gateway; 
builder.add(new ImplementSampleAsFilter(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneRedundantProjections(),new SetFlatteningOptimizer(),new LimitPushDown(),new PredicatePushDown(metadata,splitManager),new PredicatePushDown(metadata,splitManager),new MergeProjections(),new SimplifyExpressions(metadata),new UnaliasSymbolReferences(),new PruneUnreferencedOutputs(),new PruneRedundantProjections())
new AlertDialog.Builder(mContext).setMessage(R.string.error_disable_esim_msg).setTitle(R.string.error_disable_esim_title).setCancelable(false).setPositiveButton(R.string.ok,null)
-tilesRect.getRotate()
BlobStoreUtils.class
LOG.info("Could not find default spell checking inspection")
PaginationRequest.of(10,1)
return false; 
assertThat(props).hasSize(6)
workspaceName.equals(infoName)
UastUtils.isUastChildOf(expression,((UBinaryExpression)parent).getLeftOperand(),false)
labels != null && labels.isAttached()
new FlywayException("Unable to instantiate class: " + clazz,e)
uncollectedPointCreator.createUnCollectedPoint(timestamp)
@OutputDirectory
CamelCloudServiceCallRoutesAutoConfiguration.class
numDataDims == 1
new DatabaseFormatterDb2()
updateCntr0 == null ? 0 : updateCntr0
SystemPropertyUtil.getBoolean("io.netty.noJdkZlibDecoder",true)
myInflatorId == -1
annotation.value()
!checkLocationAccess(uid,packageName,allowedResolutionLevel)
iconSize * DisplayMetrics.DENSITY_LOW >= availableHeight
tessellator.tessellatePolygon(true,close,true)
private String buffer=null; 
logger.warn("Could not locate PropertySource: " + (errorBody == null ? error == null ? "label not found" : error.getMessage() : errorBody))
assertThat(decorator.generatesIssuesMetrics()).hasSize(14)
StreamOut.transferSSTables(session,ssTableReaders,ranges,OperationType.BOOTSTRAP)
tfs.getFile(fileId)
(node1.getUserObject() instanceof NodeDescriptor) && ((NodeDescriptor)node1.getUserObject()).getElement() == null
this.mChildren.remove(pEntityMatcher,Entity.PARAMETERCALLABLE_DETACHCHILD)
@Input
mListNavLayout != null
ObjectUtils.chooseNotNull(lookAndFeelInfo,findLaf(lookAndFeelInfo.getClassName()))
ParamUtil.getBoolean(actionRequest,"publish")
super.onMeasure(widthMeasureSpec,widthMeasureSpec)
gatt.enableAdvertisingSet(this.advertiserId,enable,timeout)
mUsbDataUnlocked && active && mCurrentUser != UserHandle.USER_NULL
final StringBuilder replacement=new StringBuilder(tag.getValue().getText()); 
((PresenceStatus)status).getStatus() >= PresenceStatus.ONLINE_THRESHOLD
Boolean.parseBoolean(request.getParameter("notify"))
ps == null || ps.getUserState().get(userId) == null || !ps.getUserState().get(userId).isEnabled(mInstantAppInstallerActivity,0)
this.jumpSpeed=jumpSpeed
Assert.assertSame(ehcache2,_ehcachePortalCache.ehcache)
SCHEMA_VERSION=1000
UpgradeStepRegistrator.class
new java.util.Date(System.currentTimeMillis() - 24 * 3600 * 1000)
new HTreeMap<K,Object>(engine,false,defaultSerializer,serializer,null)
Entry<String,Channel>
vis.fontAction(ascii)
getCloneSettings(myProjectScheme)
getTree().getRowCount()
Response header(String name,Property property); 
public class ParseTest extends BaseParseTestCase2 {   public void test1() throws Throwable {     myFixture.testHighlighting("test1.regexp");   }   public void test2() throws Throwable {     myFixture.testHighlighting("test2.regexp");   }   public void test3() throws Throwable {     myFixture.testHighlighting("test3.regexp");   }   public void test4() throws Throwable {     myFixture.testHighlighting("test4.regexp");   } } 
assertEquals(1840,res.getWeight(1,2),10)
ShrinkWrap.create(JavaArchive.class).addClasses(EmployeeBean.class,Employee.class).addAsManifestResource("beans.xml")
@XmlAttribute(name="miterlimit") protected String miterlimit; 
startActivity(intent)
getString(R.string.known_issue_wrong_base_directory,appInfo.deviceProtectedDataDir)
new FileAttribute("stubIndexStamp",2,true)
getSubstring(0,1000)
new SSALinearScanResolveDataFlowPhase(this)
getConfig()
ret.setComplete(response)
registration.registerOperationHandler(CommonAttributes.ENABLE,ModClusterEnable.INSTANCE,enable,false,runtimeOnlyFlags)
BALD
blockStore.init(new HashMapDB(),new HashMapDB())
namespaceReverseRouter=true
mNextNonWakeupDeliveryTime < nowELAPSED
@Override public void setting(int identifier,long value) throws ConnectionException {   trace.append("0-Settings-[" + identifier + "]-["+ value+ "]\n");   remoteSettings.set(identifier,value); } 
container.lookup(BuildContextManager.ROLE,"default")
publisher.publishWanReplicationUpdateBackup(name,view)
prettyPrintFileName(file,false)
Math.max(clientCount,1)
Settings.Secure.getIntForUser(mContext.getContentResolver(),Settings.Secure.AUTOFILL_FEATURE_FIELD_CLASSIFICATION,1,mUserId)
VERSION=13
log.info("Setting {} to: {}",configKey,toReturn)
new PRestriction(mAppInfo.getUid(),restrictionName,null,restricted,restricted)
Boolean.parseBoolean(System.getProperty("cassandra.consistent.simultaneousmoves.allow","false"))
column.getLabel()
TelephonyManager.getDefault().getCurrentPhoneType()
flyway.info().all()[3]
this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE)
new StepPluginMeta(AbortMeta.class,"Abort",Messages.getString("BaseStep.TypeLongDesc.Abort"),Messages.getString("BaseStep.TypeTooltipDesc.Abort"),"ABR.png",CATEGORY_TRANSFORM)
logger.fine(String.format("connect attempt timed out after %d",timeout))
new ArrayList<>(3)
assertEquals(0,StringUtil.getOccurrenceCount(text,"checkExpressionValueIsNotNull"))
Preconditions.checkNotNull(containerIdGenerator,"containerIdGenerator")
System.currentTimeMillis() + 30000
locationRequest.setFastestInterval(fastestUpdateInterval)
container.getLogger().error(sm.getString("standardWrapper.serviceException",wrapper.getName()),e)
client.getLocalPlayer() != null && client.getLocalPlayer().getName() != null
exchange.getBindingOperationInfo()
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
myFixture.testCompletionVariants(getTestName(true) + ".go","bar","break","const","continue","defer","for","go","if","return","fallthrough","goto","select","switch","var","struct","map","type")
saveTaskDefinition(taskDefinition)
tag.setLabelposition("left")
assertEquals(400,counter.get())
y * width
new TreeMap<>(String.CASE_INSENSITIVE_ORDER)
chooser.showOpenDialog(null)
A
xml.optAttribute("name",name)
new DefaultSensorContext(mock(InputModule.class),settings.asConfig(),settings,fs,activeRules,analysisMode,sensorStorage,runtime)
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists/memberships.json?cursor="+ cursor,true))
fragmentCollectionPersistence.countByGroupId(groupId)
windowIndex >= playbackInfo.timeline.getWindowCount()
name == null || !name.startsWith(prefix)
cubeManager.mergeSegments(cube,0L,1386835200000L,false)
DomUtil.getRawType(myType)
!Files.exists(subAssetFile)
new IllegalStateException("Legacy advertisement can't be connectable and non-scannable")
PsiType[]
m.getAverageJobWaitTime()
liquid.canonical() != null && liquid.canonical().getRenderingIcon() != null
(int)timeoutMs / 1000
myEditor.getScrollingModel().getVisibleAreaOnScrollingFinished()
operandStack.remove(3)
anomalyFilter.containsKey(filterKey)
timeout=60_000L
alarm.getType()
_routingTable.findServers(new RoutingTableLookupRequest(resourceName)) != null
connection.search(searchBase,filter,SearchScope.SUBTREE,groupIdAttribute,displayNameAttribute,"dn","uid","userPrincipalName","mail","rfc822Mailbox","memberOf","isMemberOf")
new EnterSelectionDialog(shell,schemaNames,"Select a partition schema","Select the partition schema to use:")
assertTrue(e.getMessage(),exceptionMessage.contains("Invalid core"))
removeFlagForThreadsFromCache(account,ids,flag)
private final PagingUnsupportedResultListener pagingUnsupportedResultListener; 
readIf("READ") || readIf("FETCH")
setDozeInFrontAlphaDelayed(mAodFrontScrimOpacity,100)
rootsIndex.findAllParentDescriptors(file,myContext)
new LowerCaseFilter(matchVersion,result)
public T setJavaHome(File javaHome){   operationParamsBuilder.setJavaHome(javaHome);   return getThis(); } 
!licensee.collectionEnabled()
baseRevision.getChangeset().isEmpty()
new StringRepresentation(resourceGetRet.toString(),MediaType.APPLICATION_JSON)
BasicChaosInstanceSelector.class
StringUtil.compareVersionNumbers(OS_VERSION,version)
Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)
m.mul(beta1)
next + SEPARATOR.length()
(ErrorMessage)authResponse
SynchronousQueue<Runnable>
boundary.endsWith("\"")
sdk != 21 && sdk != 22
updateAll(tableCollection,modelSaver.getWritableDatabase())
a(2,1,15)
connect(monitor,null,null,false,false)
k < 5
mPackageManager.hasSystemFeature(PackageManager.FEATURE_APP_WIDGETS) || context.getResources().getBoolean(R.bool.config_enableAppWidgetService)
parser.getBoolean(KEY_ADJUST_BRIGHTNESS_DISABLED,true)
builder.humanReadableField(Field.TIMEOUT.getPreferredName(),Field.TIMEOUT_HUMAN.getPreferredName(),timeout)
mActivityLogContainer.setOnClickListener(new OnClickListener(){   @Override public void onClick(  View view){     ActivityLauncher.viewActivityLogList(getActivity(),getSelectedSite());   } } )
JsAstUtils.pureFqn(context.getNameForDescriptor(propertyDescriptor),JsLiteral.THIS)
this.controller.saveService(data2)
result == JOptionPane.CANCEL_OPTION || result == JOptionPane.CLOSED_OPTION
meta.getCompareStepName()
EPS_THRESHOLD=1e-5
mNotificationsUtilsWrapper.mapJsonToFormattableContent(bodyArray.getJSONObject(i))
new AuthenticationException("Error validating LDAP user",e)
Set<Integer>
new EnterSelectionDialog(shell,functionDesc,Messages.getString("SystemDataDialog.SelectInfoType.DialogTitle"),Messages.getString("SystemDataDialog.SelectInfoType.DialogMessage"))
errorMessage.contains(" is deprecated")
new GridLayout(0,1,0,4)
!ref.virtualMachine().canGetInstanceInfo()
this.mTextureRegions[pTileIndex].setTextureX(pTextureX)
service.getDomain().id()
successfullyFundedTextView.setText(bannerSuccessfulString)
ShrinkWrap.create(WebArchive.class).addClass(MyBatchlet.class).addAsWebInfResource(EmptyAsset.INSTANCE,ArchivePaths.create("beans.xml")).addAsResource("META-INF/batch-jobs/myJob.xml")
Outdoor(1)
selectedTabLine.getTranslateX() == newTransX && scale.getX() == newWidth
ConfigurationFromContext.COMPARATOR.compare(producer,first) > 0
LAST_VERSION=487
start.expectedMessageCount(7)
/**   * The localized summary of the accessibility service. <p> <strong>Statically set from {@link AccessibilityService#SERVICE_META_DATA meta-data}.</strong> </p>  * @return The localized summary.  */ public CharSequence loadSummary(PackageManager packageManager){   if (mSummaryResId == 0) {     return mNonLocalizedSummary;   }   ServiceInfo serviceInfo=mResolveInfo.serviceInfo;   CharSequence summary=packageManager.getText(serviceInfo.packageName,mSummaryResId,serviceInfo.applicationInfo);   if (summary != null) {     return summary.toString().trim();   }   return null; } 
BCFactoryBlocks.pump != null && BCFactoryBlocks.tank != null
logger.debug("Cannot set group volume ({})",e.getMessage())
lastRequestTime + publicKeyCacheTtl > currentTime && kid != null
String name
((TcpDiscoverySpi)cfg.getDiscoverySpi()).setJoinTimeout(10000)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticMethods.kt")
new ElementsChooser<ComponentElementProperties>(true)
scores.getAlgorithm()
gatherServerResponses(realtimeCompositeFuture,scatterGatherStats,false,realtimeTableName,processingExceptions)
mDateView.setTypeface(Typeface.SANS_SERIF,Typeface.BOLD)
FLING_VEL_THRESHOLD=300
position.getValid()
!_javaSource && (_lineTabLevel == 1) && _line.matches("^\\s*<.*")
assertEquals("Range for response status value " + result.getResponse().getStatus(),HttpStatus.Series.INFORMATIONAL,getHttpStatusSeries(result))
TokenSet.create(OUT_KEYWORD,VARARG_KEYWORD)
waitForClose(5000)
namespaceDescriptor.getFqName()
new AutoValue_RegistrationResponse(configuration,configurationOverride,actions,assignments)
complete.expectedBodiesReceivedInAnyOrder("finish","stop","faulted","except")
BTraceUtils.setIntrusionLevel(1)
mQsDensityContainer.getLayoutParams()
/**   */ class SctpClientPipelineSink extends AbstractSctpChannelSink {   static final InternalLogger logger=InternalLoggerFactory.getInstance(SctpClientPipelineSink.class);   final Executor bossExecutor;   private final Boss boss=new Boss();   private final SctpWorker[] workers;   private final AtomicInteger workerIndex=new AtomicInteger();   SctpClientPipelineSink(  Executor bossExecutor,  Executor workerExecutor,  int workerCount){     this.bossExecutor=bossExecutor;     workers=new SctpWorker[workerCount];     for (int i=0; i < workers.length; i++) {       workers[i]=new SctpWorker(workerExecutor);     }   }   @Override public void eventSunk(  ChannelPipeline pipeline,  ChannelEvent e) throws Exception {     if (e instanceof ChannelStateEvent) {       ChannelStateEvent event=(ChannelStateEvent)e;       SctpClientChannel channel=(SctpClientChannel)event.getChannel();       ChannelFuture future=event.getFuture();       ChannelState state=event.getState();       Object value=event.getValue(); switch (state) { case OPEN:         if (Boolean.FALSE.equals(value)) {           channel.worker.close(channel,future);         }       break; case BOUND:     if (value != null) {       bind(channel,future,(SocketAddress)value);     }  else {       channel.worker.close(channel,future);     }   break; case CONNECTED: if (value != null) {   connect(channel,future,(SocketAddress)value); }  else {   channel.worker.close(channel,future); } break; case INTEREST_OPS: if (event instanceof SctpBindAddressEvent) { SctpBindAddressEvent bindAddressEvent=(SctpBindAddressEvent)event; bindAddress(channel,bindAddressEvent.getFuture(),bindAddressEvent.getValue()); }  else if (event instanceof SctpUnbindAddressEvent) { SctpUnbindAddressEvent unbindAddressEvent=(SctpUnbindAddressEvent)event; unbindAddress(channel,unbindAddressEvent.getFuture(),unbindAddressEvent.getValue()); }  else { channel.worker.setInterestOps(channel,future,((Integer)value).intValue()); } break; } }  else if (e instanceof MessageEvent) { MessageEvent event=(MessageEvent)e; SctpChannelImpl channel=(SctpChannelImpl)event.getChannel(); boolean offered=channel.writeBuffer.offer(event); assert offered; channel.worker.writeFromUserCode(channel); } } private void bind(SctpClientChannel channel,ChannelFuture future,SocketAddress localAddress){ try { channel.channel.bind(localAddress); channel.boundManually=true; channel.setBound(); future.setSuccess(); fireChannelBound(channel,channel.getLocalAddress()); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void bindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.bindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void unbindAddress(SctpClientChannel channel,ChannelFuture future,InetAddress localAddress){ try { channel.channel.unbindAddress(localAddress); future.setSuccess(); }  catch (Throwable t) { future.setFailure(t); fireExceptionCaught(channel,t); } } private void connect(final SctpClientChannel channel,final ChannelFuture cf,SocketAddress remoteAddress){ try { if (channel.channel.connect(remoteAddress)) { channel.worker.register(channel,cf); }  else { channel.getCloseFuture().addListener(new ChannelFutureListener(){ @Override public void operationComplete(ChannelFuture f) throws Exception { if (!cf.isDone()) { cf.setFailure(new ClosedChannelException()); } } } ); cf.addListener(ChannelFutureListener.CLOSE_ON_FAILURE); channel.connectFuture=cf; boss.register(channel); } }  catch (Throwable t) { cf.setFailure(t); fireExceptionCaught(channel,t); channel.worker.close(channel,succeededFuture(channel)); } } SctpWorker nextWorker(){ return workers[Math.abs(workerIndex.getAndIncrement() % workers.length)]; } private final class Boss implements Runnable { volatile Selector selector; private boolean started; private final AtomicBoolean wakenUp=new AtomicBoolean(); private final Object startStopLock=new Object(); private final Queue<Runnable> registerTaskQueue=QueueFactory.createQueue(Runnable.class); Boss(){ super(); } void register(SctpClientChannel channel){ Runnable registerTask=new RegisterTask(this,channel); Selector selector; synchronized (startStopLock) { if (!started) { try { this.selector=selector=Selector.open(); }  catch (Throwable t) { throw new ChannelException("Failed to create a selector.",t); } boolean success=false; try { DeadLockProofWorker.start(bossExecutor,this); success=true; }   finally { if (!success) { try { selector.close(); }  catch (Throwable t) { logger.warn("Failed to close a selector.",t); } this.selector=selector=null; } } }  else { selector=this.selector; } assert selector != null && selector.isOpen(); started=true; boolean offered=registerTaskQueue.offer(registerTask); assert offered; } if (wakenUp.compareAndSet(false,true)) { selector.wakeup(); } } @Override public void run(){ boolean shutdown=false; Selector selector=this.selector; long lastConnectTimeoutCheckTimeNanos=System.nanoTime(); for (; ; ) { wakenUp.set(false); try { int selectedKeyCount=selector.select(500); if (wakenUp.get()) { selector.wakeup(); } processRegisterTaskQueue(); if (selectedKeyCount > 0) { processSelectedKeys(selector.selectedKeys()); } long currentTimeNanos=System.nanoTime(); if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) { lastConnectTimeoutCheckTimeNanos=currentTimeNanos; processConnectTimeout(selector.keys(),currentTimeNanos); } if (selector.keys().isEmpty()) { if (shutdown || bossExecutor instanceof ExecutorService && ((ExecutorService)bossExecutor).isShutdown()) { synchronized (startStopLock) { if (registerTaskQueue.isEmpty() && selector.keys().isEmpty()) {   started=false;   try {     selector.close();   }  catch (  IOException e) {     if (logger.isWarnEnabled()) {       logger.warn("Failed to close a selector.",e);     }   }  finally {     this.selector=null;   }   break; }  else {   shutdown=false; } } }  else { shutdown=true; } }  else { shutdown=false; } }  catch (Throwable t) { if (logger.isWarnEnabled()) { logger.warn("Unexpected exception in the selector loop.",t); } try { Thread.sleep(1000); }  catch (InterruptedException e) { } } } } private void processRegisterTaskQueue(){ for (; ; ) { final Runnable task=registerTaskQueue.poll(); if (task == null) { break; } task.run(); } } private void processSelectedKeys(Set<SelectionKey> selectedKeys){ for (Iterator<SelectionKey> i=selectedKeys.iterator(); i.hasNext(); ) { SelectionKey k=i.next(); i.remove(); if (!k.isValid()) { close(k); continue; } if (k.isConnectable()) { connect(k); } } } private void processConnectTimeout(Set<SelectionKey> keys,long currentTimeNanos){ ConnectException cause=null; for (SelectionKey k : keys) { if (!k.isValid()) { continue; } SctpClientChannel ch=(SctpClientChannel)k.attachment(); if (ch.connectDeadlineNanos > 0 && currentTimeNanos >= ch.connectDeadlineNanos) { if (cause == null) { cause=new ConnectException("connection timed out"); } ch.connectFuture.setFailure(cause); fireExceptionCaught(ch,cause); ch.worker.close(ch,succeededFuture(ch)); } } } private void connect(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); try { if (ch.channel.finishConnect()) { k.cancel(); ch.worker.register(ch,ch.connectFuture); } }  catch (Throwable t) { ch.connectFuture.setFailure(t); fireExceptionCaught(ch,t); k.cancel(); ch.worker.close(ch,succeededFuture(ch)); } } private void close(SelectionKey k){ SctpClientChannel ch=(SctpClientChannel)k.attachment(); ch.worker.close(ch,succeededFuture(ch)); } } private static final class RegisterTask implements Runnable { private final Boss boss; private final SctpClientChannel channel; RegisterTask(Boss boss,SctpClientChannel channel){ this.boss=boss; this.channel=channel; } @Override public void run(){ try { channel.channel.register(boss.selector,SelectionKey.OP_CONNECT,channel); }  catch (ClosedChannelException e) { channel.worker.close(channel,succeededFuture(channel)); } int connectTimeout=channel.getConfig().getConnectTimeoutMillis(); if (connectTimeout > 0) { channel.connectDeadlineNanos=System.nanoTime() + connectTimeout * 1000000L; } } } } 
MockReset.after()
ctx != null
e.isAltPressed()
Arrays.asList(new CommaWhitespaceRule(messages),new DoublePunctuationRule(messages),new GenericUnpairedBracketsRule(messages),new HunspellNoSuggestionRule(messages,this),new LongSentenceRule(messages),new UppercaseSentenceStartRule(messages,this),new MultipleWhitespaceRule(messages,this),new SentenceWhitespaceRule(messages),new WordRepeatBeginningRule(messages,this),new PostReformPortugueseCompoundRule(messages),new PortugueseReplaceRule(messages),new PortugueseWordRepeatRule(messages,this))
new ColorUIResource(0x232324)
assertContainsParams(CollectionAdminRequest.createCollectionWithImplicitRouter("foo",null,"bar",1).getParams(),ACTION,NAME,"shards","router.name",ZkStateReader.NRT_REPLICAS)
mRS.nScriptIntrinsicBLAS_Z(getID(mRS),RsBlas_ztrsm,TransA,0,Side,Uplo,Diag,B.getType().getY(),B.getType().getX(),0,alpha.x,alpha.y,A.getID(mRS),B.getID(mRS),0,0,0,0,0,0,0)
keyGen.initialize(2048)
setupStrokePaint(paint,opacity)
RegisterRules.class
pubnub.getConfiguration().getProxySelector()
assertSpnegoWorkflow(uri,mechTypes,kerberosToken,kerberosToken,false,true)
context.getString(R.string.history_attach_added,attachmentName,item)
UpgradeStepRegistrator.class
dl.error("_offset_column","Offset is only supported for regression.")
SystemProperties.getBoolean("persist.debug.sqlite.close_idle_connections",false)
insertedElement instanceof PsiPlainText || insertedElement instanceof PsiComment
synchronized (CONFIG) {   --threadCount;   if (threadCount <= 0) {     try {       session.close();     }  catch (    IOException e) {       throw new DBException(e);     }   } } 
formalParamType.asReferenceTypeUsage().isRawType() || actualParamType.asReferenceTypeUsage().isRawType()
new IllegalStateException("The dataflow failed.")
UnderFileSystemUtils.deleteFileIfExists(mCheckpointPath)
expect(cluster.getClusterName()).andReturn("clusterOld").times(1)
conversation.getContactJid().split("/",2)
++cursor == 3
theOffset != null
ExprEval.ofDouble(null)
gen.addLoadImmediate(Register.R0,123456789)
Slog.i(TAG,"Failed to build intent for " + packageName)
CHECK_DB_AT_VERSION=20900150
JavaLibraryPlugin.class
view.getContext().getOpPackageName()
new Environment(settings.build())
topPanel.addView(mCustomTitleView,0,lp)
clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer))
super.setV(v)
mIsAnimating.get() && mTargetZoomLevel.get() >= maxZoomLevel
redirectToErrorPage(authSession,Response.Status.INTERNAL_SERVER_ERROR,message,null,parameters)
expand("serializedforms/DailyTimeIntervalTriggerImplSerializationTest.testFired.{?}.ser","JDK16","JDK17_1","JDK17_2","JDK18")
/**   * TreeTableCellEditor implementation. Component returned is the JTree.  */ private class TreeTableCellEditor extends BaseCellEditor implements TableCellEditor {   @Override public Component getTableCellEditorComponent(  JTable table,  Object value,  boolean isSelected,  int row,  int column){     return tree;   }   /**   * Overridden to return false, and if the event is a mouse event it is forwarded to the tree. <p>The behavior for this is debatable, and should really be offered as a property. By returning false, all keyboard actions are implemented in terms of the table. By returning true, the tree would get a chance to do something with the keyboard events. For the most part this is ok. But for certain keys, such as left/right, the tree will expand/collapse where as the table focus should really move to a different column. Page up/down should also be implemented in terms of the table. By returning false this also has the added benefit that clicking outside of the bounds of the tree node, but still in the tree column will select the row, whereas if this returned true that wouldn't be the case. <p>By returning false we are also enforcing the policy that the tree will never be editable (at least by a key sequence).  * @see TableCellEditor  */   @Override public boolean isCellEditable(  EventObject e){     if (e instanceof MouseEvent) {       for (int counter=getColumnCount() - 1; counter >= 0; counter--) {         if (getColumnClass(counter) == TreeTableModel.class) {           final MouseEvent me=(MouseEvent)e;           final MouseEvent newME=new MouseEvent(tree,me.getID(),me.getWhen(),me.getModifiers(),me.getX() - getCellRect(0,counter,true).x,me.getY(),me.getClickCount(),me.isPopupTrigger());           tree.dispatchEvent(newME);           break;         }       }     }     return false;   } } 
Slog.e(TAG,message,th)
/**   * Integration tests for GRPC over HTTP2 using the Netty framework.  */ @RunWith(JUnit4.class) public class Http2NettyTest extends AbstractInteropTest {   private static int serverPort=TestUtils.pickUnusedPort();   /**   * Starts the server with HTTPS.   */   @BeforeClass public static void startServer(){     try {       startStaticServer(NettyServerBuilder.forPort(serverPort).flowControlWindow(65 * 1024).sslContext(GrpcSslContexts.forServer(TestUtils.loadCert("server1.pem"),TestUtils.loadCert("server1.key")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()));     }  catch (    IOException ex) {       throw new RuntimeException(ex);     }   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     try {       return NettyChannelBuilder.forAddress(TestUtils.testServerAddress(serverPort)).sslContext(GrpcSslContexts.forClient().trustManager(TestUtils.loadCert("ca.pem")).ciphers(TestUtils.preferredTestCiphers(),SupportedCipherSuiteFilter.INSTANCE).sslProvider(SslProvider.OPENSSL).build()).build();     }  catch (    Exception ex) {       throw new RuntimeException(ex);     }   } } 
thisJob._state != JobState.CANCELLED
domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler)
metric.getKey().toLowerCase(Locale.ROOT)
AtmosphereInterceptorWriter.class
id=10839
assertFalse(CompressionTest.testCompression("SNAPPY"))
value >= 0 && metricsPublishers != null
Log.debug(this + " JVM BUG(s) - cancelled keys " + _jvmFix0+ " times")
GridGgfsTestUtils.jsonToMap(restCfg)
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Binder.getCallingUid(),callingPackage)
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,nanos + duration)
mFileLength <= mBlockSize
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[buildfile]","includes = //java/com/facebook/defaultIncludeFile","[project]","check_package_boundary = false")
((PyRemoteSdkAdditionalData)sdk.getSdkAdditionalData()).getRemoteSdkCredentials(false)
LOG.warn("Failed to freeSpace: No StorageDirView has enough capacity of {} bytes",availableBytes)
new FileAttribute("python_language_level_persistence",1,true)
ch.writeAndFlush(new LogEvent(null,-1,file.getAbsolutePath(),line))
new IllegalStateException("Major assumption broken: Multiple application instances contain host " + hostName.s() + ": "+ applicationInstancesUsingHost)
newDirectory()
intermediateArtifacts.combinedArchitectureBinary()
result.getContentType().startsWith(PresContentClient.CONTENT_TYPE)
socketFile.toString().length() >= 104
ViewLanguageTest.class
new PreFlexRWSegmentInfoFormat()
new IndexWriter(dir,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
user.getHome(user.getLocation())
FlowManager.getWritableDatabaseForTable(getTable())
String.format("Cannot complete a promise more than once! Present value: %s, attempted to set: %s",_value.get(),value)
@Path(PATH_RELATIONSHIP_INDEX_ID)
e.getMessage()
new SampleItem()
podStatus != null && !"Succeeded".equals(podStatus.getPhase())
SwingUtilities.invokeLater(() -> {   try {     if (!isDisposed()) {       myGutterComponent.updateSize();     }   }   finally {     updatingSize=false;   } } ,__ -> isDisposed())
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target2.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
addProperty(prop,false)
outputBatchSize=1000
String className=""; 
NetworkParameters.oldTestNet()
userState.mIsDisplayMagnificationEnabled || userHasMagnificationServicesLocked(userState)
o == null || !(o instanceof BooleanClause)
RequestContextHolder.getRequestAttributes()
new EmbeddedKafkaCluster(3,mkProperties(mkMap()),0L)
new ConnectionException(sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),Http2Error.COMPRESSION_ERROR)
assertEquals(2,handlers.size())
private Adapter mListAdapter; 
FileUtilRt.loadFile(new File(getBasePath() + File.separator + getTestDir()+ File.separator+ getTestName(true)+ "."+ ext),true)
testClass.getMethod(SUITE_METHODNAME)
test("var foo = function (a) {}; foo.call(this, 1);","var foo = function () {var a$jscomp$1 = 1;}; foo.call(this);")
sctpChannelClass.getMethod("open")
File canonicalFile
proxyHTTPSPort.setText(Integer.toString(Preferences.getInteger("proxy.https.port",8443)))
new IllegalStateException()
goalStartXp <= 0 || currentXp > goalEndXp
authentication.has(USERS)
nodeManager.getWorkerNodes()
jobDataMap.remove(JobDetailAwareTrigger.JOB_DETAIL_KEY)
Arrays.hashCode(valSrcQueries)
BackChannelConduit.class
name == null || name.isEmpty()
GL20.glVertexAttribPointer(indx,size,type,normalized,stride,(FloatBuffer)buffer)
minutes >= 2 || (minutes > 0 && seconds == 0)
64 * 1024
assertNotEquals(String.format("Build target %s should not have been built locally, but it was",buildTargetRaw),BuildRuleSuccessType.BUILT_LOCALLY,logEntry.successType.get())
endIndex <= 0
getPath("checks/javadoc/Input_01.java")
fm.beginTransaction().remove(samples)
new CompositeException(t,e)
Color.fromRGB(0x434343)
getWebElement(locator,timeout)
appName != null && searchManager.getSearchableInfo(appName) != null
UIUtil.isCloseClick(e)
searchDisplay.initSearch("search clear crash workaround",false)
public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler){   this.defaultThrowableHandler=throwableHandler;   return this; } 
LOGGER.debug("{} - Reset ({}) on connection {}",poolName,resetBits != 0 ? stringFromResetBits(resetBits) : "nothing",poolEntry.connection)
/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ ExtendedCell deepClone(); 
new StringBundler(6)
start > length
cr.isUnderflow() && !last
vertFilename == null
String changeList
TransformItem.create(R.id.ivFirstImage,Direction.RIGHT_TO_LEFT,0.20f)
merge(new byte[]{flags},payload,signature)
(JobResponse)result
new WitnessCapsule(ByteString.copyFrom(ByteArray.fromHexString(OWNER_ADDRESS_SECOND)),10_000_000L,URL)
currentFile.getPath()
IOException ioe
new BooleanPreference("use_step_by_step_rendering",false,false)
activeFrom == null
ApplicationManager.getApplication().invokeLater(new Runnable(){   public void run(){     final ProgressWindow progressWindow=new ProgressWindow(false,null);     progressWindow.setTitle("Looking for TODOs...");     progressWindow.setText("Please wait...");     final Runnable process=new Runnable(){       public void run(){         if (myAllTodos == null)         return;         ApplicationManager.getApplication().runReadAction(new Runnable(){           public void run(){             myAllTodos.rebuildCache();             myCurrentFileTodos.rebuildCache();           }         } );         ApplicationManager.getApplication().invokeLater(new Runnable(){           public void run(){             myAllTodos.updateTree();             myCurrentFileTodos.updateTree();           }         } ,ModalityState.NON_MMODAL);       }     } ;     Thread thread=new Thread(new Runnable(){       public void run(){         ProgressManager.getInstance().runProcess(process,progressWindow);       }     } ,"Todo finder");     thread.start();   } } ,ModalityState.NON_MMODAL)
mService.leConnectionUpdate(mClientIf,mDevice.getAddress(),minConnectionInterval,maxConnectionInterval,slaveLatency,supervisionTimeout,minConnectionEventLen,maxConnectionEventLen)
Thread.sleep(3)
cacheController.putIfAbsent(internalTenantContext.getTenantRecordId(),resolvedPluginCatalog)
source=event
equalTo(5)
LOG.info("Exception while creating remote block reader, datanode {}",source,e)
e instanceof InterruptedException || Thread.currentThread().isInterrupted()
super.createEditorPopupActions()
KEY_LENGTH=64
myScopeSlider.setValue(3)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/multifile/ObjectMembers/")
propName.equals(Constants.FACTORY) || propName.equals("scope") || propName.equals("auth")|| propName.equals("singleton")
logger.info("Plugin class " + pluginClass)
hashInd == -1 || hashInd < 8
SCAN_STATUS_PARTIAL=1
new Requirement(Skill.SLAYER,85)
options.getJvmOpts() == null || !options.getJvmOpts().contains("-Xmx")
assertEquals("There should be no files",0,files.length)
eventJournalConfig.getCacheName()
_sharingEntryLocalService.addSharingEntry(TestPropsValues.getUserId(),_groupUser.getUserId(),classNameId,_fileEntry.getFileEntryId(),_group.getGroupId(),true,Collections.singletonList(SharingEntryActionKey.VIEW),serviceContext)
CollectionItemInfo.obtain(row,1,column,1,isHeading,isSelected)
process.destroyForcibly()
layout.setReleaseLabel(label)
private Stream getStream(int streamId,boolean unknownIsError) throws ConnectionException {   Integer key=Integer.valueOf(streamId);   Stream result=streams.get(key);   if (result == null && unknownIsError) {     throw new ConnectionError(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR);   }   return result; } 
proxy == null || proxy != view.getAnimation()
report(n,MISPLACED_ANNOTATION,"@abstract","static methods cannot be abstract")
tableCache.getAllObjects(monitor,this)
javaChannel().isOpen() && config().getSoLinger() > 0
HttpHeaderValues.IDENTITY.contentEquals(targetContentEncoding)
feedForward(true)
ReduceByKey.named(getName().orElse(null)).of(Iterables.getOnlyElement(inputs)).keyBy(getKeyExtractor(),getKeyType().orElse(null)).valueBy(v -> 1L,TypeDescriptors.longs()).combineBy(Sums.ofLongs(),TypeDescriptors.longs())
doPost("http://localhost:" + PORT + "/the/thebooks/bookstore/books/convert",400,"application/xml","resources/add_book.txt",null)
!wrapRequest
new BuildCancelledException()
t.getCause()
lastIme != null
/**   * An SQL dialect for Postgres 9.4 and later. Adds support for various date and time functions  */ public class PostgreSQL94Dialect extends PostgreSQL93Dialect {   /**   * Constructs a PostgreSQL94Dialect  */   public PostgreSQL94Dialect(){     super();     registerFunction("make_interval",new StandardSQLFunction("make_interval",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamp",new StandardSQLFunction("make_timestamp",StandardBasicTypes.TIMESTAMP));     registerFunction("make_timestamptz",new StandardSQLFunction("make_timestamptz",StandardBasicTypes.TIMESTAMP));     registerFunction("make_date",new StandardSQLFunction("make_date",StandardBasicTypes.DATE));     registerFunction("make_time",new StandardSQLFunction("make_time",StandardBasicTypes.TIME));   } } 
old.isUnderlinedRaw()
((FillLayout)parentLayout).marginHeight=0
CreateGrid(1,2)
!column.isMarkedForDelete()
DefaultJavaLibrary rule=createJavaLibraryBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(graphBuilder); 
_buildTemplateWithGradle("mvc-portlet","mvc-dependency-management","--dependency-management-enabled")
enabled=false
val.get(k)
hour <= 23
DNSUtil.isNameCoveredByPattern(dnsId,identity)
MessageNotifier.updateNotification(context,masterSecret,true,false,reminderCount + 1)
requestCode == LegacyEditorFragment.ACTIVITY_REQUEST_CODE_CREATE_LINK && data != null
mImageManager.load(holder.mImgFeatured,new ColorDrawable(ContextCompat.getColor(holder.mImgFeatured.getContext(),R.color.grey_lighten_30)))
line.startsWith(StringPool.TAB + "protected abstract class ") || line.startsWith(StringPool.TAB + "protected class ") || line.startsWith(StringPool.TAB + "protected enum ")
methodName.length() <= position || Character.isUpperCase(methodName.charAt(position - 1))
getNotificationInterface().getInterruptionFilterFromListener(mWrapper)
jmsDestination == null || jmsDestination.isEmpty()
(short)suggestions.size() >= max_results
unlockInner(lockedLocks)
solo.clickLongOnView(solo.getView(it.feio.android.omninotes.R.id.fab_expand_menu_button))
g("enum")
id=10849
fileMeasures.get(5L)
host.setHeaderView(mExpandIndicator)
args.isTestingModeEnabled()
initialCapacity > 1 << 30
noClasses.get() && myBC.getCompilerOptions().getFilesToIncludeInSWC().isEmpty() && !Utils.IS_TEST_MODE
extension.getHttpSessionsSite(getAuthority(params.getString(ACTION_PARAM_SITE)),true)
format("RowBlock{SingleRowBlockWriter=%d, fieldBlockBuilderReturned=true}",numFields)
postfix.startsWith("id")
Class.forName(proxiedDriver,true,Thread.currentThread().getContextClassLoader())
res + _bias
EntityCacheImpl.class
isCorrectFile
DLFileEntry.class
super.remove(inputState)
List<Long>
days >= 2 || (days > 0 && hours == 0)
Preconditions.checkNotNull(fileSystemMaster,"fileSystemMaster")
expected=33554436
assertEquals("rt",cfg.resultType)
DeprecationLogger.nagUserOfDeprecatedBehaviour("Do not remove a task dependency from a Task instance.")
ExitUtil exitUtil(); 
new Version(0,1,0)
BAD_THRESHOLD=0
new IndexWriter(dir,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
createTestBlockCapsule(1533529947843L + 3000L * 7,number,dbManager.getDynamicPropertiesStore().getLatestBlockHeaderHash().getByteString(),addressToProvateKeys)
randomFrom("_lang1","_lang2")
fulfillmentGroupItemWrapper.wrapSummary(fgi,request)
DTOMapperImpl.class
new MockEnvironment("MockTask",3 * 1024 * 1024,new MockInputSplitProvider(),1024,new Configuration(),new ExecutionConfig(),maxParallelism,parallelism,subtaskIndex)
i=14
in.readByte()
o.toString().getBytes(response.getCharacterEncoding())
canPerformRequestOverConnection(mParentAccessibilityViewId)
JSRootConfiguration.getInstance(getProject()).storeLanguageLevelAndUpdateCaches(null)
number == null || s == null
block.getEnchantPowerBonus(world,x,y,z)
NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST=true
leftTuple.setStagePrevious(last)
new IllegalArgumentException(String.format("Cannot determine specified query - doesn't appear to be URI or JSON based and location [%s] cannot be opened",query))
firstWakeup != null && mNextWakeup != firstWakeup.start
logger.error("testConcurrentServiceTicketGeneration produced an error",e)
clazz.getName()
!GroovyPropertyUtils.isPropertyName(getName())
return flowControlUnderRuns; 
new CvsOperationExecutor(false,project,ModalityState.defaultModalityState())
false && mNumOps.getOpsAdded() >= opsAllowed
new QuickAdapter(0)
(input & 0x80) != 0
queryString.getBytes("UTF-8")
UpgradeStepRegistrator.class
randomFrom("allocate","forcemerge","delete","shrink")
Color.fromRGB(0x253192)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new StringTemplateResource(_WRONG_ERROR_TEMPLATE_ID,_TEST_TEMPLATE_CONTENT),null,_configuration,_templateContextHelper,false)
scopeOwner != null && scopeOwner == PsiTreeUtil.getParentOfType(target,ScopeOwner.class)
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
Element.F64_2(mRS)
this.getFullyQualifiedName(DBPEvaluationContext.DDL)
messageRecord.isEndSession()
outputBatchSize=25
source.getAddress()
responseCode < OK || MULTIPLE_CHOICES <= responseCode
if (enabled) {   if (mInputFilter == null) {     mInputFilter=new AccessibilityInputFilter(mContext);   }   wm.setInputFilter(mInputFilter); }  else {   wm.setInputFilter(null); } 
String.format("Failed to invoke TestWatcher %s for test %s",watcher.getClass().getName(),ReflectionUtils.getFullyQualifiedMethodName(extensionContext.getRequiredTestClass(),extensionContext.getRequiredTestMethod()),getDisplayName())
new RuntimeException()
mEmptyId != 0
new ConfigOption<String>(INDEX_JOB_NS,"relation-type","For a vertex-centric index, this is the name of the index associated with the " + "relation type configured under index-name. This should remain empty for global graph indexes.",ConfigOption.Type.LOCAL,"",str -> null != str)
assertEquals(CodecFactory.fromString(codec).toString(),serdeC.getCodec().toString())
OverrideResolver.generateOverridesInFunctionGroup(methodName,functionsFromSupertypes,functionsFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     functions.add((FunctionDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
TimeBase.class
GL20.glUniform1fv(location,toFloatBuffer(v,offset,count))
headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")
StringBuilder ret=new StringBuilder(internalName.length()); 
SamplingProfiler.newThreadGroupThreadSet(group)
assertEquals(10,set.size())
dirs[i].isDirectory()
USE_MACOSX_CALAYERS=true
gtasksService.getAllGtasksFromListId(DEFAULT_LIST,false,false)
-1061516338
MAX_LENGTH=200
i < 100
is(8)
booleanPreference(preference,value,R.string.p_field_missed_calls,R.string.MCA_missed_calls_pref_desc_disabled,R.string.MCA_missed_calls_pref_desc_enabled)
FORM_READER.readMono(FORM_DATA_VALUE_TYPE,request,Collections.emptyMap()).switchIfEmpty(EMPTY_FORM_DATA)
defaultCamelContext.removeRoute(id)
new ThreadPoolExecutor(0,Integer.MAX_VALUE,10,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),new ThreadFactory(){   public Thread newThread(  Runnable runnable){     Thread thread=new Thread(runnable,name);     thread.setDaemon(daemon);     thread.setPriority(priority);     return thread;   } } )
strings.length >= 5
connectPanDeviceNative(objectPath,"nap")
descriptions != null && descriptions.size() > 0
acquiredChannelCount < maxConnections
sentHeaders.size() > 0 && sentHeaders.get(sentHeaders.size() - 1).getNumber() <= bestKnownBlock.getNumber()
(UndeclaredThrowableException)unwrapped
resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)
newGraph.unique(new LocalNode(0,getObject().stamp()))
busHandler.pushExpectedEvents(NextEvent.PHASE,NextEvent.PHASE,NextEvent.INVOICE,NextEvent.NULL_INVOICE,NextEvent.PAYMENT,NextEvent.INVOICE_PAYMENT)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
c.content().readSlice(CONTENT_LENGTH)
ImmutableSet.of("testAutoIndexKeyDroppingWithPersistence","testReIndexingOfElements")
DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false,false)
BigInteger.valueOf(10)
EnhancedSwitchMigrationInspection::inspectVariableAssigningSwitch
Preconditions.checkState(hasInstanceType(),"Expected a constructor; got %s",this)
T
new RuntimeException("replaceSql 参数配置的值不符合要求，可选值为 simple 和 regex，或者是实现了 " + ReplaceSql.class.getCanonicalName() + " 接口的全限定类名",e)
Action<JarBinarySpecInternal>
Arrays.asList(Visualizer.class,ConfigElement.class,Assertion.class,Timer.class,PreProcessor.class,PostProcessor.class,SampleListener.class)
IllegalDataException.class
mTfs.mkdirs(path,true)
mBottomRightStrip=mContext.getResources().getDrawable(resId)
assertEquals("One propagated header is expected.",6,headers.toArray().length)
topFriendsGroupSetView.setOnGroupClickListener(new PublicGroupSetView.GroupClickListener(){   @Override public void onClick(  PublicGroup group){     openGroup(group);   } } )
attemptedPushes % 10000
actionText.matches("Replace with '(true|false|null)'")
publishedEndpointUrl != null && wsdlLocation != null
incrementAppWidgetServiceRefCount(appWidgetId,fc)
Assert.assertEquals(120L,ownerCapsuleNew.getFreeAssetNetUsage(ASSET_NAME))
IClientConfigKey<String>
mPersistedFiles.removeAll(persistedFiles)
@RunWith(MockitoJUnit45Runner.class) public class JUnit45ExampleTest extends ExampleTestCase { } 
lastBatchId != null && lastBatchId.equals(msgId)
dataBuffer.flip()
value.equalsIgnoreCase("strict")
maximumNumber < numberOfContainers && maximumNumber != 0
Arrays.asList("dn1","dn2","dn3")
id=10802
cmdbCompItem != null
entry.rxBytes == 0 && entry.txBytes == 0
getSelectTableQuery().query(database)
verify(collector,never())
!rule.hasBuildSteps()
T result=(T)getJdbcTemplate().queryForObject("SELECT VALUE FROM BATCH_STAGING WHERE ID=?",new Object[]{id},new RowMapper(){   public Object mapRow(  ResultSet rs,  int rowNum) throws SQLException {     byte[] blob=lobHandler.getBlobAsBytes(rs,1);     return SerializationUtils.deserialize(blob);   } } ); 
session != null && session.getStreamID() != null
NetworkUtils.checkConnection(getActivity())
assertEquals(2495,res.getTime(1,2) / 1000,50)
Ln.d("An exception occured during service execution :" + e.getMessage())
Utils.javaDeserialize(_boltSer,IBatchBolt.class)
Maps.newLinkedHashMap(valueArguments)
StudyUtils.getPatternFile(project,taskFile,oldName)
pkg.findBinFile("ng",null)
new ReformatCodeProcessor(context.getProject(),context.getFile(),xmlTag.getTextRange(),false)
outputRowMeta.mergeRowMeta(data.fileRowMeta[i],meta.getName())
public Builder setExecutorService(ExecutorService applicationThreadPool){   configBuilder.setExecutorService(applicationThreadPool);   return this; } 
@Override public final DivideByOnConditionStep and(String sql){   return and(condition(sql)); } 
out.writeByte(ANNOTATION_CONSTANT_TAG)
ENCODED_ZONE_ID=1
resultSet.getDate(1)
progress < 5000
Bar item
String message
LOG.warn("Cannot access storage directory " + rootPath,ex)
Exception e
DiagnosticFactory0<PsiElement>
!WPUrlUtils.isWordPressCom(xmlrpcUri)
new CompositeException(t,innerError)
Class<S>
domElement == null || !domElement.isValid()
assertEquals(0.12765426703095312,mm.mse(),1e-4)
applicationListeners.httpSessionAttributeReplaced(this,name,old)
OptionSpec<Long>
fragmentManager.beginTransaction().replace(containerId,tabsFragment)
jmsManager.removeTopicFromJNDI(name)
BlogsEntryLocalServiceUtil.updateEntry(_entry.getUserId(),_entry.getEntryId(),_entry.getTitle(),_entry.getSubtitle(),_entry.getDescription(),_entry.getContent(),1,1,2012,12,00,true,true,new String[0],null,null,serviceContext)
new BlobLibraryCacheManager(blobServer,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0])
logger.trace("Invalid Account Credentials")
event.getResult() != Result.ALLOWED && event.getResult() != Result.KICK_FULL
-latitude
pieces.length <= tagColumn
index < 0 || index >= size
new Thread(shutdownHandler)
3 >= buf.length - count
ps.setString(1,structureId)
LOGGER.debug("no property for " + type + ", "+ format)
!world.getBlockMaterial(x,y,z).isLiquid()
@Override public Variable emitByteSwap(Value input){   Variable result=newVariable(LIRKind.derive(input));   append(new SPARCByteSwapOp(this,result,input));   return result; } 
new IndexWriter(runData.getDirectory(),runData.getConfig().get("autocommit",OpenIndexTask.DEFAULT_AUTO_COMMIT),runData.getAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
164 + (USE_OLD_HISTORY ? 1000 : 0)
am.getPassword(account)
i=0
precision == null || precision.isEmpty()
destinationName == null || destinationName.equals("")
mCurrentBlockLeftByte >= tLen
capContacts.contains(protoContact)
GRADIENT_SCRIM_ALPHA=0.45f
new HumanReadableException(e,"Couldn't get dependency %s of target %s.",buildTargetForDep,buildTarget,e.getHumanReadableErrorMessage())
gl.glDeleteRenderbuffer(depthStencilPackedBufferHandle)
headers.addValue("Vary")
group.getRoles()
System.arraycopy(value,0,chars,length,value.length)
affVer.topologyVersion() > 0 && diffFromAffinityVer.compareTo(affVer) <= 0
Arrays.<Processor>asList(new BuildProcessor(new ArrayList<Processor>()),new ModuleProcessor(),new PropertiesProcessor(),new ParentProcessor(),new OrganizationProcessor(),new MailingListProcessor(),new IssueManagementProcessor(),new CiManagementProcessor(),new ReportingProcessor(),new RepositoriesProcessor(),new DistributionManagementProcessor(),new LicensesProcessor(),new ScmProcessor(),new PrerequisitesProcessor())
expiresPctx.evaluateActionQueue(workingMemory)
new EntryCustomizationDialog(JabRefFrame.this)
Application.SDK_INT >= 14 && SettingsManager.eventsPersistent()
public class CourierNew extends BasicFontMetrics { {     maxCharHeight=678;     for (int i=0; i < 128; i++)     widths[i]=600;   } } 
myDefinition != null && definition != null && myDefinition.getNestedClassName(definition.getTypeId()) == null
super.equals(switchTouchData) && (_branch == switchTouchData._branch) && (_switchNumber == switchTouchData._switchNumber)
service.getKioskList().getAvailableKiosks()
constructorInvokationMarker.rollbackTo()
internalCacheDir == null
mMethod.invoke(mContext,params)
return parsedAST; 
i == MAX_ATTEMPTS
Slog.w(TAG,"Failed to parse " + file + ": "+ e.getMessage(),e)
dateVector.getMutator().setSafe(index,DateTimeUtils.fromJulianDay(value - ParquetOutputRecordWriter.JULIAN_DAY_EPOC - 0.5))
role.description().orNull()
match.getJSONArray("types")
(Message)sendApiMethod(sendLocation)
!satellite.isCurrentWindowSatellite()
entity instanceof EntityPlayerSP
case GETHOMEDIRECTORY: 
ParamUtil.getString(uploadPortletRequest,"layoutTemplateId",PropsValues.DEFAULT_LAYOUT_TEMPLATE_ID)
syncDLFileVersionDiffPersistence.fetchByF_S_D(fileEntryId,sourceFileVersionId,destinationFileVersionId)
input.readFully(b)
3.0 + (3 * random().nextDouble())
dlg.setPositiveButton(fButtons[2],new AlertDialog.OnClickListener(){   public void onClick(  DialogInterface dialog,  int which){     dialog.dismiss();     notification.success(new PluginResult(PluginResult.Status.OK,3),callbackId);   } } )
OperatorGroupBy<K,T>
new CircularImportProblem(configClass,this.importStack,configClass.getMetadata())
handleSecurityPermissionActions(child,permConfig)
multipleDescriptors || !hasFixes
false && canHaveDisplayList() && canvas.isHardwareAccelerated()
Maths.logisticGradientValue(predictRating)
addDaysAndCheckForCompletion(2,NextEvent.BLOCK,NextEvent.TAG,NextEvent.PAYMENT_ERROR)
mjCtx.getOldMapJoin() == null || setReducer
params.setJpegThumbnailQuality(0xFF & ParamsUtils.getOrDefault(request,JPEG_THUMBNAIL_QUALITY,DEFAULT_JPEG_QUALITY))
new DefaultTaskClassValidatorExtractor(new ClasspathPropertyAnnotationHandler(),new CompileClasspathPropertyAnnotationHandler())
new OptionValue<>(false)
assertNotNull(decoder.decode(null,null,">RPV02138+4555512-0735478000000032;ID=1005;*76<"))
synchronized (c) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
varX("name",ClassHelper.STRING_TYPE)
ProjectCodeStyleSettingsManager manager
Engineer manager=new GnomeEngineeringManager(); 
!scriptHost.toLowerCase().equals(host.toLowerCase())
(filterMap.getDispatcherMapping() & FilterMap.REQUEST) != 0
Path tempClusterPath=tempPath.toAbsolutePath(); 
e.getSuppressed()[1]
Thread.sleep(5000)
System.out.println()
env != null && env.getAdminContext() != null
Instrument.create(null,new AdvancedInstrumentRootFactory(){   @Override public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return new AdvancedInstrumentRoot(){       public String instrumentationInfo(){         return null;       }       @Override public Object executeRoot(      Node n,      VirtualFrame frame){         return null;       }     } ;   } } ,null,"test AdvancedInstrument")
ConcurrentHashMap<>
!consumer.endpoint.isAutoAck()
savedInstanceState.getInt(KEY_PAGE,-1)
DBUtils.removeDownloadInfo(info.galleryBase.gid)
versionNum <= maxRevision
Thread.sleep(50)
logger.trace("rapidRefreshFuture scheduleing for {} millis",millis)
new Builder().setDuration(3000).setColor(android.R.color.holo_blue_bright)
CloudJettyRunner jetty=getRandomJetty(sliceName,aggressivelyKillLeaders); 
assertEquals(50,cursorList.cacheSize())
localY2 * cos
localRemoveList.clear()
bLocations[0].getHosts()
container.getVersion().getId()
serverConfig.getRenewalPercentThreshold() * expectedNumberOfRenewsPerMin
"/".equals(requestURI) || "/index.jspx".equals(requestURI) || "/w/".equals(requestURI)|| "/w/index.jspx".equals(requestURI)
client().admin().cluster().prepareHealth("t").setWaitForEvents(Priority.LANGUID).setWaitForNoRelocatingShards(true)
obj instanceof HotSpotResolvedJavaMethodImpl
hostName == null
LISTEN_RADIO_POWER_STATE_CHANGED=0x00800000
mService.reconnect(mContext.getOpPackageName())
data != null || (resultCode != RESULT_CANCELED || (requestCode == 1 || requestCode == 3))
(status & 0x02000000) != 0
create.fetch(meta().getSchemas(),SQLDataType.VARCHAR,SQLDataType.VARCHAR)
new Fragment(id,"iconFragment",selectLayers)
expand("serializedforms/JobDataMapSerializationTest.testEmptyMap.{?}.ser","JDK16","JDK17","JDK18")
public static CharSequence getItemText(FormEntryPrompt formEntryPrompt,SelectChoice selectChoice){   String choiceName=formEntryPrompt.getSelectChoiceText(selectChoice);   return choiceName != null ? TextUtils.textToHtml(choiceName).toString() : ""; } 
Log_OC.e(TAG,"\t account is NULL")
@OptionalInput(InputType.Association)
new ByteBuddy().subclass(Source.class).method(named("hello")).intercept(MethodDelegation.to(Target.class)).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
item.isDownloaded() || app.getDownloadThread().isDownloading(item)
CustomSQLUtil.get(COUNT_BY_G_F,queryDefinition,"JournalArticle")
new SeleniumBuilderContext(_BASE_DIR,".",_LIFERAY_SELENIUM_DIR)
dataType.getFullyQualifiedName(DBPEvaluationContext.DDL)
xtw.writeCData(customProperty.getSimpleValue())
logger.fine("attempting reconnect")
msg.hasCacheMetrics(nodeId)
_vecs[1]
stripFilter.skipWhiteSpace(charBuffer,stringWriter,true)
File.createTempFile("push-attachment","tmp",context.getCacheDir())
JvmDeclarationOriginKt.OtherOriginFromPure(myClass,valuesFunction)
JBUI.Borders.empty(EMPTY_BORDER_THICKNESS,EMPTY_BORDER_THICKNESS)
LOG.error("Cache flusher failed for entry " + fqe,ex)
!(value.getParent() instanceof XmlAttribute) || holder == null
(ElementNode)children.nextElement()
logger.trace("Trying to map {} to {}",t,path)
new MultiValuesMap<PsiVariable,PsiExpression>(true)
showMessage(context.getString(R.string.empty_route_calculated),Toast.LENGTH_LONG)
new LeftTuple(f0,sink)
/**   * set the tag of this item  * @param object  * @return  */ public Item withTag(Object object){   this.mTag=object;   return (T)this; } 
Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)
curComp.equals(service)
request.charset == null
_typeSettingsProperties.toString()
session.executeAsynchronousPost(syncAccount.getUrl() + "/api/jsonws" + urlPath,parameters,_handler)
answer == null || comparator.compare(value,answer) > 0
doTestPositive(301)
"Missing " + gradlePropertiesPath
matcher.isMatching(firstCandidate.right.attributes,secondCandidate.right.attributes) || matcher.isMatching(secondCandidate.right.attributes,firstCandidate.right.attributes)
substitutor.substituteAndCapture(parameter.getType())
replaces="cached"
line.split(" *= *",2)
starting != null && starting.state != ActivityState.STOPPED
FileUtil.shortenFileName(foundFile,directories)
PyDebugRunner.createCommandLinePatchers(state,configuration,PORT)
stream.transportReportStatus(status,true,new Metadata())
new MockQueryExecution(2)
DEFAULT_NUMBER_OF_READ_BUFFERS=256
log.info("Not obtaining HBase Auth Token for MapReduce job " + job.getJobName())
new GetExecutionVariableInstancesCmd(executionId,variableNames,true,locale,withLocalizationFallback)
getRecordCount()
mForceStatusBarFromKeyguard=true
methodName.equalsIgnoreCase("scan")
Timeout.seconds(900)
type == VolumeInfo.TYPE_PUBLIC && mountUserId == UserHandle.myUserId()
@Override public ExtendedCell deepClone(){   byte[] copy=new byte[this.length];   ByteBufferUtils.copyFromBufferToArray(copy,this.buf,this.offset,0,this.length);   KeyValue kv=new KeyValue(copy,0,copy.length);   kv.setSequenceId(this.getSequenceId());   return kv; } 
new TextureRegion(this.mTexture,this.mTextureX,this.mTextureY,this.mTextureWidth,this.mTextureHeight,this.mScale,this.mRotated)
new Coordinator("local",Settings.EMPTY,clusterSettings,transportService,writableRegistry(),ESAllocationTestCase.createAllocationService(Settings.EMPTY),new MasterService("local",Settings.EMPTY,threadPool),() -> new InMemoryPersistedState(0,ClusterState.builder(new ClusterName(clusterName)).build()),r -> emptyList(),new NoOpClusterApplier(),new Random(random().nextLong()))
builder.bold("#")
/**   * Controls tesselation transform (e.g similar to the vertex shader, but required to mix inputs manual)  */ TessellationEvaluation
ASYNC_PRODUCER_THREAD.getStackTrace()
new FreeMarkerTemplate(new MockTemplateResource(_TEMPLATE_FILE_NAME),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper,false)
line >= 0 && file != null
callbacks.onHardwarePreDraw(canvas)
name != null && name.length() > 2
Boolean.parseBoolean(getOptional("kylin.query.enable-dynamic-column","false"))
TRANSPARENCY
PreferenceManager.instantVideoUploadEnabled(context)
result.getReceipt().getEnergyUsageTotal()
/**   * The exception thrown (if any) by the method called in  {@link #run()}  */ protected Exception exceptionThrown=null; 
layoutManager.addView(view)
majorVersion != null && majorVersion.trim().length() > 0
result.getPath()
mPositions[i] > 0
new IndexWriter(dir,anlzr,false,IndexWriter.MaxFieldLength.LIMITED)
split[1]
new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown"),true)
new Intent(ACTION_FEED_LIST_UPDATE)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression5.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,5,41.8498354737908,DeepLearningParameters.Activation.Rectifier)
key == null
m.getTablePerHierarchy()
formsFound=true
logger.debug(e.getMessage())
!this.mrwork.getHadoopSupportsSplittable()
appendValue(value,sb,variables)
new Notification(StatusBarTest.this,R.drawable.ic_statusbar_missedcall,"tick tick tick",System.currentTimeMillis() - (1000 * 60 * 60* 24))
ticks * ticksInGap
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.")
Math.min(mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR))
Timber.e(e,"Argument %s is incorrect",playBackgroundColorString)
assertTrue(oldChild.isSafelyReplaceableBy(newChild))
LOG.warn("Unknown status [" + statusChar + "] in line ["+ line+ "]"+ "\n with arguments "+ args)
mock.expectedBodiesReceivedInAnyOrder("c","b","a")
accessible && member instanceof PsiClass && !(member instanceof PsiTypeParameter)
ServletTestSuite testSuite=new ServletTestSuite(testClass); 
UpgradeStepRegistrator.class
changeEntitlementAndCheckForCompletion(bpEntitlement,productName,BillingPeriod.ANNUAL,BillingActionPolicy.IMMEDIATE,NextEvent.CHANGE,NextEvent.INVOICE)
RuntimeCall callTarget
result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue())
cifar.test(numSamples)
new RunAutomaton(automaton,false)
new StatusText(this){   @Override protected boolean isStatusVisible(){     return UIUtil.uiChildren(JBPanelWithEmptyText.this).filter(Component::isVisible).isEmpty();   } } 
Base.copyFile(sketchFile,properPdeFile)
Setting.listSetting("searchguard.audit.config.disabled_categories",Collections.emptyList(),Function.identity(),Property.NodeScope)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegression50.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,50,37.93380250522667,DeepLearningParameters.Activation.Rectifier)
assumeTrue("test fails on JDK 11 currently",JavaVersion.current().compareTo(JavaVersion.parse("11")) < 0)
numKeys > 0
new ObjectRecordWithStats(key,value)
ArraysUtil.join(nodes1,nodes2)
queryPurger.scheduleWithFixedDelay(new PurgeQueriesRunnable(queries.keySet(),queryManager),200,200,TimeUnit.MILLISECONDS)
ClusterUtils.getCurrentPartitionMapping(cluster)
mShowcaseRect.left == cx - dw / 2 && mShowcaseRect.top == cy - dh / 2
result.expectedMinimumMessageCount(2)
i != 0 && j != 0
Object configHtmlCacheDisabled=configProps.get("disableHtmlCache"); 
getKeyDesc(keyRowMeta,keyNrs,one)
hasPrevChange()
Reflection.methodHandle(bigArrayField.getType(),"sizeOf")
U.error(log,"Message is ignored due to an error [msg=" + msg + ']',e)
AppLog.d(T.EDITOR,message + " -- from line " + lineNumber+ " of "+ sourceId)
FRAME_STATS_COUNT=16
mQsDensityContainer.getX()
Throwable exc
XContentHelper.toXContent(response,XContentType.JSON,false)
c.context()
!compactionStarted.getAndSet(true)
log.debugf("Getting cached data from region [`%s` (%s)] by key [%s]",getRegion().getName(),getAccessType(),key)
public T setColorOutput(boolean colorOutput){   operationParamsBuilder.setColorOutput(colorOutput);   return getThis(); } 
new int[8573]
memberRequestPersistence.update(memberRequest,false)
clusterNodeInfo.containsFlag(Flag.NOADDR) || clusterNodeInfo.containsFlag(Flag.HANDSHAKE)
protected Jar addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask,File inputFile,Task compileTask,final Task generateTask){   Project project=buildWSDLTask.getProject();   String taskName=GradleUtil.getTaskName(buildWSDLTask.getName(),inputFile);   Jar jar=GradleUtil.addTask(project,taskName,Jar.class);   jar.from(compileTask.getOutputs());   if (buildWSDLTask.isIncludeSource()) {     jar.into("OSGI-OPT/src",new Closure<Void>(project){       @SuppressWarnings("unused") public void doCall(      CopySpec copySpec){         copySpec.from(generateTask.getOutputs());       }     } );   }   jar.setDestinationDir(buildWSDLTask.getDestinationDir());   String wsdlName=FileUtil.stripExtension(inputFile.getName());   jar.setArchiveName(wsdlName + "-ws.jar");   return jar; } 
mock.expectedBodiesReceivedInAnyOrder("B+END","A+END")
configureAtmosphereInterceptor(scFacade)
_layoutRevisionLocalService.getLayoutRevisionsByStatus(WorkflowConstants.STATUS_PENDING)
is(0)
isAbstract()
returnValue == null && !(calls == 0)
stompConnection.receive(5000)
String fsUuid
input.setSourceFileFieldName(wSourceFileNameField.getText())
VALIDATE_AFTER_INACTIVITY_DEFAULT=1700
Assert.assertEquals(10,v2)
protocolProvider.getAccountID().getUserID()
new EclipseSettingsWriter(getLog()).write(projectBaseDir,outputDir,project)
!method.hasModifierProperty(PsiModifier.STATIC)
osName.contains("sunos") || osName.contains("solaris")
topLevelBuildData.getJenkinsGitHubURL()
iterator.atEnd() || iterator.getStart() != offset
CommonBundle.getWarningTitle()
cursor != null && cursor.getCount() == 0
StringUtils.abbreviate(analyzedSentence.toTextString(),500)
SslContextFactory.getDisabledTrustManager()
@Mock HttpServletResponseWrapper servletResponse; 
new HttpDigestAuthFilter(DIGEST_TEST_LOGIN,DIGEST_TEST_PASS)
new Edge(module,moduleOrderEntry,shouldRecurse)
DateTimeUtils.createGregorianCalendar(DateTimeUtils.UTC)
removed.isEmpty()
_mockSettingsLocatorHelper.getServerSettings("com.liferay.portal")
myBus.syncPublisher(VirtualFilePointerListener.TOPIC).validityChanged(arr)
ClassPropertyFetcher.getStaticPropertyValue(getClazz(),propName,type)
log.tracef("%s finished request %d",ManagementChannel.this,header.getBatchId())
store.setConfigFile(usersFile)
versionMatch.group(1)
waitYieldLatch.await()
shardSearchStats.onFailedFetchPhase(context)
imageView.setImageDrawable(null)
ResourceBundle.getBundle(MESSAGES,defaultLocale,new FileResClassLoader(I18n.class.getClassLoader(),ess))
result >= TimeUnit.DAYS.toNanos(1)
coloring.length() > 0 && Character.isDigit(coloring.charAt(coloring.length() - 1))
message.setHeader("Message-ID",cursor.getString(12))
List<PackagingElement<?>>
out.getVersion().onOrAfter(Version.V_5_4_0_UNRELEASED)
new KotlinStructureViewModel(file,editor)
Const.isEmpty(port) || "-1".equals(port)
/**   * Get a copy of geometry object. Geometry object is mutable. The returned object is therefore copied before returning.  * @return a copy of the geometry object  */ public Geometry getGeometry(){   if (geometry == null) {     try {       geometry=JTSUtils.ewkb2geometry(bytes,getDimensionSystem());     }  catch (    RuntimeException ex) {       throw DbException.convert(ex);     }   }   return ((Geometry)geometry).copy(); } 
millis >= 28 * DateUtils.MILLIS_PER_DAY
!hasPermission(permission)
centerButton(mButtonNegative)
Slog.w(TAG,"Service done with onDestroy, but not inDestroying: " + r + ", app="+ r.app)
withoutMvnPrefix.startsWith("http:") || withoutMvnPrefix.startsWith("https:")
new FetchResponse(Errors.NONE,new LinkedHashMap<>(partitions),throttleTime,INVALID_SESSION_ID)
performDexOpt(packageName,instructionSet,false)
public LocalQueryRunner printPlan(){   printPlan=true;   return this; } 
DLAppLocalServiceUtil.deleteFileShortcut(classPK)
tagService.getGroupedTags(TagService.GROUPED_TAGS_BY_ALPHA,TaskCriteria.isActive(),true)
-1
winAnimator.mSurfaceController == null || !winAnimator.hasSurface()
cursor.getChildAt(childIndex)
SPACE_BEFORE_EXTEND_COLON=true
!file.delete()
channelBundles.contains(channelBundle)
mVectorState == null || mVectorState.mVPathRenderer == null
linkableToModuleMap.get(innerConstituent)
ConstantNode[]
timeout(10000)
portletImporter.validateFile(userId,plid,groupId,portletId,parameterMap,file)
space.getText().replace('\n',' ')
postJob.toString()
internalCallContextFactory.createInternalCallContext(account.getId(),context)
column.getLocalDeletionTime() >= gcBefore
@InputMagicNumberIntMethodAnnotation(value=43)
currencyPair.counter.getCurrencyCode().toUpperCase()
id=14
assertEquals(Service.State.FAILED,service.state())
if (sIsSELinuxEnabled) {   if (packageName == null) {     sServiceAppDataFile=new ZygoteService();   }  else   if (packageName.equals("android")) {     sServiceAppDataFile=BinderService.getService(BinderService.TARGET_APP);   }  else {     sServiceAppDataFile=new DirectAccessService();   } }  else {   sServiceAppDataFile=new DirectAccessService(); } 
null == batch || batch.isEmpty()
ConfigurableFactory.Companion.getInstance().getTodoConfigurable(project)
resTarget.withAppendedFlavors(AndroidResourceDescription.AAPT2_COMPILE_FLAVOR)
addDaysAndCheckForCompletion(6,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.BLOCK,NextEvent.CANCEL,NextEvent.CANCEL,NextEvent.INVOICE)
Flux.fromIterable(getSessionIdResolver().resolveSessionIds(exchange)).concatMap(this.sessionStore::retrieveSession).next().flatMap(session -> validateSession(exchange,session)).switchIfEmpty(createSession(exchange))
mRenderer.getViewportHeight()
mWebViewClassic.addJavascriptInterface(mCallback,ALIAS_TRAVERSAL_JS_INTERFACE,true)
cellWasEdited && !CommonUtils.equalObjects(oldValue,oldOldValue) && !CommonUtils.equalObjects(oldValue,value)
s.array.length == 2
spoon.addChefGraph(newJobMeta)
a.getDimension(attr,0)
type instanceof PsiClassType
Double.isNaN(rate) || Double.isInfinite(rate)
Math.min(timestamp,dp_to_keep.kv.timestamp())
JSONObject value
mUfs.create(testFile,CreateOptions.defaults().setEnsureAtomic(true))
myProjectView.isAbbreviatePackageNames(myPaneId)
private final String version; 
HttpRequest.post("http://localhost:8080/ejbws-example/SingletonEndpoint",message,10,SECONDS)
nameOfClass.equals("com.android.internal.policy.impl.PhoneWindow$DecorView") || nameOfClass.equals("com.android.internal.policy.impl.MultiPhoneWindow$MultiPhoneDecorView") || nameOfClass.equals("com.android.internal.policy.PhoneWindow$DecorView")
new IfNode(currentGraph.unique(new IsNullNode(object)),successor,deopt,1,graphId)
ParamUtil.getString(portletRequest,DISCOUNT_TYPE,"all")
expectedValue.equals(oldObject)
logger.info("Using folder " + checkPointFolderFile + " for storing checkpoints")
@NotNull Object value
getString(R.string.day_night_info_description,"null","null")
"0".equals(text) || "0L".equals(text) || "0l".equals(text)
token.equals("!") && !prevToken.equals("?") && !prevToken.equals("\u00a0")&& !prevToken.equals("\u202f")
!mShowLockscreenNotifications
uri.getScheme() == null || !uri.getScheme().equals(scheme)
terminal.receivedSendToTerminal(event.getInputText())
message + end
disables.contains(a.getName())
viewerPanel.setRedraw(false)
testReliable=false
new LocalCheckpointTracker(maxSeqNo,minSeqNo)
saHooks != null && !saHooks.isEmpty()
!shouldFollowLinksIn(webURL) || robotstxtServer.allows(webURL)
new MetaTableLocator().waitMetaRegionLocation(watcher,10000)
logger.finest("Optimized Selector: " + selector.getClass().getName())
defaultMappingsDir.exists()
ParallelFields fields
NLS.bind(DTMessages.data_transfer_wizard_job_container_name,CommonUtils.truncateString(producer.getObjectName(),200),CommonUtils.truncateString(consumer.getObjectName(),200))
logger.fine(String.format("destroying socket (%s)",this.nsp))
logger.error("IOException should not have been thrown.",exc)
config.getMaxEntriesLocalHeap()
public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
webSocketConnection.getRemote().sendStringByFuture(s)
DynamicCounter.increment(filterName,"status","fail","type",filter.filterType())
public ReducedMetric registerMetric(String name,IReducer reducer,int timeBucketSizeInSecs){   return _topoContext.registerMetric(name,new ReducedMetric(reducer),timeBucketSizeInSecs); } 
T newStatement=createNewStatement(elementFactory,expressionCopy,fixedContext.expression); 
dpToPx(8f)
sleep(10_000)
ACRA.log.w(LOG_TAG,"Could not delete report : " + files[i])
pmmlScorecard.getUseReasonCodes()
64 * 1024
assertCorrection(rule,"Eisnbahn","Eisbahn","Eisenbahn")
redeliveryDelayResult > maximumRedeliveryDelay
activeFrom.getTime()
cacheElement != null && cacheElement.getValue() != null
deadline < now && deadline != 0
from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(1000)
KeyV1[]
message != null && message.getEncryption() == Message.ENCRYPTION_OTR
new ArrayList<>(10)
LOG.warn("Suspicious import lacks obvious enclosing type: %s",fullyQualifiedName)
compressedProto.length < 390200
ObjectHeaderImpl.readHeaderFromObjectCarefully(obj)
/**   * Telnet port.  */ private Integer port=5000; 
super.mySetupMutualAuthServerIsValidClientException(cause)
isUp()
BigQueryTornadoesITOptions.class
dest.getBearing() - destGf.getDeclination()
ColorProperties.getColor("sliderGradientLight")
criteria.andIsNull("category")
Prefs.getBoolean(mContext,Prefs.Key.TOUCHED_RINGER_TOGGLE,false)
!price.getAmount().equals(BigDecimal.ZERO)
sessionTrackingModes.contains(SessionTrackingMode.COOKIE) && sessionTrackingModes.contains(SessionTrackingMode.URL)
sm.getString("upgradeHandler.rst.debug",connectionId,Integer.toString(se.getStreamId()),se.getError(),se.getMessage())
advised.getDeclaredConstructor()
packageMatch[1]
new CustomDataCollector(customParameters)
sDefaults.putBoolean(KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL,false)
Beans.newDuration(casProperties.getAuthn().getOauth().getRefreshToken().getTimeToKillInSeconds()).getSeconds()
partSpec.size()
InputMethodManager.getInstance()
Bytes.toBytes(tableOrRegionName)
!StringUtil.endsWithChar(testDataPath,File.separatorChar)
fragmentCollectionPersistence.countByG_LikeN(groupId,_customSQL.keywords(name,WildcardMode.SURROUND)[0])
ssl.hasDefined(CommonAttributes.CA_REVOCATION_URL)
c.admin().indices().aliasesExist(new IndicesGetAliasesRequest(alias))
dockerClient.copyArchiveToContainerCmd(container.getId())
new ShieldVersion(V_1_0_0_ID,true,Version.V_1_4_0)
isOpened
!entry.isInTrashImplicitly()
Byte.parseByte(param.getValue())
removeGzipFromETag(ifnm)
Ordered.HIGHEST_PRECEDENCE + 20
new ConnectionException(sm.getString("http2Parser.payloadTooBig",Integer.toString(payloadSize),Integer.toString(maxPayloadSize)),Http2Error.FRAME_SIZE_ERROR)
new IndexWriter(dir,true,new WhitespaceAnalyzer(),IndexWriter.MaxFieldLength.LIMITED)
next_write_buffers.remove(0)
len >= bits.length
StringBuilder ret
((ViewGroup)viewHolder.view).addView(mView)
isDirect=true
LOG.debug("Artifacts compiler info file doesn't exist: " + myFile.getAbsolutePath())
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(new int[]{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))))
selectedProperty != null && e.getOldLeadSelectionPath() != null
assertThat(emptyScannable.scan(Scannable.Attr.LARGE_BUFFERED)).isNull()
calendarBooking.getTitle(user.getLocale())
getProjectViewPaneById(myCurrentViewId == null ? ProjectViewPane.ID : myCurrentViewId)
loaded.getLoaded().getDeclaredConstructor()
hasColumn(tableName,columnName)
m.getCurrentWaitingJobs()
SimpleAttributeDefinitionBuilder.create("min-inclusive",ModelType.BOOLEAN,true)
parser.nextText()
JOrphanUtils.valueOf(getBoolean(value))
new PercentType(percent)
case 2: 
case GET_VERSION: 
id=10841
FileAlreadyExistException.class
AndroidResourceUtil.findResourceFieldsForFileResource((PsiFile)element,true)
mesh.getNumVertices() / 4
out.getVersion().before(Version.V_1_4_0)
from("direct:start").aggregator().header("id").batchTimeout(500L)
prefs.getBoolean(ACRA.PREF_DISABLE_ACRA,false)
person.getPersonVoidReason()
this.date=timestamp
rootDir.file("build.gradle").writelns("apply plugin: 'java'","dependencies { compile gradleApi() }",String.format("jar.destinationDir = file('%s')",FilenameUtils.separatorsToUnix(jarFile.getParent())),String.format("jar.archiveName = '%s'",jarFile.getName()),"new URL(\"jar:file://valid_jar_url_syntax.jar!/\").openConnection().setDefaultUseCaches(false)")
resolve(type,true,false,true)
serialVersionUID=490895073
connections.containsKey(manager)
private Long version; 
Map<String,Object>
logger.fine("Expanding Jquery Aliases")
map.get(key)
qdgraphics=new QDGraphics(QDConstants.k32BGRAPixelFormat,qdrect)
SwingUtilities.invokeLater(new Runnable(){   public void run(){     if (checkForRejectOrByPass(command,forced,result))     return;     if (myRequestFocusCmd == command) {       myRequestFocusCmd=null;       command.run().doWhenDone(new Runnable(){         public void run(){           LaterInvocator.invokeLater(new Runnable(){             public void run(){               result.setDone();             }           } );         }       } ).doWhenRejected(new Runnable(){         public void run(){           result.setRejected();         }       } );       restartIdleAlarm();       if (forced) {         myForcedFocusRequestsAlarm.addRequest(new Runnable(){           public void run(){             setLastEffectiveForcedRequest(null);           }         } ,250);       }     }  else {       rejectCommand(command,result);     }   } } )
getNodeForElement(element,false)
new Media(uri)
new Paint()
mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()
!clusterVersion.onOrAfter(MINIMUM_ES_VERSION) || !clusterVersion.onOrBefore(MAXIMUM_ES_VERSION)
HttpStatus.SC_OK != statusCode && HttpStatus.SC_ACCEPTED != statusCode && HttpStatus.SC_CREATED != statusCode && HttpStatus.SC_NO_CONTENT != statusCode
kompiler.getMethod("exec",PrintStream.class,String[].class)
assertEquals(2.0,query.average(NullTypes.FIELD_INTEGER_NULL),0d)
new FreeMarkerTemplate(new MockTemplateResource(_WRONG_TEMPLATE_ID),new MockTemplateResource(_WRONG_ERROR_TEMPLATE_ID),null,_configuration,_templateContextHelper,false)
schemaName != null
groupIds[0]
AppPrefs.getImageOptimizeWidth() > 1
project.members(IContainer.INCLUDE_HIDDEN)
getBeginNode() == ((InvokeWithExceptionNode)predecessor).exceptionEdge()
d1.setRemoveAbandonedTimeout(2)
atan(arr,Nd4j.copyOnOps)
StringBuilder tmpLocation=new StringBuilder(actionMapper.getUriFromActionMapping(new ActionMapping(actionName,namespace,method,null))); 
GL20.glUniform4iv(location,toIntBuffer(v,offset,count << 2))
!mGsmPhone.mSST.isConcurrentVoiceAndData()
packet.getFrom().split("/",2)
assertEquals(2,files.length)
UIHelper.getContactPicture(contact.getName(),90,this.getApplicationContext())
allowedWithoutQuotes.clear(sep)
serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable() && peer.getState().equals(CallPeerState.INCOMING_CALL)
startElement != endElement && nextSibling != null
!Comparing.equal(myContextModule,namedLibraryElement.myContextModule)
groupLocalService.addGroup(user.getUserId(),GroupConstants.DEFAULT_PARENT_GROUP_ID,null,0,0,name,null,type,null,true,true,null)
assertEquals(3,StringUtil.countMatches(drl,"import "))
super.getLessThanOrEqualProvider(path)
xStreamConfigurators.equals(_xStreamConfigurators)
file.toFile()
assertEquals(JavadocTagInfo.Type.BLOCK,JavadocTagInfo.VERSION.getType())
logTable.getDatabaseMeta().getQuotedSchemaTableCombination(db.environmentSubstitute(logTable.getSchemaName()),db.environmentSubstitute(logTable.getTableName()))
mSaveToDiskTask.getStatus()
new NeuralNetConfiguration.Builder().momentum(0.9).constrainGradientToUnitNorm(true).iterationListener(new ScoreIterationListener(10)).activationFunction("tanh").stepFunction(new GradientStepFunction()).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).dropOut(0.3).iterations(100).visibleUnit(RBM.VisibleUnit.GAUSSIAN).batchSize(10).l2(2e-4).regularization(true).weightInit(WeightInit.VI).hiddenUnit(RBM.HiddenUnit.RECTIFIED).nIn(4).nOut(3).layerFactory(LayerFactories.getFactory(RBM.class)).list(3).hiddenLayerSizes(3,2).override(2,new ConfOverride(){   @Override public void overrideLayer(  int i,  NeuralNetConfiguration.Builder builder){     if (i == 2) {       builder.activationFunction("softmax");       builder.layerFactory(LayerFactories.getFactory(OutputLayer.class));       builder.lossFunction(LossFunctions.LossFunction.MCXENT);     }   } } )
timeToLive > 0
Matchers.containsInAnyOrder(createSymbolicReference("java.lang.String",3,5))
assertEquals("b=" + button.getWidth() + ", f1="+ field1.getWidth()+ ", f2="+ field2.getWidth(),130,panel.getPreferredSize().width)
"wrong partition, expected: " + getPartitionId() + " but found:"+ partitionId
mCollapsingTextHelper.setCollapsedTextGravity(gravity)
configuredScriptEngineNames == null || configuredScriptEngineNames.isEmpty()
Setting.listSetting("searchguard.authcz.admin_dn",Collections.emptyList(),Function.identity(),Property.NodeScope)
CoreProxy.sendToPlayers(createItemPacket(item,orientation),container.worldObj,xCoord,yCoord,zCoord,50,mod_BuildCraftTransport.instance)
VcsBundle.message("message.text.cannot.show.differences",e1.getMessage())
new IllegalArgumentException(checkedValue + " should not be null")
channels.toArray(new Channel[channels.size()])
out.writeByte(ANNOTATION_PRIMITIVE_CONSTANT_TAG)
contextBuilder.allowCreateThread(allow_create_thread)
LOG.debug("Getting synchronous method stub from channel")
resolveNamedStopWords(pathLoadedStopWords,version,ignore_case)
LinkedHashSet<>
VectorizationContext.isStringFamily(outputType) || outputType.equalsIgnoreCase("binary")
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","u","ul")
_ddmStructureLocalService.getStructure(GetterUtil.getLong(ddmStructureFieldNameParts[2]))
return repositoryPath; 
logger.info(x.getClass() + ": " + x.getMessage())
growLock.unlock()
(mFlags & ViewNode.FLAGS_ASSIST_BLOCKED) != 0
new IndexWriter(ram,analyzer,true,IndexWriter.MaxFieldLength.LIMITED)
/**   * Returns an  {@code AfterEach} {@code Trigger} with the given subtriggers.  */ @SafeVarargs public static AfterEach inOrder(Trigger... triggers){   return new AfterEach(Arrays.<Trigger>asList(triggers)); } 
annotatorImplementation.custom(inputProps,property)
IssuesBySeverity.class
commState.putBoolean("syncCommit",syncCommit)
10 * 1000000L
getIntent() != null && getIntent().getExtras() != null
end >= range.getStartOffset()
value & 0xFF
new RelativeCoordinatesProvider(hRef,hDelta,vRef,vDelta)
assertEquals(8,this.context.getBean(FilterChainProxy.class).getFilterChains().size())
timeStampVector.getMutator().setSafe(index,value)
((Number)s.first()).floatValue()
suppressTrailingZeroElements == false
AssetTagFinderUtil.findByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)
DatabaseAttachment attachment=getAttachment(attachmentId); 
myExpectedArguments > 1 && myExpectedArguments == (expressions.length + additionalExpressions.size())
cassandraProperties.getUsernameAttribute()
that.getDomain() == null && getDomain() != null
Theme.fromJSONV1_2(object)
mHost.onShouldSaveFragmentState(f)
i % 2
CAMERASERVER_UID=1047
photo.writableBytes()
wrapper.joinWithTimeout()
new SelectMetadataChange(input)
numSameBitCells >= 5
realm.getColumnIndices()
getDialogTitle()
Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())
PropertiesComponent.getInstance().setValue(BOLD_TABS,false,true)
types.contains(metadata.getInheritedFromType()) || instance.getClass().getName().equals(metadata.getInheritedFromType())
((JavaLibrary)exported).getImmediateClasspaths()
Throwable ex
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")
StringBuffer b=new StringBuffer("ProcessInstance "); 
indexer.getSummary(result,themeDisplay.getLocale(),snippet,portletURL,null,null)
textSize.y + 6
commandExecutor.evalWriteAsync(getName(),codec,EVAL_GET_TTL,"local value = redis.call('hget', KEYS[1], ARGV[2]); " + "if value == false then " + "return nil; "+ "end; "+ "local t, val = struct.unpack('dLc0', value); "+ "local expireDate = 92233720368547758; "+ "local expireDateScore = redis.call('zscore', KEYS[2], ARGV[2]); "+ "if expireDateScore ~= false then "+ "expireDate = tonumber(expireDateScore) "+ "end; "+ "if t ~= 0 then "+ "local expireIdle = redis.call('zscore', KEYS[3], ARGV[2]); "+ "if expireIdle ~= false then "+ "if tonumber(expireIdle) > tonumber(ARGV[1]) then "+ "local value = struct.pack('dLc0', t, string.len(val), val); "+ "redis.call('hset', KEYS[1], ARGV[2], value); "+ "redis.call('zadd', KEYS[3], t + tonumber(ARGV[1]), ARGV[2]); "+ "end; "+ "expireDate = math.min(expireDate, tonumber(expireIdle)) "+ "end; "+ "end; "+ "if expireDate <= tonumber(ARGV[1]) then "+ "return nil; "+ "end; "+ "return val; ",Arrays.<Object>asList(getName(),getTimeoutSetName(),getIdleSetName()),System.currentTimeMillis(),key)
assertEquals(avDegree,0.5)
Assert.assertArrayEquals(serviceContext.getAssetCategoryIds(),assetCategoryIds)
DEBUG_STARTING_WINDOW=true
recipient != null && recipient.getNode() != null
ph.setTimeStampUsers(usersFile.lastModified())
candidate.getArgumentMapping()
private Integer _errorCode=null; 
LinkedHashMap<String,StandardFileType>
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_SUBMODULE))
!"POST".equals(connection.getRequestMethod()) && !"PUT".equals(connection.getRequestMethod())
bos.toString("UTF-8")
org.apache.kylin.common.util.DateFormat.formatToTimeStr(1430438400000L)
(~activity.mActivityInfo.getRealConfigChanged() & diff) == 0 || !reportToActivity
id=35
config.getPatterns() != null && config.getPatterns().length() != 0
id=10831
message.setText(getDialogMessage())
ranges == null || ranges.length == 0
/**   */ public class S3SnapshotRestoreOverHttpsTest extends AbstractS3SnapshotRestoreTest {   @Override public Settings nodeSettings(  int nodeOrdinal){     ImmutableSettings.Builder settings=ImmutableSettings.builder().put(super.nodeSettings(nodeOrdinal)).put("cloud.aws.s3.protocol","https");     return settings.build();   } } 
actionButton.setPressedIcon(new ImageIcon(ca.getPressedIcon()).getImage())
NoSuchPackageException.class
state == BluetoothA2dp.STATE_PLAYING
CommonPreference<Boolean>
String.format("UPDATE %s.%s SET %s = '%s' WHERE %s = '%s';\n",SCHEMA_NAME,TABLE_NAME,"col0","value0","pk1","keyvalue1")
assertEquals(4,config.getMapConfigs().size())
BinaryFieldMetadata meta=fields != null ? fields.get(fieldName) : null; 
conf.getInt(THRIFT_MAX_MESSAGE_LENGTH_IN_MB,16)
UpdateFrequency=updateFrequency
new RuntimeException("Unable to format " + fileName,t)
http2.setInitialStreamRecvWindow(initialStreamSendWindow)
/**   * Returns a wrapper around  {@code ciphertextSource}, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using  {@code additionalData} asadditional authenticated data. The additional data is not included in the ciphertext and has to be passed in as parameter for decryption.  */ OutputStream newEncryptingStream(OutputStream ciphertextDestination,byte[] associatedData) throws GeneralSecurityException, IOException ; 
Thread.sleep(10_000)
myBaseVersion=21
size=100
nameTextField.getText()
project == null || !project.isDisposed()
count < 17
DB_VERSION=23
connection.getErrorStream()
protected abstract ResolvedReferenceType create(ResolvedReferenceTypeDeclaration typeDeclaration,List<ResolvedType> typeParameters); 
countCQL3Rows() || ignoredTombstonedPartitions()
props.nonNullValue(DefaultSettings.JDBC_URL)
Map<String,String>
Number value=list.get(i); 
log.debug("BouncyCastle not registered, using the default JCE provider")
normalizedSuffix.length()
svcs.deployAsync(srvcCfg)
merc.getDistribution()
event.getChangeColumns()
protected String findItemToAdd(){   String word=Messages.showInputDialog(SpellCheckerBundle.message("enter.simple.word"),SpellCheckerBundle.message("add.new.word"),null);   if (word == null) {     return null;   }  else {     word=word.trim();   }   if (Strings.isMixedCase(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.mixed.cased.you.must.enter.simple.word",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   if (!manager.hasProblem(word)) {     Messages.showWarningDialog(SpellCheckerBundle.message("entered.word.0.is.correct.you.no.need.to.add.this.in.list",word),SpellCheckerBundle.message("add.new.word"));     return null;   }   return word; } 
!isRunsOutsidePortal(absolutePath) && !className.equals("DeepNamedValueScanner") && !className.equals("ProxyUtil")&& newContent.contains("import java.lang.reflect.Proxy;")
bloomHighPassThreshold=.05f
possibleCenters.removeElementAt(i)
writeString(writer,fieldName,String.valueOf(reader.getLong()))
xmlElementDescriptor.getDependencies()
new IndexWriter(dir,autoCommit,new WhitespaceAnalyzer(),true,policy,IndexWriter.MaxFieldLength.LIMITED)
options.addOption("i",IGNORE_NODES_OPTION,"NODES","don't stream to this (comma separated) list of nodes")
MetricMonitorValues.getMetric(metrics,TRANSACTION_UNSAMPLED_CONTINUATION,UNSUPPORTED_GAUGE)
Thread.sleep(3000)
Logger.getLogger(loggerName).getEffectiveLevel()
mHomeStack == null && mDisplayId == Display.DEFAULT_DISPLAY
keychainLock.lock()
getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) && getChatopsServerUrl().equals(ChatOpsRepo.getChatopsServerUrl()) && getChatopsAuthToken().equals(ChatOpsRepo.getChatopsAuthToken())
mLastBatteryLevel != mHealthInfo.batteryLevel || mLastPlugType != mPlugType
position >= lastPos
Sets.newHashSet("int","int8","int16","int32","int64","uint","uint8","uint16","uint32","uint64","uintptr","rune","float32","float64")
args.length == 1
@NotNull Id getCommit(); 
myCustomRootProvider == null
prefix(dst)
AlluxioWorker.class
/**   * Our event dispatcher.  */ private MediaEventDispatcher mediaDispatcher=new MediaEventDispatcher(); 
mock.setMinimumResultWaitTime(1500)
factory.getDestination(endpoint,bus)
mf.getColumnNameInSql()
iconId <= 1
reportType % 0x10
jvmOptions.jvmArgs(DEFAULT_JVM_9_ARGS)
Cli.<Runnable>builder("presto")
TO_CLIENT.registerPacket(PlayerListHeaderFooter.class,map(ProtocolConstants.MINECRAFT_1_8,0x47),map(ProtocolConstants.MINECRAFT_1_9,0x48),map(ProtocolConstants.MINECRAFT_1_9_4,0x47),map(ProtocolConstants.MINECRAFT_1_10,0x47),map(ProtocolConstants.MINECRAFT_1_11,0x47))
public class XpathRegressionLeftCurlyTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"4:1: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS,"{",1)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyOne']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     moduleConfig.addAttribute("option",LeftCurlyOption.NL.toString());     final String[] expectedViolation={"3:53: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_NEW,"{",53)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK","/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyTwo']/OBJBLOCK/LCURLY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=LeftCurlyCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionLeftCurlyThree.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(LeftCurlyCheck.class);     final String[] expectedViolation={"5:19: " + getCheckMessage(LeftCurlyCheck.class,LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER,"{",19)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionLeftCurlyThree']/OBJBLOCK" + "/METHOD_DEF[@text='sample']/SLIST/LITERAL_IF/SLIST");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
r.nextBoolean()
new TwoDimTable("Coefficients","glm coefficients",ns,new String[]{"Coefficients"},colTypes,colFormats,"names")
Utils.parseBoolean(result,defaultValue,true)
new InternalTestCluster(randomLong(),1,1,tribeClusterName,tribeSettingsSource,0,false,CHILD_JVM_ID,TRIBE_CLUSTER_NODE_PREFIX)
!isPersistent
qtype instanceof PyNoneType || qtype instanceof PyTypeReference
new PlaybackServiceStarter(context,media).startWhenPrepared(true)
routeInd + 1
PlatformTestCase.initPlatformLangPrefix()
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/SuperMembers4.kt")
recorder.record(frame2,filter.getPixelFormat())
public String getResource(){   return resource; } 
WorkflowTaskManagerUtil.search(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getKeywords(),searchTerms.getKeywords(),WorkflowHandlerUtil.getSearchableAssetTypes(),false,true,searchContainer.getStart(),searchContainer.getEnd(),searchContainer.getOrderByComparator())
mappedCatalog != null && !StringUtils.isBlank(mappedCatalog.getName())
drawer.mAdapter.addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE))
new FilterConfiguration(filterClass,filterParams)
log.debug(msg,t)
connector.setPort(9080)
/**   * Represents black  */ BLACK('0',0x00)
!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE
!clientContextTakeover
public class XpathRegressionNestedForDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedForDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedForDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedForDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedForDepthCheck.class,NestedForDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedForDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
final String message
!enable
endpoint.keepAliveTimeSeconds()
rows[topIndex]
new Analyzer(new FunctionRegistry(),IndexResolution.valid(test),TimeZone.getTimeZone("UTC"),null)
new KeywordMap(false)
new SQLiteBooksDatabase(this,"LIBRARY_NG")
new IllegalArgumentException("unable to find any shards to explain [" + request + "] in the routing table")
new NTCredentials(user,getProxyPass(),LOCALHOST,PROXY_DOMAIN)
getBaseType()
complete()
word=END_WORD
ev.mStateSamples.length >= NS
mService.disconnect(mContext.getOpPackageName())
selectedFile != null && fileFilter != null
FunctionTypesKt.isFunctionTypeOrSubtype(((ClassDescriptor)container).getDefaultType())
@GUIMenuSortOrder(4)
String.format("Passing both %s and %s is not supported, ignoring %s",KEY_SIMPLEPERF_CMD,KEY_SIMPLEPERF_APP,KEY_SIMPLEPERF_CMD)
code.addLoad(1,field.getType())
TimeUnit.SECONDS.toMillis(4)
c.getSimpleName()
index < mInUseLocks.length()
indexService.newQueryShardContext()
log.info("\"FocusKiller\" library not found or there were problems loading it.",t)
zkDb.snapLog.getDataDir()
player.playSound(location,soundArg,(float)minimumVolume,(float)pitch)
Thread.sleep(800)
formController.getEventLogger().logEvent(EventLogger.EventTypes.BACKGROUND_LOCATION_ENABLED,0,null,false)
new int[127]
FileUtil.compactPath(path,'/')
H2O.unimpl("PCA currently only works on numeric data")
defineClass("org.apache.catalina.loader.JdbcLeakPrevention",classBytes,0,offset,this.getClass().getProtectionDomain())
GL11.glTexParameterfv(target,pname,params)
activity.createTimeListPreference(settings.LIVE_MONITORING_INTERVAL,SECONDS,MINUTES,1000,R.string.live_monitoring_interval,R.string.live_monitoring_interval_descr)
VDBG=false
maxLiveColumns < count
return newName; 
pd == activePresentationDescriptor && activePresentationDescriptor.getPresentationType().isPersistent()
SystemProperties.getBoolean("persist.quickstep.scrub.enabled",true)
hours >= 2 || (hours > 0 && minutes == 0)
new AMRuntimeException.IOException("Couldn't scale file entry " + fileVersion.getFileEntryId() + " to match Adaptive Media configuration "+ amImageConfigurationEntry.getUUID(),e)
model != null && model.size() == 1
modelNode.hasDefined(LOCAL)
LOG.warn(e,"Could not find missing deps")
mp.getCount() == 1 && (mp.getBodyPart(0) instanceof LocalAttachmentBodyPart) == false
forceRegister=true
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.title"))
ImportAutoConfigurationWithItemsTwo.class
HeaderSpec.this
DumpUtils.checkDumpAndUsageStatsPermission(getContext(),TAG,pw)
itemActionLayout > 0
LocalAnimation localVideo=(LocalAnimation)contentContainer.getContent(); 
chunkLength != C.LENGTH_UNBOUNDED && chunkLength != 0
builder != null
ListDataSource.unbounded(Arrays.asList(1,2,3,3,2,1),Arrays.asList(1,2,3,3,2,1))
creationDateField != null && "".equals(((String)creationDateField.get()).trim())
Serializable result
eval instanceof Float || PsiType.FLOAT.equals(TypesUtil.unboxPrimitiveTypeWrapper(variable.getType())) && eval instanceof Number
module != null && !module.isDisposed()
isAValuesDirectory(parentFile.getName()) || parentFile.getName().startsWith("raw")
UI_TIMEOUT=5000
modObjectTable == null || !modObjectTable.contains(modId,name)
assertEquals(redVocab.getIndex(),1)
range.getTo()
createTextAttributesKey("KOTLIN_LABEL",DefaultLanguageHighlighterColors.LABEL)
Exceptions.duplicateOnSubscribeException()
SmackConfiguration.getVersion()
sender.sendMessage(_("inventoryClearedAll"))
replaces="doIntrinsicCachedLLVMTruffleObject"
new HttpOpenListener(new ByteBufferSlicePool(BufferAllocator.DIRECT_BYTE_BUFFER_ALLOCATOR,8192,8192 * 8192),8192)
mStructure != null && (flags & FLAG_VIEW_ENTERED) != 0
BaseMessages.getString(PKG,"BaseStreamStepMeta.CheckResult.ResultStepMissing",subMeta.getName(),realSubStepName)
new Handler(looper){   @Override public void handleMessage(  Message msg){ switch (msg.what) { case MSG_CLEAR_WALLPAPER: synchronized (this) {         mWallpaper=null;       }     break; } } } 
bukkit.getRawNote()
error == null && mEditPostActivityHook != null
LOGGING=false
!chunk.isOpCode() && (chunk.data != null) && chunk.data.length >= MINIMUM_BLOOM_DATA_LENGTH
scrollWebElementIntoView(webElement)
Math.max(o.outWidth / targetWidth,o.outHeight / targetHeight)
new JSONParseSpec(timestampSpec,new DimensionsSpec(dimensions,dimensionExclusions,spatialDimensions))
JBUI.emptyInsets()
Objects.equals(e.getNewRange(),e.getOldRange())
this.errorDetection=false
font != null && foreground != null
new GenerationException("Couldn't parse type: " + typeDefinition,e)
conf.getRestBaseURL()
mObsoleteAgents.valueAt(i)
new PojoMessageHandlerAsyncBinary(pojo,m,session,params,indexByteArray,true,indexBoolean,indexSession)
sm.getString("serverContainer.duplicatePaths",path,old.getEndpointClass(),sec.getEndpointClass())
Criterion.or(MetadataCriteria.withKey(ProducteevTask.METADATA_KEY),MetadataCriteria.withKey(TagService.KEY),MetadataCriteria.withKey(NoteMetadata.METADATA_KEY))
setInputMethodEnabledLocked(info.getId(),true)
cache.flushAndForce()
SQLException e
Localization.menuTitle("Quality")
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline.json",null,paging.asPostParameterList(),true))
proxy == null
new ConfigurationMethod(getConstructorOrMethod(),getAnnotationFinder(),isBeforeSuiteConfiguration(),isAfterSuiteConfiguration(),isBeforeTestConfiguration(),isAfterTestConfiguration(),isBeforeClassConfiguration(),isAfterClassConfiguration(),isBeforeMethodConfiguration(),isAfterMethodConfiguration(),getBeforeGroups(),getAfterGroups(),false,getInstance())
new AnnotationRepositoryConfigurationSource(metadata,getAnnotation(),this.resourceLoader,this.environment){   @Override public java.lang.Iterable<String> getBasePackages(){     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages();   } } 
ALIGN_GROUP_FIELD_DECLARATIONS=false
JDBCUtils.safeGetInt(dbResult,"pid")
Character.isWhitespace(origText.charAt(i))
Log.error("Error loading vCard of username: " + username,e)
new IndexWriter(ram,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
localFileSystem.refreshAndFindFileByPath(keyMapsPath)
remainingBytes > Integer.MAX_VALUE
mScreenBright=true
myCache1.get("myKey1").getObjectValue()
greaterThan(0L)
index >= 5
treePathTraverser(tree).expandAndFilter(tree::isExpanded)
file.getName()
createExpandMacroMap(moduleSettings).substitute(path,true)
@Override public final AnalyzedTokenReadings createNullToken(final String token,final int startPos){   return new AnalyzedTokenReadings(new AnalyzedToken(token,null,startPos)); } 
loadExternalSettingLinks(preferenceCategoryMore)
CasEvent::getEventId
super.dispatchTouchEvent(cancel)
KotlinTestUtils.navigationMetadata("idea/testData/editor/optimizeImports/KT9875.kt")
file.getMimetype() == null || !file.getMimetype().equals("DIR")
new DownSamplerForExposureNode(context,writeOnlyGBufferConfig,displayResolutionDependentFBOs,FBO_16X16_CONFIG,immutableFBOs,aLabel)
WaypointDialogHelper.showWaypointsDialog(mapActivity)
isCancelled() || isDone()
new RuntimeException("Error while creating the data flow plan for an iteration: The iteration end was not specified correctly.")
path.startsWith(FileSystemItem.HOME_PREFIX) || path.startsWith("/") || path.matches("^[a-zA-Z]:\\/.*")
fields != null && fields.size() > 0
new GroovyScriptDescriptor(this,scriptClass,place)
ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forBrokerTenantDelete(brokerTag)
parent != null ? parent.startNumber : 1
ortho(-width / 2,+width / 2,+height / 2,-height / 2,-1,+1)
LOGGER.debug("Located [{}] metadata resolvers to match against [{}]",resolvers,entityID)
IdentifiedDataSerializable event
updateState(CHANNEL_CHILL_TEMPERATURE,message.convertToState(valueSelector))
return mergeShardsChance; 
3.0 + (3 * random().nextDouble())
component.length >= 3
args != null && args.length > 0
new String(byteArrayOutputStream.toByteArray(),"UTF-8")
greaterThanOrEqualTo(0L)
ServletUtil.prepareParameters(p,true,false,false)
public Address mapLine(FieldSet fieldSet,int lineNum){   Address address=new Address();   address.setAddressee(fieldSet.readString(ADDRESSEE_COLUMN));   address.setAddrLine1(fieldSet.readString(ADDRESS_LINE1_COLUMN));   address.setAddrLine2(fieldSet.readString(ADDRESS_LINE2_COLUMN));   address.setCity(fieldSet.readString(CITY_COLUMN));   address.setZipCode(fieldSet.readString(ZIP_CODE_COLUMN));   address.setState(fieldSet.readString(STATE_COLUMN));   address.setCountry(fieldSet.readString(COUNTRY_COLUMN));   return address; } 
uadDisplay.searchCount(selectedUserId,null,displayTerms.getKeywords())
ClassFileVersion.JAVA_V5.getVersion()
stamp.isExactType() || stamp.type() == null
dateHeader / 100
getParentByStub()
new RandomIndexWriter(random(),dir,cfg)
new Intent(ACTION_QUICK_CONTACT)
constraints.weightx=0.5f
e.printStackTrace(css_.err)
filter.filter(exchange,new DefaultWebFilterChain(e -> Mono.currentContext().doOnSuccess(context -> {   Principal contextPrincipal=context.<Mono<Principal>>get(Authentication.class).block();   assertThat(contextPrincipal).isEqualTo(principal);   assertThat(context.<String>get("foo")).isEqualTo("bar"); } ).then())).subscriberContext(context -> context.put("foo","bar"))
bytes > 65536
Slog.w(TAG,"Invalid wallpaper data")
constraints.weightx=1f
assertEquals(false,StringUtils.isAlpha(""))
configureWriteBufferForWrite()
p.getTeleport()
NUM_OUTPUT_BUFFERS=8
UriBuilder.fromResource(StreamAlertConditionResource.class).path("{conditionId}").build(stream.getId(),alertCondition.getId())
ourGuard.doPreventingRecursion(element,true,computable)
new LogicalPosition(lline,repeatColumn)
myIcon.getIconHeight() - 1
shard.applyIndexOperationOnReplica(0,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(shard.shardId().getIndexName(),"test","id",new BytesArray("{}"),XContentType.JSON),mappingConsumer)
sn != null && sn.getHistoryReference().getHttpMessage().getRequestBody().toString().equals(postData)
getFullName()
delimiterText != null && delimiterText.equals(SQLConstants.DEFAULT_STATEMENT_DELIMITER)
mMethod == Methods.getByIndex || mMethod == Methods.getByInetAddress
new StringBuilder(28)
id=45
arrayExpression == null || rightHandSide == null
new IfNode(currentGraph.unique(new IntegerBelowThanNode(index,length)),trueSucc,falseSucc,0.9)
System.out.printf(Locale.ROOT,"graph.edge(%d, %d, %f, %s);\n",from,to,edge.getDistance(),fwd && bwd ? "true" : "false")
mapSource.getName()
!p.isNoSelectedType() || p.getLastWord().isEmpty()
t.getVolumeTraded()
this == OTI_ONLY
getLog().warn("register druid-driver mbean error",ex)
@JsonProperty(POSITION_FIELD)
clients.values()
private ErrorPageFilter filter=new ErrorPageFilter(); 
memoryCachePercent / 100f
JvmDeclarationOriginKt.OtherOriginFromPure(element)
case 7: 
Lists.newArrayList("id","bool","BOOL","SEL","IMP","unichar","nil","Nil","YES","NO","TRUE","FALSE","auto","const","entry","extern","goto","inline","register","restrict","signed","sizeof","struct","typedef","union","unsigned","volatile","asm","const_cast","delete","dynamic_cast","friend","explicit","mutable","namespace","not","operator","reinterpret_cast","static_cast","template","typeid","typename","using","virtual","self","isa","ptrdiff_t","size_t","wchar_t","wint_t","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","int_least8_t","int_least16_t","int_least32_t","int_least64_t","uint_least8_t","uint_least16_t","uint_least32_t","uint_least64_t","int_fast8_t","int_fast16_t","int_fast32_t","int_fast64_t","uint_fast8_t","uint_fast16_t","uint_fast32_t","uint_fast64_t","intptr_t","uintptr_t","intmax_t","uintmax_t","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","INT8_MIN","INT16_MIN","INT32_MIN","INT64_MIN","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","INT_LEAST8_MIN","INT_LEAST16_MIN","INT_LEAST32_MIN","INT_LEAST64_MIN","INT_LEAST8_MAX","INT_LEAST16_MAX","INT_LEAST32_MAX","INT_LEAST64_MAX","INT_FAST8_MIN","INT_FAST16_MIN","INT_FAST32_MIN","INT_FAST64_MIN","INT_FAST8_MAX","INT_FAST16_MAX","INT_FAST32_MAX","INT_FAST64_MAX","UINT_FAST8_MAX","UINT_FAST16_MAX","UINT_FAST32_MAX","UINT_FAST64_MAX","INTPTR_MIN","INTPTR_MAX","UINTPTR_MAX","INTMAX_MIN","INTMAX_MAX","UINTMAX_MAX","PTRDIFF_MIN","PTRDIFF_MAX","SIZE_MAX","WCHAR_MAX","WCHAR_MIN","WINT_MIN","WINT_MAX","SIG_ATOMIC_MIN","SIG_ATOMIC_MAX","INT8_MAX","INT16_MAX","INT32_MAX","INT64_MAX","UINT8_C","UINT16_C","UINT32_C","UINT64_C","INTMAX_C","UINTMAX_C","va_list","fpos_t","FILE","off_t","ssize_t","BUFSIZ","EOF","FOPEN_MAX","FILENAME_MAX","TMP_MAX","SEEK_SET","SEEK_CUR","SEEK_END","stdin","stdout","stderr","ct_rune_t","rune_t","div_t","ldiv_t","lldiv_t","dev_t","mode_t","NULL","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","MB_CUR_MAX","MB_CUR_MAX_L","errno","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","ENOTSUPP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","EILSEQ","EOPNOTSUPP","ELAST","F_DUPFD","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_GETOWN","F_SETOWN","F_GETLK","F_SETLK","F_SETLKW","FD_CLOEXEC","F_RDLCK","F_UNLCK","F_WRLCK","SEEK_SET","SEEK_CUR","SEEK_END","O_RDONLY","O_WRONLY","O_RDWR","O_ACCMODE","O_NONBLOCK","O_APPEND","O_SYNC","O_CREAT","O_TRUNC","O_EXCL","O_NOCTTY","O_NOFOLLOW","DOMAIN","HUGE","INFINITY","NAN","OVERFLOW","SING","UNDERFLOW","CFMSYSTEMCALLS","CGLUESUPPORTED","FUNCTION_PASCAL","FUNCTION_DECLSPEC","FUNCTION_WIN32CC","GENERATING68881","GENERATING68K","GENERATINGCFM","GENERATINGPOWERPC","OLDROUTINELOCATIONS","PRAGMA_ALIGN_SUPPORTED","PRAGMA_ENUM_PACK","PRAGMA_ENUM_ALWAYSINT","PRAGMA_ENUM_OPTIONS","PRAGMA_IMPORT","PRAGMA_IMPORT_SUPPORTED","PRAGMA_ONCE","PRAGMA_STRUCT_ALIGN","PRAGMA_STRUCT_PACK","PRAGMA_STRUCT_PACKPUSH","TARGET_API_MAC_CARBON","TARGET_API_MAC_OS8","TARGET_API_MAC_OSX","TARGET_CARBON","TYPE_BOOL","TYPE_EXTENDED","TYPE_LONGDOUBLE_IS_DOUBLE","TYPE_LONGLONG","UNIVERSAL_INTERFACES_VERSION","BIG_ENDIAN","BYTE_ORDER","LITTLE_ENDIAN","PDP_ENDIAN","DEBUG","NDEBUG","scale")
HtmlUtil.escape(_href)
new ChangesBrowser(project,null,Collections.<Change>emptyList(),null,false,false,null,ChangesBrowser.MyUseCase.LOCAL_CHANGES,null)
DialogUtils.resolveColor(builder.context,R.attr.md_background_color,DialogUtils.resolveColor(dialog.getContext(),R.attr.colorBackgroundFloating))
public class ArialBlack extends BasicFontMetrics { {     maxCharHeight=770;     widths[32]=333;     widths[33]=333;     widths[34]=500;     widths[35]=660;     widths[36]=666;     widths[37]=1000;     widths[38]=889;     widths[39]=277;     widths[40]=389;     widths[41]=389;     widths[42]=556;     widths[43]=660;     widths[44]=333;     widths[45]=333;     widths[46]=333;     widths[47]=277;     widths[48]=666;     widths[49]=666;     widths[50]=666;     widths[51]=666;     widths[52]=666;     widths[53]=666;     widths[54]=666;     widths[55]=666;     widths[56]=666;     widths[57]=666;     widths[58]=333;     widths[59]=333;     widths[60]=660;     widths[61]=660;     widths[62]=660;     widths[63]=610;     widths[64]=740;     widths[65]=777;     widths[66]=777;     widths[67]=777;     widths[68]=777;     widths[69]=722;     widths[70]=666;     widths[71]=833;     widths[72]=833;     widths[73]=389;     widths[74]=666;     widths[75]=833;     widths[76]=666;     widths[77]=943;     widths[78]=833;     widths[79]=833;     widths[80]=722;     widths[81]=833;     widths[82]=777;     widths[83]=722;     widths[84]=722;     widths[85]=833;     widths[86]=777;     widths[87]=1000;     widths[88]=777;     widths[89]=777;     widths[90]=722;     widths[91]=389;     widths[92]=277;     widths[93]=389;     widths[94]=660;     widths[95]=500;     widths[96]=333;     widths[97]=666;     widths[98]=666;     widths[99]=666;     widths[100]=666;     widths[101]=666;     widths[102]=389;     widths[103]=666;     widths[104]=666;     widths[105]=333;     widths[106]=333;     widths[107]=666;     widths[108]=333;     widths[109]=1000;     widths[110]=666;     widths[111]=666;     widths[112]=666;     widths[113]=666;     widths[114]=443;     widths[115]=610;     widths[116]=443;     widths[117]=666;     widths[118]=610;     widths[119]=943;     widths[120]=666;     widths[121]=610;     widths[122]=556;     widths[123]=389;     widths[124]=277;     widths[125]=389;     widths[126]=660;   } } 
{false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true}
NotifyUtil.show("Warning",formatter.formatMessage(record),MessageType.WARNING,listener,10000)
Double.isInfinite(longitude)
List<ConstructorCallExpression>
builder200.build()
setting.detach(this)
sizeChanged && getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.O
!ufsDeleter.delete(alluxioUriToDel,delInode)
!AtmosphereRequest.class.isAssignableFrom(request.getClass())
location.add(deltaX / delta,deltaY / delta,deltaZ / delta)
23 * ClassSize.REFERENCE
delegatedResourceAccountIndexCapsule.getFromAccountsList()
UpgradeStepRegistrator.class
buffer.indexOf(partToMatch,indexOf + replacement.length())
this.messageService.monoPreAuthorizeBeanFindById(2L).subscriberContext(withAdmin)
errVisitor.getJspSourceNode() instanceof Node.Scriptlet || errVisitor.getJspSourceNode() instanceof Node.Declaration
this.mChildScene == null || !this.mChildSceneModalUpdate
4 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier
userDNPattern.matcher(userDN)
!isObjectMethod(method) || method.getName().equals("toString")
bufferSize < minAllocSize
new GeoLocation(array.getDouble(1),array.getDouble(0))
serialVersionUID=1712639541
minSize > curSize
port=47506
pluginConvention.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getOutput()
mock.expectedMessageCount(2)
pluginContainer.lookup(ComponentConfigurator.ROLE,"basic",pluginRealm)
stepsNumber=1
public T getAsset(); 
outputRowData=null
_fileEntryDisplayContextHelper.isCheckedOutByOther()
new PyDebugValue(slice,value.getType(),null,value.getValue(),value.isContainer(),value.isReturnedVal(),value.isErrorOnEval(),parent,value.getFrameAccessor())
LOG.debug("Couldn't run process with PTY",t)
DaemonListeners.isUnderIgnoredAction(null) || myProject.isDisposed()
INTERRUPTION_THRESHOLD=10
case 5: 
(SupportingToken)pa
assertEquals("Two samples should have been collected",3,samples.size())
getMethod(restrictionName,methodName).isRestartRequired()
new BigInteger(1,parseData(headerTck.getNumber()))
probeParentLoaderLast=false
this.numberOfMessages=1000
deferUpdateBounds(HOME_STACK_ID)
/**   * Public size counter.   */ private final LongAdder8 mapPubSize=new LongAdder8(); 
isHoverable() || isHovered()
handler.pause()
assertEquals(4,builder.getErrors().getErrors().length)
pipeline.addLast(PassportStateHttpClientHandler.PASSPORT_STATE_HTTP_CLIENT_HANDLER_NAME,new PassportStateHttpClientHandler())
updatePaints(g.getColor(),routePoints,g.isShowCurrentTrack(),settings,tileBox)
FileCopyPasteUtil.createDataFlavor(DataFlavor.javaJVMLocalObjectMimeType,Class.class)
nodeEngine.getClusterService()
Nd4j.getDistributions().createNormal(0,1)
ArrayList<Long>
RowInfo<Id>
Assert.assertTrue(mFileSystem.getStatus(uri).getInMemoryPercentage() == 100)
new ConnectionException(sm.getString("frameType.checkPayloadSize",Integer.toString(payloadSize),this),Http2Error.FRAME_SIZE_ERROR)
false && timezoneFlags == TZ_FLAG_INCLUDE_DST_IN_TZ
availableVersions == null || availableVersions.isEmpty()
newFileAnnotation.setRevisions(revisions)
sequence.first <= first && first <= sequence.last
new CartesianPolyFilterBuilder("",4,15)
Long.valueOf(3)
log.debug("Received ping --> {}",payload)
noClasses.get() && myBC.getCompilerOptions().getFilesToIncludeInSWC().isEmpty() && !ApplicationManager.getApplication().isUnitTestMode()
MAX_PERCENT_DIFFERENCE=0.3
log.info("Not found for {}: {}",uriInfo.getRequestUri(),error)
StringBuilder text=new StringBuilder(status.getMessage()); 
new GeocodeFarmGeocoder(null,null,0)
getData() ^ 0x7
StringByteIterator.putAllAsByteIterators(result,jedis.hgetAll(key))
new IllegalStateException(e)
assertComputationDurationAround(350_000L)
bytes.length > 150000
final DomAnchor parent
JournalArticle.class
latch2.countDown()
!isSmartLockAvailable()
firstCacheCfg.setMemoryPolicyName(POLICY_40MB_EVICTION)
new KBArticlePriorityException("Invalid article priority: " + priority)
"adjustedPath=" + adjustedPath
LOG.warn("BuildSlaveFinishedStats was not set for RunId:[%s] from frontend.",runId)
assertEquals(6,config.getMapConfigs().size())
Assume.assumeTrue("JDK is not 7",JavaDetector.isJDK7())
origin < other
this.actual=actual
day.equals("pt") || day.startsWith("piątk") || day.equals("piątek")
!socket.isOutputShutdown()
!isEnabled() || getVisibility() == VISIBLE
vocabularySettingsHelper.getRequiredClassTypePKs()
"year".equalsIgnoreCase(currentToken) || "years".equalsIgnoreCase(currentToken)
Thread.sleep(20000)
Values.stringOrNoValue(stringValue(offset))
i & 0xff
ses.init()
new DDMFormAssetRenderer(formInstanceRecord,formInstanceRecordVersion,_ddmFormInstanceRecordLocalService,_ddmFormRenderer,_ddmFormValuesFactory,_ddmFormValuesMerger)
this(name,type,length,null,true); 
id=18
public StandardFilter create(TokenStream input){   return new StandardFilter(input); } 
Site.me().setRetryTimes(3).setSleepTime(1000)
public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth){   realm().setUsePreemptiveAuth(usePreemptiveAuth);   return this; } 
Validator.isNull(userUUIDString)
c.getMethod("load",Class.class)
new FileHyperlinkRawData("C:/Users/User/AppData/Roaming/npm/node_modules/karma-commonjs/client/commonjs_bridge.js",20,-1,3,s.length())
dialog.dismiss()
stepLightIdleStateLocked("s:shell")
slaveMasters.containsKey(nodeId)
ch.unsafe().flush()
BeanPropertiesUtil.getObjectSilent(model,_rowIdProperty)
potentialResponse != null
resolveResult != null
(halfHeight / inSampleSize) > reqHeight || (halfWidth / inSampleSize) > reqWidth
public Builder setRealmEnconding(String enc){   realm().setEnconding(enc);   return this; } 
MapActivity.launchMapActivityMoveToTop(mapActivity)
serialVersionUID=1122388635
LayoutHelper.getGBC(2,9,1,1.0D,0,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2))
MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)
FileUtils.write(fileWithBom,"\uFEFF","UTF-8")
new HdfsFileStatus(0,false,1,1024,false,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,new FileEncryptionInfo(suite,version,new byte[suite.getAlgorithmBlockSize()],new byte[suite.getAlgorithmBlockSize()],"fakeKey","fakeVersion"),(byte)0)
EnumSet.of(BarcodeFormat.CODE_39,BarcodeFormat.CODE_93,BarcodeFormat.CODE_128,BarcodeFormat.ITF,BarcodeFormat.CODABAR)
private final String resource; 
Matchers.anyLong()
myTreeBuilder.updateFromRoot()
userInfo.getWebsite()
assertEquals(0.0,(0.4 - est.getProb()) / 0.4,0.1)
CACHE_LAYOUT_VERSION=10
PsiTreeUtil.getParentOfType(context,PsiStatement.class,false)
artifactFilter == null || resolvedArtifacts == null
case REPLACE_IF_SAME: 
body.addAfter(target,afterAnchor)
assertEquals(inserted.size(),table.getColumnFamilyStore("Standard1").getKeyRange("","",10000).keys.size())
coverageDataManager.addCoverageSuite(config.getGeneratedName() + " Coverage Results",fileProvider,config.getPatterns(),new Date().getTime(),null,config.getCoverageRunner(),config.isTrackPerTestCoverage() && !config.isSampling(),!config.isSampling())
new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).iterations(1).learningRate(0.1)
2 * 24 * 3600* 1000l
mNoteTypeSpinner.setSelection(position,false)
123456789 * 2
return START_REDELIVER_INTENT; 
status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS || status == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED
scriptField.setInitialText("")
item.setTypeText(notice)
LoginInteractor loginInteractor
BackupManagerServiceInterface svc=mService; 
Table.isModelTable(tableName)
caretColumn >= value.getIndent()
POOL_SIZE > 0
sendCommand(CLIENT,Keyword.SETNAME.raw,name)
RectF r=(RectF)o; 
XmlPullParserFactory.newInstance("org.xmlpull.mxp1.MXParserFactory",null)
showPoint != null && showPoint.getComponent() != null
assertEquals(9775l,(long)sourceStats.get("novel"))
Arrays.asList("Die Katzen sind schön.","Frau Meier und Herr Müller sind alt.","Frau Julia Meier und Herr Karsten Müller sind alt.","Julia und Karsten sind alt.","Julia, Heike und Karsten sind alt.","Frau und Herr Müller sind alt.","Herr und Frau Schröder sind alt.","Herr Meier und Frau Schröder sind alt.","Die restlichen 86 Prozent sind in der Flasche.","Die restlichen sechsundachtzig Prozent sind in der Flasche.","Die restlichen 86 oder 87 Prozent sind in der Flasche.","Die restlichen 86 % sind in der Flasche.","Durch den schnellen Zerfall des Actiniums waren stets nur geringe Mengen verfügbar.","Soda und Anilin waren die ersten Produkte des Unternehmens.","Bob und Tom sind Brüder.","Letztes Jahr sind wir nach London gegangen.","Trotz des Regens sind die Kinder in die Schule gegangen.","Die Zielgruppe sind Männer.","Männer sind die Zielgruppe.","Die Zielgruppe sind meist junge Erwachsene.","Die USA sind ein repräsentativer demokratischer Staat.","Wesentliche Eigenschaften der Hülle sind oben beschrieben.","Wesentliche Eigenschaften der Hülle sind oben unter Quantenmechanische Atommodelle und Erklärung grundlegender Atomeigenschaften dargestellt.","Er und seine Schwester sind eingeladen.","Er und seine Schwester sind zur Party eingeladen.","Sowohl er als auch seine Schwester sind zur Party eingeladen.","Rekonstruktionen oder der Wiederaufbau sind wissenschaftlich sehr umstritten.","Form und Materie eines Einzeldings sind aber nicht zwei verschiedene Objekte.","Dieses Jahr sind die Birnen groß.","Es so umzugestalten, dass sie wie ein Spiel sind.","Die Zielgruppe sind meist junge Erwachsene.","Die Ursache eines Hauses sind so Ziegel und Holz.","Vertreter dieses Ansatzes sind unter anderem Roth und Meyer.","Sowohl sein Vater als auch seine Mutter sind tot.","Einige der Inhaltsstoffe sind schädlich.","Diese Woche sind wir schon einen großen Schritt weiter.","Diese Woche sind sie hier.","Vorsitzende des Vereins waren:","Weder Gerechtigkeit noch Freiheit sind möglich, wenn nur das Geld regiert.","Ein typisches Beispiel sind Birkenpollenallergene.","Eine weitere Variante sind die Miniatur-Wohnlandschaften.","Eine Menge englischer Wörter sind aus dem Lateinischen abgeleitet.","Völkerrechtlich umstrittenes Territorium sind die Falklandinseln.","Einige dieser älteren Synthesen sind wegen geringer Ausbeuten ...","Einzelne Atome sind klein.","Die Haare dieses Jungens sind schwarz.","Die wichtigsten Mechanismen des Aminosäurenabbaus sind:","Wasserlösliche Bariumverbindungen sind giftig.","Die Schweizer Trinkweise ist dabei die am wenigsten etablierte.","Die Anordnung der vier Achsen ist damit identisch.","Die Nauheimer Musiktage, die immer wieder ein kultureller Höhepunkt sind.","Räumliche und zeitliche Abstände sowie die Trägheit sind vom Bewegungszustand abhängig.","Solche Gewerbe sowie der Karosseriebau sind traditionell stark vertreten.","Hundert Dollar sind doch gar nichts!","Sowohl Tom als auch Maria waren überrascht.","Robben, die die hauptsächliche Beute der Eisbären sind.","Die Albatrosse sind eine Gruppe von Seevögeln","Die Albatrosse sind eine Gruppe von großen Seevögeln","Die Albatrosse sind eine Gruppe von großen bis sehr großen Seevögeln","Vier Elemente, welche der Urstoff aller Körper sind.","Die Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die diplomatischen Beziehungen zwischen Kanada und dem Iran sind seitdem abgebrochen.","Die letzten zehn Jahre seines Lebens war er erblindet.","Die letzten zehn Jahre war er erblindet.","... so dass Knochenbrüche und Platzwunden die Regel sind.","Die Eigentumsverhältnisse an der Gesellschaft sind unverändert geblieben.","Gegenstand der Definition sind für ihn die Urbilder.","Mindestens zwanzig Häuser sind abgebrannt.","Sie hielten geheim, dass sie Geliebte waren.","Einige waren verspätet.","Kommentare, Korrekturen und Kritik sind verboten.","Kommentare, Korrekturen, Kritik sind verboten.","Letztere sind wichtig, um die Datensicherheit zu garantieren.","Jüngere sind oft davon überzeugt, im Recht zu sein.","Verwandte sind selten mehr als Bekannte.","Ursache waren die hohe Arbeitslosigkeit und die Wohnungsnot.","Ursache waren unter anderem die hohe Arbeitslosigkeit und die Wohnungsnot.","Er ahnt nicht, dass sie und sein Sohn ein Paar sind.","Die Ursachen der vorliegenden Durchblutungsstörung sind noch unbekannt.","Der See und das Marschland sind ein Naturschutzgebiet","Details, Dialoge, wie auch die Typologie der Charaktere sind frei erfunden.","Die internen Ermittler und auch die Staatsanwaltschaft sind nun am Zug.")
Dependency.cranPackage("rsconnect","0.8.11")
rec.isValidLineInReference(pastViolation.getLine())
edgeData.getAttributes() != null
curr.end >= intervals[i].start
target.getText()
LOG.info("Too many MultiFetch errors, falling back to Fetch only.")
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/basic/common/staticMembers/JavaStaticFields.kt")
Math.abs(oldDist - dist) < 10
searchContext.sort().getSort().length > 1
getActivity()
mRefreshView.getTop() <= 0
child.getAttributeValue(ATTRIBUTE_ENABLED,"true")
new ExternalPaymentProviderPlugin(clock,paymentConfig)
!content.readable()
nl.size() >= minMatch
expectedGas=436
store.forceBlockingFlush()
new LFWLoader(imgDim,imageTransform,numExamples,useSubset)
StepVerifier.create(Mono.just(1).filterWhen(v -> {   throw new IllegalStateException(); } )).verifyError(IllegalStateException.class)
/**   * Get DR pause state.  * @return DR pause state.  */ @Nullable public GridDrStatus drPauseState(); 
Size.kilobytes(6)
token.getExpiresIn()
d < 0.025f
new String[nrKeys1]
currentType != globalType && currenType != Type.INT
actionId.equals(ActionKeys.IMPERSONATE) && PortalUtil.isOmniadmin(userId) && !permissionChecker.isOmniadmin()
LOGGER.fine(e.toString())
isControl && (scriptMode || cursorInsideToken) && !hasValuableTokens
StringBuilder sb=new StringBuilder(); 
14 * Bytes.SIZEOF_LONG
container.getAttributeModel().getEdgeTable()
new DisappearAnimationUtils(context,125,0.6f,0.45f,AnimationUtils.loadInterpolator(mContext,android.R.interpolator.fast_out_linear_in))
native_get_videoeditor_export_level(vidCodec)
mRemote.transact(GRANT_URI_PERMISSION_FROM_OWNER_TRANSACTION,data,reply,0)
timeout
DeleteOptions.defaults().setRecursive(true).setAlluxioOnly(false).setUnchecked(true)
Ints.saturatedCast((guessFileStore(conf.cdc_raw_directory).getTotalSpace() / 1048576) / 8)
mRedrawClip.isEmpty() || view.getParent() == null
bucketerContext.update(context.timestamp(),context.currentWatermark(),currentProcessingTime)
nextProcessId=1
new UnsupportedTemporalTypeException(String.format("Cannot get the time zone of: %s",this))
mEnabledPrintServices.size() == 0
shuffleWithNonExistentUuids(project2.uuid(),project1.uuid())
rootView != null
LOGGER.warn("Could not parse entry",ex)
_logger == null
MiddleEntity middle1=new MiddleEntity(); 
stack == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION
assertEquals("string",model.getProperties().get(NAME).getType())
"Notes".equals(subSectionName) || "Rule Description".equals(subSectionName) || "Metadata".equals(subSectionName)
/**   * Converts quoted property accesses to dot syntax (a['b'] -> a.b)   */ CONVERT_TO_DOTTED_PROPERTIES{   @Override void apply(  CompilerOptions options,  boolean value){     options.setConvertToDottedProperties(value);   }   @Override String getJavaInfo(){     return "options.setConvertToDottedProperties(true)";   } } 
new ParcelableConference(phoneAccount,state,capabilities,connectionIds,videoCallProvider,videoState,connectTimeMillis)
new IllegalStateException()
ServiceLoader.load(ConfigurationBuilderFactory.class,getClass().getClassLoader())
lType == null || rType == null
type == TYPE_PUBLIC && !isVisible()
Float.parseFloat(getOptional("kylin.storage.hbase.region-cut-gb","5.0"))
(100 - nodesContractedPercentage) / 100d
ArtifactCompileScope.createScopeWithArtifacts(moduleScope,Collections.singletonList(myArtifact),true)
blog.getLocalTableBlogId()
mExitingAppTokens.get(i)
exchange.getProtocol().equalToString("https")
structuralLock.isHeldByCurrentThread()
ApplicationManager.getApplication().getMessageBus().connect(this)
button.getButtonGroup()
DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){   @Override public void run(){     getContextManager().setState(SESSION_EMPTY_CONTEXT,State.DISPOSED,Event.DISPOSE,null);   } } )
msg.payload().duplicate()
cls.getDeclaredMethods()
origin <= other
BrowserApp.getContext()
new NagiosNscaStub(25668,"secret")
JMenu langs=new JMenu("Language"); 
configurator.setExcludedEntries("jodd.petite.data.*","jodd.petite.tst3.*","jodd.petite.tst.Ses","*Public*","*Secret*","*$*","jodd.petite.prox.*")
POSITIVE_X(0)
insertIndex >= 0
c.set(IDAUTHORITY_WAIT_MS,100)
counter + 1
return topicID; 
AnnotatedElementUtils.findAnnotationAttributes(type,annotationType)
ColorProperties.getColor("textColor")
args.length < 2
child.getElementType() != TokenType.ERROR_ELEMENT || child.getFirstChildNode() != null
lastDot >= 0 && lastDot + 1 < fullName.length() && ((PsiDirectory)element).getName().equals(fullName.substring(lastDot + 1))
returnCode == 0
p.isPrimitive()
new IndexWriter(indexDir,analyzer,create,IndexWriter.MaxFieldLength.LIMITED)
addr.isAnyLocalAddress() || addr.isLoopbackAddress()
assertResultsPresentInDataResponse(url,asyncJob.getId(),timerJob.getId())
currentDateTime.plusSeconds(this.skewAllowance)
configInstance.getIntProperty(namespace + "eurekaServer.readTimeout",8)
iterations=30
merge4dCnnData(labelsToMerge)
totalLength / 10
new WorldPoint(3013,3179,0)
new WorldPoint(2914,3433,0)
arguments.size() % 2 == 0 && argumentsAreTabular(arguments) == 2
mTfs.delete(mTfs.open(new TachyonURI(dirPath)),true)
JavaSourceTckSuite.suite()
resources.lookup(normPath)
new IndexWriter(directory,ANALYZER,true,IndexWriter.MaxFieldLength.LIMITED)
group.isLayout() || group.isLayoutSetPrototype() || group.isSite()|| group.isUser()
new RuntimeException("Could not create TypeInformation for type " + type.getName() + "; please specify the TypeInformation manually via "+ "ExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
Assert.notNull(cached,"MapSession cannot be null")
assertEquals(1420,lastLink)
assertEquals(48,(long)stats.getServerCache().getHostFor("dns:").getSubstats().get(CrawledBytesHistotable.WARC_NOVEL_CONTENT_BYTES))
HeartbeatReelectionListener.class
(long)y & 0xFFFFFFFFL
AssetTagFinderUtil.countByG_N(_scopeGroup.getGroupId(),assetTagName)
Long.parseLong(name)
info.getXferAddr()
localMessage == null || localMessage.isSet(Flag.DELETED)
AsteriskActionEnum.valueOf(action)
oldBuffer.size() >= 0
PolyglotLanguageBindings.class
PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,list)
entry.getName().startsWith(path)
!token.hasVisible && !mClosingApps.contains(token) && !token.mDeferRemoval
clusterService.operationRouting().getShards(clusterService.state(),request.index(),request.type(),request.id(),request.routing(),request.preference())
myRegisteredPasses == null || psiFile == null
backUpDirs == null || backUpDirs.length <= 1
g.events().stopLocalListen(lsnr,EventType.EVT_NODE_LEFT,EventType.EVT_NODE_FAILED)
final URLDetail webd=(URLDetail)d; 
Preconditions.checkArgument(root.isAbsolute(),"Expected absolute path. Got <%s>.",root)
doInvoke(args)
registrar.registerReferenceProvider(new PsiElementPattern.Capture<PsiElement>(PsiElement.class){   @Override public boolean accepts(  @Nullable Object o,  ProcessingContext context){     return o instanceof PsiLiteralValue && ((PsiLiteralValue)o).getValue() instanceof String;   } } ,new ArbitraryPlaceUrlReferenceProvider(),PsiReferenceRegistrar.LOWER_PRIORITY)
position - 1 >= 0
/**   * This version of getRow() only takes data from certain rowsets We select these rowsets that have name = step Otherwise it's the same as the other one.  */ public synchronized Row getRowFrom(String from) throws KettleRowException {   output_rowset_nr=findInputRowSetNumber(from,0,stepname,0);   if (output_rowset_nr < 0) {     throw new KettleException("Couldn't find hop '" + from + "' for reading from");   }   return getRowFrom(output_rowset_nr); } 
UntrackedFilesNotifier.notifyUntrackedFilesOverwrittenBy(myProject,ServiceManager.getService(myProject,PlatformFacade.class),untrackedFiles,getOperationName(),null)
new IndexingStats.Stats(3L,71L,0L,0L,0L,0L,0L,0L,true,302L)
!msbuild.exists()
new Property2()
chain.getEarliestKeyCreationTime() >= keyRotationTimestamp
ColorProperties.getColor("tabTitleHighlight")
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"retval"),connection,binding.getReadPreference(),transformer(connectionSource,connection))
Matchers.<Map.Entry<String,String>>containsInAnyOrder(new AbstractMap.SimpleEntry("testPropertyA","A"),new AbstractMap.SimpleEntry("testPropertyB","B"),new AbstractMap.SimpleEntry("testPropertyC","baseC"))
Serde<V>
new SlopStorageEngine(new InMemoryStorageEngine<ByteArray,byte[],byte[]>("slop"),3)
private Listener listener; 
dynamicState.changingBlobs.isEmpty()
new ScoreIterationListener(100)
!(orderParams instanceof CancelOrderByIdParams) || !(orderParams instanceof CancelOrderByCurrencyPair)
node.toAppliedPTransform(getPipeline())
matched && matcher.groupCount() > 0
TreeUtil.expand(getTree(),2)
from + 1
@Parameters(name="{0}") public static List<String> getList() throws Exception {   List<String> classCommandNames=new ArrayList<>();   String testName=PropsValues.TEST_NAME;   if (testName.contains("#")) {     classCommandNames.add(testName);   }  else {     String className=testName;     Element rootElement=PoshiRunnerContext.getTestcaseRootElement(className);     List<Element> commandElements=rootElement.elements("command");     for (    Element commandElement : commandElements) {       classCommandNames.add(className + "#" + commandElement.attributeValue("name"));     }   }   return classCommandNames; } 
queue.notifyAll()
final ImageButton buttonFavorite=(ImageButton)view.findViewById(R.id.context_menu_fav_button); 
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)
new IndexWriter(merged,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
selectBoxList.setScrollingDisabled(true,y)
private void checkGroupHasCapacity(SchedulerGroup groupContext) throws OutOfCapacityException {   if (groupContext.numPending() >= maxPendingPerGroup && groupContext.totalReservedThreads() >= resourceManager.getTableThreadsHardLimit()) {     throw new OutOfCapacityError(String.format("SchedulerGroup %s is out of capacity. numPending: %d, maxPending: %d, reservedThreads: %d threadsHardLimit: %d",groupContext.name(),groupContext.numPending(),maxPendingPerGroup,groupContext.totalReservedThreads(),resourceManager.getTableThreadsHardLimit()));   } } 
r.getResponse().sendError(503,"Remotely closed")
features.isKeyOrdered=true
mBreadcrumb.setSelection(mBreadcrumbAdapter.getCount() - 1,false)
@Specialization protected LLVMSharedGlobalVariable escapingGlobal(LLVMGlobal escapingValue,@SuppressWarnings("unused") LLVMInteropType.Structured type){   return new LLVMSharedGlobalVariable(escapingValue); } 
getTimeout(ticketToUpdate)
telephony.getCdmaEriIconIndexForSubscriber(subId,getOpPackageName())
type instanceof GraphQLTypeReference || typeMap.containsKey(type.getName())
identifierHelper().toIdentifier(resultSet.getString("TABLE_NAME"),tableName.isQuoted())
getBaseName()
/**   * Returns a child element node at given index.  */ public Element getChildElement(int index){   initChildElementNodes();   if ((index < 0) || (index >= childElementNodes.length)) {     return null;   }   return childElementNodes[index]; } 
portletDataContext.getBooleanParameter(NAMESPACE,"record-sets")
PsiUtil.isExpressionUsed(grAssignmentExpression)
SecurityUtils.isAuthorizationEnabled(configuration)
sto * 1000L
Sets.<Long>newHashSet()
new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),null)
ExoPlayerFactory.newSimpleInstance(renderersFactory,trackSelector,drmSessionManager)
out.writeFloat((Float)obj)
videoStream != null && videoStream.getDirection() != MediaDirection.INACTIVE
handleIncomingUser(Binder.getCallingPid(),Binder.getCallingUid(),userId,false,true,"startActivity",null)
getFragmentManager().beginTransaction().addToBackStack(null).replace(R.id.sidebar,about,ABOUT)
tessellator.tessellatePolygon(true,true,true)
timeout >= 0
new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.ROOT)
Options.DumpOnError.getValue(GLOBAL) || Options.Dump.getValue(GLOBAL) != null
objFactory.buildBean(name,null,true)
entry.getKey().get(4,String.class)
"0.0.0.0:" + DEFAULT_NM_COLLECTOR_SERVICE_PORT
BIG_ENDIAN=0x78563412
LAST_VERSION=709
component.setSelectedIndex(selected)
assertThat(captor.getValue()).containsExactly("joe@mydomain.eu","joe")
mState == STATE_STARTED || mState == STATE_STARTING
res.time >= 250
priorityWayEncoder.getBits()
list.get(3).dist=2276
/**   * 是否搜索模块类同包以及子包的其他类  */ boolean scanPackage() default true; 
((OverriderUsageInfo)usage).getOverridingMethod()
sAsyncChannel.sendMessage(CMD_STOP_PNO_SCAN,0,key)
powerFlowResponse == null || powerFlowResponse.getBody() == null || powerFlowResponse.getBody().getData() == null || powerFlowResponse.getBody().getData().getSite() == null
restEnableGzip=true
assertThat(result).extracting(WsUsers.GroupsWsResponse.Group::getName).containsOnly(groupName,"Members")
kryo.readObject(input,JobID.class)
response != null
!mResources.getConfiguration().isScreenRound() || mAttachInfo == null
(UnsubscribeForm)actionForm
Realm.getInstance(this,false)
orderUsingCustomerPayment || !cartHasTemporaryCreditCard
(a & 0xe0) == 0xc0
targetY - orginY
new MockNode(builder.build(),Version.CURRENT,Arrays.asList(ShieldPlugin.class,LicensePlugin.class))
Matchers.greaterThanOrEqualTo(1)
this.onGetInputStream()
checkRegister(sourceRegisterType,ReferenceCategories)
context != null && redirectUri == null
new Message(MESSAGE_TEXT)
createArtifactSpec("a","1.0")
status == BackupConstants.TRANSPORT_OK
assertLeftRightCategory(1,category2a)
JComponent component
scheme.equalsIgnoreCase("tel") || scheme.equalsIgnoreCase("sip") || scheme.equalsIgnoreCase("sms")|| scheme.equalsIgnoreCase("smsto")|| scheme.equalsIgnoreCase("mailto")|| scheme.equalsIgnoreCase("nfc")
return DISABLED; 
result.expectedMinimumMessageCount(1)
dlFileEntryType.getName(Locale.getDefault())
{newFilePath}
UpgradeStepRegistrator.class
new TrustException("ENCRYPTED_KEY_ERROR",e,LOG)
new GitException("Remote " + remoteName + " not found. ")
logger.debug("Cannot play queue ({})",e.getMessage())
new InMemorySessionManager("",1,true)
"top: new NRT point (version=" + version + ") is older than current (version="+ curVersion+ "); skipping"
IntrospectionSupport.getProperties(configuration,params,null,false)
new IOException("Mocked failed close!")
Log.debug(this + " JVM BUG(s) - injecting delay" + _jvmFix2+ " times")
pubnub.enablePushNotificationsOnChannel(channel,REG_ID,new Callback(){   @Override public void successCallback(  String channel,  Object message){     notifyUser("GCM ADD : " + message);   }   @Override public void errorCallback(  String channel,  PubnubError error){     notifyUser("GCM ADD : " + error);   } } )
new AccountCapsule(toAddress,AccountType.Normal)
new MediaDriverBroadcastReceiver(toClientReceiver)
engine.refresh("test")
IoUtil.delete(dataDir,true)
mRvc == null || !session.isActive()
nestedBuilder.types("FormSuccessPageSettings")
log.logError(BaseMessages.getString(PKG,"JobUnZip.ZipFile.NotExists.Label",realFilenameSource))
fpId == 0
margin >= visEndLinePosition.column
mDeviceOwner != null && mDeviceOwner.hasDeviceOwner()
OK(1)
false && ourXWindowIDEA94683FocusBug && isFocused()&& !myRequestFocus&& prevOwner != null
!thread.isOutgoing() || thread.isOutgoingCall()
70 * 1024 * 1024
enableOptimization.isSelected()
fetchParent.fetch("skuMedia",JoinType.LEFT)
ModelReference.of("serviceRegistry",ServiceRegistry.class)
DictionaryGenerator.buildDictionaryFromValueList(Collections2.transform(valueMap.get(tblColRef),new Function<String,byte[]>(){   @Nullable @Override public byte[] apply(  String input){     return input.getBytes();   } } ))
timeout=25000
SaveImageCmdImplTest.class
parent instanceof PsiParameterList || parent instanceof PsiParameter
newStart.isEmpty()
plugin.getWorldEdit().handleArmSwing(player)
overrideAllAssetTagNames != null
TcpDiscoveryNode node=rmtNodes.get(nodeId); 
r != null && r.isHomeActivity()
event.getEntity() instanceof Wither
Assert.assertEquals(new InetSocketAddress("RemoteMaster1",10000),masterAddress)
layerInput.size(0)
m_tagFactory.createTag(cls,a,annotationClass,m_transformer)
supportProvider.getPushDownHandler()
addView(root,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT))
a[right]
LOGICAL_TYPE_TIME_MILLIS.equals(logicalName)
new StringBundler(7)
!generatePack
lValue.getNominalType()
MessageQueueWeDeployPlugin.class
return requires; 
randomSize=true
peers.stopAndWait()
Integer.parseInt(patchVersionString)
checkResources(app,true)
uuid.getLeastSignificantBits()
GridTestUtils.waitForCondition(new GridAbsPredicate(){   @Override public boolean apply(){     return backupQueue(ignite(0)).isEmpty();   } } ,5000)
RESULT_TIMEOUT=5000
System.currentTimeMillis() / 1000L
new IllegalArgumentException("unable to find any unassigned shards to explain [" + request + "]")
new PartialEscapeAnalysisPhase(null,runtime(),assumptions,false)
public @Nullable DatabaseAttachment getAttachment(AttachmentId attachmentId){   SQLiteDatabase database=databaseHelper.getReadableDatabase();   Cursor cursor=null;   try {     cursor=database.query(TABLE_NAME,PROJECTION,PART_ID_WHERE,attachmentId.toStrings(),null,null,null);     if (cursor != null && cursor.moveToFirst())     return getAttachment(cursor);  else     return null;   }   finally {     if (cursor != null)     cursor.close();   } } 
revisionVersion=2
JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time",true)
this.getComponentCount()
new StackManager(stackRoot,commonServices,osFamily,false,metaInfoDao,actionMetadata,stackDao)
callbacks.onImageFailed()
basicInvocation.potentialResponse != null
super.notifyListenersAboutRemovedElement(element)
historicState(item,timestamp,serviceName)
lock.tryLock(2000,MILLISECONDS)
cfg.getMarshaller() != null && !(cfg.getMarshaller() instanceof BinaryMarshaller)
StackHelper.isMatchingItem(reqStk,invStk,true,true)
!version.equals(VERSION_1_4)
NETWORK_ACCESS_TIMEOUT_DEFAULT_MS=2000
registerForEvent(true,false)
mVibratorService.vibrate(null,2000,new Binder())
Color.fromRGB(0x6689D3)
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
mDarkIntensity != DARK_INTENSITY_NOT_SET
filteredMsgCount++ % 10000 == 0
logger.fine(String.format("writing packet %s",packet))
(strLine=br.readLine()) != null && !strLine.isEmpty()
JBUI.insets(1,2)
Math.min(maxReturned * 2,maxRows)
public DummyObject readFrom(Class<DummyObject> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> httpHeaders,InputStream entityStream) throws IOException, WebApplicationException {   throw new WebApplicationException(999); } 
HDR_TYPE_DATA=0x01
!entity.get(Keys.DISPLAY_NAME).orElse(Text.EMPTY).isEmpty()
!isEventIgnored(event) && !myChangeListManager.isIgnoredFile(event.getFile()) && (isDirectoryVersioningSupported() || !event.getFile().isDirectory())
tok[3]
namedScope != null && myTools != null
new SendReq(message.getPduHeaders(),body,message.getDatabaseMessageId(),message.getDatabaseMessageBox(),message.getSentTimestamp())
AppNewMsgAlarm.startAlarm(getActivity(),false)
jp.getNumberValue()
"Flow " + flowName + " cannot be found in project "+ projectName
assertLeftRightCategory(5,category2c)
jdk == null || !(jdk.getSdkType() instanceof IdeaJdk)
HighlightInfo.newHighlightInfo(type).range(refElement).descriptionAndTooltip(message)
assertLeftRightCategory(1,category1a)
!hiddenElements.contains(graphElement)
mProgressDialog != null && !isFinishing()
connection.pexpireAt(key,millisecondsTimestamp)
RELEASE_DELAY_MS=240
UpgradeStepRegistrator.class
StringBuilder stringBuffer=new StringBuilder(); 
AUTH_TYPE_NEGOTIATE.equals(this.authType)
Intent.ACTION_LOCALE_CHANGED.equals(action) || Intent.ACTION_TIMEZONE_CHANGED.equals(action)
current.compareTo(position) < 0
n >= 0 && n < count(coll)
logger.debug("Receive queue TAKE: Length={}",recvQueue.size())
UpgradeStepRegistrator.class
4 * Bytes.SIZEOF_LONG
addButton.setActionCommand(addCommand)
log.debug("mlocking " + file + " with length "+ length)
manyToOne.setLazy(true)
addInactiveSubscription(key,info,sub)
Mono<Void>
context.add("exceptionalMethod",123.0f)
new UDFArgumentTypeException(1,"The first and seconds arguments of function NLV should have the same type, " + "but they are different: \"" + arguments[0].getTypeName() + "\" and \""+ arguments[1].getTypeName()+ "\"")
mock2.expectedMinimumMessageCount(2)
maxPendingPersists <= 0
actualHeight > reqHeight
packer.packStructHeader(2,INIT.signature())
new int[100]
ConfigPropertyVetoException e1
new HumanReadableException(e,"%s: %s",target,e.getMessage())
caretPos.line == 0
b.getAtmosphereResources().contains(r)
selectedPos <= lastPos
Thread.interrupted()
oldStatus != null && oldStatus == status
LocalEjbReceiver.clone(resultCloner,exception)
requestData.setInitialText(element.getPropertyAsString(TCPSampler.REQUEST))
mService.getProfiles(UserHandle.myUserId(),true)
CollectionUtils.compareAsIterable(getParameters(),o.getParameters())
getMaxSheetTranslation()
new GameObjectQuery().idEquals(objectId)
java.util.concurrent.Executors.newFixedThreadPool(chPrepareThreads)
new SimpleCanalConnector(address,username,password,destination)
file.getFile()
LOG.info("Unsupported minification resource: " + filename)
Files.copy(zipFile.getInputStream(zipEntry),file.toPath(),StandardCopyOption.REPLACE_EXISTING)
expDate == null || ZonedDateTime.now(ZoneOffset.UTC).isAfter(expDate)
new GitMaterialConfig(new UrlArgument(git.getUrl()),gitBranch,null,git.isAutoUpdate(),filter,false,crScmMaterial.getDirectory(),toMaterialName(materialName),git.shallowClone())
sDefaults.putBoolean(KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL,false)
!"".equals(lib)
nodeInfo.getPlugins().getPluginInfos()
Log_OC.d(TAG,"Requesting sync for " + getAccount().name + " at "+ MainApp.getAuthority()+ " with new API")
configuration.addViewInterceptor(method,factory,InterceptorOrder.View.COMPONENT_DISPATCHER)
combined[i]
final Exception e
logger.warn("Field sorting failed, couldn't find table spec: " + model.getSimpleName())
queue.size() > 100000
text.setCompoundDrawablesRelativeWithIntrinsicBounds(item.icon,null,null,null)
location.sourceName()
hasColumn("MicroblogsEntry","receiverMicroblogsEntryId")
typeSettingsProperties.toSortedString()
data[0].charAt(1)
JwsSignatureProvider signer
addFileType("WEBP",FILE_TYPE_WEBP,"image/webp")
existingType != null || aggregatedEvents.size() < SHOW_INDIVIDUAL_CHANGES_LIMIT
paras.put(20L,10000L)
preloadQueue.size == 0 || tasks.size() == 0
Messages.MESSAGES.templateParameterNull(param)
logger.debug("Cannot remove group member ({})",e.getMessage())
/**   * Takes the blob of Kubernetes JSON (pod, replication controller, service, config, template etc) and applies it to the runtime environment so that any changes or new items take effect  */ String apply(String json) throws Exception ; 
showRecentApps(true,false)
amenity.getId() % 2 == 0
format == BarcodeFormat.UPC_E && rawText.length() == 8
dao.mergeWithFlush((WidgetLayoutEntity)anyObject())
LOG.debug("ZKShutdownHandler is not registered, so ZooKeeper server " + "won't take any action on ERROR or SHUTDOWN server state changes")
DISABLE=false
provider instanceof IpnbEditorProvider
glyph.get().setSize(sizeSlider.getValue())
SIZE_V1=17
result.getResult()
fileIds == null || fileIds.isEmpty()
@Override public Variable emitBitCount(Value value){   Variable result=newVariable(LIRKind.derive(value).changeType(Kind.Int));   if (value.getKind().getStackKind() == Kind.Int) {     append(new AMD64BitManipulationOp(IPOPCNT,result,asAllocatable(value)));   }  else {     append(new AMD64BitManipulationOp(LPOPCNT,result,asAllocatable(value)));   }   return result; } 
fluidStack != null && fluidStack.getFluid() != null
addTo(instant.getMillis(),scalar,instant.getChronology())
testLogger.info("Waiting for the whole blockchain sync (will take up to an hour on fast sync for the whole chain)...")
!mTextServicesManager.isSpellCheckerEnabled() || mTextServicesManager.getCurrentSpellCheckerSubtype(true) == null
factory.createType(clazz,factory.createRawSubstitutor(clazz),getLanguageLevel())
context.connectTimeout * 1000L
context.getBeanNamesForType(type,false,false)
UIUtil.getTreeSelectionBackground(hasFocus)
expression == null || primaryIndexes.size() > indexes.size()
LOG.debug("Defaulting JMX to HTTP protocol for  for clusterName = " + clusterName + ", componentName = "+ componentName+ componentName)
Nd4j.zeros(mb,inputLength)
logger.debug("{}: Blocks waiting to be proceed: lastBlock.number: [{}]",name,blocks.get(blocks.size() - 1).getNumber())
liveDocs == null || liveDocs.get(i)
ppiY / 2.54f
answer == null
offset(1000000.0)
src.getParent()
Arrays.asList("amzn.to","bit.ly","bitly.com","fb.me","goo.gl","is.gd","j.mp","lnkd.in","ow.ly","R.BEETAGG.COM","r.beetagg.com","SCN.BY","su.pr","t.co","tinyurl.com","tr.im")
mWidth=100
boolean store() default false; 
!result.startsWith(connectionFactory.getProtocol() + ":/")
NpcDumper dumper=new NpcDumper(cache,out,java); 
!StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"flush") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"grant") && !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"create user")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"drop user")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"create database")&& !StringUtils.startsWithIgnoreCase(StringUtils.trim(ddl),"drop database")
perfRule.assertDurationAround(duration,3600L)
new ModelNode().set(60000L)
backgroundTask == null
Slog.w(TAG,"APK " + fileName + " has unaligned native code "+ entry.getName())
id=19904
invalidate()
new IgniteDataStreamerProcessor(ctx)
assertEquals(5,databindings.size())
return long_TYPE; 
createHandlerResult(c,principalFactory.createPrincipal(principal.getId()))
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_FORCE_INGEST))
case REPEAT_INSTANCE: 
channel != null
PathUtils.concatPath(dst,child)
mWPAndroidGlueCode.setContent(postContent)
parameters.getFlashMode() == null && flashState
DefaultFileMetadata.missing()
components.symbolUsageValidator.validateCall(resolvedCall,descriptor,trace,expression)
sonarQubeIsUpWatcher.waitForLog(20,TimeUnit.SECONDS)
MAX_PRETTY_PRINTED_PROPERTIES=10
Integer.parseInt(optionsHelper.getOptionValue(OPTION_THRESHOLD_FOR_JOB))
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class QueueBasicDistributedTest extends QueueAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
mBluetoothService.sendConnectionStateChange(device,BluetoothProfile.HEALTH,newDeviceState,prevDeviceState)
reduceConfigWidthSize(sw,Surface.ROTATION_270,density,unrotDh,unrotDw)
queryNotifyLatch.await(1000,TimeUnit.MILLISECONDS)
fullJid.split("/",2)
InputLaunchResponse.class
mismatchedCompanyIdDLFileEntryMetadatas.size()
p3.isTerminated() == false || p3.getResult() == null
new ParameterSpec(valueName,array,false,Cardinality.ONE)
GitFileUtils.delete(myProject,root,files,"--ignore-unmatch","--cached")
new IllegalStateException("Wrong header information type: " + fieldsFromHeader)
telephony.getCdmaEriIconModeForSubscriber(subId,getOpPackageName())
setEnabledFunctions(null,true,false)
IndexSettingsModule.newIndexSettings(shardId.index(),Settings.EMPTY)
command <= 0x07
CythonLanguageDialect._isDisabledFor(node) || MakoLanguage._isDisabledFor(node)
getCutoffText(RECENTLY_PLAYED_CUTOFF,context)
file == null || !file.isInLocalFileSystem()
UserException.resourceError().message("Unable to acquire queue resources for query within timeout.  Timeout for %s queue was set at %d seconds.",queueName,queueTimeout / 1000)
new IllegalArgumentException("cannot set max pool size to a value less than the current max value(=" + i + ")")
child.getMeasuredWidth()
log.error("Multiple nodes are set, but execute() was called. This is most likely a bug and you meant to call executeOnAll()!",new Throwable())
COLORDRAWABLE_DIMENSION=2
getHandledPredicate()
oldValue == null
myDiscardedLengths[1]
currentPropertyJoinTableOverride != null
subMesh.firstByte.intValue() / 6
assertEquals("incorrect number of elements",20,nodeInfo.length())
LOG.error("Failed to shut down ActorSystem",t)
capturedWildcardType.getUpperBound(false)
new RequestCounter("tests.StatsTest.statsShowSpuriousValues",resetDurationMs,mockTime)
!withChildren || domElement == null
nextStatement instanceof PsiThrowStatement || isStatementNeededForInitializationOfVariable(statement,nextStatement)
id=10843
LOG.error("Failed to transit standby cluster to " + SyncReplicationState.DOWNGRADE_ACTIVE,e)
IBluetoothSap.class
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)
action.new ReroutePhase(null,request,listener)
Log_OC.e(TAG,"Unexpected intent " + intent.toString())
mDir.getDirIndex()
(dispatcherMapping & FORWARD) != 0
new LinkedFileViewModel(linkedFile,entry,databaseContext,dialogService,taskExecutor)
jniGetLocalAnchorB(addr,tmp)
GetterUtil.getString(serviceReference.getProperty("javax.portlet.info.keywords"))
Long chatId
return _this; 
dropdownItem.setHref(getPortletURL(),"navigation","public-pages")
waitUntil(() -> clusterManager.getNodes().size() == 2,60_000)
GrailsFactoriesLoader.loadFactoriesWithArguments(GrailsApplicationAttributes.class,getClass().getClassLoader(),servletContext)
module.getOwnExcludes()
convert31XToMeters(xB,xA)
EnumSet.of(DatabaseDriver.UNKNOWN,DatabaseDriver.ORACLE,DatabaseDriver.DB2,DatabaseDriver.DB2_AS400,DatabaseDriver.INFORMIX,DatabaseDriver.SAP,DatabaseDriver.TERADATA)
objectFile.createDefinedSymbol(heapSection.getName(),heapSection,0,0,false,false)
stmts == null || stmts.isEmpty()
addTrailingCells(true)
overlay.getTimestampFrom() <= sample.getTimestamp()
lineNumber=1
ConfigHelper.getClientTransportFactory(conf).openTransport(location,port)
toolchainInfo != null
oldestInflightEntry == null
new TestItem("example name")
clocks.uptime+=111
mapActivity.getSupportFragmentManager().beginTransaction().add(R.id.fragmentContainer,fragment,editor.getFragmentTag()).addToBackStack(null).commitAllowingStateLoss()
ExecutionStrategyParameters parameters
TypeScriptJqueryClientCodegen.class
sendKeyDown(keycode)
myKeepMethodsInOneLine.isSelected()
relations.replace(oldName,newTable) == null
mAztecImageLoader != null && isFinishing()
!isSuccess
"null".equals(value) || value == null
tgt.grantServiceTicket("ST1",service,new NeverExpiresExpirationPolicy(),true,false)
new AlertDialog.Builder(getActivity(),R.style.Theme_ownCloud_Dialog_NoButtonBarStyle)
connection.getParser().setListener(websocket)
filters={StringFilterAggregator.class}
bbbGW.userDisconnectedFromGlobalAudio(emm.voiceConf,emm.userid,emm.name)
@GwtIncompatible("ObjectInputStream") public void restoreState(InputStream inputStream) throws IOException {   try (final ObjectInputStream objectInputStream=new ObjectInputStream(inputStream)){     CompilerState compilerState=runInCompilerThread(new Callable<CompilerState>(){       @Override public CompilerState call() throws Exception {         return (CompilerState)objectInputStream.readObject();       }     } );     externs=compilerState.externs;     inputs=compilerState.inputs;     inputsById.clear();     inputsById.putAll(compilerState.inputsById);     typeRegistry=compilerState.typeRegistry;     externAndJsRoot=compilerState.externAndJsRoot;     externsRoot=compilerState.externsRoot;     jsRoot=compilerState.jsRoot;     mostRecentTypechecker=compilerState.mostRecentTypeChecker;     synthesizedExternsInput=compilerState.synthesizedExternsInput;     synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd;     injectedLibraries.clear();     injectedLibraries.putAll(compilerState.injectedLibraries);     lastInjectedLibrary=compilerState.lastInjectedLibrary;     globalRefMap=compilerState.globalRefMap;     symbolTable=compilerState.symbolTable;     hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences;     typeValidator=compilerState.typeValidator;     setLifeCycleStage(compilerState.lifeCycleStage);     externProperties=compilerState.externProperties;   }    initWarningsGuard(options.getWarningsGuard());   maybeSetTracker(); } 
createPlain().method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(FOO),MethodReturn.REFERENCE)).method(named(TO_STRING)).intercept(new Implementation.Simple(new TextConstant(BAR),MethodReturn.REFERENCE)).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded().getDeclaredConstructor()
Assert.assertEquals(catalogsJson.get(0).getProducts().size(),12)
1 << 23
UnderFileSystem.get(tmpFolder,ufsConf)
!getDatabaseTypeEnvironment().isEnabled() || !isExecuted()
StringIndexKey key
NONCONFORMING_LR_RULE(169,"rule <arg> is left recursive but doesn't conform to a pattern ANTLR can handle",ErrorSeverity.ERROR)
webResource.accept(MediaType.APPLICATION_OCTET_STREAM_TYPE).post(ClientResponse.class)
localPlayer.getWorldLocation().distanceTo(trapLocation) <= 2
Simple.forClass(type)
BufferUtil.zeroBuffer(1)
JSParameterTableModel.createParameterTypeCellFragment("",myProject,JavaScriptSupportLoader.ECMA_SCRIPT_L4)
listener.onTestIgnored(test)
(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())
world.setBlockState(pos,state,3)
ourSupportDifferentFileTypes=true
new HashCollisionNode(edit,hash,count,array)
dropdownItem.setHref(getPortletURL(),"navigation","private-pages")
Simple.forClass(skylarkType)
case MACOSX: 
verify(instrumentation,times(2)).isRedefineClassesSupported()
document.addNumber("size",dlFileEntry.getSize())
assertEquals(typeString,actual().toString())
previousTypeSettingsProperties.toString()
editor.apply()
adapter.item(R.string.layer_recordings).selected(SHOW_RECORDINGS.get() ? 1 : 0).icons(R.drawable.ic_action_audio_dark,R.drawable.ic_action_audio_light).listen(listener).position(12)
id=27
mSharedElements.size()
Tuple2.of(timeoutPattern4,12L)
Long.parseLong(id)
!myDisposed
replayPosition - stopPosition >= 0
UpgradeStepRegistrator.class
uncompressedProto.length < 2550000
id=10858
sortByName(false)
sendMessage(1500)
GitBlit.self().processCommitMessage(repositoryName,html)
!super.equals(obj)
UpgradeStepRegistrator.class
new GeoPoint(bottom,negRight)
MimeTypeUtil.isVideo(mFile)
new BaseAnalysisActionDialog(dialogTitle,"Analyze scope",myProject,analysisScope,name,true,analysisUIOptions,element)
id=30
DonateActivity.class
logger.debug("Line-in of {} is not connected",getUDN())
((t - 1) * t * t) / 2.0
Messages.getString("Spoon.Dialog.SaveChangedFile.Message",makeGraphTabName(transMeta))
equalTo(24)
(bytes[bytes.length - 1] & outputValueMask) == STATUS_SWITCHING_OFF
new SummariserRunningSample("DELTA")
wZipFilename.setText(dir)
PATH.getPath()
input.mark(bufferSize)
i < conCount
cfg.setIdentity(identity)
regSocial * trusterWeightValue * userFactorValue* userFactorValue
OverridingMethodsSearch.search(method,method.getUseScope(),true)
item.send(new DecimalType(BigDecimal.valueOf(convertFromCelsius(value))))
setAttributeInternal(tempInodePath,false,opTimeMs,options)
props.getProperty(PRINT_FIELD_NAMES_PROP,TRUE)
av1 != null
UserHandle.myUserId()
L.log(Level.WARNING,"Audio clip {0} uses an external .resS file that doesn't exist!",name)
synchronized (mLock) {   for (int i=0; i < mVolumes.size(); i++) {     final VolumeInfo vol=mVolumes.valueAt(i);     if (vol.isVisibleForRead(userId) && vol.isMountedReadable()) {       final StorageVolume userVol=vol.buildStorageVolume(mContext,userId,false);       mHandler.obtainMessage(H_VOLUME_BROADCAST,userVol).sendToTarget();       final String envState=VolumeInfo.getEnvironmentForState(vol.getState());       mCallbacks.notifyStorageStateChanged(userVol.getPath(),envState,envState);     }   }   mSystemUnlockedUsers=ArrayUtils.appendInt(mSystemUnlockedUsers,userId); } 
return _responseBuffers; 
getSSLContext().getSocketFactory().createSocket(arg0,arg1,arg2,true)
ItemAdapter<IItem>
a.getDimensionPixelSize(attr,DEFAULT_MIN_WIDTH)
pointF.y=1.0f
lastUid > 0
ZKMetadataProvider.getOfflineTableConfig(propertyStore,tableName)
mode.contains("advent") || mode.equalsIgnoreCase("2") || mode.equalsIgnoreCase("a")
Arrays.asList("android.hardware.audio@2.0::IDevicesFactory","android.hardware.bluetooth@1.0::IBluetoothHci","android.hardware.camera.provider@2.4::ICameraProvider","android.hardware.graphics.composer@2.1::IComposer","android.hardware.media.omx@1.0::IOmx","android.hardware.sensors@1.0::ISensors","android.hardware.vr@1.0::IVr")
ctx.getApplicationContext()
connectGatt(context,autoConnect,callback,transport,PHY_LE_1M_MASK)
cn == null || cn.length() == 0
dest.writeTypedArray(remoteInputs,flags)
new RagManager()
table.outerJoin(table,MockValueJoiner.TOSTRING_JOINER,(Materialized)null)
t.equalsIgnoreCase(type)
new IndexWriter(rd2,new SimpleAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
showSelectionToggleButton.setSelected(true)
methodExists(altName,fieldNode,false)
(dispatcherMapping & ASYNC) != 0
dataSource.setSoftMinEvictableIdleTimeMillis(Long.parseLong(getConnectionAge()))
LOG.error("Cannot get the live nodes: {}",e.getMessage())
stringMap.put(entry.getKey(),valueToString(joiner,entry.getValue()))
tearDownOnShutdown.setSelected(true)
Matrix.setIdentityM(outTemp,0)
new Handler(mMainHandler.getLooper()){   @Override public void handleMessage(  Message message){     final int type=message.what; switch (type) { case MSG_ON_GESTURE: {         final int gestureId=message.arg1;         notifyGestureInternal(gestureId);       }     break; default : {     final int eventType=type;     notifyAccessibilityEventInternal(eventType);   } break; } } } 
JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Case statements that contain yields")
varX("listener",vclClassNode)
doTestWithRuntime()
n > 0
new RaftMessages.HeartbeatResponse(state.myself())
client.get(path,MIMETYPE_PROTOBUF)
new LocalTachyonClusterResource(Constants.GB,Constants.KB,BLOCK_SIZE,Constants.KEYVALUE_ENABLED,"true")
LOGGER.warn("Could not execute exportToClipboard",ex)
new IndexWriter(dir,false,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
result < START_SUCCESS
mOpenStreetMapView.dispatchDraw(canvas)
count >= 2
Long4 v
JavaLibrary mavenCoord=new JavaLibraryBuilder(BuildTargetFactory.newInstance("//has:output"),filesystem,HashCode.fromString("aaaa")).setMavenCoords("com.example:buck:1.0").addDep(z.getBuildTarget()).build(graphBuilder); 
this.parseAsArray(url,"events")
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title2,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,null,serviceContext)
Log_OC.e(TAG,"Unhandled conflict decision " + decision)
id=10807
(status & 0x04000000) != 0
!method.getName().equals(methodToSearch) || !method.getReturnType().isAssignableFrom(methodToFind.getReturnType()) || method.getParameterTypes().length != pTypes.length
v.startDrag(clip,thumb,false)
FluentIterable.from(targetNodes).transformAndConcat(node -> AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,node,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class))).append(targetNode)
DEFAULT_EXPIRE_AT=80
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
ix > ixz
new StringPreference("map_overlay",null,false)
new PreDecorationFilter(routeLocator(),this.server.getServletPrefix(),new ZuulProperties(),new ProxyRequestHelper())
public Builder setProxyPort(int port){   this.proxyPort=port;   return this; } 
assertOpenEventually(countDownLatch,300)
new AnnotationTransactionAttributeSource(false)
myTempDir.getPath()
mDisplayContent.getSplitScreenPrimaryStackIgnoringVisibility()
writePermission.intern()
generateRandomStringArray(20,20,false,false)
Integer.parseInt(bottomStr)
mapActions.openOptionsMenuAsDrawer()
getPropertyAsString(PROXYSCHEME,HTTPHCAbstractImpl.PROXY_SCHEME)
new PackratActionDialogContents("",actions)
logger.warn("license [{}] - grace",license.uid())
height - 68
AsyncToSyncChannelServer.class
public Message sendLocation(SendLocation sendLocation) throws TelegramApiException {   if (sendLocation == null) {     throw new TelegramApiException("Parameter sendLocation can not be null");   }   return (File)sendApiMethod(sendLocation); } 
mCryptConnector.execute("cryptfs","createnewuserdir",userHandle,path)
JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY,true)
list.add(idx,v)
mFrameTransformation.printShortString(pw)
!pluginManager.isExecuted()
Optional.ofNullable(realmName)
mState.mPivotXRel != relative
request.getContextPath()
mapReader.containsPoiData()
view == null
Priority.getInstance()
getInstantiator().newInstance(DefaultDistribution.class,name,fileResolver)
id=10848
report(n,MISPLACED_ANNOTATION,"@abstract","only functions or methods can be abstract")
baseComparator.compare(itemStack1,itemStack2)
new WeekViewEvent(event.getId(),event.getName(),event.getLocation(),startTime,event.getEndTime())
UpgradeStepRegistrator.class
ScriptingCompilerConfigurationExtensionKt.configureScriptDefinitions(scriptTemplates,configuration,this.getClass().getClassLoader(),messageCollector,new HashMap<>())
AndroidExcludedRefs.createAppDefaults()
mInputConsumer == null && mStatusBar != null && canHideNavigationBar()
Response headers(Map<String,Property> headers); 
m.getConstructorOrMethod()
entityRenderMap.put(info.target,info.renderer)
restrictions != null && restrictions.length > 0
doTest(true)
fulfillmentAmount.compareTo(new BigDecimal(0D)) == 0 || band.getResultAmount().compareTo(fulfillmentAmount) <= 0
transactionalMap.set(key,value)
from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500)
position == -1 || position >= itemsList.size()
logger.info("Starting Jetty Azkaban Executor...")
!PlatformUtils.isIntelliJ()
inputRowMeta != null && !inputRowMeta.isEmpty()
new StringInputRowParser(new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(Arrays.asList("dim1","dim2"),null,null)),null,null,null,null)
new DecoderInfo("OMX.google.raw.decoder")
Bytes.toString(tableName)
queueIndex < 0 || queueIndex < sources.getSize()
(Relationship)container
(javaClass.getAccessFlags() & org.apache.tomcat.util.bcel.Const.ACC_ANNOTATION) != 0
public CapitalizationFilter create(TokenStream input){   return new CapitalizationFilter(input,this); } 
pair.getSecond() < best.getSecond()
new File(_dir,extraLibDirName)
transformation.getMoreData(opCode,fin,rsv,controlBufferBinary)
"Center loss is " + intraClassScore
_addTestVariant("small.hd","uuid1",101,100)
PsiFile parentScope=lambdaExpression.getContainingFile(); 
Assert.assertEquals("Recall outside target range",0.691,r,0.001)
result.expectedMinimumMessageCount(3)
StringBuilder log=new StringBuilder("The event isn't consumed, id:" + snapshot.getId() + " status:"+ snapshot.getStatus()+ " task-count:"+ taskList.size()); 
new IllegalArgumentException(String.format("A type named %s does not exist. Make sure it is a canonical reference.",element))
path.substring(7)
pm.queryIntentServices(new Intent(TvInputService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA,userId)
resource.getPath().contains("LanguageTool.uno.jar")
JarFile.class
e instanceof AuthException || e.getCause() != null && e.getCause() instanceof AuthException
!trans.isFinished() && !parentJob.isStopped() && trans.getErrors() == 0
getGravity(objectId,gravity)
getNonCompilablePath("InputPackageDeclarationDiffDirectoryAtSubpackage.java")
_buildTemplateWithGradle("content-targeting-rule","rule-dependency-management","--dependency-management-enabled")
Assertions.assertNotNull(mModules.get(moduleInterface),moduleInterface.getSimpleName())
mWriteOwners != null && includingOwners
testError("class Foo extends BaseFoo { constructor() { Foo.base(this); } }",BASE_CLASS_ERROR)
assertEquals(1,helper.getRelationshipIndexes().length)
new RFXComException("Send failed, reason: " + e.getMessage(),e)
chatCommandManager.registerCommandAsync(QP_COMMAND_STRING,this::questPointsLookup,this::questPointsSubmit)
new BooleanPreference("map_vector_data",false,false)
types != null && !types.isEmpty()
JBUI.Borders.emptyLeft(8)
capOpSet != null && contact != null
NB_CACHED_PARAMS=10
getTokenDisplayNames()
usage instanceof IfNode || usage instanceof FixedGuardNode || usage instanceof ShortCircuitOrNode|| usage instanceof GuardingPiNode|| usage instanceof ConditionAnchorNode
Iterator<Integer>
Build.VERSION.SDK_INT >= 16
p.attention(alarm.getType() + "")
provider.isInBound(itemName) && credentialsMatch(provider,itemName,oauthCredentials) && thermostats.containsKey(provider.getThermostatIdentifier(itemName))
typeConverter.convertTo(XMLStreamReader.class,exchange,createNonXmlFilterReader(exchange,stream))
myEditor.offsetToVisualPosition(endOffset,false,false)
left.getFieldName().equalsIgnoreCase(right.getFieldName())
LOGGER.warn("[{}] Caused by: [{}]",e.getMessage(),authnExceptions)
new SinglePeriodTimeline(durationUs,durationUs,0,0,!isLive,isLive)
cctx.events().addEvent(partition(),key,evtNodeId,null,updateVer,EVT_CACHE_OBJECT_REMOVED,null,false,evtOld,evtOld != null,subjId,null,taskName,keepBinary)
old != null
!c.isEncoded()
toRemove[1]
op == CALL
assertEquals(11,definitions.size())
public void setInitialWindowSize(long initialWindowSize) throws ConnectionException {   if (initialWindowSize > MAX_WINDOW_SIZE) {     throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",Long.toString(initialWindowSize),Long.toString(MAX_WINDOW_SIZE)),Http2Error.PROTOCOL_ERROR);   }   this.initialWindowSize=(int)initialWindowSize; } 
/**   * @param currentItem     the current item we check  * @param nextItem        the item comming after the current item  * @param currentPosition the current position of the currentItem  * @return the HeaderItem we want to add after the currentItem  */ HeaderItem group(Item currentItem,Item nextItem,int currentPosition); 
isDeprecated(constructor) || isInject(constructor)
UpgradeStepRegistrator.class
position < 0 || position >= list.size()
Assert.assertEquals(4,users.size())
new TreeScanner<Void,Void>(){   @Override public Void visitMethod(  MethodTree tree,  Void unused){     if (tree.getModifiers().getFlags().contains(Modifier.NATIVE)) {       hasAnyNativeMethods.set(true);     }     return null;   } } .scan(tree,null)
StatsLog.write(StatsLog.APP_CRASH_OCCURRED,Binder.getCallingUid(),eventType,processName,Binder.getCallingPid(),(r != null && r.info != null) ? r.info.packageName : "",(r != null && r.info != null) ? (r.info.isInstantApp() ? StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__TRUE : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__FALSE) : StatsLog.APP_CRASH_OCCURRED__IS_INSTANT_APP__UNAVAILABLE,r != null ? (r.isInterestingToUserLocked() ? StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__FOREGROUND : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__BACKGROUND) : StatsLog.APP_CRASH_OCCURRED__FOREGROUND_STATE__UNKNOWN)
parameter.name()
decoderMatch != null && decoderMatch.hasMatches()
new Dialog(this)
um.isUserUnlocked(user)
DefaultChannelFuture.setUseDeadLockChecker(true)
libraryBottomDivider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(itemView.getContext(),R.attr.about_libraries_dividerLight_openSource,R.color.about_libraries_dividerLight_openSource))
IgniteInternalFuture<Object>
new ServiceActivatorContextImpl(batchBuilder,serviceContainer)
assertEquals(4,dict.getSize())
mRecomputeLauncherService.shutdown()
usersStats.getMax()
conceptToValidate.getUuid()
builder.build()
myLayeredPane.getSize()
linesInput > meta.getRowLimit() && meta.getRowLimit() > 0
/**   * The resource.   */ private R mResource; 
this(host,port,threadName,queueSize,timeout,sendBufferSize,DEFAULT_BUFFER_SIZE); 
typeSerializer.getDeserializedType()
returnSecurityError || MessageUtils.isRequestor(message)
new RowIcon(2,RowIcon.Alignment.CENTER)
assertTrue(message.getPayload() instanceof Collection<?>)
/**   * Creates an exception indicating the transactional entity manager cannot be closed when it is managed by the container.  * @return an {@link IllegalStateException} for the error.  */ @Message(id=11424,value="Container managed entity manager can only be closed by the container " + "(auto-cleared at tx/invocation end and closed when owning component is closed.)") IllegalStateException cannotCloseTransactionContainerEntityManger(); 
outputFile.lastModified() <= grammarFile.lastModified()
/**   * Called to convert a AST node  * @param input is never null  * @return null if not possible/invalid  */ I parseLiteral(Object input); 
applyTemplates(resultTemplate)
random.nextInt(8)
note.getAlarm() != null && !note.isReminderFired()
aai == null
Thread.sleep(105)
blendColor(alphaFiller | dstPixels[x],srcPixels[x],mode)
Numeric.toHexStringWithPrefixSafe(filterId)
d.size(0)
_replaceTranslationCommand.execute(file.toPath())
super.updateItem(group)
matchIfMissing=false
setTargetBuildConfigurations(buildable,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),ImmutableMap.<String,String>of())
a.getInteger(R.styleable.WeekView_dayNameLength,mDayNameLength)
new QuickAdapter(PAGE_SIZE)
this.getId()
proto.getRootRelativePath()
GL20.glGetUniformfv(program,location,params)
theClass.getConstructor()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.kernel.enterprise.api.security.EnterpriseAuthManager> on EnterpriseProcedure#enterpriseAuthManager.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(39)
mBouncer.show(false,false)
ModuleReflectionUtils::isCheckstyleTreeWalkerCheck
pixmap.getHeight() - yHotspot - 1
super.onUpdate(stepLength)
new SqlQuery(Person.class,"salary >= ? and salary <= ?")
_buildProjects(gradleProjectDir,mavenProjectDir,gradleOutputDir,mavenOutputDir,_GRADLE_TASK_PATH_BUILD)
HDR_TYPE_SM=0x03
GenerateUtils.class
currentType != Type.INT
condition != null && PsiTreeUtil.isAncestor(condition,psiFile.findElementAt(offset),false)
Parser.htmlParser()
((SimpleHttpConnectionManager)manager).closeIdleConnections(0)
Class.forName(DEFAULT_IMPL,true,Thread.currentThread().getContextClassLoader())
new IngestInfo(Collections.emptyList())
_connector.getResponse("GET /foo HTTP/1.1\n\n")
getDelegate().getDefaultCipherSuites()
p2.isTerminated()
serialVersionUID=279799301
wZipFilename.getText()
!throwable.isPresent()
whitelist.addAttributes("img","align","alt","height","src","title","width")
mTestStream.getFlushedBytes()
StringBuilder resultPath=new StringBuilder(DefaultGroovyMethods.join(config.getClasspath(),File.pathSeparator)); 
!Iterables.isEmpty(batchServerInventoryView.getInventory()) && Iterables.get(batchServerInventoryView.getInventory(),0).getSegments().size() != testSegments.size()
ARM_LINUX_ANDROIDEABI("arm-linux-androideabi")
config.getName()
module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0
getLastChildElement(tabBar)
NonPersistentSiteThreadLocalCache cache=NonPersistentSiteThreadLocalCache.getSitesCache(); 
mGestureDetector != null && event.isTouchEvent()
param.setThrowable(new FileNotFoundException("XPrivacy"))
MimeTypes.TEXT_VTT.equals(hlsUrl.format.sampleMimeType) || lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION) || lastPathSegment.endsWith(VTT_FILE_EXTENSION)
new Rgb.TransferParameters(1 / 1.055,0.055 / 1.055,1 / 12.92,0.039,2.4)
mAdapter == null || mAdapter.getCount() == 0
zkDb.snapLog.getSnapDir()
!isExpired(timestamp)
WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS,60000)
@NotNull
new int[433194]
key.startsWith("jar:") || key.startsWith("file:")
"/html/portlet/" + jspPath + "/"+ formNavigatorSection+ ".jsp"
assertEquals(4,repos.length)
witnessCapsule.createReadableString()
!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled() || dataSet.getEntryCount() == 0
new SystemAudioActionFromAvr(this,message.getSource(),HdmiUtils.parseCommandParamSystemAudioStatus(message),null)
ImmutableList<String>
/**   * This is  {@link SurrogateRegisteredServiceAccessStrategy}.  * @author Misagh Moayyed  * @since 5.2.0  */ @Slf4j @Getter @Setter @EqualsAndHashCode(callSuper=true) public class SurrogateRegisteredServiceAccessStrategy extends BaseSurrogateRegisteredServiceAccessStrategy {   private static final long serialVersionUID=-1688944419711632962L;   private boolean surrogateEnabled;   private Map<String,Set<String>> surrogateRequiredAttributes=new HashMap<>();   @Override public boolean doPrincipalAttributesAllowServiceAccess(  final String principal,  final Map<String,Object> attributes){     if (isSurrogateAuthenticationSession(attributes)) {       if (!isSurrogateEnabled()) {         return false;       }       return doPrincipalAttributesAllowSurrogateServiceAccess(attributes);     }     return super.doPrincipalAttributesAllowServiceAccess(principal,attributes);   }   /**   * Do principal attributes allow surrogate service access?.  * @param principalAttributes the principal attributes  * @return the boolean  */   protected boolean doPrincipalAttributesAllowSurrogateServiceAccess(  final Map<String,Object> principalAttributes){     if (!enoughRequiredAttributesAvailableToProcess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. There are not enough attributes available to satisfy requirements");       return false;     }     if (!doRequiredAttributesAllowPrincipalAccess(principalAttributes,this.surrogateRequiredAttributes)) {       LOGGER.debug("Surrogate access is denied. The principal does not have the required attributes specified by this strategy");       return false;     }     return true;   } } 
ActivityOptions.makeBasic()
/**   * The location of the child within the map view.  */ public IGeoPoint geoPoint; 
new int[37370]
ArrayList<DocumentRange>
setProgressInternal((int)progress,true,false)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptionWhiteList)
mBlockRemovalService.shutdown()
UnsafeUtils.get8(_mem,8)
writeRepeatedBoolImpl(id,val)
public Builder setRealmPassword(String password){   realm().setPassword(password);   return this; } 
specWidthMode == MeasureSpec.EXACTLY || specWidthMode == MeasureSpec.AT_MOST
localAnchorB.set(joint.getLocalAnchorB().x,joint.getLocalAnchorB().y)
new UnsatisfiedLinkError(msg)
queryDefinition.getOrderByComparator("JournalArticle")
traceTag != 0 && Trace.isTagEnabled(traceTag)
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"gfxinfo",pw)
o == null || o.equals(JSONObject.NULL)
data.get(0).toUpperCase(Locale.ENGLISH)
sname.getParent().getSimpleName().substring(8)
new MidPartLongRange(mPos,endPos)
new IllegalStateException("No SHA implementation available!")
3 * 1000
Iterables.getLast(cluster.getNodes()).getStatus().setAvailable()
assertEquals(13,beanCount)
Foundation.log("[error] " + tag + ": "+ message)
JavaSdkImpl.getMockJdk17("java 1.5")
prevLen > 1
WorkflowTaskManagerUtil.searchCount(_workflowTaskRequestHelper.getCompanyId(),_workflowTaskRequestHelper.getUserId(),searchTerms.getName(),searchTerms.getKeywords(),searchTerms.getType(),null,null,null,false,true,searchTerms.isAndOperator())
DiagnosticFactory2<JetNamedDeclaration,CallableMemberDescriptor,DeclarationDescriptor>
entry.cacheContentViews(mContext,notification.getNotification())
myErrors.put(xmlName,error)
columnTypes[column] == INT || columnTypes[column] == CATEGORICAL
logger.fine("Strip code")
credentials.split(":",2)
sp.edit().putBoolean(PREF_USER_REFUSED_SIGN_IN,refused).apply()
newStarred=Boolean.parseBoolean(value)
Object url
WebUiResource.class
!asynchronous && mySynchronousRefreshCount == 0
public ShippingInfo mapLine(FieldSet fieldSet,int lineNum){   ShippingInfo info=new ShippingInfo();   info.setShipperId(fieldSet.readString(SHIPPER_ID_COLUMN));   info.setShippingTypeId(fieldSet.readString(SHIPPING_TYPE_ID_COLUMN));   info.setShippingInfo(fieldSet.readString(ADDITIONAL_SHIPPING_INFO_COLUMN));   return info; } 
ReferencesSearch.search(element,element.getUseScope(),false)
file.contains("http://") || file.contains("https://")
!Algorithms.isEmpty(ref)
databaseFile.getName()
!key.equals(OAuthConstants.SCOPE)
mTitleTextView != null && !contextText.equals("")
layoutRevision.getIconImageId()
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(statement).descriptionAndTooltip(message)
generateFluentSetters()
pushExecutor.execute(new NamedRunnable("OkHttp %s Push Reset[%s]",hostName,streamId){   @Override public void execute(){     pushObserver.onReset(streamId,errorCode); synchronized (SpdyConnection.this) {       currentPushRequests.remove(streamId);     }   } } )
mainSourceSet.getOutput()
user.getActualCompanyId()
HB_TRAIL_31372(5750)
flags.length == 1
(program.length() > 0) && program.charAt(program.length() - 1) != '\n'
REASSIGNMENT_IN_PROGRESS(60,"A partition reassignment is in progress",new ApiExceptionBuilder(){   @Override public ApiException build(  String message){     return new ReassignmentInProgressException(message);   } } )
new DrmInitData(DATA_1,DATA_UNIVERSAL)
primitiveType == GL10.GL_POINTS
level < RF_STATUS_LOW_SIGNAL
conditionCache.get(method)
Long.parseLong(delay)
DirectoryReader reader=IndexReader.open(directory); 
resultTabs.getItemCount() - 3
LOG.warn("Cannot access storage directory " + rootPath)
Math.min(MAX_ALPHA,mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR),MAX_ALPHA)
new ShardRouting(indexName,0,"_node_id",null,true,ShardRoutingState.STARTED,1)
new ModelNode().set(600000L)
new ConnectionException(sm.getString("upgradeHandler.stream.even",key),Http2Error.PROTOCOL_ERROR)
read != null
vindex > Short.MAX_VALUE
classMapper.serializedClass(wrap.testPlan.getClass())
irrCubeMap.getImage()
@Nullable private final P params; 
new CatchupServer(platformModule.logging.getInternalLogProvider(),platformModule.logging.getUserLogProvider(),localDatabase::storeId,platformModule.dependencies.provideDependency(TransactionIdStore.class),platformModule.dependencies.provideDependency(LogicalTransactionStore.class),localDatabase::dataSource,localDatabase::isAvailable,null,config,platformModule.monitors,new CheckpointerSupplier(platformModule.dependencies),fileSystem,pageCache)
close.assertNoSubscribers()
assertion.parseSubject(new WSSSAMLKeyInfoProcessor(requestData,new WSDocInfo(doc)),requestData.getSigVerCrypto(),requestData.getCallbackHandler())
Context.getVisitService().getAllVisitTypes()
logger.trace("MyQ binding received command '{}' for item '{}'",command,itemName)
items[29]
logger.warn("Niko Home Control: error sending message, trying to restart communication")
dependencyNode.getId().getSelected()
projectMeasures.get(1L)
task.addTransferFile(sstable,1,sstable.getPositionsForRanges(ranges))
TIMEOUT_ENABLE_ACCESSIBILITY_AND_MOCK_SERVICE=1000
Optional<ImmutableZkWorker>
new NTCredentials(username,auth.getPass(),LOCALHOST,domain)
new LinkedList<ReleaseStep>(attempted)
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.list_highlight_bg))
listener.iterationDone(cg,iterationCount,epochCount)
label != null
new ShardStats(shardRouting,new ShardPath(false,shardPath,shardPath,new ShardId(index,0)),shardCommonStats,null,null)
assertEquals("Invalid number of completion items",itemsNumber.intValue(),myItems.length)
workDir == null || workDir.length() == 0
getFinalRunnable() == null && myMore != null
infoAndPosition.substring(colIndex + COL_MARKER.length())
dir.listFiles(fileFilter)
assertEquals(1073741824,TileSystem.MapSize(23))
new SingleInetAddressDns()
children == null
ThresholdFailureDetector.class
super.visitAntDomElement(element)
ModalityState.stateForComponent(getRootPane())
mAppOpsService.noteOperation(AppOpsManager.OP_GET_USAGE_STATS,Process.myUid(),null)
ApplicationConfiguration.build(ElasticsearchStubConfiguration.class).run("--server.port=" + PORT,"--spring.database.url=jdbc:hsqldb:mem:acceptancetestdb")
new EnterSelectionDialog(shell,files,Messages.getString("XMLInputDialog.FilesReadSelection.DialogTitle"),Messages.getString("XMLInputDialog.FilesReadSelection.DialogMessage"))
processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))
width - 4
width <= 0
attrNameElement != null && attrNameElement.getInternedText() == charTableIndex
logger.trace("Return Object {} now at size {}",b,count.getAndDecrement())
asList(4L)
collection.add(300000000l)
iobj.getType() != null
IServiceManager.getService()
new OutputStreamWriter(clientStream,"utf-8")
new WorldPoint(3033,3308,0)
new ActFmServiceException(object.getString("message"),object)
Integer.parseInt(attrValue)
Preferences.getBoolean(key,false)
new BufferedInputStream(fi,50000)
AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,Optional.of(dependenciesCache),AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,ImmutableSet.of(AppleLibraryDescription.class,CxxLibraryDescription.class,HalideLibraryDescription.class))
SimpleBoolFunction other=(SimpleBoolFunction)o; 
JBSplitter pane=(JBSplitter)getComponent(0); 
context.getFlowScope().put(key,authorizationUrl)
ContextPathUtil.getContextPath(servletContext)
public EnglishPorterFilter create(TokenStream input){   return new EnglishPorterFilter(input,protectedWords); } 
artifact.replaceAll("(?<!solr-)analysis-","analyzers-")
new Ansi(false)
i < endValue
users.toArray(new String[users.size()])
Preconditions.checkState(n.isModuleBody() || scope.getParent() == null,"Expected %s to be a module body, or %s to be the global scope.",n,scope)
assertEquals(arr2,view.getBinaryByteArray(0,0))
XmlTag context
Assert.assertTrue(rule.appliesTo(builder.interval(new Interval("0500-01-01/2100-12-31")).build(),now))
new CompoundShelfFileProcessor(new StreamProvider[]{},PathManager.getConfigPath() + File.separator + "shelf")
log.warn("Unable to provision more workers. Current workerCount[%d] maximum workerCount[%d].",currValidWorkers,maxWorkerCount)
@Override @NotNull public ClassDescriptor getDeclarationDescriptor(){   return LazyClassDescriptor.this; } 
score > 1.001
@SuppressWarnings("unused")
mCoveredFadeColor != 0
Long.parseLong(stats.get("size").toString())
maxContentTextLength=40
id=10862
json.getTextValue().getBytes("ISO-8859-1")
new KBArticleTitleException("Missing title")
id=19906
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
ft.replace(R.id.layout_fragment_container,commentFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
addTexture(normal,"NormalMap",keyName)
totalHits.value > 0 && totalHits.relation != TotalHits.Relation.EQUAL_TO
avb.getData().rewind()
new StepMeta(selstepid,selstepname,(StepMetaInterface)svi)
subCursor.getString(COLUMN_ATTENDEE_IDENTITY)
a.lastIndexOf(':')
targets.getIntermediatePoints()
new IOException(msg)
stage.compareTo(currentStage) < 0
i <= n
assertEquals(1,resultList.size())
Integer.class
uniqueExpiryCallbackPresent
OZONE_SCM_HEARTBEAT_RPC_TIMEOUT_DEFAULT=1000
setAudioSystem(AUDIO_SYSTEM_PORTAUDIO,null,false)
lbHttpSolrServer.setAliveCheckInterval(1000)
ArrayIndexOutOfBoundsException.class
context.var("long",2)
logger.debug(throwable,() -> format("Failed to load java.lang.Class for path [%s] during classpath scanning.",classFile.toAbsolutePath()))
eachWnd == null || !eachWnd.isAvailable()
this.rep.getAttributes().remove(name)
JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("jps-plugin/testData/incremental/lookupTracker"),Pattern.compile("^([^\\.]+)$"),false)
assertEquals(1,map.size())
/**   * TitanTransaction defines a transactional context for a  {@link TitanGraph}. Since TitanGraph is a transactional graph database, all interactions with the graph are mitigated by a TitanTransaction. <p/> All vertex and edge retrievals are channeled by a graph transaction which bundles all such retrievals, creations and deletions into one transaction. A graph transaction is analogous to a <a href="http://en.wikipedia.org/wiki/Database_transaction">database transaction</a>. The isolation level and <a href="http://en.wikipedia.org/wiki/ACID">ACID support</a> are configured through the storage backend, meaning whatever level of isolation is supported by the storage backend is mirrored by a graph transaction. <p/> A graph transaction supports: <ul> <li>Creating vertices, properties and edges</li> <li>Creating types</li> <li>Index-based retrieval of vertices</li> <li>Querying edges and vertices</li> <li>Aborting and committing transaction</li> </ul>  * @author Matthias Br&ouml;cheler (http://www.matthiasb.com)  */ public interface TitanTransaction extends Transaction {   /**   * Creates a new vertex in the graph with the given vertex id and the given vertex label. Note, that an exception is thrown if the vertex id is not a valid Titan vertex id or if a vertex with the given id already exists. <p/> Custom id setting must be enabled via the configuration option  {@link org.janusgraph.graphdb.configuration.GraphDatabaseConfiguration#ALLOW_SETTING_VERTEX_ID}. <p/> Use  {@link org.janusgraph.core.util.TitanId#toVertexId(long)} to construct a valid Titan vertex id from a user id.  * @param id vertex id of the vertex to be created  * @param vertexLabel vertex label for this vertex - can be null if no vertex label should be set.  * @return New vertex  */   public TitanVertex addVertex(  Long id,  VertexLabel vertexLabel);   /**   * Retrieves the vertex for the specified id. This method is intended for internal use only. Use  {@link org.apache.tinkerpop.gremlin.structure.Graph#vertices(Object)} instead.  * @param id id of the vertex to retrieve  * @return vertex with the given id if it exists, else null  */   public TitanVertex getVertex(  long id);   public Iterable<TitanVertex> getVertices(  long... ids);   public Iterable<TitanEdge> getEdges(  RelationIdentifier... ids);   /**   * Commits and closes the transaction. <p/> Will attempt to persist all modifications which may result in exceptions in case of persistence failures or lock contention. <br /> The call releases data structures if possible. All element references (e.g. vertex objects) retrieved through this transaction are stale after the transaction closes and should no longer be used.  * @throws org.janusgraph.diskstorage.BackendException if an error arises during persistence  */   public void commit();   /**   * Aborts and closes the transaction. Will discard all modifications. <p/> The call releases data structures if possible. All element references (e.g. vertex objects) retrieved through this transaction are stale after the transaction closes and should no longer be used.  * @throws org.janusgraph.diskstorage.BackendException if an error arises when releasing the transaction handle  */   public void rollback();   /**   * Checks whether the transaction is still open.  * @return true, when the transaction is open, else false  */   public boolean isOpen();   /**   * Checks whether the transaction has been closed.  * @return true, if the transaction has been closed, else false  */   public boolean isClosed();   /**   * Checks whether any changes to the graph database have been made in this transaction. <p/> A modification may be an edge or vertex update, addition, or deletion.  * @return true, if the transaction contains updates, else false.  */   public boolean hasModifications(); } 
IndexReader.open(dir,false)
selenium.click("//li[4]/span/a/span")
new AtSet(COMMA,RPAR,COLON,ARROW,RBRACE,LBRACE)
Math.abs(a.d - b.d) < 2e-3
ConfigHelper.class
new ConfigOption<Boolean>(STORAGE_NS,"short-cf-names","Whether to automatically shorten the names of frequently used column families to preserve space",ConfigOption.Type.FIXED,true)
base - newZoom
String.format("DEF_SYSTEM_FONT_SIZE: %.2f",DEF_SYSTEM_FONT_SIZE)
createNextExchange(processor,nextExchange)
90
assertEquals(Locale.GERMANY,format1.getLocale())
assertEquals("val-2",mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE))
Optional<RemoteInterfaceType>
file(path).isFile()
mCard.getVisibility() != View.VISIBLE || (mSimpleCard != null && mSimpleCard.getVisibility() == View.VISIBLE)
filteredPods == null || filteredPods.isEmpty()
new ProtocolException(sm.getString("upgradeHandler.sendPrefaceFail"),ioe)
asyncContext.currentAsyncTraceObject()
StripedFileTestUtil.randomArray(dataBlocks,dataBlocks + parityBlocks,parityDNFailureNum)
new SolrException(500,"error parsing event listeners",e,false)
new ServerSparseIntRow(rowId,startCol,endCol,0)
getClientConnectionManager()
AssetTagFinderUtil.countByG_C_N(_scopeGroup.getParentGroupId(),classNameId,assetTagName)
origKey + 100
public KeyValueBinding getValueBinding(){   return attributeBinding; } 
new BuilderRemoteViews(mContext.getApplicationInfo(),tombstone ? getActionTombstoneLayoutResource() : getActionLayoutResource())
widthRatio > 0
Thread.sleep(500)
callback.onSuccess(patchText,context)
content.length() > 1
localLOGV || true
defaultShift >= Block.blocksList.length
PopulateAnalysisUuidOnMeasures::handle
payload.put(getClientVersion())
CopyOnWriteArrayList<EntryListener<?,?>>
Flux.from(this.messageService.publisherPostAuthorizeFindById(1L)).subscriberContext(withUser)
free(path,true)
NOTIFICATION_SERVICE_ID=5
addTest(18,18,0.0f)
found=false
new StringBundler(5)
_viewFinder.setTorchMode(this._torchMode)
Assert.assertEquals(transitions.size(),4)
ab.get1U()
event.prepare(new SimpleUri("engine:tabbingUI"),ButtonState.DOWN,0)
basicDLTest_Regression("./smalldata/logreg/prostate.csv","prostateRegressionMaxout.hex",new PrepData(){   @Override int prep(  Frame fr){     fr.remove("ID").remove();     return fr.find("AGE");   } } ,100,32.81408434266,DeepLearningParameters.Activation.Maxout)
mDragState == STATE_IDLE
new GridCacheQueryReadEvent<>(cctx.localNode(),"SQL query entry read.",EVT_CACHE_QUERY_OBJECT_READ,org.gridgain.grid.cache.query.GridCacheQueryType.SQL,cctx.namex(),qry.queryClassName(),qry.clause(),null,null,qryInfo.arguments(),qry.subjectId(),taskName,key,val,null,null)
new IndexWriter(this.__test_dir,new org.apache.lucene.analysis.standard.StandardAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
BlogsEntryLocalServiceUtil.addEntry(TestPropsValues.getUserId(),title1,StringPool.BLANK,StringPool.BLANK,"This is a blog entry for testing purposes",1,1,1965,0,0,true,true,null,null,null,serviceContext)
new ModelNode().set(240000L)
private final String myClassName; 
4 + _maxDDLCustomFieldCount * 4
FileUtil.findFirstThatExist(home + "/build.txt",home + "/Resources/build.txt",home + "/community/build.txt",home + "/ultimate/community/build.txt")
(GridDrStatus)in.readObject()
field.getValueClass().isInstance(value)
Map<Integer,HostedConnection>
(((Map<String,Object>)argsEl)).get("hit") instanceof Boolean
myParameterNameField.getFocusableComponent()
Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && getSupportActionBar() != null
logger.trace("myq securityToken: {}",securityToken)
new FtrlDelta(true,alpha)
GL20.glUniform2iv(location,toIntBuffer(v,offset,count << 1))
final AuditEventFormatter formatter=new AuditEventDefaultFormatter(); 
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope)
Log.w(TAG,"You are using a generic adapter. Pay attention: your adapter has to call cardArrayAdapter#getView method")
JMeterUtils.getPropDefault("proxy.number.requests",true)
FULFILLMENT_GROUP
GL20.glGetProgramiv(program,pname,params)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
AssertionError e
mService.setEnableAutoJoinWhenAssociated(enabled,mContext.getOpPackageName())
useQuartz=false
ctxLogger.info("Unsupported field type: {} for field: {}",dataType,fieldName)
LLVMMetadata m2
producer.send(expiredMessage,Message.DEFAULT_DELIVERY_MODE,Message.DEFAULT_PRIORITY,1000)
range.to <= getFirstLirInstructionId(block)
!mySpaceBetweenParentheses
Class<?>
saveLocalAttachmentTo(directory)
new LocalTachyonClusterResource(Constants.GB,BLOCK_SIZE,Constants.KEY_VALUE_ENABLED,"true",Constants.KEY_VALUE_PARTITION_SIZE_BYTES_MAX,Integer.toString(KEY_VALUE_PARTITION_SIZE))
!isInitialized || isClosed()
library.getName()
MAX_PORT_DEFAULT_VALUE=60000
Assert.assertEquals(container2,info.getContainerName())
@InputIntMethodAnnotation(value=43)
getLineCount(myDocument2)
availableAllocations[highIndex]
LOG.debug("Assigned container (" + allocated + ") "+ " to task "+ assigned.attemptID+ " on node "+ allocated.getNodeId().toString())
JavaSourceGroovyPackagesNonSecuritySuite.suite()
props.load(is)
!isIgnoreUriScheme()
new IndexWriter(dirs[i],new WhitespaceAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
RandomStringUtils.randomAlphanumeric(20)
outputArtifact != null && !isLtoIndexing
getTelecomService().endCall(mContext.getPackageName())
doubleValue != 0
LogUtils.initializeDefaultTestConsoleLogger()
new Config(null)
author.getIsChatModerator()
WeighingService.weigh(WEIGHER_KEY,elementComputable,new ProximityLocation(context,contextModule,processingContext))
new ArrayList<>(1)
page=DATABASE_TABLES_AND_USER
FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,amount / flow.capacity,1,min,max,fluidBuffer,sides)
textPromise.getState() == Promise.State.PENDING
new ProtoFile("foo.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
/**   * Sent bytes count.  */ private final LongAdder8 sentBytesCnt=new LongAdder8(); 
loadScriptByName(scriptName,groovyLoader)
checkResultByText("dependencies {\n" + "    <dependency>\n" + "      <groupId>group</groupId>\n"+ "      <version>1.0</version>\n"+ "      <scope>runtime</scope>\n"+ "    </dependency>\n"+ "}",true)
Preconditions.checkArgument(values.length == 2,"The value of a GeoPoint must be a double array with 2 items, not %s",values.length)
IllegalStateException.class
processInstanceArray.size() == 0 && StringUtils.isNotEmpty(callActivityBehavior.getProcessDefinitonKey())
prefs.getBoolean(PERSIST_SERVICE,false)
new LocationVariableResolver(_mockResourceManager,_mockSettingsLocatorHelper)
this.e != null && getActivity() != null
conf.getDouble("mult")
font.getName()
items[19]
connection.getFields(transMeta.environmentSubstitute(wBaseDN.getText()))
Throwable ignored
authHeader != null && authHeader.size() > 0
@JsonProperty("Index") private Long index=null; 
aClass != null && GroovyRunnerUtil.canBeRunByGroovy(aClass)
src.getMaxFileSize()
GL20.glUniformMatrix2fv(location,transpose,value)
MBeanInfoAssembler.class
addRegionStateToPut(putB,RegionState.State.CLOSED)
isArrayClass() || isInterface()
LowLevelSearchUtil.processElementsContainingWordInElement(adapted,psiRoot,searcher,true,progress)
Timber.e(e,"Failed to initialize local key store")
level < 0 || values.length == 0
CacheService.instance.keyCache.getInternal(key)
String.format(Locale.ROOT," [*]   An unknown role. Please check [%s] to see available roles",rolesFile.toAbsolutePath())
new CountDownLatch(7)
public static XQueryBuilder xquery(File file) throws IOException {   return xquery(IOConverter.toInputStream(file),ObjectHelper.getDefaultCharacterSet()); } 
Gdx.files.internal(fileName).pathWithoutExtension()
sentiment.getScore()
View.class
System.currentTimeMillis() - start > 500 && !ApplicationManager.getApplication().isUnitTestMode()
new LinearSectionConfig(SectionConfig.DEFAULT_GUTTER,SectionConfig.DEFAULT_GUTTER,SectionConfig.HEADER_INLINE,SectionConfig.FOOTER_STICKY)
TestShardRouting.newShardRouting(index,0,"_node_name",null,true,ShardRoutingState.STARTED)
model.addAttribute("cookie",cookieV)
commandExecutor.writeAsync(getName(),codec,RedisCommands.GEOADD,getName(),convert(longitude),convert(latitude),member)
ViewWebContentAssignedToMyRolesDueDateTest.class
row.setBackgroundDrawable(getResources().getDrawable(R.drawable.comment_pending_bg_selector))
SimpleAttributeBinding attributeBinding
cu.getAnnotationDeclarationByName("ClassPreamble").get().getJavadocComment()
bounds.getEndOffset() <= textRange.getStartOffset()
@Override public final DivideByOnConditionStep orNot(Condition c){   return or(c.not()); } 
startMediaTimeState == START_NOT_SET
assertEquals(19,commits.size())
DISMISS_MIN_DRAG_WIDTH_RATIO=.33f
stackIterator.remove()
isUpdateAvailable()
new LayerVisitor(region,minimumBlockY(region),maximumBlockY(region),ground)
final JavaCoverageSuite coverageSuite=(JavaCoverageSuite)CoverageDataManager.getInstance(myProject).getCurrentSuite(); 
ApplicationManager.getApplication().invokeLater(() -> {   final DartProblemsView problemsView=DartProblemsView.getInstance(myProject);   problemsView.clearNotifications(); } ,ModalityState.NON_MODAL,myProject.getDisposed())
!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())
Boolean.parseBoolean(params.get(name))
replaces="doIntrinsicReceiverCachedLLVMTruffleObjectCached"
new SslConnection(bufferPool,getExecutor(),endPoint,engine,true,true)
written.get()
152 + (USE_OLD_HISTORY ? 1000 : 0)
taskNames.contains(taskName) || taskNames.contains(project.getPath() + ":" + taskName)
Arrays.asList("ErrorResponse","Response","Int","Int32","Int64","Int64","Float","Double","Bool","Void","String","Character","AnyObject","Any","Error","URL","class","Class","break","as","associativity","deinit","case","dynamicType","convenience","enum","continue","false","dynamic","extension","default","is","didSet","func","do","nil","final","import","else","self","get","init","fallthrough","Self","infix","internal","for","super","inout","let","if","true","lazy","operator","in","COLUMN","left","private","return","FILE","mutating","protocol","switch","FUNCTION","none","public","where","LINE","nonmutating","static","while","optional","struct","override","subscript","postfix","typealias","precedence","var","prefix","Protocol","required","right","set","Type","unowned","weak","Data")
logPageUrl != null && logPageUrl.length() > 0
getSongProgressMillis() > 5000
TokenSet.create(INTEGER_LITERAL,LONG_LITERAL,FLOAT_LITERAL,CHARACTER_LITERAL,STRING_LITERAL,RAW_STRING_LITERAL,NAMESPACE_KEYWORD,AS_KEYWORD,TYPE_KEYWORD,CLASS_KEYWORD,THIS_KEYWORD,VAL_KEYWORD,VAR_KEYWORD,FUN_KEYWORD,EXTENSION_KEYWORD,FOR_KEYWORD,NULL_KEYWORD,TYPEOF_KEYWORD,NEW_KEYWORD,TRUE_KEYWORD,FALSE_KEYWORD,IS_KEYWORD,THROW_KEYWORD,RETURN_KEYWORD,BREAK_KEYWORD,CONTINUE_KEYWORD,OBJECT_KEYWORD,IF_KEYWORD,TRY_KEYWORD,ELSE_KEYWORD,WHILE_KEYWORD,DO_KEYWORD,MATCH_KEYWORD,RBRACKET,RBRACE,RPAR,PLUSPLUS,MINUSMINUS,MUL,PLUS,MINUS,EXCL,DIV,PERC,LTEQ,EQEQEQ,ARROW,DOUBLE_ARROW,EXCLEQEQEQ,EQEQ,EXCLEQ,ANDAND,OROR,SAFE_ACCESS,ELVIS,QUEST,SEMICOLON,RANGE,EQ,MULTEQ,DIVEQ,PERCEQ,PLUSEQ,MINUSEQ,NOT_IN,NOT_IS,HASH,COLON)
logger.trace("{} recovery [phase2] to {}: start took [{}]",request.shardId(),request.targetNode(),stopWatch.totalTime())
requireContext()
new ReactTextUpdate(getText(),mJsEventCount,false,getPadding(),Float.NaN,UNSET)
invoiceChecker.checkInvoice(account.getId(),4,callContext,new ExpectedInvoiceItemCheck(new LocalDate(2012,5,31),new LocalDate(2012,6,30),InvoiceItemType.RECURRING,new BigDecimal("249.95")),new ExpectedInvoiceItemCheck(new LocalDate(2012,7,31),new LocalDate(2012,8,31),InvoiceItemType.RECURRING,new BigDecimal("249.95")))
allOf(withId(R.id.fab_expand_menu_button),withParent(withId(R.id.fab)))
new IllegalStateException("Property existence constraints can only be used on Neo4j enterprise")
new NotificationCompat.Builder(context,Manager.CHANNEL_ID).setDefaults(options.getDefaults()).setExtras(extras).setOnlyAlertOnce(false)
order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT) || order.type.equals(org.knowm.xchange.binance.dto.trade.OrderType.LIMIT_MAKER)
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
new EntryContentException("Blogs entry content must be a non null string")
mBarChart.addTiming(section,2,parseResult.runDuration / 1000f)
lookup.getControllerServiceByType(requestControllerService.getType())
INACCESSIBLEMEM_OR_ARGMEMONLY
callNode.call(getCallTarget(function),packArguments(frame,function,arguments,cachedLength))
maxLength > 0 && maxLength < Integer.MAX_VALUE
destination.length - offset
navigationList[index]
myBeforeFile.getName()
sampleQueues[track]
log.warn("Error parsing command line: " + e.getMessage())
evaluate("pkg = package_name()").moduleLookup("pkg")
ImmutableList.copyOf(listeners)
stateAfter() == null || stateAfter().bci == FrameState.AFTER_BCI
new Person("bob")
diff.add('-' + item)
policy != null && policy.hasCycle()
LOGGER.debug("Registering handler [{}] with no principal resolver into the execution plan",handler.getName())
attachment.getDataUri() == null || attachment.getSize() == 0
getStorage().getCodeHash(codeAddress)
server0.getStoreRepository().getStorageEngine(storeName)
new JavaRecursiveElementWalkingVisitor(){   @Override public void visitReferenceElement(  PsiJavaCodeReferenceElement reference){     super.visitReferenceElement(reference);     final PsiElement resolved=reference.resolve();     if (resolved != null && !reported.contains(resolved) && !CommonRefactoringUtil.isAncestor(resolved,scopes) && !(resolved instanceof LightElement) && !haveElementInScope(resolved)) {       if (resolved instanceof PsiMethod) {         for (        PsiMethod superMethod : ((PsiMethod)resolved).findDeepestSuperMethods()) {           if (haveElementInScope(superMethod))           return;         }       }       final String scopeDescription=RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(reference),true);       final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.in.module.2",RefactoringUIUtil.getDescription(resolved,true),scopeDescription,CommonRefactoringUtil.htmlEmphasize(targetModule.getName()));       conflicts.putValue(reference,CommonRefactoringUtil.capitalize(message));       reported.add(resolved);     }   }   private boolean haveElementInScope(  PsiElement resolved){     if (PsiSearchScopeUtil.isInScope(resolveScope,resolved)) {       return true;     }     if (!resolved.getManager().isInProject(resolved)) {       if (resolved instanceof PsiMember) {         final PsiClass containingClass=((PsiMember)resolved).getContainingClass();         if (containingClass != null) {           final String fqn=containingClass.getQualifiedName();           if (fqn != null) {             final PsiClass classFromTarget=JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope);             if (classFromTarget != null) {               if (resolved instanceof PsiMethod) {                 return classFromTarget.findMethodsBySignature((PsiMethod)resolved,true).length > 0;               }               if (resolved instanceof PsiField) {                 return classFromTarget.findFieldByName(((PsiField)resolved).getName(),false) != null;               }               if (resolved instanceof PsiClass) {                 return classFromTarget.findInnerClassByName(((PsiClass)resolved).getName(),false) != null;               }             }           }         }       }       if (resolved instanceof PsiClass) {         final String fqn=((PsiClass)resolved).getQualifiedName();         return fqn != null && JavaPsiFacade.getInstance(project).findClass(fqn,resolveScope) != null;       }     }     return false;   } } 
isListViewFling() || !isVisible()
"A task is in the ABORTED state but stage is " + currentState
encoder.writeNullableString(event.getMessage())
Assert.assertThat(client.dump() + System.lineSeparator() + remotePorts.toString(),expected,Matchers.equalTo(candidate))
mFlexItemInEdit.setAlignSelf(AlignItems.STRETCH)
Set<Id>
series.Index.toPlainString()
assertThat(getField(graphite,"port")).isEqualTo(2003)
this.connectTo(vertex,channelType,compressionLevel,-1,-1,DistributionPattern.BIPARTITE,true)
assertEquals(attrs.size(),7)
new V(28,new BooleanSetting(true))
@SqlQuery
UpgradeStepRegistrator.class
typeInfo.keySet()
TX_TIMEOUT=200
CompilerDirectives.inCompiledCode() || forceNulling
final LongAdder8 execCnt=new LongAdder8(); 
mSecondView.setVisibility(View.GONE)
ServiceProxyFactory.newServiceTrackedInstance(PortalCapabilityLocator.class,TemporaryFileEntryRepositoryDefiner.class,"_portalCapabilityLocator",false,true)
log.info("Error registering servlet with jmx " + this,ex)
isInsert
TEST_UTIL.waitUntilAllRegionsAssigned(tableName)
type.equalsIgnoreCase("integer") || type.equalsIgnoreCase("int")
"Cannot find hibernate configuration file in CLASSPATH: " + HIBERNATE_CFG
Exporter::getName
new RuntimeException("Missing required attribute: " + attributeName)
LOGGER.warn("Could not open external file",ex)
@RunWith(HazelcastSerialClassRunner.class) @Category(QuickTest.class) public class ReplicatedMapTest extends ReplicatedMapAbstractTest {   @Test public void testEmptyMapIsEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     assertTrue("map should be empty",map.isEmpty());   }   @Test public void testNonEmptyMapIsNotEmpty() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1);     assertFalse("map should not be empty",map.isEmpty());   }   @Test(expected=IllegalArgumentException.class) public void testNegativeTtlThrowsException() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     map.put(1,1,-1,TimeUnit.DAYS);   }   @Test public void testAddObject() throws Exception {     testAdd(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddBinary() throws Exception {     testAdd(buildConfig(InMemoryFormat.BINARY));   }   private void testAdd(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testPutAllObject() throws Exception {     testPutAll(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testPutAllBinary() throws Exception {     testPutAll(buildConfig(InMemoryFormat.BINARY));   }   private void testPutAll(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final Map<String,String> mapTest=new HashMap<String,String>();     for (    String key : keys) {       mapTest.put(key,"bar");     }     map1.putAll(mapTest);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );   }   @Test public void testClearObject() throws Exception {     testClear(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testClearBinary() throws Exception {     testClear(buildConfig(InMemoryFormat.BINARY));   }   private void testClear(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     map1.clear();     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(0,map1.size());         assertEquals(0,map2.size());       }     } );   }   @Test public void testAddTtlObject() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddTtlBinary() throws Exception {     testAddTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testAddTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertNotEquals(0,record.getTtlMillis());         }       }     } );   }   @Test public void testUpdateObject() throws Exception {     testUpdate(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateBinary() throws Exception {     testUpdate(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdate(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           assertEquals("bar2",map2.get(key));         }       }     } );   }   @Test public void testUpdateTtlObject() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testUpdateTtlBinary() throws Exception {     testUpdateTtl(buildConfig(InMemoryFormat.BINARY));   }   private void testUpdateTtl(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.put(key,"bar2",10,TimeUnit.MINUTES);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map1.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map1,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar2",map2.get(key));           ReplicatedRecord<String,String> record=getReplicatedRecord(map2,key);           assertNotNull(record);           assertTrue(record.getTtlMillis() > 0);         }       }     } );   }   @Test public void testRemoveObject() throws Exception {     testRemove(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testRemoveBinary() throws Exception {     testRemove(buildConfig(InMemoryFormat.BINARY));   }   @Test public void testContainsKey_returnsFalse_onRemovedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsFalse_onNonexistentKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsKey(1));   }   @Test public void testContainsKey_returnsTrue_onExistingKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     assertTrue(map.containsKey(1));   }   @Test public void testKeySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Integer> keys=new HashSet<Integer>(map.keySet());         assertFalse(keys.contains(1));       }     } ,20);   }   @Test public void testEntrySet_notIncludes_removedKeys() throws Exception {     HazelcastInstance node=createHazelcastInstance();     final ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.put(2,Integer.MIN_VALUE);     map.remove(1);     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         Set<Entry<Integer,Integer>> entries=map.entrySet();         for (        Entry<Integer,Integer> entry : entries) {           if (entry.getKey().equals(1)) {             fail(String.format("We do not expect an entry which's key equals to %d in entry set",1));           }         }       }     } ,20);   }   private void testRemove(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertEquals("bar",map1.get(key));           assertEquals("bar",map2.get(key));         }       }     } );     for (    String key : keys) {       map2.remove(key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertFalse(map1.containsKey(key));           assertFalse(map2.containsKey(key));         }       }     } );   }   @Test public void testSizeObject() throws Exception {     testSize(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testSizeBinary() throws Exception {     testSize(buildConfig(InMemoryFormat.BINARY));   }   private void testSize(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     final SimpleEntry<String,String>[] testValues=buildTestValues(keys);     int half=testValues.length / 2;     for (int i=0; i < testValues.length; i++) {       final ReplicatedMap<String,String> map=i < half ? map1 : map2;       final SimpleEntry<String,String> entry=testValues[i];       map.put(entry.getKey(),entry.getValue());     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys.size(),map1.size());         assertEquals(keys.size(),map2.size());       }     } );   }   @Test public void testContainsKeyObject() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsKeyBinary() throws Exception {     testContainsKey(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsKey(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     for (    String key : keys) {       map1.put(key,"bar");     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsKey(key));           assertTrue(map2.containsKey(key));         }       }     } );   }   @Test public void testContainsValue_returnsFalse_onNonexistentValue() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     assertFalse(map.containsValue(1));   }   @Test public void testContainsValueObject() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testContainsValueBinary() throws Exception {     testContainsValue(buildConfig(InMemoryFormat.BINARY));   }   private void testContainsValue(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         for (        String key : keys) {           assertTrue(map1.containsValue(key));           assertTrue(map2.containsValue(key));         }       }     } );   }   @Test public void testValuesWithComparator() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance=nodeFactory.newHazelcastInstance();     ReplicatedMap<Integer,Integer> map=instance.getReplicatedMap(randomName());     for (int i=0; i < 100; i++) {       map.put(i,i);     }     Collection<Integer> values=map.values(new DescendingComparator());     int v=100;     for (    Integer value : values) {       assertEquals(--v,(int)value);     }   }   @Test public void testValuesObject() throws Exception {     testValues(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testValuesBinary() throws Exception {     testValues(buildConfig(InMemoryFormat.BINARY));   }   private void testValues(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.values()));         assertEquals(keys,new HashSet<String>(map2.values()));       }     } );   }   @Test public void testKeySetObject() throws Exception {     testKeySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testKeySetBinary() throws Exception {     testKeySet(buildConfig(InMemoryFormat.BINARY));   }   private void testKeySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         assertEquals(keys,new HashSet<String>(map1.keySet()));         assertEquals(keys,new HashSet<String>(map2.keySet()));       }     } );   }   @Test public void testEntrySetObject() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEntrySetBinary() throws Exception {     testEntrySet(buildConfig(InMemoryFormat.BINARY));   }   private void testEntrySet(  Config config) throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     int half=keys.size() / 2, i=0;     for (    String key : keys) {       final ReplicatedMap<String,String> map=i++ < half ? map1 : map2;       map.put(key,key);     }     assertTrueEventually(new AssertTask(){       @Override public void run() throws Exception {         List<Entry<String,String>> entrySet1=new ArrayList<Entry<String,String>>(map1.entrySet());         List<Entry<String,String>> entrySet2=new ArrayList<Entry<String,String>>(map2.entrySet());         assertEquals(keys.size(),entrySet1.size());         assertEquals(keys.size(),entrySet2.size());         for (        Entry<String,String> e : entrySet1) {           assertTrue(keys.contains(e.getKey()));         }         for (        Entry<String,String> e : entrySet2) {           assertTrue(keys.contains(e.getKey()));         }       }     } );   }   @Test public void testAddListenerObject() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testAddListenerBinary() throws Exception {     testAddEntryListener(buildConfig(InMemoryFormat.BINARY));   }   private void testAddEntryListener(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(1,0);     map2.addEntryListener(listener,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar");     }     assertOpenEventually(listener.addLatch);   }   @Test public void testEvictionObject() throws Exception {     testEviction(buildConfig(InMemoryFormat.OBJECT));   }   @Test public void testEvictionBinary() throws Exception {     testEviction(buildConfig(InMemoryFormat.BINARY));   }   private void testEviction(  Config config) throws TimeoutException {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(2);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance(config);     HazelcastInstance instance2=nodeFactory.newHazelcastInstance(config);     final ReplicatedMap<String,String> map1=instance1.getReplicatedMap("default");     final ReplicatedMap<String,String> map2=instance2.getReplicatedMap("default");     final int partitionCount=getPartitionService(instance1).getPartitionCount();     final Set<String> keys=generateRandomKeys(instance1,partitionCount);     SimpleEntryListener listener=new SimpleEntryListener(0,100);     map2.addEntryListener(listener);     SimpleEntryListener listenerKey=new SimpleEntryListener(0,1);     map1.addEntryListener(listenerKey,keys.iterator().next());     for (    String key : keys) {       map1.put(key,"bar",3,TimeUnit.SECONDS);     }     assertOpenEventually(listener.evictLatch);     assertOpenEventually(listenerKey.evictLatch);   } private class SimpleEntryListener extends EntryAdapter<String,String> {     CountDownLatch addLatch;     CountDownLatch evictLatch;     SimpleEntryListener(    int addCount,    int evictCount){       addLatch=new CountDownLatch(addCount);       evictLatch=new CountDownLatch(evictCount);     }     @Override public void entryAdded(    EntryEvent event){       addLatch.countDown();     }     @Override public void entryEvicted(    EntryEvent event){       evictLatch.countDown();     }   }   @Test(expected=IllegalArgumentException.class) public void putNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.put(null,1);   }   @Test(expected=IllegalArgumentException.class) public void removeNullKey() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.remove(null);   }   @Test public void removeEmptyListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     assertFalse(map1.removeEntryListener("2"));   }   @Test(expected=IllegalArgumentException.class) public void removeNullListener() throws Exception {     TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory(1);     HazelcastInstance instance1=nodeFactory.newHazelcastInstance();     ReplicatedMap<Object,Object> map1=instance1.getReplicatedMap("default");     map1.removeEntryListener(null);   }   @Test public void testSizeAfterRemove() throws Exception {     HazelcastInstance node=createHazelcastInstance();     ReplicatedMap<Integer,Integer> map=node.getReplicatedMap("default");     map.put(1,Integer.MAX_VALUE);     map.remove(1);     assertTrue(map.size() == 0);   }   @Test public void testDestroy() throws Exception {     HazelcastInstance instance=createHazelcastInstance();     ReplicatedMap<Object,Object> replicatedMap=instance.getReplicatedMap(randomName());     replicatedMap.put(1,1);     replicatedMap.destroy();     Collection<DistributedObject> objects=instance.getDistributedObjects();     assertEquals(0,objects.size());   } class DescendingComparator implements Comparator<Integer> {     @Override public int compare(    Integer o1,    Integer o2){       return o1 == o2 ? 0 : o1 > o2 ? -1 : 1;     }   } } 
ks.newKieClasspathContainer()
data == null || data.isEmpty()
s.setAutoCommitDelay(10)
t != globalType && t != Type.INT
getParent() == null || startActionMode(callback) == null
TokenSet.create(BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
new Interval(2,6,3)
!ON_TOP
GL20.glUniform3fv(location,toFloatBuffer(v,offset,count * 3))
MonitoringPortlet.setMonitoringPortletEventRequest(monitoringPortletEventRequest)
countNewlines(fragment) + 2
testLogger.info("[v] Secure sync completed")
messenger.signUpObsolete(name,null,false)
c.getName()
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
urlStr.startsWith("file:") || urlStr.startsWith("jndi:") || urlStr.startsWith("http:")|| urlStr.startsWith("https:")
assertRuntimeProductionSearchScope("m1",getProjectPath() + "/m1/src/main/java",getProjectPath() + "/m2/src/main/java",getRepositoryPath() + "/junit/junit/4.0/junit-4.0.jar")
{0x67720400,0x6e6c6c68,0x62650400,0x667204b5,0x6d630400,0x61640400,0x657304a4,0x68750400,0x62610400,0x68720400,0x72730400,0x697404d6,0x766104d6,0x726f0400,0x63680502,0x637a6cc1,0x736b0400,0x61746ce2,0x67626c93,0x67626c93,0x646b0400,0x73650400,0x6e6f0400,0x66690400,0x6c740400,0x6c760400,0x65650400,0x72750400,0x75610400,0x62790400,0x6d640400,0x706c04f0,0x64656c72,0x67690400,0x70740400,0x6c750400,0x69650483,0x69730400,0x616c0400,0x6d740400,0x63790400,0x67650400,0x616d0400,0x62670400,0x74720400,0x666f0400,0x67650400,0x676c0400,0x736d0400,0x736c0400,0x6d6b0400,0x6c690400,0x6d650400,0x63615e00,0x706d0400,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x75735e03,0x70720400,0x76690400,0x6d780600,0x6a6d0600,0x67700400,0x62620600,0x61670600,0x6b790600,0x76670600,0x626d0400,0x67640400,0x6d730400,0x6b6e0400,0x6c630400,0x76630400,0x6e6c0400,0x61770400,0x62730400,0x61690600,0x646d0400,0x63750400,0x646f0400,0x68740400,0x74740400,0x74630400,0x617a0400,0x6b7a0400,0x62740400,0x696e0400,0x696e0400,0x706b0400,0x61660400,0x6c6b0400,0x6d6d0400,0x6c620400,0x6a6f0400,0x73790400,0x69710400,0x6b770400,0x73610400,0x79650400,0x6f6d0400,0x70730400,0x61650400,0x696c0400,0x62680400,0x71610400,0x6d6e0400,0x6e700400,0x61650400,0x61650400,0x69720400,0x757a0400,0x746a0400,0x6b670400,0x746d0400,0x6a707447,0x6a707447,0x6b720400,0x766e0400,0x686b0400,0x6d6f0400,0x6b680400,0x6c610400,0x636e6c29,0x636e6c29,0x74770400,0x6b700400,0x62640400,0x6d760400,0x6d790400,0x61755c53,0x69640400,0x746c0400,0x70680400,0x74680400,0x73675c33,0x626e0400,0x6e7a0513,0x6d700400,0x67750400,0x6e720400,0x70670400,0x746f0400,0x73620400,0x76750400,0x666a0400,0x77660400,0x61730400,0x6b690400,0x6e630400,0x70660400,0x636b0400,0x77730400,0x666d0400,0x6d680400,0x70770400,0x65670400,0x647a0400,0x6d610400,0x746e0400,0x6c790400,0x676d0400,0x736e0400,0x6d720400,0x6d6c0400,0x676e0400,0x63690400,0x62660400,0x6e650400,0x74670400,0x626a0400,0x6d750400,0x6c720400,0x736c0400,0x67680400,0x6e670400,0x74640400,0x63660400,0x636d0400,0x63760400,0x73740400,0x67710400,0x67610400,0x63670400,0x63670400,0x616f0400,0x67770400,0x73630400,0x73640400,0x72770400,0x65740400,0x736f0400,0x646a0400,0x6b650400,0x747a0400,0x75670400,0x62690400,0x6d7a0400,0x7a6d0400,0x6d670400,0x72650400,0x7a770400,0x6e610400,0x6d770400,0x6c730400,0x62770400,0x737a0400,0x6b6d0400,0x7a610413,0x65720400,0x627a0400,0x67740400,0x73760400,0x686e0600,0x6e690400,0x63720400,0x70610400,0x70650400,0x61720600,0x62720400,0x636c0400,0x636f0600,0x76650400,0x626f0400,0x67790400,0x65630400,0x67660400,0x70790400,0x73720400,0x75790400,0x666b0400}
Log.w(RNPushNotification.LOG_TAG,"Unable to find " + KEY_CHANNEL_DESCRIPTION + " in manifest. Falling back to default")
Exception e
new EmoteClue("Dance a jig by the Barrows reward chest. Beware of double agents! Equip any set of Barrows equipment.",new WorldPoint(3551,9694,0),JIG)
mAms.mWaitForNetworkTimeoutMs=2000
ArrayUtil.mergeArrays(javaClassReferences,additionalReferences,PsiReference.ARRAY_FACTORY)
TYPEAHEAD_LOG.error(new RuntimeException("Typeahead timeout is exceeded: " + currentTypeaheadDelay))
super.isDither()
parser.parseLight(GroovyElementTypes.OPEN_BLOCK,builder)
insertByIndex(severityGroupNode,root)
Position.PREFIX_IN + 8
mImm.showStatusIconInternal(mToken,getPackageName(),iconResId)
layer.activate(input)
inputPath.toFile()
new MultiRootMessage(myProject,GitUtil.getRootsFromRepositories(roots),true)
/**   * Returns an  {@code AfterFirst} {@code Trigger} with the given subtriggers.  */ public static AfterFirst of(OnceTrigger... triggers){   return new AfterFirst(Arrays.<Trigger>asList(triggers)); } 
channel.getName().equalsIgnoreCase(actualChatRoom.getIdentifier())
methods[index] == null || methods[index + 1] == null
@Child protected RepeatingNode repeatingNode; 
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commit()
getName()
words.length >= 1 && words[0].length() > 0
Math.max(implicitOffset - 1,0)
getTypeDeclaration(swaggerModel.getAdditionalProperties())
sorted_files.get(i).createReader(canUseDrop)
JOINER.join("java_library(","    name = 'Deps%d',","    srcs = glob([ 'com/example/deps%d/*.java' ]),","%s","    visibility = [ '//visibility:public' ],",")","")
vector.iterateNonZero()
(Item)this
i < 10
parent.getExactOverriddenJoinTable(propertyName)
new DefaultGoApiResponse(500)
scanAllNodes(stage.getScene().getRoot(),pseudoClass)
fill || textureImage != null
nextValue >= 0x40
BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory,JwtAccessTokenConverter.class,false,false)
(pnrows-=(espc[_pcidx + 1] - espc[_pcidx])) >= 0
batteryVp > high
TransactionUtil.validAssetName(assetIssueContract.getAbbr().toByteArray())
new String(bs3.toByteArray(),"UTF-8")
clone != null || index.containsKey(object)
new SearchUICore.SearchResultMatcher(null,null,0,null,100)
scanFlags & SCAN_REQUIRE_KNOWN
Log.i(TAG,"Prepare done")
tokenEnd > buffer.length()
position >= 0 && position < dayPickerView.getCount()
jsonSupport.addEventMapping("edwald",HashMap.class,Integer.class,String.class)
assertEquals(128,blockHashesMessage.getBlockHashes().size())
replaces={"doCachedTypeCachedOffset","doCachedType"}
indexStats.getPrimaries().getMerge().getCurrentSize()
inQuotes.substring(spaceIndex)
private RGB color; 
dlFileEntry.getFileVersion()
keyRowMeta.getString(one)
timeDifferenceMilliseconds < maxTolerateTimeDifferenceMilliseconds
public MTThemes selectedTheme=MTThemes.OCEANIC; 
cfs.truncateBlocking()
new TreeItem(databasesItem,SWT.NONE)
oldModel.getVendorExtensions().get("x-className") != null
(short)0655
jarResourcesElementDesc.getStoreFactory()
prefix.add(tmp.substring(0,tmp.length() - 1))
entry.rxPackets == 0 && entry.txPackets == 0
Preconditions.checkNotNull(blockWorker,"blockWorker")
this.sessionFixationAuthenticationStrategy
laf.getClassName()
DEFAULT_TETHER_OFFLOAD_DISABLED=0
Preconditions.checkNotNull(mBlockIdsOnTiers,"mBlockIdsOnTiers")
Arrays.asList("bool","qint32","qint64","float","double")
Lifecycle lifecycle=(Lifecycle)it.next(); 
Lists.newArrayList(header(message,failed),status(status,failed),eol())
new GitCommandResult(false,exitCode,false,result.getErrorOutput(),result.getOutput()){   @Override public boolean cancelled(){     return true;   } } 
str.startsWith("/") || str.isEmpty()
getMethod()
qs.equals("")
setterVisibility=Visibility.ANY
DexFile.getDexOptNeeded(classPathElement,instructionSet,"speed",false,false)
logger.trace("new cluster state [{}] after waiting for master election to fail shard [{}]",state.prettyPrint(),shardRoutingEntry)
message.isAsynchronous()
DumpUtils.checkDumpAndUsageStatsPermission(mActivityManagerService.mContext,"dbinfo",pw)
assertThat(list.isInternal()).isTrue()
stack.getFluidID()
new InvalidFragmentEntryFileException()
Arrays.asList(1,2,3,64)
model.startsWith(brand)
offsetOrZero.add(numberOfRowsOrMax)
pyClass.getClassName()
msg.setJMSPriority(asInt(priority))
MiscUtil.hashCode(Family)
supported.getProtocols()
client.POST(scheme + "://localhost:" + connector.getLocalPort()+ "/?b=1").param(paramName,paramValue).content(new BytesContentProvider(content)).timeout(5,TimeUnit.SECONDS)
b.length() - 2
user.getUsername()
address != null && address.indexOf('?') != -1
GridGgfsTestUtils.jsonToMap(SECONDARY_ENDPOINT_CFG)
keyRowMeta.getString(two)
!it.next().hasFinished()
new ConfigOption<Timestamps>(ROOT_NS,"timestamps","The timestamp resolution to use when writing to storage and indices",ConfigOption.Type.FIXED,Timestamps.class,Timestamps.MICRO)
logger.trace("AtmosphereResource {} is resuming",uuid())
(MessageView.this.mMessage == null) || !MessageView.this.mMessage.isSet(Flag.X_DOWNLOADED_PARTIAL)
builder().checkThirdPartyTargetsHaveLicenses(true).experimentalBuildSettingApi(false).experimentalCcSkylarkApiEnabledPackages(ImmutableList.of()).experimentalEnableAndroidMigrationApis(false).experimentalEnableRepoMapping(false).experimentalJavaCommonCreateProviderEnabledPackages(ImmutableList.of()).experimentalPlatformsApi(false).experimentalStarlarkConfigTransitions(false).experimentalTransitionWhitelistLocation("").incompatibleUseToolchainProvidersInJavaCommon(false).incompatibleBzlDisallowLoadAfterStatement(false).incompatibleDepsetIsNotIterable(false).incompatibleDepsetUnion(false).incompatibleDisableDeprecatedAttrParams(false).incompatibleDisableObjcProviderResources(false).incompatibleDisallowDataTransition(true).incompatibleDisallowDictPlus(true).incompatibleDisallowFileType(true).incompatibleDisallowLegacyJavaProvider(false).incompatibleDisallowLegacyJavaInfo(false).incompatibleDisallowLoadLabelsToCrossPackageBoundaries(false).incompatibleDisallowOldStyleArgsAdd(true)
WikiPage parent
Log.debug(this + " Busy selector - injecting delay " + _paused+ " times")
new PacketDecoder(new JacksonJsonSupport(),ackManager)
VersionNumber.parse(playVersion).getMicro() < 6 && !"2.10".equals(scalaVersion)
new ConstructingObjectParser<>("client_security_authenticate_response",true,a -> new AuthenticateResponse(new User((String)a[0],((List<String>)a[1]),(Map<String,Object>)a[2],(String)a[3],(String)a[4]),(Boolean)a[5],(RealmInfo)a[6],(RealmInfo)a[7]))
mergeRefUpdate.update()
mySide2.select(titles)
lastUpdate.after(updated) || lastUpdate.equals(updated)
ProjectRootManager.getInstance(project).getFileIndex().isInTestSourceContent(virtualFile)
StringBuilder buffer=new StringBuilder(pattern.length() * repeats); 
updateTransitLocked(TRANSIT_TASK_TO_FRONT,r,options)
/**   * Returns a duplicate of this resource record.  */ @Override public DnsResource duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } 
res.setStopThread(true)
null != m_parallel || XmlSuite.DEFAULT_PARALLEL.equals(m_parallel)
getJSONValue(activity.getExtraData(),"title",kbTemplate.getTitle())
vehicleControl.createDebugShape(SceneApplication.getApplication().getAssetManager())
serializer.serializeInsert(metadata,entity,batch.getColumns(),batch.getValues(),batch.getSubQuery())
mock.expectedBodiesReceivedInAnyOrder("Hello World 3")
sleep(200)
support.isFlexUnit1Subclass(aClass)
JDBCUtils.safeGetString(dbResult,"PROCESS")
(serviceContext == null) || !serviceContext.isSignedIn()
c <= 'Z'
/**   * @return a String for the summary of the preference.  */ public CharSequence getSummary(){   return null; } 
assetTagLocalService.checkTags(serviceContext.getUserId(),serviceContext.getScopeGroupId(),assetTagNames)
schedule(pingServerRunnable,nextPingIn,TimeUnit.SECONDS)
jmsManager.removeQueueFromJNDI(queueName)
Exception ex
context.getDataSource()
new IllegalStateException("Invalid state: iterator has " + rrs.size() + " readers but "+ maxReaders+ " RDDs of List<Writable> were provided")
f.cancel(false)
ZKMetadataProvider.getRealtimeTableConfig(_pinotHelixResourceManager.getPropertyStore(),realtimeTableName)
Collectors.joining("\n")
TreeSet<Object>
assertEmpty(text,errors)
ErrorHandlerBuilder builder=(ErrorHandlerBuilder)routeContext.getRoute().getErrorHandlerBuilder(); 
getClusterMap().set(buildAttributeName(name),value)
@ConditionalOnEnabledHealthIndicator("diskspace")
mUserPaddingEnd > 0
new WriteCommandAction(project){   protected void run(  final Result result) throws Throwable {     renameNotATestMethod.run();   } } 
Hashtable<String,String>
STUB_VERSION=38
dictionary.remove("type")
child.tagName.equals("base") || child.tagName.equals("script") || child.tagName.equals("link")|| child.tagName.equals("meta")|| child.tagName.equals("title")|| child.tagName.equals("style")|| child.tagName.equals("object")
Helpers.exec(j4p,"setProfileBundles(java.lang.String, java.lang.String, java.util.List)",versionId,id,strings)
User.createUsersList(http.get("http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json"))
connection.hlen(key)
optional=2
ShutdownOperations.addOperation(new Runnable(){   public void run(){     deferredBindingActions.remove();   } } ,true)
n <= k && i > 0
logger.debug("cs-change-async-action-callback. current-step:" + currentStep.getKey())
createCustomStudySession(new JSONArray(),new Object[]{sb.toString(),Consts.DYN_MAX_SIZE,Consts.DYN_RANDOM},true)
ImmutableList.copyOf(modules)
addr.intValueSafe()
new IndexWriter(directory,autoCommit,ANALYZER,false,IndexWriter.MaxFieldLength.LIMITED)
anomalyFailureCount == 0 && anomalyWarningCount == 0
System.err.format("Tier %d: Not enough space on %s. %n" + "Desired quota: %s%n" + "Used in tiered storage: %s%n"+ "Available: %s%n",level,storageEntry.getKey(),FormatUtils.getSizeFromBytes(quota),FormatUtils.getSizeFromBytes(used),FormatUtils.getSizeFromBytes(available),FormatUtils.getSizeFromBytes(quota - used - available))
get(context,R.string.pref_auto_viewed,false)
new RecordReaderDataSetIterator(rr,null,batchSize,labelIndex,labelIndex,numPossibleLabels,-1,regression)
ImmutableMultiset<String>
setBlock(minV,pattern.next(minV))
MergeEntries.class
biomeList[biome.biomeID].typeList.toArray(new Type[0])
executeWrappedCommandProtocol(namespace.getDatabaseName(),getCommand(),CommandResultDocumentCodec.create(decoder,"results"),connection,binding.getReadPreference(),transformer(source,connection))
getNonCompilablePath("InputPackageDeclarationDiffDirectory.java")
pageBucketReceiver.setBucket(bucketIdx,bucket,true,pagingUnsupportedResultListener)
between(1,10)
id=10864
new CheckPermission().of("all").against("deploy").expect(true)
result != null && getActivity() != null
concurrency > (shift<<=1)
Setting.groupSetting("searchguard.authcz.impersonation_dn.",Property.NodeScope,Property.Filtered)
out.dialect.supportsWindowFunctions() || !RexOver.containsOver(project.getProjects(),null)
maxSize < (used / total)
IoUtils.safeClose(connection,delegate)
!project.isDisposed() && LookupManager.getInstance(project).getActiveLookup() != null
new KerasSequentialModel().modelBuilder().modelJsonFilename(modelJsonFilename).weightsHdf5FilenameNoRoot(weightsHdf5Filename)
FileTypeSet.of(CppFileTypes.CPP_HEADER,CppFileTypes.ARCHIVE,CppFileTypes.PIC_ARCHIVE,CppFileTypes.ALWAYS_LINK_LIBRARY,CppFileTypes.ALWAYS_LINK_PIC_LIBRARY,CppFileTypes.SHARED_LIBRARY,CppFileTypes.VERSIONED_SHARED_LIBRARY)
builder.setView(setupView()).setTitle(R.string.title_sync)
failedIncomingConnection && failedOutgoingConnection
!Character.isLetter(c) && c == wordDelimiter[0]
b.getTypeByte()
Glue optionalGlue
str.toLowerCase(Locale.ENGLISH)
TransformItem.create(R.id.ivFirstImage,Direction.LEFT_TO_RIGHT,0.20f)
Assert.assertEquals(editor.getMarkersQuantity(WARNING_OVERVIEW),12)
IntegrationNamespaceUtils.setReferenceIfAttributeDefined(processorBuilder,element,COMPARATOR_REF_ATTRIBUTE)
new NodeInfo(Version.CURRENT,org.elasticsearch.Build.CURRENT,new DiscoveryNode("node_0",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT),Settings.EMPTY,DummyOsInfo.INSTANCE,new ProcessInfo(randomInt(),randomBoolean()),JvmInfo.jvmInfo(),new ThreadPoolInfo(Collections.singletonList(new ThreadPool.Info("test_threadpool",ThreadPool.ThreadPoolType.FIXED,5))),new TransportInfo(transportAddress,Collections.emptyMap()),new HttpInfo(transportAddress,randomLong()),new PluginsAndModules(),new IngestInfo(Collections.emptyList()),new ByteSizeValue(randomIntBetween(1,1024)))
logError(rcurly,"rcurly",expandedTabsColumnNo(rcurly),curlyLevel())
number=0
keyPressedCount > 0
PyReferenceExpression.class
format(conf,true)
public Player mapLine(FieldSet fs,int lineNum){   if (fs == null) {     return null;   }   Player player=new Player();   player.setID(fs.readString("ID"));   player.setLastName(fs.readString("lastName"));   player.setFirstName(fs.readString("firstName"));   player.setPosition(fs.readString("position"));   player.setDebutYear(fs.readInt("debutYear"));   player.setBirthYear(fs.readInt("birthYear"));   return player; } 
mPm.queryIntentActivities(mIntent,PackageManager.MATCH_DEFAULT_ONLY | (mAlwaysUseOption ? PackageManager.GET_RESOLVED_FILTER : 0),UserHandle.getUserId(mLaunchedFromUid))
new MatParamTexture(texParam.getVarType(),texParam.getName(),texture,texParam.getUnit(),null)
new MessageGroupHashBucket(1024,64)
assertEquals(1840,res.getWeight(1,2),10)
case 6: 
alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)
public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects){   configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);   return this; } 
attachmentsDir.getAbsolutePath()
public JComponent getFocusableComponent(){   if (myComponent instanceof JComboBox) {     return ((JComboBox)myComponent).getEditor().getEditorComponent();   }  else {     return myComponent;   } } 
new JUnitDescriptionGenerator(spec)
arg.indexOf('.') >= 0 || arg.equals("android")
checkNotEmpty(className,EMPTY_STRING_MSG)
ColorRGBA.White.mult(0.02f)
objectColumnCache.values()
NumberOfPortsUsedByReadReplica=4
stepElement.getAttribute(ID_ATTR)
/**   * Returns an  {@code AfterAll} {@code Trigger} with the given subtriggers.  */ public static AfterAll of(OnceTrigger... triggers){   return new AfterAll(Arrays.<Trigger>asList(triggers)); } 
new HashSet<Class<?>>(5)
propertiesComponent == null || propertiesComponent.isDefaultCreated()
Map<String,Object>
recipient.isMmsGroupRecipient()
type.getPresentableText()
new IncorrectOperationException("Operation not supported in: " + getClass())
i < rank() && size(i) == 1
rawCache.withExpiryPolicy(new InteropExpiryPolicy(create,update,access))
con.commit(false)
ThingDTO.class
/**   * Visits the specified map result.  * @param mapResult the map result  * @return the result of the visit  */ T visitMapResult(MapResultData mapResult); 
caches.valueAt(i)
notificationHelper.sendKaleoNotifications(KaleoNode.class.getName(),currentKaleoNode.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext)
Sets.newHashSet(BUFFERS_READ,FIELDNAMES_READ,INDEXERCLUSTER_READ,INPUTS_READ,JVMSTATS_READ,MESSAGECOUNT_READ,MESSAGES_READ,METRICS_READ,SYSTEM_READ,THROUGHPUT_READ,SAVEDSEARCHES_CREATE,SAVEDSEARCHES_EDIT,SAVEDSEARCHES_READ)
Integer.parseInt(quantifier)
properties.containsKey(STRING_RECENT_SEARCHES)
new DDMFormViewFormInstanceRecordDisplayContext(request,response,_ddmFormInstanceRecordLocalService,_ddmFormRenderer,_ddmFormValuesFactory,_ddmFormValuesMerger)
--remainingReleaseCount == 0 && extractor != null
alluxioUriToLoad.getPath()
promise.isDone() || future.isCancelled()
new HotSpotDebugConfig(GraalOptions.Log,GraalOptions.Meter,GraalOptions.Time,GraalOptions.Dump,GraalOptions.MethodFilter)
Boolean.parseBoolean(getOptional("kylin.htrace.trace-every-query","false"))
worker.setNoData(nod != null ? RangeFactory.create(nod,nod) : null)
for (String s : records) {   if (ver.length() > 0) {     ver.append(',');   }   ver.append(s); } 
fragment.dismissAllowingStateLoss()
runAllTasks()
MonitoringPortlet.isMonitoringPortletEventRequest()
realm.checkIfValid()
!TextSecurePreferences.isWebrtcCallingEnabled(this) || isGroupConversation()
keyRestriction != null && keyRestriction.isEquality()
convert(BigInteger.class,value,defaultValue)
for (CommittedChangeList list : changeLists) {   final SvnMergeInfoCache.MergeCheckResult result=myMergeChecker.checkList((SvnChangeList)list);   if (SvnMergeInfoCache.MergeCheckResult.MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.MERGED);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.ALIEN);   }  else   if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS_PARTLY_MERGED.equals(result)) {     myStatusMap.put(list.getNumber(),ListMergeStatus.NOT_MERGED);   }  else {     myStatusMap.put(list.getNumber(),ListMergeStatus.REFRESHING);   }   --cnt;   if (cnt <= 0) {     ApplicationManager.getApplication().invokeLater(new Runnable(){       @Override public void run(){         myRevisionsList.revalidate();         myRevisionsList.repaint();       }     } );     cnt=10;   } } 
new SelectFilesDialog.VirtualFileList(project,untrackedFiles,false,true)
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out2p)
new UdpConnector(localUdpPort,remoteAddress,remoteUdpPort)
/**   * Called to convert a result of a DataFetcher to a valid runtime value.  * @param input is never null  * @return null if not possible/invalid  */ O serialize(Object input); 
compileDependencies.add(new Dependency("javax.xml","jaxb-api",jaxbVersion,true))
DBG_CAMERA_LIFT=false
new AlphaNode(context.getNextId(),(AlphaNodeFieldConstraint)constraint,context.getObjectSource(),context.getRuleBase().getConfiguration().isAlphaMemory(),context.getRuleBase().getConfiguration().getAlphaNodeHashingThreshold())
config.setAdvertiseSecurityKey(modelconf.get(CommonAttributes.ADVERTISE_SECURITY_KEY).asString())
new IllegalStateException("Encountered null sequence records for input index " + i)
inputItems.length > index
iconicsDrawable.iconText(mPlainIcon)
mDeviceOwner.getProfileOwnerPackageName(i)
request.getPath().split("\\?",-1)
return 31.5f; 
state.value == rotationLocked && state.contentDescription != null
Arrays.asList("Image","ProgressBar","ScrollView","Horizontal ScrollView","Dropdown Picker","Dialog Picker","Switch","Text","TouchableBounce","TouchableHighlight","TouchableOpacity","TouchableWithoutFeedback","Toolbar","TextInput","View","ScrollView Item (same id used for all items)")
@ConditionalOnEnabledHealthIndicator("elasticsearch")
addViewInLayout(child,fromLeft != mIsRtl ? -1 : 0,lp,true)
mToolbar.setTitle(mToolbarTitle)
new ServerPartition(partitionKeyNew,RowType.T_DOUBLE_DENSE,0.0)
clean.setGroup(BUILD_GROUP)
StrictMath.log(docCount)
public TextContainer getUri(){   return uri; } 
resolve(res)
s.tryAcquire(4,2,TimeUnit.SECONDS)
Promise<Object>
(byte)13
PsiTreeUtil.getParentOfType(e,PyTryPart.class,false)
/**   * Returns the next pseudorandom  {@link ArrayValue} of date elements.<p> The length of arrays will be governed by  {@link Configuration#arrayMinLength()} and{@link Configuration#arrayMaxLength()}  * @return the next pseudorandom {@link ArrayValue} of date elements.  */ public DateArray nextDateArray(){   return Values.dateArray(nextDateArrayRaw(minArray(),maxArray())); } 
clampScreenBrightness(mCurrentScreenBrightnessSetting)
new NumberFormatException("JSON forbids NaN and infinities: " + value + " at path "+ reader.getPath())
layoutSetPersistence.update(privateLayoutSet,false)
super.dialog.setMinimumSize(545,458)
newVarcharColumnDefBuilder().setColumnName("b_qualifier").setLimit(10)
sec.getConfigurator()
@SuppressWarnings("unchecked") T replaced=(T)targetStatement.replace(newStatement); 
file instanceof PsiImportHolder
cupboard().withDatabase(getWritableDatabase()).delete(PhilmMovie.class,null)
new RuntimeConfigurationError(PyBundle.message("runcfg.unittest.no_method_name"))
getHttpUrl(name,httpPort)
ArrayList<RangeHighlighter>
journalArticle.getResourcePrimKey()
DEBUG_ALL || true
(breakpoint != null) && (breakpoint.getType().isSuspendThreadSupported()) && (breakpoint.getSuspendPolicy() == SuspendPolicy.ALL)
obj == null
!(exception ? throwable instanceof RuntimeException : throwable == null)
FunctionTypesKt.isNonExtensionFunctionType(calleeType)
Setting.intSetting("indices.queries.cache.count",1000,1,Property.NodeScope)
mGoogleApiConnectionTask.trySetException(new ConnectException(result.toString()))
"Invalid version for inner update [isNew=" + entry.isStartVersion() + ", entry="+ entry+ ", newVer="+ newVer+ ']'
mCurrentVrCompositorService == null
needRefresh=true
samlServletDeployment(SalesPostAutodetectServlet.DEPLOYMENT_NAME,"sales-post-autodetect/WEB-INF/web.xml",SendUsernameServlet.class)
Constant.messages.getString("start.gui.cmdline.session.absolute.path.required",Constant.getZapHome())
logger.error(msg)
isFinishing()
BaseMessages.getString(PKG,"Spoon.Dialog.PromptSave.Message")
IndexReader.open(store)
T existingStagedModel=stagedModelRepository.fetchStagedModelByUuidAndGroupId(uuid,groupId); 
DEFAULT_ALLOW_REPEAT_CALLERS=true
topLevelBuildData.getMasterHostname()
_log.warn(ioe,ioe)
DEFAULT_GROUP_OWNER_INTENT=6
error.getMessage()
DBG=false
soLingerTime.toMilliseconds()
durableSubscriptions.remove(key)
allSortedModules.stream()
mockResultSet.getLong(1)
getPath(renderRequest,renderResponse)
client.getDefaultRequestOptions().setMaximumExecutionTimeInMs(timeout)
routes.SessionsController.index("")
mUIDozeTrigger.isAsleep() || Recents.getSystemServices().hasFreeformWorkspaceSupport() || useGridLayout()
protected RunProfileState createCommandLineState(@NotNull ExecutionEnvironment environment,@NotNull Module module){   return new MvcCommandLineState(environment,cmdLine,module,false); } 
userState.mIsAccessibilityEnabled || userState.mIsDisplayMagnificationEnabled
type <= 4095
_connector.getResponse("GET http://host:80/foo?data=1 HTTP/1.0\n\n")
benchmark.expectAround("Throughput to index issues",throughputPerSecond,6500,Benchmark.DEFAULT_ERROR_MARGIN_PERCENTS)
-73.99408
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
openingHours.getOriginal() == null || !OpeningHoursParser.parseOpenedHoursHandleErrors(openingHours.getOriginal()).toString().equals(openingHoursString)
filterParameterName.lastIndexOf('.')
getLogger().warn("Unknown classloader [NSME]: " + e.getMessage())
instance.managementService.destroy()
app.getSettings().SHOW_TRAFFIC_WARNINGS.get() || app.getSettings().SPEAK_TRAFFIC_WARNINGS.get()
private RelativeLayout btnScrollDown; 
dstPath.toString()
/**   * Visits the specified value result.  * @param valueResult the value result  * @return the result of the visit  */ T visitValueResult(ValueResultData valueResult); 
new MappingValueRename(outputMapping,outputField)
logger.warn("Couldn't write to file: " + filename)
assertEquals(1,classLoaderAwares.size())
addProperty(prop,true)
items[30]
on(TestController.class).annotNotPresent(ResponseBody.class).resolveMethod("doWork")
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","type")
@Override public CharsRefBuilder append(char c){   grow(ref.length + 1);   setCharAt(ref.length++,c);   return this; } 
case MESSAGE: 
IntegerDivNode.class
logger.info("Installing Filter {}",filterName)
dataBuilder.addLinesBuilder().setLine(i).setScmRevision("REVISION_" + i).setScmAuthor("a_guy").setSource("this is not java code " + i).setUtLineHits(i).setUtConditions(i + 1).setUtCoveredConditions(i).setItLineHits(i).setItConditions(i + 1).setItCoveredConditions(i).setOverallLineHits(i).setOverallConditions(i + 1).setOverallCoveredConditions(i).setScmDate(150000000L).setHighlighting("2,9,k;9,18,k").addAllDuplication(Arrays.asList(19,33,141))
IQ.Type.error == packet.getType() || IQ.Type.result == packet.getType()
getSonicResourceCachePath()
entry.getValue().accessibleNodeLabels
minutes * 60 * 1000l
responseModels.entrySet()
orgReplica.applyIndexOperationOnReplica(0,1,VersionType.EXTERNAL,IndexRequest.UNSET_AUTO_GENERATED_TIMESTAMP,false,SourceToParse.source(orgReplica.shardId().getIndexName(),"type","id",new BytesArray("{}"),XContentType.JSON),u -> { } )
doc != NO_MORE_DOCS
settings.isAutoCommitOnCherryPick() != myAutoCommitOnCherryPick.isSelected()
accumulator.addClass(analysis)
new SslContextBuilder(false)
getLogger().debug("Row {} not found in {}, transferring to not found",new Object[]{rowId,tableName})
PortletFileRepositoryUtil.addPortletFileEntry(portletDataContext.getScopeGroupId(),portletDataContext.getUserId(kbArticle.getUserUuid()),KBArticle.class.getName(),kbArticle.getClassPK(),PortletKeys.KNOWLEDGE_BASE_ADMIN,kbArticle.getAttachmentsFolderId(),inputStream,fileName,mimeType,true)
!FluxCUtils.isSignedInWPComOrHasWPOrgSite(mAccountStore,mSiteStore)
new BooleanPreference("show_view_angle",false,false,true)
resolver.acquireUnstableContentProviderClient(uri)
new RepositoryException(container,e.getMessage(),e)
checkValidNanoOfDay(nanoOfDay)
verifyResourcedModel(role,verifiableResourcedModel.getModelName(),verifiableResourcedModel.getTableName(),verifiableResourcedModel.getPrimaryKeyColumnName())
AstUtils.hasAtLeastOneAnnotation(classNode,"MessageEndpoint","EnableIntegrationPatterns")
new CheckboxTreeViewer(parent,style)
jobLoader.findJobEntriesWithID(JobMeta.STRING_SPECIAL)
execute()
String.format(Locale.ROOT,"%-15s: -",username)
logger.fine(String.format("performing disconnect (%s)",this.nsp))
getTypeName2(decl.getMethodBinding().getReturnType())
RulesProfile qProfile
val._resDev <= 388.5
StringBuilder paramTypesList=new StringBuilder("("); 
structure.getXsd()
i < 1254
(filterMap.getDispatcherMapping() & FilterMap.ERROR) != 0
new PRestriction(xAppInfo.getUid(),restrictionName,null,crestricted,crestricted)
cc.getEnabled()
removeCallbacksAndMessages(null)
copyProps.remove(PoolingConnectionProvider.POOLING_PROVIDER)
new IssueIndexer(esTester.client(),null,new IssueIteratorFactory(null))
Assert.assertEquals(5,latch.getCount())
assertContains(actualTables,expectedTables)
singleModelJSONObjectBuilder.field(HYDRA_OPERATION)
sStatsd.informDeviceShutdown(true)
new CrypticClue("Search the boxes in the goblin house near Lumbridge.",BOXES,new WorldPoint(3245,3245,0),"Goblin house on the eastern side of the river.")
return copy; 
profileManager.loadSettingsProfiles(settings)
p != null && p.getPassMaterial() != null
/**   * Support the range subscript operator for String  */ public static CharSequence get(CharSequence text,Range range){   int from=normaliseIndex(InvokerHelper.asInt(range.getFrom()),text.length());   int to=normaliseIndex(InvokerHelper.asInt(range.getTo()),text.length());   int length=text.length();   if (from > to) {     int tmp=from;     from=to;     to=tmp;   }   return text.subSequence(from,to + 1); } 
this(icon,title,intent,new Bundle(),null,true); 
result.getSecond()
Math.abs(endAngle - startAngle) >= 360 || subActionItems.size() <= 1
ALL_ARGUMENTS.OVERLOAD.isNotDistinctFrom(getOverload())
/**   * Creates an empty struct with the given location.   */ public SkylarkInfo createEmpty(Location loc){   return SkylarkInfo.createSchemaless(this,ImmutableMap.of(),loc); } 
ActionController<Id>
/**   * The package controller for the current file. Used for performance optimisation.  */ private ImportControl currentLeaf; 
ImmutableSortedMap<String,SortedMap<String,Object>>
instance.getPublicIpAddress()
List<Element>
logger.error("Repair session " + future.session.getName() + " failed.",e)
200 * (1 - start)
new EmbeddedKafkaCluster(1,mkProperties(mkMap()),0L)
Maps.newLinkedHashMap()
assertEquals("Size of " + r,2,r.size())
OverrideResolver.generateOverridesInFunctionGroup(propertyName,propertiesFromSupertypes,propertiesFromCurrent,classDescriptor,new OverrideResolver.DescriptorSink(){   @Override public void addToScope(  @NotNull CallableMemberDescriptor fakeOverride){     properties.add((PropertyDescriptor)fakeOverride);   }   @Override public void conflict(  @NotNull CallableMemberDescriptor fromSuper,  @NotNull CallableMemberDescriptor fromCurrent){   } } )
client.srandmember(key,count)
String.format(Locale.ROOT,"%-15s: %s",username,Arrays.stream(markedRoles).map(s -> s == null ? "-" : s).collect(Collectors.joining(",")))
gasPrice != null && gasPrice.length > HASH_LENGTH
(mOomMinFreeHigh[5] * 7) / 4
rImpl.getRequest()
StringBuilder sb=new StringBuilder(32); 
@ConditionalOnEnabledHealthIndicator("mail")
laneOptions[j].equals("slight_left") || laneOptions[j].equals("merge_to_left")
gauge == null || gauge.getValue() == null
new ConnectionException(sm.getString("streamStateMachine.invalidFrame",stream.getConnectionId(),stream.getIdentifier(),state,frameType),state.errorCodeForInvalidFrame)
mPolicy != null && wasPowered
doTest(true,false)
drReplicate(drType,null,updateVer,topVer)
lookup.isSelectionTouched() || !onExplicitAction
LOG.warn(ex.getLocalizedMessage())
tokenStart > buffer.length()
menu.getMapActivity().getContextMenu().close()
ItemHandler itemHandler=new SimpleItemHandler(itemReader,itemWriter); 
mInitialMotionX == null || mInitialMotionX.length <= pointerId
new DefaultImageRaster(image,0,0,false)
hasRows(oldTableName)
sTestCaseCounter == 0
Log.err("Caught exception: " + error.toString())
request.getExcludeMessage()
wp.getRunAdvance(mChars,start,end,contextStart,contextEnd,runIsRtl,end)
/**   * Callback that is invoked <em>before</em> each test method has been invoked.  * @param context the current test extension context  */ void beforeEach(TestExtensionContext context) throws Exception ; 
new MockProjectEx(getTestRootDisposable())
new IOException("UnknownHostException exception: " + e.getMessage(),e)
!commandSent.get() && useKeepAlive && monitorStarted.get()&& !ASYNC_TASKS.isTerminating()
!ignoreInjectedPsi
targetBox.setEnabled(false)
runUTRunner(testDir.getPath(),testFile.getPath(),"true")
JSONArray value
LOG.error("clear parameter error",ex)
anyLong()
Flux.from(this).multicast(EmitterProcessor.replay(1))
SyncEngine.scheduleSyncAccountTasks(syncAccount.getSyncAccountId())
logger.error("Caught exception in file upload",e)
Assert.assertEquals("Wrong messages count: " + messages.size(),1,messages.size())
Integer.parseInt(listenPort)
Assert.assertEquals(2,mergedDDMFormFieldValues.size())
Object anchor
ExceptionHandler exceptionHandler
throwable.printStackTrace(System.err)
internalPath != null && internalPath.exists()
GuiActivator.getUIService().getConferenceChatManager().createChatRoom(chatRoomName.trim(),getSelectedProvider().getProtocolProvider(),new ArrayList<String>(),"",false,true,true)
map.set(key,toStoreValue(value))
new KBArticleContentException("No content found after title")
return CONCURRENT; 
mExpandedChild.getHeight() <= mHeadsUpChild.getHeight()
new ExecutorCompletionService<ProjectSegment>(executor)
i < 100
type != null
new RedissonSession(keyPrefix,id)
exchange.setRequestHeader(HttpHeaders.AUTHORIZATION,"OAuth " + accessToken)
_ddmStructureLocalService.fetchDDMStructure(structureId)
uri.getPort() == -1 && request.getVirtualHost() != null
new ConnectionException(sm.getString("upgradeHandler.stream.closed",key),Http2Error.PROTOCOL_ERROR)
CodeStyleManager.getInstance(myProject).reformatTextWithContext(file,ranges)
end + " End Message Interceptor"
V data=function.apply(entry.getValue()); 
animator.setMinFrame(-9000)
mySshHandler >= 0
c > 0
retVal=(x != constValue)
nativeLinkable.getBuildTarget()
type == BinaryMapAddressReaderAdapter.POSTCODES_TYPE
logger.warn("Not a directory: " + dir.getAbsolutePath())
/**   * Decodes a BSON byte array into a DBObject instance.  * @param bytes a document encoded as BSON  * @return the document as a DBObject  */ public static BSONObject decode(final byte[] bytes){   final InputBuffer buffer=new BasicInputBuffer(ByteBuffer.wrap(bytes));   return new DBObjectCodec(PrimitiveCodecs.createDefault()).decode(new BSONBinaryReader(buffer)); } 
minSize(new Fixed(width),new Fixed(height))
assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))))
@Override public HttpResponseMessage getDefaultOutput(HttpRequestMessage request){   return HttpResponseMessageImpl.defaultErrorResponse(request); } 
!_calledSetTotal
isRunsOutsidePortal(absolutePath) || fileName.endsWith("GetterUtil.java")
new IndexWriter(dir,sa,IndexWriter.MaxFieldLength.LIMITED)
res.getDescription()
content.contains(expected)
items.size() == 1 && (filterString == null || filterString.isEmpty())
Log.debug(this + " JVM BUG(s) - recreating selector " + _jvmFix1+ " times, cancelled keys "+ _jvmFix0+ " times")
invocation.logger.finest("'is-executing': " + executing + " -> "+ invocation)
new MonoWhen(true,a -> Tuples.fromArray((Object[])a),p1,p2,p3)
builder.length() == 0 && s != null
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
@Autowired RoutingService routingService; 
Number rate
image.pixelWidth != pixelWidth
@Override public AbstractConfigValue getValue(String path){   return find(path,null,path); } 
mode != null && !mode.isEmpty()
appInfo.uid == XRestriction.cUidAndroid ? expert : true
@Override public Response description(String description){   this.setDescription(description);   return this; } 
BitUtil.check(status,10)
CANCEL_TIMEOUT_LIMIT=300
parentType == PyElementTypes.FUNCTION_DECLARATION && type2 == PyElementTypes.ANNOTATION
doNotAskDialogOption != null && (result == Messages.YES || doNotAskDialogOption.shouldSaveOptionsOnCancel())
BASIC_CONSTRAINTS(org.bouncycastle.asn1.x509.Extension.basicConstraints)
msbFragmentCollection.getMsbFragmentCollectionId()
conn.createStatement()
getDatabaseSchema() != null && getDatabaseSchema().length() > 0
!saveActions.equals(new SaveActions(enabled.isSelected(),formatterString))
addDaysAndCheckForCompletion(2,NextEvent.PAYMENT_ERROR)
order=12
vcs == null || vcs.getDiffProvider() == null
!DescriptorUtils.isTopLevelDeclaration(descriptor) || !(descriptor instanceof FunctionDescriptor) || descriptor instanceof ConstructorDescriptor
barrier.await(2,TimeUnit.SECONDS)
fT.replace(R.id.feeditemlistFragment,filf)
debugRootView.addView(button)
i <= text.length() - 1
UIUtil.getParentOfType(JComboBox.class,c) != null || UIUtil.getParentOfType(JSpinner.class,c) != null
seenVertices.contains(endAncestor)
loadModel(file)
promise.trySuccess(null)
Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE)
checkStoreUsage(1,0,1,1)
trainSamplesPerIteration(-2,2)
new Integer(this.value)
LOG.warn("Failed to write to TachyonStore stream, block " + getCurrentBlockId() + " will not be in TachyonStorage.")
cs[c].set(r,(long)((_createFrame.integer_range + 1) * (1 - 2 * rng.nextDouble())))
assertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2)
session != null && keyName.length() > 0
new Location(resource,metadata)
v.getContext().startActivityAsUser(intent,UserHandle.CURRENT)
mAdapter.swapDirectory(directory,storageManager)
getApplicationInfo().targetSdkVersion > O
strat.getLevelSize(0) > 1
ViewBuilder.class
randomAlphanumeric(100)
new TextPaint()
getMockEndpoint("mock:line").expectedMinimumMessageCount(0)
groupPrincipalCallback.getSubject()
new GitException(ERROR_ADD_REMOTE_URL_MISSING)
Log_OC.d(TAG,"onSaveInstanceState()")
preserve.asString()
assertEquals(10,definitions.size())
temporaryFolder.newFolder()
tmpDataDirs.containsKey(id)
UserNotificationEventLocalServiceUtil.getArchivedUserNotificationEventsCount(themeDisplay.getUserId(),UserNotificationDeliveryConstants.TYPE_WEBSITE,actionable)
args.length > 0
expect(IDENTIFIER,"Expecting qualified name")
UpgradeStepRegistrator.class
String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s",this.node.getNodeId(),this.node.getNodeStage().getLabel(),targetStage.getLabel())
mGesturesPopup != null && mGesturesPopup.isShowing()
new SessionParams(layoutParser,RenderingMode.NORMAL,null,configGenerator.getHardwareConfig(),resourceResolver,layoutLibCallback,0,19,getLayoutLog())
doTest(false,false)
Math.round(ratio * 1000) / 1000f
derefStub()
mediaChunks.get(1).getFirstSampleIndex() <= sampleQueue.getReadIndex()
Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor()
warningCompilationClause.withWarningContaining("@org.neo4j.procedure.Context usage warning: found unsupported restricted type <org.neo4j.server.security.enterprise.log.SecurityLog> on EnterpriseProcedure#securityLog.\n" + "  The procedure will not load unless declared via the configuration option 'dbms.security.procedures.unrestricted'.\n" + "  You can ignore this warning by passing the option -AIgnoreContextWarnings to the Java compiler").in(sproc).onLine(42)
id=10850
mParent == null
waitUntil(() -> noHandlersErrors.get() == (NODE_COUNT - 1) * ADDRESSES_COUNT,60_000)
new CallbackStub(this)
LIRInstructionClass<SPARCHotSpotJumpToExceptionHandlerInCallerOp>
Exception e
new LightweightThread(null,null,this,stackSize)
option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION
certificate(certURL,password,certType,port,new NoKeystoreSpecImpl())
LOG.warn("Failed to look for classes in " + jarFileName + ": "+ ioEx)
httpRequest.getSession().removeAttribute(HttpSessionIntegrationFilter.ACEGI_SECURITY_AUTHENTICATION_KEY)
append(FlowManager.getTableName(table))
new RFC6265Validator()
val != null && val > 0
{sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sUidToString,sIntToString}
getJSDocType(cp)
cs.getNString(columnIndex)
logger.debugf("No configuration provided for '%s' cache. Using '%s' configuration as template",InfinispanConnectionProvider.OFFLINE_SESSION_CACHE_NAME,InfinispanConnectionProvider.SESSION_CACHE_NAME)
p._eta != 0.3
injectedLanguageManager.injectedToHost(element,textRange).shiftRight(shiftOffset).containsOffset(offset)
OCCLUSION_INTENS=0.05f
/**   * {@inheritDoc}  */ @Override public FloatProperty clone(){   FloatProperty prop=(FloatProperty)super.clone();   prop.value=value;   return prop; } 
(short)0600
/**   * @author yole  */ public class CoverageProjectViewDirectoryNodeDecorator extends AbstractCoverageProjectViewNodeDecorator {   public CoverageProjectViewDirectoryNodeDecorator(  final CoverageDataManager coverageDataManager){     super(coverageDataManager);   }   public void decorate(  PackageDependenciesNode node,  ColoredTreeCellRenderer cellRenderer){     final PsiElement element=node.getPsiElement();     if (element == null || !element.isValid()) {       return;     }     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(element.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     if (element instanceof PsiDirectory) {       final String informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);       if (informationString != null) {         appendCoverageInfo(cellRenderer,informationString);       }     }   }   public void decorate(  ProjectViewNode node,  PresentationData data){     final CoverageDataManager manager=getCoverageDataManager();     final CoverageSuitesBundle currentSuite=manager.getCurrentSuitesBundle();     final CoverageAnnotator coverageAnnotator=currentSuite != null ? currentSuite.getAnnotator(node.getProject()) : null;     if (coverageAnnotator == null) {       return;     }     final Object value=node.getValue();     PsiElement element=null;     if (value instanceof PsiElement) {       element=(PsiElement)value;     }  else     if (value instanceof SmartPsiElementPointer) {       element=((SmartPsiElementPointer)value).getElement();     }     String informationString=null;     if (element instanceof PsiDirectory) {       informationString=coverageAnnotator.getDirCoverageInformationString((PsiDirectory)element,currentSuite,manager);     }  else     if (element instanceof PsiFile) {       informationString=coverageAnnotator.getFileCoverageInformationString((PsiFile)element,currentSuite,manager);     }     if (informationString != null) {       data.setLocationString(informationString);     }   } } 
if (myUnqualifiedOrLocalResolve) {   final PsiElement topParent=JSResolveUtil.getTopReferenceParent(myParent);   localProcessor=new SinkResolveProcessor<ResolveResultSink>(myReferencedName,myRef,new ResolveResultSink(myRef,myReferencedName)){     @Override public boolean needPackages(){       if (myParent instanceof JSReferenceExpression && topParent instanceof JSImportStatement) {         return true;       }       return super.needPackages();     }   } ;   localProcessor.setToProcessHierarchy(true);   JSReferenceExpressionImpl.doProcessLocalDeclarations(myRef,myQualifier,localProcessor,true,false,null);   PsiElement jsElement=localProcessor.getResult();   if (myQualifier instanceof JSThisExpression && localProcessor.processingEncounteredAnyTypeAccess() && jsElement != null) {     localProcessor.getResults().clear();     jsElement=null;   }   if (myQualifier == null) {     final JSReferenceExpression namespaceReference=JSReferenceExpressionImpl.getNamespaceReference(myRef);     ResolveResult[] resolveResultsAsConditionalCompilationVariable=null;     if (namespaceReference != null && (namespaceReference == myRef || namespaceReference.resolve() == namespaceReference)) {       if (jsElement == null && ModuleUtilCore.findModuleForPsiElement(myRef) == null) {         return new ResolveResult[]{new JSResolveResult(myRef)};       }       resolveResultsAsConditionalCompilationVariable=resolveConditionalCompilationVariable(myRef);     }     if (resolveResultsAsConditionalCompilationVariable != null && resolveResultsAsConditionalCompilationVariable.length > 0 && (jsElement == null || resolveResultsAsConditionalCompilationVariable[0].isValidResult())) {       return resolveResultsAsConditionalCompilationVariable;     }   }   if (jsElement != null || localProcessor.isEncounteredDynamicClasses() && myQualifier == null || !localProcessor.processingEncounteredAnyTypeAccess() && !localProcessor.isEncounteredDynamicClasses()) {     return localProcessor.getResultsAsResolveResults();   } }  else {   final QualifiedItemProcessor<ResolveResultSink> processor=new QualifiedItemProcessor<>(new ResolveResultSink(myRef,myReferencedName),myContainingFile);   processor.setTypeContext(JSResolveUtil.isExprInTypeContext(myRef));   JSTypeEvaluator.evaluateTypes(myQualifier,myContainingFile,processor);   if (processor.resolved == QualifiedItemProcessor.TypeResolveState.PrefixUnknown) {     return dummyResult(myRef);   }   if (processor.resolved == QualifiedItemProcessor.TypeResolveState.Resolved || processor.resolved == QualifiedItemProcessor.TypeResolveState.Undefined || processor.getResult() != null) {     return processor.getResultsAsResolveResults();   }  else {     localProcessor=processor;   } } 
existing.getScriptParameters()
item == 257
HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range(element)).descriptionAndTooltip(message)
selected != null && selected != current
new ActionModeImpl(mContextView.getContext(),callback)
h >>> 63
node.getEndLine()
new Rectangle(x,y,width,height)
saveState
setUpTaskList()
StringBuilder buffer=new StringBuilder(); 
new IndexWriter(mDirectory,new StandardAnalyzer(),true,IndexWriter.MaxFieldLength.LIMITED)
message.getType() == Message.TYPE_FILE || message.getType() == Message.TYPE_IMAGE
mResolver.start()
titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))
new AssertionError("expected ], got " + currentToken + " syntax:"+ syntax)
spec.getAllFields()
btceDepth.getBids()
this.propertyDescriptorCache.putIfAbsent(pd.getName(),pd)
SimpleModule module=new SimpleModule().addAbstractTypeMapping(IContainer.class,MyContainer.class); 
Resources.getResource(AbstractNativeExecutableStarter.class,NATIVE_STARTER_CXX_SOURCE)
public static final EclipseLinkTemplates DEFAULT=new EclipseLinkTemplates(); 
_maxTransactionActive=1
TOWN(4000)
new JSONWebServiceServiceAction(servletContext)
PsiLiteralUtil.parseDouble(text)
!isExcludedClass(theClass)
os.copiedByteArray()
labelCursor == null
TArrays_STRING()
System.currentTimeMillis() + 1_800
subsidyDecreaseBlockCount=150
relatedProduct.getRelatedProduct()
moveToState(fragment,fragment.mStateAfterAnimating,0,0,false)
RequestListener<Object,GlideDrawable>
field.getDeclaringClass()
assertEquals("List size",3,retList.size())
BookmarksFolder.class
new ModelRenderer(model,0,1)
logger.info("starting user-requested repair of range ({}, {}] for keyspace {} and column families {}",new Object[]{parsedBeginToken,parsedEndToken,tableName,columnFamilies})
value == null || exclude(keys[i])
Collection<Object>
mEncoder.swithToSoftEncoder()
results.expectedMessageCount(3)
element.getLocalName()
op.getResultAsObject(false)
getManager().getResolveCache().resolveWithCaching(this,RESOLVER,true,false)
new DropTableEvent(tbl,true,deleteData,this)
callNode.call(arguments)
options.remove("wireFormat")
externalViewRecordVersion == lastKnownZkVersion
assertUpgraded(client())
assertTrue(model.getUniqueItems())
builder.bold(parser.getLogin()).append("/").bold(parser.getRepoId()).append(" ").bold("#")
16 * height
ColumnFamilyInputFormat.class
anyInt()
parameterAnnotations++
ref2something.get(ref)
String.format(Locale.ROOT,"%-15s: -",user)
info.getOldIndex() < 0 || !thrownTypes[info.getOldIndex()].equals(info.createType(method,method.getManager()))
is(5)
new IntPreference("max_level_download_tile",20)
generateIndex(f,null,null,alreadyGeneratedFiles,alreadyUploadedFiles)
EDGEVILLE_HOME_TELEPORT=98
mViewPager.setOffscreenPageLimit(3)
c.writeAndFlush("[you] " + msg + '\n')
REQUIRED_FREE_SPACE=20_0000_0000L
public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='i']/TYPE/LITERAL_INT","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionMultipleVariableDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(MultipleVariableDeclarationsCheck.class);     final String[] expectedViolation={"4:5: " + getCheckMessage(MultipleVariableDeclarationsCheck.class,MultipleVariableDeclarationsCheck.MSG_MULTIPLE)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE","/CLASS_DEF[@text='SuppressionXpathRegressionMultipleVariableDeclarationTwo']/OBJBLOCK" + "/VARIABLE_DEF[@text='i1']/TYPE/LITERAL_INT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
gl.glCopyTexSubImage2D(target,level,x,y,xOffset,yOffset,width,height)
notApplicationArguments(b,l + 1,GroovyGeneratedParser::paren_argument_list_inner)
CONTENT_SCOPE_KEY.getValue(project)
logger.warn("Invalid state {}",r)
i <= pmd.getParameterCount()
new LwjglPreferences(name,".prefs/")
ValidURLConstraint.class
"Using bind address: " + bindAddress
AbstractFilterRegistrationBean.class
Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF))
getView() == null || EventQueue.isDispatchThread()
info == null || !mConfig.bindPermission.equals(info.permission)
syncMessage == null || syncMessage.length() == 0
new StringBundler(3)
private final UUID accountId; 
public CharStreamAwareCJKTokenizer create(Reader input){   return new CharStreamAwareCJKTokenizer((CharStream)input); } 
new LinkedHashMap<String,Object>(whileListMaxSize,0.75f,false)
super.doClose()
sm.getString("standardContext.stoppingContext",logName())
timeout != null && timeout > 0
dropdownItem.setHref(_renderResponse.createRenderURL(),"mvcPath","/edit_ddm_template.jsp","redirect",themeDisplay.getURLCurrent(),"groupId",String.valueOf(themeDisplay.getScopeGroupId()),"classNameId",String.valueOf(PortalUtil.getClassNameId(DDMStructure.class)),"classPK",String.valueOf(_getClassPK()),"resourceClassNameId",String.valueOf(PortalUtil.getClassNameId(JournalArticle.class)),"type",DDMTemplateConstants.TEMPLATE_TYPE_DISPLAY)
assertEquals("throughput",65.680128659,model.getThroughput(),0.0000001)
id=22
new Integer(item.getSeq())
@Nullable public P getParams(){   return params; } 
SLOPE_PROXIMITY=100
item.getType() == DownloadActivityType.NORMAL_FILE || item.getType() == DownloadActivityType.ROADS_FILE || item.getType() == DownloadActivityType.SRTM_COUNTRY_FILE || item.getType() == DownloadActivityType.HILLSHADE_FILE || item.getType() == DownloadActivityType.WIKIPEDIA_FILE
suiteClass.getSimpleName()
private void _runTearDown() throws Exception {   try {     _runClassCommandName(_testClassName + "#tear-down");   }  catch (  Exception e) {     throw e;   }  finally {     LoggerUtil.stopLogger();     SeleniumUtil.stopSelenium();   } } 
type.getInternalName()
LOGGER.trace(exception.apply().toString())
cacheFb.setMaxEntriesLocalHeap(5)
tokensToUpdateInSystemTable.add(token)
flexItem.getMarginRight()
sep == null || "".equals(sep)
getXml(map,defaultLanguageId,key)
logger.debug(error,() -> "Failed to retrieve declared classes for " + clazz.getName())
mController.setRingerMode(AudioManager.RINGER_MODE_NORMAL,false)
myRootHandler == null || !myRootHandler.isValid()
locationServicesStatus.isLocationProviderRequired()
asyncProcessor.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(),new File("idea/testData/navigation/gotoSuper"),Pattern.compile("^(.+)\\.test$"),TargetBackend.ANY,false)
mServiceMap.get(userId)
this(type,1); 
return HEARTBEAT; 
printMultiCatch(cc)
CreateFileOptions.defaults().setBlockSizeBytes(Constants.KB).setRecursive(true).setTtl(0)
lastException != null && i < (flushRetriesNumber - 1)
RtlUtils.isPunctuations(punctuation2)
ignoreUnknown=true
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L,14L)
mainFile.getExecPathString()
new BufferedOutputStream(new GZIPOutputStream(output))
!results.containsKey(beanName) && findAnnotationOnBean(beanName,annotationType) != null
JMeterUtils.getPropDefault("undo.history.size",0)
PrivacyManager.getSettingBool(0,PrivacyManager.cSettingOnDemand,true,false)
allocator.getFlowController().prepareActionAllWrite(input,activations)
ENABLE_APK_ASSETS_CACHE=false
id=16
LocalizedTextUtil.clearDefaultResourceBundles()
this.recipients.getPrimaryRecipient() != null && this.recipients.getPrimaryRecipient().getName() != null
new ProcessRuntimeImpl(repositoryService,processDefinitionConverter,runtimeService,securityPoliciesManager,processInstanceConverter,variableInstanceConverter,configuration,eventPublisher)
ClusterGroupEmptyCheckedException ignore
setParams().xx()
/**   * The tested prototype instance  */ private final P testedPrototype; 
lastModifiedNow <= (System.currentTimeMillis() - this.minimumTimeoutForEmptyGroups)
new ShardPath(false,path,path,shardId)
!allowTrailingSlash && value.endsWith("/") && value.length() > 1
mLabelView != null && mLabelView.getLayoutParams() != null
fdoProvider.getFdoMode() != FdoMode.OFF || fdoProvider.getPrefetchHintsArtifact() != null
coverageDataManager.addCoverageSuite(name,new DefaultCoverageFileProvider(coverageFileName),getPatterns(),lastCoverageTime,getSuiteToMergeWith(),getCoverageRunner(),isTrackPerTestCoverage() && !isSampling(),!isSampling())
concLvl < 1
registry.createDataBindingSource(mimeType,bindingTargetType,bindingSource)
ColorProperties.getColor("menuDisabledForeground")
isColumnVector()
Constant.isDevBuild() && !SwingUtilities.isEventDispatchThread() && !Thread.currentThread().getName().startsWith("ZAP")&& !Thread.currentThread().getName().startsWith("DirBuster")
mHorizontalScrollBarMode == SCROLLBAR_ALWAYSOFF && (mActualScale - mMinZoomScale <= MINIMUM_SCALE_INCREMENT)
serverEnvironment.getLaunchType() != ServerEnvironment.LaunchType.DOMAIN
incomingDir.mkdirs()
assertThat(context.getExtensions()).hasSize(47)
notificationManager.notifyAsUser(NOTIFICATION_ID,id,notification,UserHandle.ALL)
!FRAGMENTED_OPCODES.contains(mOpcode)
cellIndex < lastCell
artifactResolver.resolve(artifact,resolutionRepositories,localRepository)
routingTable.getRoute(packet.getFrom()).process(reply)
PortalPermissionUtil.check(getPermissionChecker(),ActionKeys.ADD_COMMUNITY)
List<Number>
log.warn(notJava6.getMessage() + " .. trying RI.")
value()
new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null,null)
public AfterWatermarkEarlyAndLate withLateFirings(OnceTriggerStateMachine lateTrigger){   return new AfterWatermarkEarlyAndLate(earlyTrigger,lateTrigger); } 
jGitConnection.executeRemoteCommand("ssh://host.xz/repo.git",transportCommand,null)
r.getInteger(FIELD_STEP_ATTRIBUTE_ID_STEP,-1L)
tree == null || tree instanceof PrimitiveTypeTree
new AutoBuffer().put(this).buf()
firstSlash <= 0
cls.getDeclaredMethods()
KING_BLACK_DRAGON(NpcID.KING_BLACK_DRAGON,9,ChronoUnit.SECONDS,ItemID.PRINCE_BLACK_DRAGON)
Boolean.getBoolean("java.awt.headless") || System.getProperty("os.name").startsWith("Mac OS") && System.getProperty("user.name").equals("cruise")
DiagnosticFactory2.create(ERROR,INCOMPATIBLE_DECLARATION)
new ArrayList<Wallet>(5)
(Delegating)other
args.length > 9
new ProjectConfigurablesGroup(project,false)
new IllegalStateException("Failed to create working path: " + workingPath,e)
new TBinaryProtocol.Factory(true,true,DatabaseDescriptor.getThriftMaxMessageLength())
killBillClient.createExternalCharges(externalCharges,clock.getUTCToday(),false,true,createdBy,reason,comment)
part.getContentType().toLowerCase(Locale.ROOT)
@ConditionalOnEnabledHealthIndicator("mongo")
provider.shouldNotBeCached()
processLine(text,false)
!TextUtils.isEmpty(info.getUploaderAvatarUrl())
log.info("Reset to factory defaults : onOperatorError")
toJSON(entry.getValue(),config)
audio_st != null && audio_st.metadata() != null
http2c.setInitialStreamRecvWindow(initialStreamSendWindow)
Number value=list.get(i); 
code.startLine("/* JADX WARNING: ").addMultiLine(warn.getWarn())
!this.transactional && this.referenceId == referenceId
2L * memsize.value() * 1024* 1024
Boolean shouldSendMagicLink
cursor.getFloat(1)
text.contains(nick + ":") || text.contains(nick + " ") || text.contains(" " + nick)|| text.endsWith(nick)|| text.equals(nick)
config().useCompressedClassPointers
relationship(19,c,"KNOWS",d)
mirror.getType()
!Boolean.parseBoolean(ac)
localeKeyMjFlow="buildcraft.mj.flow." + timeGap + longName
Assert.state(!initialized,"Stream is already initialized.  Close before re-opening.")
row.contextRowSlots != null && cellIndex < row.contextRowSlots.length
cs[c].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()))
assertEquals(3,data.size())
addSourcesAndHeadersBuildPhases(target,targetGroup,buildable.getSrcs(),buildable.getPerFileFlags())
idx[j] > 0
killBillClient.completePayment(completeTransactionWithTypeAndKey,pluginProperties,createdBy,reason,comment)
this.constraints.updateFromFactHandle(workingMemory,handle)
context.revertRestartRequired()
runelite.getEventBus().unregister(plugin)
args != null && args.length == 2
conf.setTimeDuration(ScmConfigKeys.OZONE_SCM_HEARTBEAT_INTERVAL,hbInterval.get(),TimeUnit.MILLISECONDS)
isDailyBuild()
UpgradeStepRegistrator.class
producerFlowControl=false
scope.getActiveInspectionProfiles()
IntrospectionSupport.setProperties(exchange.getContext().getTypeConverter(),jpa,options)
assignedServers.add(holder)
SwingUtilities.invokeLater(() -> this.markBaseChanged())
ImmutableSortedSet.of("a","abbr","acronym","address","area","b","bdo","big","blockquote","br","caption","cite","code","colgroup","dd","del","div","dfn","dl","dt","em","fieldset","font","h1","h2","h3","h4","h5","h6","hr","i","img","ins","kbd","li","ol","p","pre","q","samp","small","span","strong","style","sub","sup","table","tbody","td","tfoot","th","thead","tr","tt","ul")
this.indexBlockSize=8192
FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //thrift:fake","cpp_reflection_library = //thrift:fake","[project]","thrift_target_types_enabled = true")
public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
collectAndCheckHighlighting(checkWarnings,checkInfos,checkWeakWarnings,ignoreExtraHighlighting)
FileTemplateUtil.mergeTemplate(attributes,VfsUtil.loadText(file),true)
Thread.sleep(25)
importedLayout.getGroup()
id=19909
new VariableExpression(text)
timedOut=false
anyOf(success(),successNoContent(),serverError())
Keyspace.open(KEYSPACE).getColumnFamilyStore(currentTable()).getCompactionStrategyManager()
textView.setTextSize(TypedValue.COMPLEX_UNIT_PX,out.getDimension(bridgeContext.getResources().getDisplayMetrics()))
vals.length != _sparseLen
referenceStep.isPartitioned()
new ReformatCodeProcessor(psiFile.getProject(),psiFile,e.getTextRange(),false)
JBUI.Borders.empty(5,10,0,10)
!proportional
/**   * Unit tests for  {@link InProcess}.   */ @RunWith(JUnit4.class) public class InProcessTest extends AbstractInteropTest {   private static String serverName="test";   /**   * Starts the in-process server.   */   @BeforeClass public static void startServer(){     startStaticServer(InProcessServerBuilder.forName(serverName));   }   @AfterClass public static void stopServer(){     stopStaticServer();   }   @Override protected ManagedChannel createChannel(){     return InProcessChannelBuilder.forName(serverName).build();   } } 
FlinkKafkaProducer011.class
!elementAt.isValid()
testable.sort(reverse.clone())
logger.debug("Cannot play TuneIn station {} ({})",stationId,e.getMessage())
new PyStringLiteralLexer(PyTokenTypes.TRIPLE_QUOTED_UNICODE)
100 * 1000
get() == null
new IllegalArgumentException("a refresh request cannot be sent to an older version")
SimpleAttributeDefinitionBuilder.create("max-level",ModelType.STRING,true)
Throwable e
sender instanceof Player && ess.getUser(matchPlayer).isAuthorized("essentials.kill.exempt") && !ess.getUser(sender).isAuthorized("essentials.kill.force")
handleError("Failed to change current working directory ownership. Error code: " + Integer.toString(result),null)
/**   * @author Eric Vergnaud  */ public class Python2Target extends AbstractPythonTarget {   protected static final String[] python2Keywords={"abs","all","any","apply","as","bin","bool","buffer","bytearray","callable","chr","classmethod","coerce","compile","complex","delattr","dict","dir","divmod","enumerate","eval","execfile","file","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","intern","isinstance","issubclass","iter","len","list","locals","map","max","min","next","memoryview","object","oct","open","ord","pow","print","property","range","raw_input","reduce","reload","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","unichr","unicode","vars","with","xrange","zip","__import__","True","False","None"};   /**   * Avoid grammar symbols in this set to prevent conflicts in gen'd code.   */   protected final Set<String> badWords=new HashSet<String>();   public Python2Target(  CodeGenerator gen){     super(gen,"Python2");   }   @Override public String getVersion(){     return "4.4.0";   }   public Set<String> getBadWords(){     if (badWords.isEmpty()) {       addBadWords();     }     return badWords;   }   protected void addBadWords(){     badWords.addAll(Arrays.asList(python2Keywords));     badWords.add("rule");     badWords.add("parserRule");   } } 
new EntryEvent(packet.getName(),null,(int)packet.getLongValue(),toObject(packet.getKey()),toObject(packet.getValue()))
clusterSet.getClusterCount() < initialClusterCount && points.size() > 0
new ShardRouting(indexName,0,"_node_name",null,true,ShardRoutingState.STARTED,1)
!getRequiresCode()
previousState.getNextCall()
timestamp - base_time >= Const.MAX_TIMESPAN
new HashMap<>()
state.isKeyguardShowingAndNotOccluded() || state.dozing
mState.mPivotYRel != relative
metadata.getFaces()
TestUtil.nextInt(random(),1,3)
_version=version
this.session.users().getServiceAccount(client)
new RuntimeException(String.format("Incompatible SSTable found.  Current version %s is unable to read file: %s.  Please run upgradesstables.",Descriptor.Version.CURRENT,desc))
getServiceGuarded().addMultimediaMessageDraft(callingPkg,contentUri)
((HotSpotResolvedObjectType)type).getFingerprint() != 0
TextUtils.isEmpty(recipientIds[i]) || recipientIds[i].equals("-1")
line >= 0L
ifcg.addr == null || ifcg.addr.equals(InetAddress.getByName("0.0.0.0"))
LOG.assertTrue(file != null,"Virtual file should not be null!")
partition.getParameters()
new SimpleAssert<Boolean>(condition,Boolean.TRUE,message){   @Override public void doAssert(){     org.testng.Assert.assertTrue(condition,message);   } } 
serialVersionUID=5318897374067731021L
new BasicDBObject("version",1L)
RunnerApi.Trigger.newBuilder().setAfterEndOfWindow(RunnerApi.Trigger.AfterEndOfWindow.newBuilder())
new ArrayList<String>(256)
metadata.getColumnLabel(columnNumber)
@SuppressWarnings("unused") public JobsV3 fetch(int version,JobsV3 s){   Key key=s.job_id.key();   Value val=DKV.get(key);   if (null == val)   throw new IllegalArgumentException("Job is missing");   Iced ice=val.get();   if (!(ice instanceof Job))   throw new IllegalArgumentException("Must be a Job not a " + ice.getClass());   Job j=(Job)ice;   Jobs jobs=new Jobs();   jobs._jobs=new Job[1];   jobs._jobs[0]=(Job)ice;   s.jobs=new JobV3[1];   if (j instanceof ModelBuilder) {     s.jobs[0]=new ModelBuilderJobV3().fillFromImpl(j);   }  else {     try {       s.jobs[0]=(JobV3)Schema.schema(version,j).fillFromImpl(j);     }  catch (    H2ONotFoundArgumentException e) {       s.jobs[0]=new JobV3().fillFromImpl(j);     }   }   return s; } 
!_lifecycle.equals(PortletRequest.RESOURCE_PHASE)
ImmutableMap<String,EnvironmentIdExtractor>
builder.humanReadableField(ThrottlerField.THROTTLE_PERIOD.getPreferredName(),ThrottlerField.THROTTLE_PERIOD_HUMAN.getPreferredName(),throttlePeriod)
recordSetVersion1.getVersion()
verify(safeOutputStreamConsumer,times(7)).errOutput(anyString())
TABLE_FINISH
parser.parse(INFO_OPTIONS,args,true)
is(false)
LOGGER.warn("Could not execute cut",ex)
RTPConnectorOutputStream.logPacket(numberOfPackets) && NeomediaActivator.getPacketLogging().isLoggingEnabled(PacketLoggingService.ProtocolName.RTP) && socket.getLocalAddress() != null
indexStats.getPrimaries().getMerge().getCurrent()
endShape(CLOSE)
offView.setClearFlags(true,true,true)
Duration.between(created,Instant.now()).toMillis() / 1000
@Override protected Void doInBackground(Void... params){   helper.delete(groupsToDelete,getSelectedFavorites());   favoritesSelected.clear();   groupsToDelete.clear();   return getString(R.string.favourites_delete_multiple_succesful); } 
Preconditions.checkState(previous == null || previous.equals(value),"Expected header path to be consistent but key %s mapped to different values: " + "(old: %s, new: %s)",key,previous,value)
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA("DH-RSA-DES-CBC3-SHA",KeyExchange.DHr,Authentication.DH,Encryption.TRIPLE_DES,MessageDigest.SHA1,Protocol.SSLv3,false,EncryptionLevel.HIGH,true,112,168,"SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA")
new StringBuilder("Unavailable cipher suites: ")
listAdapter.swapCursor(cursor)
this.setParticipantState(stateString)
mHelper.onActivityCreate()
logger.warn("Failed to enumerate network interfaces",e)
new Argument().setIndex(1)
readRecord(id,record,mode,cursor)
addTest(AB_NEW_LOGIN_NO_GOOGLE,new int[]{1,1},new int[]{1,0},new String[]{"old-welcome","new-welcome"},true)
endpointA.expectedBodiesReceivedInAnyOrder("A blue car!","A blue car, again!")
input().size(0)
toBeRemovedKeys.removeAll(keysToDelete)
createFileFromText(name,language,text,true,true)
session.getMachineIdentifier().startsWith(config.getMachineIdentifier())
(res == VmRuntimeOS.OSReturn.OS_ERR()) && (Errno.errno() == Errno.EINTR())
String.format("<html>Commits that exist in <code><b>%s</b></code> but don't exist in <code><b>%s</b></code> (<code>git log %s..%s</code>):</html>",secondBranch,firstBranch,firstBranch,secondBranch)
bundledResourcesDir == null || !bundledResourcesDir.isDirectory()
myImplementation.clearAndRecreate(myVcsLocation)
attr("heuristic_label_expansion",BOOLEAN).value(false)
randomIntBetween(1,10)
ElementsParser.isAlphaNumeric(ch2)
Latkes.getStaticServePath()
ObservableSource<T>
producer.requested > 0 && q.count() == 0
mInstalld.createProfileSnapshot(appId,packageName,codePath)
Details_DialogLayout.findViewById(R.id.ll_location)
NetworkCatalogItem libraryItem(); 
Class.forName(className,false,tccl)
toDiscard > 0 && i < 0
Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out3p)
getWebElement(locator,"1")
project.getPluginArtifactRepositories()
logger.trace("NODE {}: App version requested but version is unknown",this.getNodeId())
assertThat(dto.get("snapshotId")).isEqualTo(3L)
isStopped
10 * 1000
List<SampleItem>
StringBuffer pattern=new StringBuffer(this.prefix); 
client.login(email,password,code).compose(Transformers.pipeApiErrorsTo(tfaError)).compose(Transformers.neverError()).doOnSubscribe(() -> formSubmitting.onNext(true)).doAfterTerminate(() -> formSubmitting.onNext(false))
id=10853
applicationContext.close()
singleParameterInfo
0.25f * METERS_IN_ONE_MILE
replacement instanceof PsiStatement && !(replacement.getLastChild() instanceof PsiJavaToken) && !(replacement.getLastChild() instanceof PsiComment)
assertThat(set.contains("123")).isTrue()
readSuspendablesFile(suspendablesFileName,suspendables,suspendableClasses)
lowerCaseLine.contains("authentication failed") || lowerCaseLine.contains("403 forbidden") || lowerCaseLine.contains("error: 400")|| (lowerCaseLine.contains("fatal: repository") && lowerCaseLine.contains("not found"))|| lowerCaseLine.contains("[remote rejected] (permission denied)")
diff < leeway + 1
isDirectory()
nextValue >= 0x9F
getGenericParameterType(genericType,1)
logger.warn("P2p handling failed",cause)
OrderUtils.getPriority(((DecoratingProxy)obj).getDecoratedClass())
!_informAdministrator || !_log.isWarnEnabled()
in.readLong()
24 * density
logoutConfigurer != null && logoutHandler != null
inflater.inflate(R.layout.mdtp_time_picker_dialog,container,false)
Math.toDegrees(Math.asin(burgerWidth / hypotenuse)) + 80
accountCapsule.putLatestAssetOperationTimeMap(tokenName,latestAssetOperationTime)
new ProtoFile("waffles.proto",null,NO_STRINGS,NO_STRINGS,Arrays.asList(expected),NO_SERVICES,map(),NO_EXTEND_DECLARATIONS)
view.getClusteredLayerDegree(absNode)
new LinkedHashMap<>(0)
binary.getDisplayName()
getStreamNode(vertexID)
buttonevent != null && !initializing
editor.isDirty()
Math.max(aggregateData.getAvgColLen(),newData.getAvgColLen())
invoke(agentInfoList,payload,DEFAULT_FUTURE_TIMEOUT)
obtainMessage(MSG_TIMEOUT,state,0)
archive.getNameHash() != 0
node.getBeginLine()
i < 300000
gen.get().document("target/testdocs","testsection")
resp.setHeader("Access-Control-Allow-Methods",methods)
ccCompilationContextInfo != null
position >= 0 && position < size()
XmppStringUtils.parseBareJid(key)
flipX=1
AbstractBootstrap<ServerBootstrap,Channel>
found != null && found != r
final ILabelProvider mainLabelProvider=(ILabelProvider)viewer.getLabelProvider(); 
indexOutURI.toString()
containsInAnyOrder(proc("dbms.listConfig","(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, value :: STRING?, dynamic :: BOOLEAN?)","List the currently active config of Neo4j.","DBMS"),proc("db.constraints","() :: (description :: STRING?)","List all constraints in the database.","READ"),proc("db.indexes","() :: (description :: STRING?, indexName :: STRING?, tokenNames :: LIST? OF STRING?, properties :: " + "LIST? OF STRING?, state :: STRING?, type :: STRING?, progress :: FLOAT?, provider :: MAP?, id :: INTEGER?, " + "failureMessage :: STRING?)","List all indexes in the database.","READ"),proc("db.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\")).","READ"),proc("db.awaitIndexes","(timeOutSeconds = 300 :: INTEGER?) :: VOID","Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\")).","READ"),proc("db.resampleIndex","(index :: STRING?) :: VOID","Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\")).","READ"),proc("db.resampleOutdatedIndexes","() :: VOID","Schedule resampling of all outdated indexes.","READ"),proc("db.propertyKeys","() :: (propertyKey :: STRING?)","List all property keys in the database.","READ"),proc("db.labels","() :: (label :: STRING?)","List all labels in the database.","READ"),proc("db.schema","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? " + "OF " + "RELATIONSHIP?)","Show the schema of the data.","READ"),proc("db.schema.visualization","() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)","Visualize the schema of the data. Replaces db.schema.","READ"),proc("db.schema.nodeTypeProperties","() :: (nodeType :: STRING?, nodeLabels :: LIST? OF STRING?, propertyName :: STRING?, " + "propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the nodes in tabular form.","READ"),proc("db.schema.relTypeProperties","() :: (relType :: STRING?, " + "propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?)","Show the derived property schema of the relationships in tabular form.","READ"),proc("db.relationshipTypes","() :: (relationshipType :: " + "STRING?)","List all relationship types in the database.","READ"),proc("dbms.procedures","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?, mode :: STRING?)","List all procedures in the DBMS.","DBMS"),proc("dbms.functions","() :: (name :: STRING?, signature :: " + "STRING?, description :: STRING?)","List all user functions in the DBMS.","DBMS"),proc("dbms.components","() :: (name :: STRING?, versions :: LIST? OF" + " STRING?, edition :: STRING?)","List DBMS components and their versions.","DBMS"),proc("dbms.queryJmx","(query :: STRING?) :: (name :: STRING?, " + "description :: STRING?, attributes :: MAP?)","Query JMX management data by domain and name." + " For instance, \"org.neo4j:*\"","DBMS"),proc("db.createLabel","(newLabel :: STRING?) :: VOID","Create a label","WRITE"),proc("db.createProperty","(newProperty :: STRING?) :: VOID","Create a Property","WRITE"),proc("db.createRelationshipType","(newRelationshipType :: STRING?) :: VOID","Create a RelationshipType","WRITE"),proc("db.index.explicit.searchNodes","(indexName :: STRING?, query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit index. Replaces `START n=node:nodes('key:foo*')`","READ"),proc("db.index.explicit.seekNodes","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit index. Replaces `START n=node:nodes(key = 'A')`","READ"),proc("db.index.explicit.searchRelationships","(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index. Replaces `START r=relationship:relIndex('key:foo*')`","READ"),proc("db.index.explicit.auto.searchNodes","(query :: ANY?) :: (node :: NODE?, weight :: FLOAT?)","Search nodes in explicit automatic index. Replaces `START n=node:node_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekNodes","(key :: STRING?, value :: ANY?) :: (node :: NODE?)","Get node from explicit automatic index. Replaces `START n=node:node_auto_index(key = 'A')`","READ"),proc("db.index.explicit.auto.searchRelationships","(query :: ANY?) :: (relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit automatic index. Replaces `START r=relationship:relationship_auto_index('key:foo*')`","READ"),proc("db.index.explicit.auto.seekRelationships","(key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)","Get relationship from explicit automatic index. Replaces `START r=relationship:relationship_auto_index(key = 'A')`","READ"),proc("db.index.explicit.addNode","(indexName :: STRING?, node :: NODE?, key :: STRING?, value :: ANY?) :: (success :: BOOLEAN?)","Add a node to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.addRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, key :: STRING?, value :: ANY?) :: " + "(success :: BOOLEAN?)","Add a relationship to an explicit index based on a specified key and value","WRITE"),proc("db.index.explicit.removeNode","(indexName :: STRING?, node :: NODE?, key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) " + ":: (success :: BOOLEAN?)","Remove a node from an explicit index with an optional key","WRITE"),proc("db.index.explicit.removeRelationship","(indexName :: STRING?, relationship :: RELATIONSHIP?, " + "key =  <[9895b15e-8693-4a21-a58b-4b7b87e09b8e]>  :: STRING?) :: (success :: BOOLEAN?)","Remove a relationship from an explicit index with an optional key","WRITE"),proc("db.index.explicit.drop","(indexName :: STRING?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Remove an explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forNodes","(indexName :: STRING?, config = {} :: MAP?) :: (type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a node explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.forRelationships","(indexName :: STRING?, config = {} :: MAP?) :: " + "(type :: STRING?, name :: STRING?, config :: MAP?)","Get or create a relationship explicit index - YIELD type,name,config","WRITE"),proc("db.index.explicit.existsForNodes","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a node explicit index exists","READ"),proc("db.index.explicit.existsForRelationships","(indexName :: STRING?) :: (success :: BOOLEAN?)","Check if a relationship explicit index exists","READ"),proc("db.index.explicit.list","() :: (type :: STRING?, name :: STRING?, config :: MAP?)","List all explicit indexes - YIELD type,name,config","READ"),proc("db.index.explicit.seekRelationships","(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (relationship :: RELATIONSHIP?)","Get relationship from explicit index. Replaces `START r=relationship:relIndex(key = 'A')`","READ"),proc("db.index.explicit.searchRelationshipsBetween","(indexName :: STRING?, in :: NODE?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in' and ending at 'out'.","READ"),proc("db.index.explicit.searchRelationshipsIn","(indexName :: STRING?, in :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, starting at the node 'in'.","READ"),proc("db.index.explicit.searchRelationshipsOut","(indexName :: STRING?, out :: NODE?, query :: ANY?) :: " + "(relationship :: RELATIONSHIP?, weight :: FLOAT?)","Search relationship in explicit index, ending at the node 'out'.","READ"),proc("dbms.clearQueryCaches","() :: (value :: STRING?)","Clears all query caches.","DBMS"),proc("db.createIndex","(index :: STRING?, providerName :: STRING?) :: (index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a schema index with specified index provider (for example: CALL db.createIndex(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.createUniquePropertyConstraint","(index :: STRING?, providerName :: STRING?) :: " + "(index :: STRING?, providerName :: STRING?, status :: STRING?)","Create a unique property constraint with index backed by specified index provider " + "(for example: CALL db.createUniquePropertyConstraint(\":Person(name)\", \"lucene+native-2.0\")) - " + "YIELD index, providerName, status","SCHEMA"),proc("db.index.fulltext.awaitEventuallyConsistentIndexRefresh","() :: VOID","Wait for the updates from recently committed transactions to be applied to any eventually-consistent fulltext indexes.","READ"),proc("db.index.fulltext.awaitIndex","(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID","Similar to db.awaitIndex(index, timeout), except instead of an index pattern, the index is specified by name. " + "The name can be quoted by backticks, if necessary.","READ"),proc("db.index.fulltext.createNodeIndex","(indexName :: STRING?, labels :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, " + "config = {} :: MAP?) :: VOID",startsWith("Create a node fulltext index for the given labels and properties."),"SCHEMA"),proc("db.index.fulltext.createRelationshipIndex","(indexName :: STRING?, relationshipTypes :: LIST? OF STRING?, propertyNames :: LIST? OF STRING?, config = {} :: MAP?) :: VOID",startsWith("Create a relationship fulltext index for the given relationship types and properties."),"SCHEMA"),proc("db.index.fulltext.drop","(indexName :: STRING?) :: VOID","Drop the specified index.","SCHEMA"),proc("db.index.fulltext.listAvailableAnalyzers","() :: (analyzer :: STRING?, description :: STRING?)","List the available analyzers that the fulltext indexes can be configured with.","READ"),proc("db.index.fulltext.queryNodes","(indexName :: STRING?, queryString :: STRING?) :: (node :: NODE?, score :: FLOAT?)","Query the given fulltext index. Returns the matching nodes and their lucene query score, ordered by score.","READ"),proc("db.index.fulltext.queryRelationships","(indexName :: STRING?, queryString :: STRING?) :: (relationship :: RELATIONSHIP?, " + "score :: FLOAT?)","Query the given fulltext index. Returns the matching relationships and their lucene query score, ordered by " + "score.","READ"),proc("db.stats.retrieve","(section :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve statistical data about the current database.","READ"),proc("db.stats.retrieveAllAnonymized","(graphToken :: STRING?) :: (section :: STRING?, data :: MAP?)","Retrieve all available statistical data about the current database, in an anonymized form.","READ"),proc("db.stats.status","() :: (section :: STRING?, status :: STRING?, data :: MAP?)","Retrieve the status of all available collector daemons, for this database.","READ"),proc("db.stats.collect","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Start data collection of a given data section. Valid sections are 'QUERIES'","READ"),proc("db.stats.stop","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Stop data collection of a given data section. Valid sections are 'QUERIES'","READ"),proc("db.stats.clear","(section :: STRING?) :: (section :: STRING?, success :: BOOLEAN?, message :: STRING?)","Clear collected data of a given data section. Valid sections are 'QUERIES'","READ"))
WriteReplyToCommentActivity.ACTION_NOTIFICATION_REPLY.equals(getIntent().getAction()) || WriteReplyToCommentActivity.ACTION_SEND_FAILED.equals(getIntent().getAction())
new StringBundler(9)
myDetachIsDefault
file == null || file.getVirtualFile() == null
event.getTime() != DURATION_INFINITE && event.getTime() <= currentPlayTime
/**   * Indicates that all Facebook users are able to see posts made by the application.  */ EVERYONE(NativeProtocol.AUDIENCE_EVERYONE)
componentSettings.getAsDouble("segments_per_tier",10.0d)
Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
Float[]
activityInfos.get(position).componentName
LOG.info("No SessionScavenger set, using defaults")
imageViewShadow.setBackgroundResource(R.drawable.shadow)
uri.toString()
marketDataService.getOrderBook(CurrencyPair.BTC_USD)
nextRenderId=32
new ByteBuddy().with(TypeValidation.DISABLED).ignore(none()).subclass(baseClass).method(isDeclaredBy(baseClass)).intercept(StubMethod.INSTANCE).make().load(newClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded().getDeclaredConstructor()
public Builder setCompressionEnabled(boolean compressionEnabled){   configBuilder.setCompressionEnabled(compressionEnabled);   return this; } 
GoExecutor.in(module).withExePath(executable.getAbsolutePath()).withParameters("-w",filePath)
doPost("http://localhost:" + PORT + "/the/bookstore/books/convert",400,"application/xml","resources/add_book.txt",null)
id=10867
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
sigma[i] != 0.0
assertEquals(2,versions.size())
configurations.maybeCreate(Dependency.DEFAULT_CONFIGURATION)
new FilesListComparator(){   @Override public int doItemCompare(  FileSystemItem arg0,  FileSystemItem arg1){     if (arg0 == parentPath_)     return 1;  else     if (arg1 == parentPath_)     return -1;  else     return arg0.getExtension().compareTo(arg1.getExtension());   } } 
line.startsWith("fatal") || line.startsWith("error: ") || line.startsWith("Cannot rebase")
mContext.sendBroadcast(intent)
ModalityState.defaultModalityState()
assertEquals(1,auth.getFailures().size())
SCHEDULED_EXECUTOR_POOL_SIZE=8
methodMatches(method,null,PsiType.INT,HardcodedMethodConstants.COMPARE_TO,PsiType.NULL)
request.getSharedAttributeNames()
headers.keySet().iterator()
mOuterRadius * 0.9f
private Text text; 
msg.obj != mSmHandlerObj
UpgradeStepRegistrator.class
GLDrawableFactory.getFactory(GLProfile.getMaxFixedFunc(true)).createOffscreenAutoDrawable(null,caps,null,width,height,null)
!moduleFileIndex.isInTestSourceContent(fileOrDir)
super.getThickness() + 6
attributes.getAllFlags()
client.postProjectComment(project,body).compose(Transformers.pipeApiErrorsTo(postCommentError)).compose(Transformers.neverError()).doOnSubscribe(() -> commentIsPosting.onNext(true)).doAfterTerminate(() -> commentIsPosting.onNext(false))
delayMs <= 0
json.getJSONArray("roles")
this.separator
privObj.getObjectName().equals("masking_test_view") || privObj.getObjectName().startsWith("masking_test_view_n")
sortedRanges.size()
bagEntry != null && bagEntry.state().compareAndSet(STATE_NOT_IN_USE,STATE_IN_USE)
c("")
uid == Process.SHELL_UID && (pkgSetting.pkgFlags & ApplicationInfo.FLAG_TEST_ONLY) == 0
OsmandPlugin.isDevelopment() && res.getRoutingTime() != 0f
needApply=10
PORT=6336
@Override public VariableExpression visitBuiltInType(BuiltInTypeContext ctx){   String text;   if (asBoolean(ctx.VOID())) {     text=ctx.VOID().getText();   }  else   if (asBoolean(ctx.BuiltInPrimitiveType())) {     text=ctx.BuiltInPrimitiveType().getText();   }  else {     throw createParsingFailedException("Unsupported built-in type: " + ctx,ctx);   }   return configureAST(new ClassExpression(ClassHelper.make(text)),ctx); } 
mFlexItemInEdit.setAlignSelf(AlignItems.CENTER)
new DeserializationException("Error reading field " + fieldNumber + " as "+ target.getClass().getName(),e)
serialVersionUID=827245030
testAllocation("test1snippet",2,0,0)
invokeKind != InvokeKind.Special && this.optimisticOpts.useTypeCheckHints()
!wasMultiTouchinZoomMode
expert == null
new OutputStreamWriter(output,ContentUtils.DEFAULT_CHARSET)
Optional<S>
!ffmpegExecuteAsyncTask.isProcessCompleted()
plotNode(g2,loc,c,size,"")
Assert.assertEquals(50000,trace.getReceipt().getEnergyUsage())
retries == 0 && totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()
if (segmented) throw new IgniteException("Failed to send custom message: client is disconnected"); 
getChatWritePanel().getEditorPane().requestFocusInWindow()
logger.info(String.format("Class %s was excluded by a class filter: %s",testClass.getName(),reason.orElse("<unknown reason>")))
420L * FileUtils.ONE_MB
payload.get(PRESENTATION_ID)
LOG_SERVICE_START_STOP=false
inner.innerSetException(new TimeoutException(),false)
new UserDao(system2)
logger.fine(String.format("will wait %dms before reconnect attempt",delay))
map.set(key,"value",5,TimeUnit.SECONDS)
-2
writeString(writer,fieldName,String.valueOf(reader.getShort()))
new GroovyParser().parseLight(GroovyElementTypes.EXPRESSION,builder)
splashImageView != null && splashImageView.getParent() != null
new Date(1)
randomIntBetween(4,12)
testStatus.equals("FIXED") || testStatus.equals("PASSED") || testStatus.equals("SKIPPED")
logger.fine("Computing Control Flow Graph")
NotifyUtil.show("Info",formatter.formatMessage(record),MessageType.INFO,listener,6000)
buildExplodedWebapp(getWebappDirectory())
Arrays.asList("Java","CSharp","Python2","Python3","Node","Cpp")
XMLOutputFactory.newInstance()
Assert.assertEquals(3,visitor.getConditions().size())
mTmpRect.height() > 0 && mTmpRect.width() > 0
!mIsAttached || mAdapter == null
checkArgument(child.parent == null,"Cannot add already-owned child node.\nChild: %s\nExisting parent: %s\nNew parent: %s",child,parent,this)
CONCURRENT_THREAD_COUNT=30
Math.sin(Math.toRadians(degrees))
maxSize(new Fixed(width),new Fixed(height))
_endp.isOpen() && (more_in_buffer || progress) && connection == this
REJECT_OUTSIZED_RESTORE=true
TokenSet.create(PACKAGE,IMPORT,BREAK,CASE,CHAN,CONST,CONTINUE,DEFAULT,DEFER,ELSE,FALLTHROUGH,FOR,FUNC,GO,GOTO,IF,IMPORT,INTERFACE,MAP,PACKAGE,RANGE,RETURN,SELECT,STRUCT,SWITCH,TYPE_,VAR)
case 6: 
String.format("BUG: %s changed requestable capabilities during rematch: %s -> %s",newNetwork.name(),nc,newNetwork.networkCapabilities)
this.mappingDestFile
StringUtil.toHexString(key.hashCode())
mFragmentManager != null && mFragmentManager.findFragmentById(R.id.navigation_drawer) != null
discoLatch.await(3000,MILLISECONDS)
a.getString(attr)
UpgradeStepRegistrator.class
dir=0
planPhase != null && planPhase.getUsages() != null
realm.createObject(AllTypes.class,newObject.getColumnString())
this.posColumn=column
sm.getString("introspection.classLoadFailed",className)
lab.equals("N2") || lab.equals("AB")
dropAllTables()
dlFileShortcutLocalService.deleteFileShortcut(fileShortcutId)
@Nonnull Long versionId
TESTS=40
AsyncResult<Void>
new Dimension(800,200)
override.asString()
return closeNotifyTimeoutMillis; 
new BookmarksServiceVerifyProcess()
new EnterSelectionDialog(shell,files,Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogTitle"),Messages.getString("TextFileOutputDialog.SelectOutputFiles.DialogMessage"))
argCount > paramCount || argCount == paramCount - 1
port < 0
String.format(Locale.ROOT,"User [%s] doesn't exist",username)
(Double)x
new int[101]
displayContent.getDockedStackVisibleForUserLocked()
new ReadOnlyMapELResolver(beans)
clazz.isPrimitive() || clazz.isArray() || desc.getSerialVersionUID() == 0
reportNotAnnotatedInterfaces=true
!isDefault() && !ApplicationManager.getApplication().isUnitTestMode() && !ApplicationManager.getApplication().isHeadlessEnvironment()
wtfilter.setWidth(70)
/**   * Return the native Typeface object associated with this PFont (if any).  */ public Object getNative(){   if (subsetting) {     return null;   }   return typeface; } 
users.get(j)
participantAddresses.get(1)
getListeners(listener)
BACKOFF_DISMISSAL_COUNT_ON_SWIPE_UP_SHOW=1
2
!SessionErrors.isEmpty(resourceRequest)
getOldValue()
DefaultDeclaredTaskInputFilePropertySpec spec=new DefaultDeclaredTaskInputFilePropertySpec(task.getName(),resolver,paths,validationAction); 
modItems == null || engine == null
new FallbackStringToObjectConverter()
StepVerifier.withVirtualTime(() -> Flux.concat(Flux.range(0,2),Flux.error(exception)).retryBackoff(4,Duration.ofMillis(100),Duration.ofMillis(220),0.9).elapsed().doOnNext(elapsed -> {   if (elapsed.getT2() == 0)   elapsedList.add(elapsed.getT1()); } ).map(Tuple2::getT2)).thenAwait(Duration.ofSeconds(2)).expectNext(0,1).expectNext(0,1,0,1,0,1,0,1).expectErrorSatisfies(e -> assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage("Retries exhausted: 4/4").hasCause(exception))
30 * 8
ServerUtilities.unregister(this,ServerUtilities.getDeviceId(this))
gsonWrappedStack.toJsonTree(recipeMapping.outputWrappedStack,WrappedStack.class)
/**   * Link to wiki, autogenerated using the name identifier.  */ AUTOGENERATED
PyTokenTypes.ADDITIVE_OPERATIONS.contains(op) || PyTokenTypes.MULTIPLICATIVE_OPERATIONS.contains(op) || PyTokenTypes.SHIFT_OPERATIONS.contains(op)|| PyTokenTypes.BITWISE_OPERATIONS.contains(op)|| op == PyTokenTypes.EXP
hasRows("SyncDLObject")
win.isDrawnLw() || win.hasAppShownWindows()
baksmali.disassembleDexFile(mApkFile.getAbsolutePath(),new DexFile(mApkFile),false,mOutDir.getAbsolutePath(),null,null,null,false,true,true,mBakDeb,false,false,mDebug ? main.DIFFPRE : 0,false,false,null,false)
addListenerMethod2.addScopedInterceptor(NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER,NettyConstants.SCOPE,ExecutionPolicy.BOUNDARY)
@Self Object currentStatement
allocator.getFlowController().prepareActionAllWrite(x,activations,gamma,beta,mean,var)
endLine - startLine >= 0
parent.getRegionNameAsString()
getNodeAddresses(node,U.sameMacs(locNode,node))
timeout * 10
setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)
ModuleFactory.stopModule(mod,true,true)
BeanPropertiesUtil.getObjectSilent(model,_keyProperty)
new QueuedThreadPool(4)
new ArrayList<>(27)
JBUI.Borders.empty(0,12,0,3)
Number value=iterator.next(); 
app.info.targetSdkVersion >= targetSdkVersion
mAimsicdService.getCellTracker().updateNeighboringCells()
setVerticalAlignment(CENTER)
ApplicationMode.toHumanString(osmandSettings.APPLICATION_MODE.get(),this)
FILES_LINES[i]
StringBuilder builder
identifier != null
List<Language>
r.nextFloat() < 0.01
!token.trim().isEmpty()
createUrl(Url.append(myRepositoryRoot,originUrl),false)
RemovePortletSMTest.class
SELENIUM_EXECUTABLE_DIR_NAME + SELENIUM_IE_DRIVER_EXECUTABLE
data.contains("black") || data.contains("tuxedo")
userPreferences.getBoolean(context.getString(R.string.pref_share_contacts_key),true)
LOG.error("Exception occurred during processing request: {}",e.getMessage(),e)
!myIsDisposed && editor.getComponent().isShowing() && !editor.isViewer()
String.format("%s is not a parsable int (base10) for %s",optionValue,COMPACTION_WINDOW_SIZE_KEY)
baseKey.plusDays(addedBucketsLeft * interval)
client.getLocalPlayer().getInteracting().getName().contains(FISHING_SPOT)
FileSwapSpaceSpi fileSwap=(FileSwapSpaceSpi)swap; 
parent.getChildPosition(child)
mService.removeNetwork(netId)
batteryService.getBatteryLevelLow()
Locale.getDefault().toLanguageTag()
LinkageError|Exception
internalCluster().startNodesAsync(1)
JavaSourceGroovyPackagesSecuritySuite.suite()
cache.put(new Element(key,element))
node.set("persons",persons)
request == null
new StringInputRowParser(dataSpec == null ? null : dataSpec.toParseSpec(timestampSpec,dimensionExclusions),null,null,null,null)
new XStream(new PropertyReflectionProvider())
buf.putLong(utf.length)
resolvedMode.toString()
Number value2
((JetPostfixExpression)element).getOperationReference()
packet.getAttribute("from").split("/",2)
ModuleType.get(module).getIcon()
FileUtil.toContainerFile(searchPath)
mContext.startActivityAsUser(cantAddAccount,new UserHandle(userId))
randomFrom(() -> new ComposeProcessor(instance.first(),randomValueOtherThan(instance.second(),() -> randomColumnProcessor(0))),() -> new ComposeProcessor(randomValueOtherThan(instance.first(),() -> randomColumnProcessor(0)),instance.second()))
new AnAction("Left | Right","",VcsUtil.ourNotDot){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=true;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourDot : VcsUtil.ourNotDot);   } } 
holder == null || holder.provider == null
args[0]
optQuery(new JSONPointer(jsonPointer))
console.addToHistory(string,attributes)
StringBuilder targetUrl=new StringBuilder(); 
resetAndUpdateValuesFromDeck()
UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark || UserPreferences.getTheme() == R.style.Theme_AntennaPod_TrueBlack
CommandUtils.convertMsToDate(files[1].getCreationTimeMs())
cursor.shouldRetry()
NativeFormatPlugin[]
interval <= 0
assertEquals("throughput",47.75795226,model.getThroughput(),0.000000001)
collectionsTypeName != null
methodExists(setterName,fieldNode,false)
handles[count]
new Counter(mOnBatteryScreenOffTimeBase)
return 0L; 
count <= 0
disable2ForUser(what,token,pkg,mCurrentUserId)
mPanelClosedOnDown && !mHeadsUpManager.hasPinnedHeadsUp() && !mTracking&& !mStatusBar.isBouncerShowing()&& !mStatusBar.isKeyguardFadingAway()
new IndexWriter(dir3,anlzr,false,IndexWriter.MaxFieldLength.LIMITED)
new Thread("Profiler stream copy"){   @Override public void run(){     byte[] buffer=new byte[4096];     try {       while (true) {         int len=in.read(buffer,0,buffer.length);         if (len < 0) {           break;         }         out.write(buffer,0,len);       }     }  catch (    Exception e) {       throw new RuntimeException(e);     }   } } .start()
-473630329
rows.get(lastIndex).key.key.equals(finishKeyBytes)
Stream.of("CYPHER 3.1","CYPHER 3.4")
!isResumed()
limit >= 0
ChannelInterceptor interceptor
@Override public Response header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
FileUtil.loadFileText(new File(patchPath),CharsetToolkit.UTF8)
DBFactoryUtil.setDB(getDBType(),null)
element == null || element instanceof PsiEmptyStatement
runAndVerifyStatusSorted("! root" + File.separator + "target"+ File.separator+ "source","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s1.txt","! root" + File.separator + "target"+ File.separator+ "source"+ File.separator+ "s2.txt")
restRequest.param("metric","")
state.getTypes().isSubtype(argType,jUnit4ClassRunnerType)
toolWrapper.addProblemElement(refEntity,problemDescriptor)
VMDebug.attachAgent(library,classLoader)
public LineItem mapLine(FieldSet fieldSet,int lineNum){   LineItem item=new LineItem();   item.setItemId(fieldSet.readLong(ITEM_ID_COLUMN));   item.setPrice(fieldSet.readBigDecimal(PRICE_COLUMN));   item.setDiscountPerc(fieldSet.readBigDecimal(DISCOUNT_PERC_COLUMN));   item.setDiscountAmount(fieldSet.readBigDecimal(DISCOUNT_AMOUNT_COLUMN));   item.setShippingPrice(fieldSet.readBigDecimal(SHIPPING_PRICE_COLUMN));   item.setHandlingPrice(fieldSet.readBigDecimal(HANDLING_PRICE_COLUMN));   item.setQuantity(fieldSet.readInt(QUANTITY_COLUMN));   item.setTotalPrice(fieldSet.readBigDecimal(TOTAL_PRICE_COLUMN));   return item; } 
assertEquals(1,beanInfo.getOperations().length)
JournalArticleFinderUtil.findByC_G_F_C_A_V_T_D_C_T_S_T_D_R(companyId,groupId,folderIds,classNameId,articleId,version,title,description,content,ddmStructureKey,ddmTemplateKey,displayDateGT,displayDateLT,reviewDate,andOperator,queryDefinition)
UserLocalServiceUtil.getUserById(userId)
AtomicIndexReader reader=getOnlySegmentReader(IndexReader.open(dir)); 
Log.d(TAG,"getNetworkScore found scored network " + network.networkKey + " score "+ Integer.toString(score)+ " RSSI "+ result.level+ " isActiveNetwork "+ isActiveNetwork)
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
atLeast(10)
Arrays.asList(1L,2L,5L,6L,7L,8L,9L,10L,11L,13L)
LOG.debug(String.format("Loaded %d edits starting from txid %d ",editsLoaded,lastTxnId))
Generics.newTreeMap()
LayoutLocalServiceUtil.validateImportPortletInfo(userId,targetPlid,targetGroupId,portletId,parameterMap,larFile)
/**   * set if this item is enabled  * @param enabled true if this item is enabled  * @return  */ public Item withEnabled(boolean enabled){   this.mEnabled=enabled;   return (T)this; } 
destroyScripts[i]
Exception e
@NonNull BluetoothDevice bluetoothDevice
ref_val.startsWith("HTTP error 403") || ref_val.startsWith("HTTP error 503")
mTempDate.get(Calendar.DAY_OF_YEAR) == mMinDate.get(Calendar.DAY_OF_YEAR)
length <= Bytes.SIZEOF_LONG && length > 0
loadModuleProble(iFace,features.mockedType,false,false,true)
sExecutorService.shutdownNow()
sysPs != null && sysPs.pkg != null
lastSyncTimestamp=now
Status.createStatuseList(get(getBaseURL() + "statuses/retweets/" + statusId+ ".json",true))
mCurrentPage == newPageIndex
new Font(edgeFontName,edgeFontStyle,edgeFontSize)
specBuilder.setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
@Override public VariableExpression visitBuiltInTypePrmrAlt(BuiltInTypePrmrAltContext ctx){   return configureAST(this.visitBuiltInType(ctx.builtInType()),ctx); } 
!configuration.getEntityStateListener().isEmpty()
maxMergedSegmentBytes / 1024.0 / 1024.0
@Override public CONTAINER getContainer(){   return container; } 
s != null && Boolean.parseBoolean(s)
Preconditions.checkNotNull(uri,"uri")
ModuleOrderEntry orderEntry
new NTCredentials(proxyUser,proxyPass,LOCALHOST,PROXY_DOMAIN)
DESCRIPTION_PATTERN.matcher(output)
!KeyEvent.isMetaKey(keyCode)
isDismissed || outerCircleCenter == null
worker.clear()
VERSION=27
new ArrayList<>(data.size())
stat.st_ctim.tv_nsec.longValue()
client.execute_cql3_query(formattedQuery,key,Compression.NONE,state.settings.command.consistencyLevel)
signature != null && function.getParameterList().getParameters().length > 0
Arrays.asList("4.0","3.8.2","3.8.1","RELEASE","LATEST")
tblObj.getPath()
tree.getBounds()
REVISION=10804
onNoteSaved(noteTmp)
CollectionUtils.isEmpty(elements)
SimpleOrderedMap<Object>
String.format("%s [name='%s']",ps.getClass().getSimpleName(),name)
info.getVoiceMailAlphaTagForSubscriber(subId,mContext.getOpPackageName())
tableRow.getString("type").toLowerCase(Locale.ENGLISH)
super.getSummary()
/**   * Replace the characters from startPos, inclusive, until endPos, exclusive, with the given string.  * @param startPos The position from which to start replacing, inclusive  * @param endPos The position at which to end replacing, exclusive  * @param replaceWith The string to replace with  */ public static SuggestedFix replace(int startPos,int endPos,String replaceWith){   return builder().replace(startPos,endPos,replaceWith).build(); } 
ctClass.toClass(clazz.getClassLoader(),null)
i < 100
parsed.isJsonNull() || parsed.isJsonPrimitive()
Assert.assertTrue(content.contains(GroupConstants.CONTROL_PANEL_FRIENDLY_URL))
path.getPath()
DSVHTTPDataAdapter.Config.builder().type(NAME).url("https://example.org/table.csv").separator(",").lineSeparator("\n").quotechar("\"").ignorechar("#").keyColumn(0)
isDelegateLastClassLoaderName(classloaderName)
((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) && (shortcutChar != 0) && (shortcutChar == possibleChars.meta[0] || shortcutChar == possibleChars.meta[2] || (qwerty && shortcutChar == '\b' && keyCode == KeyEvent.KEYCODE_DEL))&& item.isEnabled()&& item.isVisible()
@Override public final DivideByOnConditionStep on(String sql){   and(sql);   return this; } 
Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)
hostTimeStamp=-1
field.hasName()
Arrays.asList("shell","am","broadcast","-a","com.taobao.atlas.intent.PATCH_APP","-e","pkg",patchPkg,"-n",patchPkg + "/com.taobao.atlas.update.AwoPatchReceiver")
(Transaction)result.graph()
readySegment.getDateRangeEnd() > segment.getDateRangeStart()
original.getKeyProperty("path") != null || properties.get("context") != null
new IllegalStateException("Legacy advertising can't include TX power level in header")
tfoi.setSpecifyingFormat(wSpecifyFormat.getSelection())
BuildArtifactsBeforeRunTaskProvider.setBuildArtifactBeforeRunOption(myMainPanel,myProject,selectedArtifact,true)
controller != null && controller.getState() != ServiceController.State.UP
node instanceof InspectionRootNode || node instanceof InspectionGroupNode || node instanceof InspectionSeverityGroupNode
mVibrator.vibrate(750L)
useHash=false
_channel.abort(new IOException("unconsumed input"))
String TAG="Omni Notes"; 
new BooleanValidator("store.json.extended_types",false)
newId >= max
receiverType.getSetterMethod(setter,false)
response == null
o1 instanceof Comparable && o2 instanceof Comparable && o1.getClass() == o2.getClass()
F.<Object>asList(ipFinder)
logger.debug("Execution of UDF '{}' failed",name,e)
WebServicesTestUtils.checkStringEqual("hadoopBuildVersion",VersionInfo.getBuildVersion(),hadoopBuildVersion)
CodeInsightUtilBase.preparePsiElementForWrite(cls_stmt_list)
settings.setWorkersEnabled(false)
/**   * Reason of replication pause.   */ private volatile GridDrStatus pause; 
"xml".equals(attrPrefix)
oldFreeSpace >= 0
portlet.getRootPortletId()
VOLUME_CHUNK_SHIFT=20
sp.getBoolean(PREF_AUTO_DELETE_MEDIA_PLAYBACK_COMPLETED,false)
a.getInteracting().equals(actor)
_hasAnnotation(a,JsonSerialize.class) || _hasAnnotation(a,JsonView.class) || _hasAnnotation(a,JsonRawValue.class)
setPreference(prefs,editor,r,R.string.p_show_menu_sort,true,ifUnset)
ModalityKt.isFinalClass(this)
clusterGlobalLock.writeLock()
new Parameter(new IdentifierImpl(parameter.getName()),typeToType(parameter.getType(),ConverterUtil.isAnnotatedAsNotNull(parameter.getModifierList())),true)
Wait.waitFor(new Wait.Condition(){   @Override public boolean isSatisified() throws Exception {     return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;   } } ,120000)
new StringBundler(6)
this.doIntrospect(interfaces,matchedInterfaces)
assertEquals(1234,deserialized.getOwnedEntryMemoryCost())
new OptionKey<>(false)
beforeMethodInvocation(suspendContext,myMethod,internalEvaluate)
!match && compareRecover
assertEquals("that/has/two/bangs",result)
mBondState.setBondState(address.toUpperCase(),state,reason)
log.info(error,cause)
xAmount != 0
element instanceof PsiField || element instanceof PsiTypeParameter
_cm_json == null && domain != null
log.debug("In OSGi: using programmatically wired maven parser")
vertx.createHttpServer().requestHandler(req -> {   req.response().putHeader("content-type","text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>"); } ).listen(8080)
mMatchMode=matchMode
FunctionTypesKt.isFunctionType(valueParameterOrReceiver.getOriginal().getType())
lineBuf.length() - 3
ChannelBuffers.wrappedBuffer(sb.toString().getBytes(bodyCharset))
new ExtensionException("Class '%s' is not a valid global extension because it is not derived from '%s'").withArgs(clazz.getName(),IGlobalExtension.class.getName())
data.getSenderId() != myUid() || data.getUnreadCount() > 0
fileSystem.renameFile(outputFile,archivedOutputFile(1))
a6.getId() << 2
JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName(),e.getMessage())
new RuntimeException("Failed to serialize object: " + object.toString(),e)
TcpDiscoveryNode node=ring.node(nodeId); 
mRemote.transact(START_ACTIVITY_WITH_CONFIG_TRANSACTION,data,reply,0)
Set<String>
query.componentRoots().toArray()
isEmpty(s)
matcher.groupCount() == 1
assertEquals(6,pluginList.size())
createBaseEntitlementAndCheckForCompletion(account.getId(),"externalKey","Shotgun",ProductCategory.BASE,BillingPeriod.MONTHLY,NextEvent.CREATE,NextEvent.BLOCK,NextEvent.INVOICE)
requestData.setInitialText("")
? extends Reader
{32,36,44,48,48,53,56,59,62,66,69,74,78,83,87,94,105,118,123,130,140,160}
targetMethod.recordCall(posBefore,posAfter - posBefore,target,debugInfo,false)
field.getType()
Message message
new GotoFileAction().actionPerformed(e)
map != null && isSortedByDistance
getRawDefinition().contains(" ") || getRawDefinition().contains("(")
((EventFactHandle)((ObjectVariableContextEntry)context).left).getEndTimestamp()
new AnAction("Top | Bottom","",VcsUtil.ourNotDot){   @Override public void actionPerformed(  AnActionEvent e){     boolean was=myConfiguration.SHORT_DIFF_HORISONTALLY;     myConfiguration.SHORT_DIFF_HORISONTALLY=false;     ensurePresentation();   }   @Override public void update(  AnActionEvent e){     super.update(e);     e.getPresentation().setIcon(myConfiguration.SHORT_DIFF_HORISONTALLY ? VcsUtil.ourNotDot : VcsUtil.ourDot);   } } 
new MccEntry(204,"nl",2,"Europe/Amsterdam","nl")
c.getInt(31)
Settings.Secure.getIntForUser(mService.mContext.getContentResolver(),Settings.Secure.LOCK_TO_APP_EXIT_LOCKED)
Arrays.asList("abstract","continue","for","new","switch","assert","default","if","package","synchronized","boolean","do","goto","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while","type")
new UnlockHandler(this)
compensationRange.contains(compensation)
mService.disableEphemeralNetwork(SSID,mContext.getOpPackageName())
Observable.defer(() -> sync.update(mangaSync))
assertProtonResourceLimits(0.88,0.8,new ContentClusterBuilder().protonDiskLimit(0.88).getXml())
@Override public Response example(String type,Object example){   throw new RuntimeException("Not implemented"); } 
integerSwitchNode.keySuccessor(i) == beginNode
ConcurrentReferenceHashMap<PropertyDescriptor,TypeDescriptor>
result.ocFile.getMimeType()
public class XpathRegressionIllegalThrowsTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"4:35: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"RuntimeException")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsOne']/OBJBLOCK" + "/METHOD_DEF[@text='sayHello']/LITERAL_THROWS[@text='RuntimeException']/IDENT");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=IllegalThrowsCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionIllegalThrowsTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(IllegalThrowsCheck.class);     final String[] expectedViolation={"8:45: " + getCheckMessage(IllegalThrowsCheck.class,IllegalThrowsCheck.MSG_KEY,"java.lang.Error")};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionIllegalThrowsTwo']/OBJBLOCK" + "/METHOD_DEF[@text='methodTwo']/LITERAL_THROWS/DOT[@text='Error']");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
public static XQueryBuilder xquery(File file,String characterSet) throws IOException {   return xquery(IOConverter.toInputStream(file),characterSet); } 
assertEquals(5,set.size())
myMaxRowCount=30
clickListener == null
DIARY_QUEST_GROUP_ID=119
new DatabaseExplorerDialog(shell,SWT.NONE,dbinfo,jobMeta.databases,true)
canonicalURLParts.length > 1
instance2.getLifecycleService().shutdown()
ConcurrentHashMap<String,Session>
new MMUnlockHandler(this)
new IndexWriter(dir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
new IllegalArgumentException(sm.getString("pojoMethodMapping.duplicatePongMessageParam",m.getName(),m.getClass().getName()))
expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR
@Override DiscardMessageOutput create(Stream stream,Configuration configuration); 
words.length >= 2 && words[1].length() > 0
out.writeData(entry.getValue())
data < 0 || data > Short.MAX_VALUE
CaseInsensitiveStringHashingStrategy.INSTANCE.computeHashCode(value)
Assert.assertEquals(modelAdditionCounters.toString(),5,modelAdditionCounters.size())
Deactivate(app)
new Group(provider.getGroupName(),provider.getOpenIcon(),provider.getIcon())
mAlarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP,when,sender)
ReportCompilerRequestMessageListener.class
mapConfig.getBackupCount()
new GHRequest(start,end).setVehicle(algoVehicle.toString()).setType(algoTypeStr)
ImmutableSortedMap<String,SortedMap<String,Object>>
registration.registerOperationHandler(CommonAttributes.STOP,ModClusterStop.INSTANCE,stop,false,runtimeOnlyFlags)
f("")
Long.parseLong(args[2])
Map.Entry<String,Extension>
new IllegalArgumentException("Property 'targetCacheManager' is required")
myAlignmentProvider.addPair(myNode,childNode,false)
dashboard.addWidget("issues_action_plans",1)
b2c.convert(bc,cc,true)
PsiTreeUtil.getParentOfType(shortDeclaration,GoBlock.class,GoForStatement.class,GoIfStatement.class,GoSwitchStatement.class,GoSelectStatement.class)
KotlinTestUtils.navigationMetadata("idea/idea-completion/testData/weighers/basic/StaticMembers.kt")
speedIndex < mLastSpeedTimes.length && (line=reader.readLine()) != null
childLeftTuple.reAddRight()
T aValue
display.getRealMetrics(dm)
new StringBuilder(120)
LongStream.rangeClosed(min,max)
!propertiesFile.equals(myResourceBundle.getDefaultPropertiesFile().getVirtualFile())
status.getLastModificationTimeMs()
ft.replace(R.id.layout_fragment_container,readerFragment,tagForFragment).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).addToBackStack(tagForFragment).commitAllowingStateLoss()
@Nullable
logger.warn("Could not commit session",t1)
id=29
blocks.size() > newChildIndex - 1
context.getString(R.string.history_attach_removed,attachmentName,item)
isSubrepository() || absolutePath.contains("/modules/apps/") || absolutePath.contains("/modules/private/apps/")
"application/xson".equals(contentType) || "xson".equalsIgnoreCase(contentType)
assertEquals(400,((SoftValueHashMap)catalog.getResourcePool().getFeatureTypeCache()).getHardReferencesCount())
Platform.isAIX()
mvStore != null && !mvStore.getStore().isClosed()
Slog.d(TAG,"showSaveLocked(): no mStructure")
KeyHelper.generateRegistrationId(false)
cSet.setConceptSet(this)
DownloaderIndexFromGoogleCode.getContent(new LinkedHashMap<String,String>(),BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT,BINARY_MAP_VERSION + BINARY_MAP_INDEX_EXT_ZIP,VOICE_VERSION + VOICE_INDEX_EXT_ZIP)
tableLayoutHandle.getPartitions().isPresent()
WEB_SYNC_MANAGER=false
NUM_TOUCHES=20
ActivityManagerNative.getDefault().updatePersistentConfiguration(config)
this.errorLogger.error(message,ex)
checkResources(apps[i],false)
/**   * Loads the import control file from a  {@link InputSource}.  * @param source the source to load from.  * @param uri uri of the source being loaded.  * @return the root {@link PkgControl} object.  * @throws CheckstyleException if an error occurs.  */ private static ImportControl load(final InputSource source,final URI uri) throws CheckstyleException {   try {     final ImportControlLoader loader=new ImportControlLoader();     loader.parseInputSource(source);     return loader.getRoot();   }  catch (  final ParserConfigurationException|SAXException ex) {     throw new CheckstyleException("unable to parse " + uri + " - "+ ex.getMessage(),ex);   } catch (  final IOException ex) {     throw new CheckstyleException("unable to read " + uri,ex);   } } 
Throwable e
stringToSearch != null && stringToSearch.length() > 0
DirectoryReader oldReader; 
view.isScrollbarShown()
getSslStoreProvider().getTrustStore()
output.contains("BUILD FAILED") || output.contains("FAILURE: Build failed with an exception.") || error.contains("BUILD FAILED")
new ClusterTopologyCheckedException("Failed to send message because node left grid [nodeId=" + nodeId + ", msg="+ msg+ ']')
routerFunction.route(request).defaultIfEmpty(notFound()).flatMap(handlerFunction -> wrapException(() -> handlerFunction.handle(request))).flatMap(response -> wrapException(() -> response.writeTo(exchange,strategies))).onErrorResume(ResponseStatusException.class,ex -> {   exchange.getResponse().setStatusCode(ex.getStatus());   if (ex.getMessage() != null) {     logger.error(ex.getMessage());   }   return Mono.empty(); } )
Long.class
randomAlphaOfLengthBetween(6,20)
maxFileDescriptorCount != -1 && maxFileDescriptorCount < (1 << 16)
fireMessageReceived(ctx,message,e.getRemoteAddress())
viewFlow.getChildWidth()
mBluetoothLock.readLock().unlock()
method.getAnnotation(TruffleBoundary.class) == null
mock.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true)
!src.isEnabled() || src.isLongClickable()
return authDecisionStatementProviders; 
mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + leaseDuration * 480,mDhcpRenewalIntent)
timeSinceEarliestUnpaidInvoiceEqualsOrExceeds == null
"*********** Traced requests text saved to " + currentTextFile + ".txt"
server1.getStoreRepository().getStorageEngine(storeName)
commitMessage.substring(0,subjectIndex)
id=10801
mResolver=new DiscoverResolver(context,MDNS_SERVICE_TYPE,new DiscoverResolver.Listener(){   @Override public void onServicesChanged(  Map<String,MDNSDiscover.Result> services){     for (    MDNSDiscover.Result result : services.values()) {       String url=result.txt.dict.get("url");       Log.d(TAG,url);       String id=TAG + result.srv.fqdn + result.srv.port;       String title="";       String description="";       if ("false".equals(result.txt.dict.get("public"))) {         if (result.txt.dict.containsKey("title")) {           title=result.txt.dict.get("title");         }         if (result.txt.dict.containsKey("description")) {           description=result.txt.dict.get("description");         }         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().setTitle(title).setDescription(description).build());       }  else       if (URLUtil.isNetworkUrl(url)) {         reportUrlDevice(createUrlDeviceBuilder(id,url).setPrivate().build());       }     }   } } )
ImmutableSet<String>
wrapper == null || !wrapper.isShowing()
nodeEngine.getSharedService(LockService.SERVICE_NAME)
print(StatementGenerator.generateStringLiteral(node))
return p; 
assertEquals("Should have exact number of build phases",4,target.getBuildPhases().size())
event.getTimestamp() - lastPauseTimeStamp >= 0
log.debug(currentThread() + String.format("Trying to recover from dead Channel: %s ",channel))
block.getZ() + 1
AvailablePortFinder.getNextAvailable(4000)
SERIAL_VERSION_UID=510L
!isMailSenderDefined()
GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,false)
ApacheAsyncHttpProvider.class
Instrument.create(null,new AdvancedInstrumentRootFactory(){   public AdvancedInstrumentRoot createInstrumentRoot(  Probe probe,  Node node){     return null;   } } ,null,"test AdvancedInstrument")
config.addProperty(CONTEXT_CONFIG_USERS_USER,User.encode(u))
NbBundle.getMessage(DesktopImportControllerUI.class,"DesktopImportControllerUI.spigot.ui.dialog.title",ui.getDisplayName())
new ClusterConfiguration("clusterName",initialHosts)
getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)
LOGGER.warn("Could not execute unmarkEntries",ex)
child.getProperties().isStreamPartitionedOn(partitioningRequirement)
endpoint.getOrCreateConnectionFactory()
synchronized (this) {   classCache.clear(); } 
showSnackbar(mainTextResource,shortLength,actionTextResource,listener,root,null)
totalNbSuggestions == MAX_NUMBER_SUGGESTIONS
suggestion.getTooltip() != null && suggestion.getTooltip().getString() != null
document.getModificationStamp() == event.getOldModificationStamp() || !isDocumentUnsaved(document)
getPointer().getShort(0)
name + "." + expressionEntry.getKey()
tagName.equals("uses-permission-sdk-m") || tagName.equals("uses-permission-sdk-23")
public static final String WS_EXTENSIONS_HEADER_NAME_LOWER=WS_EXTENSIONS_HEADER_NAME.toLowerCase(Locale.ENGLISH); 
iconSize * DisplayMetrics.DENSITY_MEDIUM >= availableHeight
checkValidHandle(muVMatrixHandle,null)
variantData.get(key)
this(client,path,true,false,Integer.MAX_VALUE,Executors.newSingleThreadExecutor(defaultThreadFactory),false,false,new DefaultTreeCacheSelector()); 
b("(")
timed.dispose()
Log.w(TAG,"read property failed, e:" + e)
(flags & 0x20) != 0
ContainerUtil.immutableSet(PLATFORM_AMAZON_FIREOS,PLATFORM_ANDROID,PLATFORM_FIREFOXOS,PLATFORM_UBUNTU)
numAttributes < expectedItemCount
decoderLayerSizes == null
STMT_CACHE_CLEANUP_TIMEOUT * 10
HttpParameter.CACHE_ID.getParameterFrom(req) == null || HttpParameter.PART.getParameterFrom(req) == null
cu.getAnnotationDeclarationByName("ClassPreamble").get().setJavadocComment("Super extra cool this annotation!!!")
return 9; 
id=2
getActiveFgCall().getPhone().startDtmf(c)
new ProgressDialog(this,R.style.ProgressDialogTheme)
new StreamException(sm.getString("http2Parser.processFrame.unexpectedType",expected,frameType),Http2Error.PROTOCOL_ERROR,streamId)
UpgradeStepRegistrator.class
LOG.debug("did not find superclass names when mapping inheritance....")
co.fadeInDuration=700
ChronicleEngineEndpoint.class
Localization.menuTitle("View")
List<Fragment>
monitor.isCanceled() || curPropertySource == null
buildLockFactory(indexSettings)
executableFlag
map.putSingle(OAuthConstants.CLIENT_AUDIENCE,audience)
GL20.glUniform1iv(location,toIntBuffer(v,offset,count))
privateDataManager == null
myFindDialog.setModal(true)
-height
Foobar item
list.getAdapter().getCount() - 1
@Test public void testResolveMultiplePaths() throws Exception {   String expected=tmpFolder.getRoot().toPath().resolve("aa").resolve("bb").resolve("cc").toString();   assertEquals(expected,IOChannelUtils.resolve(tmpFolder.getRoot().getPath(),"aa","bb","cc")); } 
ContainerUtil.newHashSet("AddToFavoritesPopup","DatabaseView.ImportDataSources","CompileDirty","Compile","AddNewFavoritesList","EditFavorites","RemoveFromFavorites","RenameFavoritesList","RemoveFavoritesList")
attrib.isNormal()
convert31YToMeters(xB,xA)
httpMethod.getResponseHeader(HEADER_CONTENT_ENCODING)
typeSupported(type) || "*".equals(fileTypes)
rsMeta.getColumnLabel(i + 1)
sourceIterator.batch()
LinkageError ex
AMStoreUtil.getFileVersionPath(fileVersion,configurationUuid)
new StepMeta(tostepid,tostepname,(StepMetaInterface)toi)
RuleChain.outerRule(suppressOutput)
refType.equals(StructuredDocString.PARAMETER_TYPE)
assertProtonResourceLimits(0.9,0.77,new ContentClusterBuilder().protonMemoryLimit(0.77).getXml())
streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == '"'
new IllegalStateException("Test IllegalStateException")
type != OrderRootType.CLASSES
Schedulers.computation()
mFacetCategoryMap.get(category)
orig.getGenericsTypes()
Assert.assertEquals(5000,counter)
GL20.glUniform4fv(location,toFloatBuffer(v,offset,count << 2))
sr.isForeground || sr.fgRequired
new CsvFilter("")
resolveSession.getStorageManager().createMemoizedFunction(new Function1<JetFile,JetScope>(){   @Override public JetScope invoke(  @NotNull JetFile file){     return createFileScope(file);   } } )
public Object getKey(){   return this.key; } 
assertEquals(3,intentions.size())
construct(ignoredList,mapType,staticValueType,vts,keySerializer,valueSerializer,null)
thumbData != null && exifThumbWidth >= fullThumbWidth
new InternalOutputBuffer(res,Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE)
dlFolderService.updateFolder(toFolderId(folderId),toFolderId(parentFolderId),name,description,defaultFileEntryTypeId,fileEntryTypeIds,restrictionType,serviceContext)
new WorldPoint(1500,3703,0)
t.start()
!isRuleBasedFormat || stripped instanceof PsiThrowStatement || stripped instanceof PsiExpressionStatement
Timber.w(error)
new RetryDriver(maxAttempts,minSleepTime,maxSleepTime,scaleFactor,maxRetryTime,exceptions)
Integer.parseInt(matcher.group(1))
Float.valueOf(value)
error instanceof RebuildRequestedException || cause instanceof IOException
new IOException(targetException)
FileHash.hash(outputFile,algo).equalsIgnoreCase(checksum)
Float.parseFloat(getOptional("kylin.engine.spark.rdd-partition-cut-mb","10.0"))
uploadArchivesTask.finalizedBy(updateFileVersionsTask)
dbCol.findOne(filter)
new URLClassLoader(new URL[]{aDir.toURI().toURL(),bDir.toURI().toURL()},CompileKotlinAgainstKotlinTest.class.getClassLoader())
new IOException(e.getLocalizedMessage(),e)
getService().animateCollapseNotifications()
FREQUENT_RESTARTS_THRESHOLD=0
mbw.writeTo(o,theClass,type,anns,contentType,headers,os)
MAX_BATCH_SIZE=250
Arrays.asList("cmd","ls","pwd")
rPos >= 0
wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())
StringBuilder error=new StringBuilder("GroovyServlet Error: "); 
mapper.getTypeFactory().constructType(Statistics.class)
registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags)
tJvmGcDetailed.getJvmGcNewTime()
{0,0}
mProgressListener != null && deltaX >= 0
cause instanceof KBArticleImportException || cause instanceof KBTemplateContentException || cause instanceof KBTemplateTitleException|| cause instanceof NoSuchTemplateException|| super.isSessionErrorException(cause)
@Override public final AnalyzedGermanTokenReadings createNullToken(final String token,final int startPos){   return new AnalyzedGermanTokenReadings(new AnalyzedGermanToken(token,null,startPos)); } 
ReferenceCountUtil.release(holder)
MAX_PARAGRAPH_TIMEOUT_SEC=120
log.error("Unable to initialize AuthorizationBackend {} due to {}",ad,e.toString(),e)
!site && (liveGroupId == 0) && !name.equals(GroupConstants.CONTROL_PANEL)
new ThreadPoolExecutor(5,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue(),new ExecutorThreadFactory(node.threadGroup,node.getThreadPoolNamePrefix("cached"),classLoader),new RejectionHandler()){   protected void beforeExecute(  Thread t,  Runnable r){     threadPoolBeforeExecute(t,r);   } } 
Collections.addAll(lastTypePoiAdditionalsCategories,parser.getAttributeValue("","poi_additional_category").split(","))
!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
-1674333525
@Override public Response description(String description){   throw new RuntimeException("Not implemented"); } 
Math.min(values().length - 1,value)
new PlainMenuItem(iconId,null,text,needLinks,isUrl,false,null,onClickListener)
@Override public void setting(int identifier,long value) throws ConnectionException {   remoteSettings.set(identifier,value); } 
new L2Vertex(null,"",-1,1e-8)
FileInputStream fis=new FileInputStream(file); 
post.setRequestHeader(HEADER_CONTENT_TYPE,DEFAULT_CONTENT_TYPE)
new EnterSelectionDialog(shell,conn,"Target database:","Select the target database:")
e != null && getActivity() != null
cf.getLocalDeletionTime() < gcBefore
new GormAwareDataBindingListener(tmpBindingResult)
((IEnergyProvider)source).extractEnergy(o.getOpposite(),energyExtracted,false)
!ObjectUtils.isEmpty(getLocations()) || !ObjectUtils.isEmpty(getClasses())
backtrack(ans,comb,k,i + 1,n - i)
usersFile.getPath()
assertTrue(false)
id=19
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",featuresConfig.isLegacyOrderBy(),false)
file.getAbsolutePath()
stats.getLastUpdateTime() >= lastUpdateTime
writer.valueNull()
outStream.toString(StandardCharsets.UTF_8.name())
it.setJavadocComment("Super extra cool this annotation!!!")
SystemProperties.getBoolean("debug.choreographer.animdraw",false)
myFixture.testCompletionVariants(getTestName(true) + ".go","for","const","var","return","if","switch","go","defer","select","fallthrough","goto","main","struct","map","case","default","type")
file.getName()
camera.setMatrices()
case 11: 
mShouldLogContentAppeared=false
setting("unsupported.cypher.plan_with_minimum_cardinality_estimates",BOOLEAN,TRUE)
StringBuilder builder=new StringBuilder(); 
ServiceLoader.load(Collector.class,getClass().getClassLoader())
UpgradeStepRegistrator.class
assertEquals(2,props.getConfigPathPatterns().length)
width - 2
new long[0]
myIgnoredIdentifiers.contains(ref_text) || PyNames.COMPARISON_OPERATORS.contains(qexpr.getReferencedName())
handler instanceof ChannelOutboundHandler
AbstractMap self
agg.setBatchTimeout(2000L)
EnumSet.allOf(AlarmInfoType.class)
resultTypes[i]
ContainerResources.from(9.2,4,16)
realStartActivityLocked(hr,app,true,true,null)
new Button("submit"){   @Override public void onSubmit(){     GeoServer gs=getGeoServer();     gs.save((GeoServerInfo)globalInfoModel.getObject());     gs.save((LoggingInfo)loggingInfoModel.getObject());     doReturn();   } } 
getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation().getLatitude()
lookup="java:/queue/myAwesomeQueue"
TypeConversionUtil.areTypesConvertible(actualType,targetType)
Futures.transform(Futures.allAsList(delegate.store(ArtifactInfo.builder().setRuleKeys(info.getRuleKeys()).setMetadata(metadataWithCacheKey).build(),BorrowablePath.notBorrowablePath(emptyFilePath)),delegate.store(ArtifactInfo.builder().addRuleKeys(new RuleKey(hashCode)).build(),output)),Functions.constant(true),MoreExecutors.directExecutor())
headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)
T o=latest[index]; 
STMT_CACHE_CLEANUP_TIMEOUT=500
assertNumUniqueNodeNameBuckets(4)
"com.google.android.gms".equals(mPackageName) || "com.google.android.syncadapters.contacts".equals(mPackageName)
private final Integer parentId; 
Map<String,AstyanaxKeyColumnValueStore>
Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("softmax",preOut),1)
this(maxFrameLength,lengthFieldOffset,lengthFieldLength,lengthAdjustment,initialBytesToStrip,false); 
new IOException(e)
pushNotificationsSender.reset()
searchAutoCompleter.addBibtexEntry(entry)
marketDataService.getBittrexTrades(pairString)
loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType
DEFAULT_MAX_QUERIES=4
converterTemplate(converter)
!mNetworkAvailable
logger.trace("rapidRefreshFutureEnd stopping")
window != null && !(window instanceof JFrame)
FunctionTypesKt.isExtensionFunctionType(upperBoundType)
proxyServer != null && !isSecure(uri)
expirationTime == Long.MAX_VALUE || expirationTime < 0
other.unsafeBitcoinSerialize()
model.hasData() && container.isReadyToRun() && !model.isUpdateInProgress()
new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))
DbConnectionManager.close(gstmt,con)
(BrokerService)context.getBean(name)
assertTrue("Exit Statuses are supposed to be in: " + exitStatuses + ", but the actual exit status code is: "+ status.getExitStatus(),exitStatuses.contains(status.getExitStatus()))
/**   * {@inheritDoc}  */ @Override public DoubleProperty clone(){   DoubleProperty prop=(DoubleProperty)super.clone();   prop.value=value;   return prop; } 
POOL_LIMIT=100
jailName == null || config.getProperty(jailName.toLowerCase()) == null
DiagnosticFactory3.create(ERROR,CALL_ELEMENT)
parts.get(0)
StaxUtils.writeDocument(doc,writer,!MessageUtils.getContextualBoolean(message,StaxOutInterceptor.FORCE_START_DOCUMENT,false))
/**   * Logs <code>load()</code>, <code>store()</code> and <code>close()</code> methods and exceptions.  */ public class LoggingBuildCacheServiceDecorator extends AbstractBuildCacheServiceDecorator {   private static final Logger LOGGER=LoggerFactory.getLogger(LoggingBuildCacheServiceDecorator.class);   private final RoleAwareBuildCacheService delegate;   public LoggingBuildCacheServiceDecorator(  RoleAwareBuildCacheService delegate){     this.delegate=delegate;   }   @Override protected RoleAwareBuildCacheService delegate(){     return delegate;   }   @Override public boolean load(  BuildCacheKey key,  BuildCacheEntryReader reader) throws BuildCacheException {     try {       LOGGER.debug("Loading entry {} from {} build cache",key,getRole());       return super.load(key,reader);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not load entry {} from {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void store(  BuildCacheKey key,  BuildCacheEntryWriter writer) throws BuildCacheException {     try {       LOGGER.debug("Storing entry {} in {} build cache",key,getRole());       super.store(key,writer);     }  catch (    BuildCacheException e) {       LOGGER.warn("Could not store entry {} in {} build cache",key,getRole(),e);       throw e;     }   }   @Override public void close() throws IOException {     LOGGER.debug("Closing {} build cache",getRole());     super.close();   } } 
thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_THING_TYPE) || thingTypeUID.equals(PioneerAvrBindingConstants.IP_AVR_UNSUPPORTED_THING_TYPE)
url.substring(pathStartIndexInUrl)
current.getUnresolvedSuperClass()
mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_HOST) || mPackageManager.hasSystemFeature(PackageManager.FEATURE_USB_ACCESSORY) || isEmulator
!(o instanceof Record)
tagName.equals(TAG_FORWARDING_INTENT_FILTERS) || tagName.equals(TAG_CROSS_PROFILE_INTENT_FILTERS)
TimeValue.timeValueSeconds(randomIntBetween(1,5) * aggHistogramInterval)
UDeclarationKt.getContainingDeclaration(parent)
new Options().addOption(PARAM_HELP,false,"Help").addOption(PARAM_FILE,"file",true,"File top open").addOption(PARAM_STOP,"quit",false,"Stop DBeaver running instance")
_connector.getResponse("GET /foo?status=206&data=42 HTTP/1.0\n\n")
grid(1).cache(null).localSize(CachePeekMode.ONHEAP)
connectedHeaders.setVersion("1.2")
info.getLine1AlphaTagForSubscriber(subId,mContext.getOpPackageName())
apnContext.getWaitingApns()
paramTypeClassNode.getMethod("validate",new Parameter[0])
me.getComponent() == myCurrentComponent || me.getComponent() == myQueuedComponent
ZeppelinHubRepo.class
objectCache.put(parent,parentObjects)
/**   * Sender node ID.   */ private final GridNode sndNode; 
isZeroLatencyTypingEnabled() && IMMEDIATE_EDITING_ACTIONS.contains(action.getClass()) && !(action.getClass() == PasteAction.class && mySelectionModel.hasSelection())
writeOwners.size()
renderManager.render(tpf,true)
interceptor.doIntercept(invocation)
place == null || aClass == null
new Rect(left,top,right,bottom)
Throwable.class
new SonarException(String.format("You don't have access rights to project [%s]",projectKey),e)
SchematronProcessorFactory.newSchematronEngine(endpoint.getRules())
public StandardTokenizer create(Reader input){   return new StandardTokenizer(input); } 
BodyExtractor<Mono<MultiValueMap<String,String>>,ServerHttpRequest>
MessageExtractor.getTextFromPart(part)
newConnection(this)
public void setHeaderTableSize(long headerTableSize) throws ConnectionException {   if (headerTableSize > (16 * 1024)) {     throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",Long.toString(headerTableSize)),Http2Error.PROTOCOL_ERROR);   }   this.headerTableSize=(int)headerTableSize; } 
zoom2d=2000
mAppOps.noteOp(AppOpsManager.OP_GET_USAGE_STATS,callingUid,callingPackage)
Object statistics
testBadSentence(origBadSrcSentence,suggestedCorrection,expectedSrcMatchStart,expectedSrcMatchEnd,rule.getSrcRule(),lang,srcTool)
apex.stagePackage(mResolvedBaseFile.toString())
args.size() > error.first && error.second != null
dests.size() == 1 && joinTree.getNoOuterJoin()
file != null && file.getFileSystem() instanceof JarFileSystem
TCN_RECOMMENDED_PV=28
filesQueue.remove(0)
entity != null
AndroidInstrumentationInfo instrumentationProvider=instrumentation.get(AndroidInstrumentationInfo.PROVIDER); 
portletDataContext.getExportDataElement(stagedModel)
prePassivates != null
(status & 0x00040000) != 0
offsetHandler.returned()
jarURL.toURI().getSchemeSpecificPart()
testSame("yz();","function yz() {}",VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR)
portrait && planRouteContext.isMarkersListOpened() && hideMarkersListFirst
LOG.info("Failed to get file text from file " + fileName,e)
errors.addAllErrors(bindingResult)
graphModel.getGraph().getNodeCount()
worldsData.containsKey(worldName.toLowerCase()) || mirrorsGroup.containsKey(worldName.toLowerCase()) || mirrorsUser.containsKey(worldName.toLowerCase())
!willBeDestroyed || ApplicationManager.getApplication().isUnitTestMode()
/**   * Remove a  {@link AtmosphereResource} from the list of item to be notified whenthe  {@link Broadcaster#broadcast} is invoked.  * @param resource an {@link AtmosphereResource}  * @return {@link AtmosphereResource} if removed, or null if it was not.  */ Broadcaster removeAtmosphereResource(AtmosphereResource resource); 
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",false))
300 * 1000L
id=16508
propValue == null || CommonUtils.equalObjects(propValue,defValue)
executorService.awaitTermination(1,TimeUnit.SECONDS)
setSort(2)
location != null && mHandler != null
maxEntityId >= maxSequenceId
options.put("updated",true)
builder.parseXContent(parser,false)
startPoint != null && endPoint != null
TransitiveInfoCollection.class
EndpointReferenceUtils.getAddress(cref)
createHandlerResult(swivelCredential,this.principalFactory.createPrincipal(uid))
ConcurrentPublication addPublication(final String channel,final int streamId){   ensureOpen();   stashedChannel=channel;   final long registrationId=driverProxy.addPublication(channel,streamId);   awaitResponse(registrationId);   return (Publication)resourceByRegIdMap.get(registrationId); } 
final JobIdentifier jobRuntimeInformation=jobIdentifier; 
this.addUnsafeEnchantments(stack.getEnchantments())
order.getSide().equalsIgnoreCase("buy")
ClassFileExtraction.of(Foo.class,Bar.class,AgentBuilderDefaultApplicationSuperTypeLoadingTest.class)
prev.getDifficultyTarget()
!verbDoesMatchPersonAndNumber(tokens[posEr - 1],tokens[posEr + plus1],"3","SIN") && !nextButOneIsModal(tokens,posEr) && !"äußerst".equals(finiteVerb.getToken())&& !"regen".equals(finiteVerb.getToken())
new ContextMenuItem.ItemBuilder().setTitleId(R.string.context_menu_item_add_waypoint,mapActivity).setId(POINT_ADD_GPX_WAYPOINT)
mSimpleCard.getVisibility() != View.VISIBLE || (mCard != null && mCard.getVisibility() == View.VISIBLE)
getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
Map<String,Object>
K key
memoryCachePercent <= 0
if (isPresent) {   mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);   updateDrawer(); }  else {   mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);   mDrawerLayout=null; } 
name + "." + signatureEntry.getKey()+ "."+ outputEntry.getKey()
terminal.receivedSendToTerminal(postCreateText)
validParts >= graphs.size()
new SystemException("Unable to communicate with OpenId provider",ioe)
HashBasedTable<String,String,byte[]>
new StringBuilder(url)
elements == null || elements.length == 0
editor != null && !editor.isDisposed()
/**   * Gets the key of bind hostname.  * @return key of bind hostname  */ public PropertyKey getBindHostKey(){   return mBindHostKey; } 
ProxyOutputStream.amountTransfered.getAndSet(0) / 1000d
stats.getLastAccessTime() >= lastAccessTime
isPrettyLogging() && (contentType != null && contentType.indexOf("xml") >= 0) && cos.size() > 0
new RepresentorImpl.BuilderImpl<>(typeClass,nameFunction,biConsumer,relatedCollectionsSupplier)
attr.getNamespaceURI()
id=48
!mIsWatch && mInjector.settingsGlobalGetInt(Settings.Global.DEVICE_PROVISIONED,0) == 0
super.equals(jumpTouchData) && (_branch == jumpTouchData._branch) && (_branchNumber == jumpTouchData._branchNumber)
callTimeoutMillis=3000
Math.abs(f) >= 65520
new Tag(text,line,this)
new IndexWriter(ramDir,new WhitespaceAnalyzer(),false,IndexWriter.MaxFieldLength.LIMITED)
10 * 1
partValue=total / partCount
scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize()
new OwnerInfo(profileOwnerName,profileOwnerPackageName,profileEnabled)
mUserManager.isUserUnlocked(userHandle)
tester.nodeRepository().getNodes(NodeType.tenant,Node.State.ready)
!isClosureRBrace(element) || !isClosureContainLF(element)
firstChatPanel.getDefaultContact()
