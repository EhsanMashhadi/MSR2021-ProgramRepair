@RunWith(Parameterized.class) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest {   int nodeCount;   int operations;   int keyCount;   public ReplicatedMapWriteOrderTest(  int nodeCount,  int operations,  int keyCount){     this.nodeCount=nodeCount;     this.operations=operations;     this.keyCount=keyCount;   }   @Parameterized.Parameters public static Collection<Object[]> data(){     return Arrays.asList(new Object[][]{{2,50,1},{2,50,10},{2,50,50}});   }   @After public void setUp() throws Exception {     HazelcastInstanceFactory.terminateAll();   }   @Test public void testDataIntegrity() throws InterruptedException {     setLoggingLog4j();     System.out.println("nodeCount = " + nodeCount);     System.out.println("operations = " + operations);     System.out.println("keyCount = " + keyCount);     Config config=new Config();     config.getReplicatedMapConfig("test").setReplicationDelayMillis(0);     TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory(nodeCount);     final HazelcastInstance[] instances=factory.newInstances(config);     String replicatedMapName="test";     final List<ReplicatedMap> maps=createMapOnEachInstance(instances,replicatedMapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(nodeCount,maps,keys,operations);     for (    Thread thread : threads) {       thread.start();     }     for (    Thread thread : threads) {       thread.join();     }     for (int i=0; i < keyCount; i++) {       final String key="foo-" + keys.get(i);       assertTrueEventually(new AssertTask(){         @Override public void run() throws Exception {           System.out.println("---------------------");           System.out.println("key = " + key);           printValues();           assertValuesAreEqual();         }         private void printValues() throws Exception {           for (int j=0; j < maps.size(); j++) {             ReplicatedMap map=maps.get(j);             System.out.println("value[" + j + "] = "+ map.get(key)+ " , store version : "+ getStore(map,key).getVersion());           }         }         private void assertValuesAreEqual(){           for (int i=0; i < maps.size() - 1; i++) {             ReplicatedMap map1=maps.get(i);             ReplicatedMap map2=maps.get(i + 1);             Object v1=map1.get(key);             Object v2=map2.get(key);             assertNotNull(v1);             assertNotNull(v2);             assertEquals(v1,v2);           }         }       } ,120);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  int operations){     Thread[] threads=new Thread[count];     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i),keys,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong());           boolean containsKey=map.containsKey(key);           assert containsKey;         }       }     } );   } } 
assertEquals(16,rows.size())
Lists.newArrayListWithCapacity(resultMessages.size())
!BlockStoreContext.INSTANCE.hasLocalWorker()
Message message
256L << zoomLevel
relations.replace(oldName,newTable) == null
timeMillis + MILLIS_IN
new CopyableValueComparator(sortOrderAscending,type)
List<HostAddress>
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class SetBasicDistributedTest extends SetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } 
l.onResume(request,response)
endpoint.getOrCreateConnectionFactory()
checkArgument(child.parent == null,"Cannot add already-owned child node.\nChild: %s\nExisting parent: %s\nNew parent: %s",child,parent,this)
getRawFieldBlock(i).getRegionSizeInBytes(rowIndex,1)
Long.parseLong(timeout)
new MySqlStatementParser(sql,SQLParserFeature.EnableSQLBinaryOpExprGroup,SQLParserFeature.StrictForWall)
id=10873
dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null
Class.forName(mUfsClz).getConstructor(String.class,TachyonConf.class)
getConfig()
PORT_2=8180
getLock(target)
lookup="java:jboss/mail"
!webSocket.resource().getAtmosphereResourceEvent().isSuspended()
!list.isEmpty()
mTfs.setPin(mTfs.open(path),true)
this.hostToId
Set<String>
public CombinedMetric registerMetric(String name,ICombiner combiner,int timeBucketSizeInSecs){   return registerMetric(name,new CombinedMetric(combiner),timeBucketSizeInSecs); } 
LAYERS=5
route.getOutputs() == null || route.getOutputs().isEmpty()
KeyValueHolder<String,Processor>
registry.bind("blogService",new BlogService())
new CommandLineException("Failed to execute operation.",e)
buffers[i]
ReactiveHelper.schedule(() -> {   if (uow != null) {     uow.afterProcess(processor,exchange,callback,sync);   }   if (LOG.isTraceEnabled()) {     LOG.trace("Exchange processed and is continued routed asynchronously for exchangeId: {} -> {}",exchange.getExchangeId(),exchange);   } } ,"SharedCamelInternalProcessor - UnitOfWork - afterProcess - " + processor + " - "+ exchange.getExchangeId())
new CreateTableAsSelect(temporaryTableName,(Query)statement,false,tablePropertyOverrides,true,Optional.of(generateStorageColumnAliases((Query)statement,controlConfiguration,context)),Optional.empty())
((ChannelProgressivePromise)promise).tryProgress(progress,-1)
registry.bind("params",params)
new VariableInformation(1,"Total operation time compressor",NibeDataType.S32,Type.Sensor)
channel.disconnect()
Assert.assertEquals(1455,details.get(6).getAbsolutePosition())
public class XpathRegressionDeclarationOrderTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_ACCESS)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationOne']" + "/OBJBLOCK/VARIABLE_DEF[@text='name']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=DeclarationOrderCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionDeclarationTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(DeclarationOrderCheck.class);     final String[] expectedViolation={"5:5: " + getCheckMessage(DeclarationOrderCheck.class,DeclarationOrderCheck.MSG_STATIC)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionDeclarationTwo']" + "/OBJBLOCK/VARIABLE_DEF[@text='MAX']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
groupingSets.isEmpty()
t3.getSort()
id=16513
notifier.isIgnoreExchangeSendingEvents()
ASSERT.about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining("AutoFactory does not support generic types").in(file).onLine(21)
ran.nextInt(250)
rowsRet <= 0 || work.getLimit() == totalRows
mShowsDialog
titleTextField.getText()
logger.debug("Trying to map {} to {}",t,path)
Thread.sleep(200)
id=10864
TimeUtils.millis()
JSError.make(file.toString(),-1,-1,ModuleLoader.MODULE_CONFLICT,file.toString())
enabled=true
font.draw(batch,results,20,300)
rt == Boolean.TYPE && !(ret instanceof Boolean)
DiagnosticType.error("JSC_TOO_MANY_TEMPLATE_PARAMS","{0}")
timeout(10000)
@Override public ExtendedCell deepClone(){   Cell clonedBaseCell=((ExtendedCell)this.cell).deepClone();   return new ValueAndTagRewriteCell(clonedBaseCell,this.value,this.tags); } 
new RequestOptions(ResponseMode.GET_ALL,this.timeout,false,FILTER,Message.Flag.DONT_BUNDLE,Message.Flag.OOB)
LOG.error("Halting process: ShellBolt died.",exception)
null == batch || batch.isEmpty()
request.getParams() != null && !request.getParams().isEmpty()
getCurrCapacityUsed()
-100
@Override public Response headers(Map<String,Property> headers){   throw new RuntimeException("Not implemented"); } 
this.applicationContext.register(RootConfig.class,DifferentPortConfig.class,PropertyPlaceholderAutoConfiguration.class,EmbeddedServletContainerAutoConfiguration.class,DispatcherServletAutoConfiguration.class,WebMvcAutoConfiguration.class,ManagementServerPropertiesAutoConfiguration.class,EndpointWebMvcAutoConfiguration.class,ErrorMvcAutoConfiguration.class)
assertEquals("Unable to read 2 bytes, got 0",ex.getCause().getMessage())
!sourceEdgeTextData.getText().isEmpty()
version.getUpdate().getAsInt() >= 151
LOG.debug("Terminating gRPC server")
assertEquals(response.getResponseBody().length(),3873)
PlatformDependent.getByte(array,index)
b.entrySet()
ApacheAsyncHttpProvider.class
propEditor != null && !type.isArray()
@ConditionalOnEnabledHealthIndicator("mongo")
registration.registerOperationHandler(CommonAttributes.DISABLE,ModClusterDisable.INSTANCE,disable,false,runtimeOnlyFlags)
graph.getEdgesAndMetaEdges()
ErrorPageFilter.class
MessageFormat.format(TEMPLATE,path,metricsUri,path,pingUri,path,threadsUri,path,healthcheckUri)
recursiveUFSDeletes.remove(ancestorPair)
resultBuilder(driverContext.getSession(),BIGINT,BIGINT,DOUBLE,VARCHAR,BIGINT,BIGINT,REAL,DOUBLE,VARCHAR)
this.originY
new DropTableEvent(tbl,true,deleteData,this)
Assert.assertEquals(256,intValue)
Status.createStatuseList(get(getBaseURL() + "statuses/friends_timeline.json",null,paging.asPostParameterList(),true))
@ConditionalOnEnabledHealthIndicator("diskspace")
i > 0
!isIgnoreUriScheme()
object == null
className.lastIndexOf("org.openmrs.")
System.arraycopy(src,0,this.bytes,0,SIZE)
statistics.addPutTimeNanos(System.nanoTime() - start)
log.trace("Failed to deploy!!",res2.cause())
public Builder setRealmDomain(String domain){   realm().setDomain(domain);   return this; } 
c.content().readSlice(CONTENT_LENGTH)
new FieldFrame(null,true,null)
planNode.getPlanNodeCpuTime()
index < next
closeCode < 1001
new Packet(data,operation.getPartitionId())
id=10803
new CommandLineException("ModelNode request is incomplete",e)
new SensitivityClassification(SUBSYSTEM_NAME,"web-valve",false,false,false)
entry.getKey().getServerName()
latch.await(25,TimeUnit.SECONDS)
level < RF_STATUS_LOW_SIGNAL
id=25
public CharSequence getText(){   return text; } 
mm.tryLock(key,10,TimeUnit.SECONDS)
new CommandLineException("Parsed request isn't available.")
((Number)s.first()).longValue()
(short)0655
ApiConsumerHelper.findMethod(endpoint,this)
mDir.getDirIndex()
id=10802
testModules("var foo = function (module) {module.exports = {};};" + "module.exports = foo;","goog.provide('module$test');" + "var foo$$module$test=function(module){module.exports={}};" + "var module$test=foo$$module$test")
getExecutorServiceManager().shutdownNow(errorHandlerExecutorService)
factory.get(fResultWildcard,NO_ANNOTATIONS,retrofit)
uri == null || uri.equals("/")
DEFAULT_USER_AS_DEFAULT_QUEUE=true
new InetSocketAddress("localhost",6333)
id=10805
new JSONOrderedObject()
addEntryListener(new EntryListener<K,V>(){   public void entryAdded(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryRemoved(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryUpdated(  EntryEvent<K,V> event){     invalidate(event);   }   public void entryEvicted(  EntryEvent<K,V> event){     invalidate(event);   }   void invalidate(  EntryEvent<K,V> event){     System.err.println("invalidate");     final Data key=toData(event.getKey());     nearCache.put(key,event.getValue());   } } ,false)
EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params)
Throwable e
i % 2
Assert.assertEquals(20,as.getAllGlobalProperties().size())
edge.setDirection(edgeDefault)
timeout=90000
id=14239
Throwable e
titleTable.getPrefWidth()
WeakSafeReadWriteLock strongReference
name != null && name.length() > 2
Utils.isZkAuthenticationConfiguredTopology(topoConf)
WALSplitter.moveAsideBadEditsFile(fs,edits)
new ModelNode().set(25000L)
controller.handleSubmission(request,new MockHttpSession(),new ModelMap(),"Save User","pass123","pass123",new String[0],"true",user,new BindException(user,"user"))
tabAlias.equalsIgnoreCase(tableAlias)
delta < 7000
factory.get(mBodyGeneric,NO_ANNOTATIONS,retrofit)
count < 17
Calendar.getInstance(JSON.defaultTimeZone,JSON.defaultLocale)
this(parameters,new StringBuilder(),true); 
REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet(this,nanos,duration)
new IllegalStateException(String.format("File \"%1$s\" has inconsistent comment on line %2$d",aFileName,lineNumber))
Assert.notNull(cache,"No cache with name '" + cacheName + "' found.")
node1.isEquivalentTo(node1)
!active
Exception ex
Preconditions.checkNotNull(pinnedInodes)
ImmutableList<PairedStats>
dbSqlSessionFactory.getDatabaseSchema() != null && dbSqlSessionFactory.getDatabaseSchema().length() > 0
CommandUtils.convertMsToDate(mTfs.getInfo(mTfs.open(tUri)).getCreationTimeMs())
!type.isAnonymousClass() && !type.isInterface() && !type.isMemberClass()
error.expectedMinimumMessageCount(1)
/**   * Returns a duplicate of this resource record.  */ @Override public DnsResource duplicate(){   return new DnsResource(name(),type(),dnsClass(),ttl,content.duplicate()); } 
new InstrumentedHttpRequestExecutor(metricRegistry,metricNameStrategy,name)
LOG.debug("Requesting TaskManager's path for query services failed.",throwable)
Integer.parseInt(sessionTTL)
new DefaultMemoryManager(totalMemory,numSlots,pageSize,true)
node.getLifecycleService().shutdown()
logger.fine("Remove try/catch/finally")
r.getRequest(false)
f.getAttrs().getMTime() * 1000L
edge.setDirection(type)
synchronized (c) {   logger.trace("About to create {}",id);   if (unique && store.get(id) != null) {     throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");   }   T b=(T)store.get(id);   logger.trace("Looking in the store using {} returned {}",id,b);   if (b != null && !c.isAssignableFrom(b.getClass())) {     String msg="Invalid lookup class " + c.getName() + ". Cached class is: "+ b.getClass().getName();     logger.debug(msg);     throw new IllegalStateException(msg);   }   if ((b == null && createIfNull) || (b != null && b.isDestroyed())) {     if (b != null) {       logger.trace("Removing destroyed Broadcaster {}",b.getID());       store.remove(b.getID(),b);     }     Broadcaster nb=store.get(id);     if (nb == null) {       nb=createBroadcaster(c,id);       store.put(id,nb);     }     if (nb == null && logger.isTraceEnabled()) {       logger.trace("Added Broadcaster {} . Factory size: {}",id,store.size());     }     b=(T)nb;   }   return b; } 
assertEquals(response.getStatusCode(),302)
uncompressedProto.length < 1100000
Assert.assertEquals(4,providers.size())
UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab()
person.getPersonVoidReason()
log.error("Error while closing command context",exception)
!transactional && this.referenceId == referenceId
servletClass != null || filterClass != null
LOG.error("Cache flusher failed for entry " + fqe,ex)
/**   * Changes the owner of a file or directory specified by args recursively.  */ public final class ChownRecursiveCommand extends AbstractAclCommand {   public ChownRecursiveCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chownr";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,true);   }   @Override public String getUsage(){     return "chownr <owner> <path>";   } } 
context.addStep(response,operation,prepareStep,NewOperationContext.Stage.MODEL)
Type.LONG_TYPE.equals(typeInStack) || Type.DOUBLE_TYPE.equals(typeInStack)
file.flushAndForce()
/**   * Gets the key of connect hostname.  * @return key of connect hostname  */ public PropertyKey getHostNameKey(){   return mHostNameKey; } 
len >= 0
CommandUtils.convertMsToDate(files[3].getCreationTimeMs())
InputLaunchResponse.class
KBP_MINIMUM_SCORE=.453
N node
FilterModifWord.modifResult(result,forests)
new GenericAggregationFunction(NAME,inputTypes,intermediateType,valueType,true,false,factory)
getReduceValuesForReduceSinkNoMapAgg(parseInfo,destination,reduceSinkInputRowResolver,reduceSinkOutputRowResolver,outputValueColumnNames,reduceValues)
connector.setPort(9080)
request.getEntity().getMediaType().equals(MediaType.APPLICATION_WWW_FORM,true)
2 < statuses.size()
InetAddress.getByName("localhost")
Thread.sleep(2000)
/**   * Line number filter.   */ private CsvFilter lineFilter; 
filters={XSSHtmlFilter.class}
Assert.assertEquals(getNotAllowedExceptionMessage("hello"),e.getCause().getMessage())
new IndexOutOfBoundsException("negative offset:" + offset)
stopTimeNs - requestStartTimeNs
JSError.make(member,CONFLICTING_GETTER_SETTER_TYPE,member.getString())
request.getPathInfo()
assertEquals(someName,actualPattern.pattern())
call.getStartTime()
private CsvFilter filter; 
arguments[1]
min.x <= max.x
assertThat(page4.pagination().getGlobalTotal()).isEqualTo(5)
cause.getCause()
DiagnosticType.error("JSC_INVALID_MODULE_PATH","Invalid module path \"{0}\" for resolution mode \"{1}\"")
getRegistry().bind("myFilter",new NotificationFilter(){   private static final long serialVersionUID=1L;   public boolean isNotificationEnabled(  Notification aNotification){     boolean enabled=aNotification.getSequenceNumber() % 2 == 0;     if (!enabled) {       mRejected.add(aNotification);     }     return enabled;   } } )
JDKAsyncHttpProvider.class
args.length > 1 && args[1] instanceof String
Color.fromRGB(0x51301A)
NUM_TOUCHES=20
Thread.sleep(1000)
LOG.warn(rootPath + "is not a directory")
assertAbout(javaSources()).that(ImmutableList.of(javaFileObject,nestedJavaFileObject)).withCompilerOptions("-Xlint:-processing","-implicit:none")
id=41
ExprEval.ofDouble(null)
tfs.createFile(new TachyonURI("/root/testFile1"))
dbSqlSessionFactory.getDatabaseCatalog() != null && dbSqlSessionFactory.getDatabaseCatalog().length() > 0
synchronized (references) {   if (transformed != null) {     if (transformed instanceof List) {       @SuppressWarnings("unchecked") List<T> casted=(List<T>)transformed;       return casted;     }  else {       throw new InitializationTypeConflictException(transformed.getClass());     }   }  else {     return data;   } } 
IRON_GOLEM("VillagerGolem",IronGolem.class,99)
ReactiveHelper.schedule(runnable,"Multicast next step")
assertThat(ds.getValidationInterval()).isEqualTo(3000L)
id=10852
routes.ExtractorsResource().create(input.getId())
LOGGER.warn("Unable to process JSON",exception)
(Short)args.get("damage")
metaData.getColumnLabel(1)
entry.getCheckName().equalsIgnoreCase(checkAlias)
/**   * {@code "content-security-policy"}  */ public static final AsciiString CONTENT_SECURITY_POLICY=new AsciiString("content-security-policy"); 
doInvoke(args.first(),(args=args.rest()).first(),args.rest())
visitor.visitTypeLiteral(this)
HMSHANDLERATTEMPTS("hive.hmshandler.retry.attempts",10,"The number of times to retry a HMSHandler call if there were a connection error.")
fields[i] >= 0 && in1 != null
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicReferenceBasicLocalTest extends AtomicReferenceAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
mock.expectedMinimumMessageCount(1)
LOG.warn("register druid-driver mbean error",ex)
public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"4:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,2,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK" + "/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=CyclomaticComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionCyclomaticTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(CyclomaticComplexityCheck.class);     moduleConfig.addAttribute("max","0");     final String[] expectedViolation={"6:5: " + getCheckMessage(CyclomaticComplexityCheck.class,CyclomaticComplexityCheck.MSG_KEY,5,0)};     final List<String> expectedXpathQueries=Arrays.asList("/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS","/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo2']/MODIFIERS/LITERAL_PUBLIC");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
reportsE.appendChild(reportE)
Thread.currentThread()
Status.createStatuseList(get(getBaseURL() + "statuses/user_timeline/" + id+ ".json",http.isAuthenticationEnabled()))
queryIds.remove(deadQuery)
@Override public Response header(String name,Property property){   throw new RuntimeException("Not implemented"); } 
toRemove[1]
SecurityUtils.isAuthorizationEnabled(configuration)
player.teleport(playerLocation,TeleportCause.COMMAND)
KeySequenceNumber.class
AsyncHttpClientConfig.class
elementClass != null && Modifier.isPublic(elementClass.getModifiers())
registry.bind("myConfigurer",configurer)
new IllegalArgumentException("Could not lookup jndi name: " + namespaceStrippedJndiName + " in context: "+ jndiContext,ne)
new ProcessBuilder(startScript,mMesosAddress)
clusterMap.set(buildAttributeName(entry.getKey()),cacheEntry.value)
assertEquals(fc2,fc)
"TcpIpConnectionManager configured with Non Blocking IO-threading model: " + inputThreadCount + " input threads and "+ outputThreadCount+ " output threads"
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ConditionBasicLocalTest extends ConditionAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
assertCompositeByteBufIsBufferCopyNeededForWrite(alloc,2,0,true)
new ProcessBuilder(java,vmArguments,"-cp",h2jar.getAbsolutePath(),Server.class.getName(),"-tcp","-ifNotExists","-baseDir",tempDir.resolve("database-in-time-zone").toString())
edgeColumn.getIndex()
new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString())
getAnimation(id,false)
BufferUtils.newUnsafeByteBuffer(fileSize)
alluxioUriToDel.equals(inodePath.getUri()) || !ufsSyncChecker.isDirectoryInSync(parentUri)
final ImportControl root=ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml"))); 
public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineOne.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"4:17: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineOne']/OBJBLOCK" + "/VARIABLE_DEF[@text='j']/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=OneStatementPerLineCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionOneStatementPerLineTwo.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(OneStatementPerLineCheck.class);     final String[] expectedViolation={"9:39: " + getCheckMessage(OneStatementPerLineCheck.class,OneStatementPerLineCheck.MSG_KEY)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionOneStatementPerLineTwo']/OBJBLOCK" + "/METHOD_DEF[@text='foo5']/SLIST/LITERAL_FOR/SLIST/SEMI");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
assertEquals(300d,fStopwatch.runtime(MILLISECONDS),100d)
new DefaultPropertyNamePatternsMatcher(EXACT_DELIMITERS,true,names)
Mockito.verify(mFileSystemMasterClient).mount(alluxioPath,ufsPath,mountOptions)
new SemanticException(TYPE_MISMATCH,node,"column %d in %s query has incompatible types: %s, %s",i,setOperationName,outputFieldTypes[i].getDisplayName(),descFieldType.getDisplayName())
from("jms:queue2:parallelLoanRequestQueue").process(new CreditAgency()).multicast(new BankResponseAggregationStrategy().setAggregatingOutMessage(true)).setParallelProcessing(true)
(InvocationTargetException)unwrapped
timeout=1000
id=26
logger.trace("{} unsupported item type {} for item {}",LoggerConstants.TFMODELUPDATE,provider.getItem(itemName),itemName)
return requires; 
compressedProto.length < 391000
new MockResponse().setBody("A").setSocketPolicy(DISCONNECT_AT_END)
ComponentOption that=(ComponentOption)o; 
nioGroup.shutdownGracefully(0,10,TimeUnit.SECONDS)
mDownView != null && mDownView instanceof ContextualUndoView
CxfSpringEndpointBean.class
Thread.currentThread().interrupted()
GL20.glUniformMatrix3fv(location,transpose,toFloatBuffer(value,offset,count * 9))
RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock(RetryHandlingBlockMasterClient.class); 
from("direct:a").delay(5000)
retVal.setProperty(entry.getKey(),value)
LOAD_FACTOR=0.75f
context.setDelayer(2000)
!Values.UPGRADE.equalsIgnoreCase(connection)
outputBufferProcessors=3
Thread.sleep(401)
createMessageConsumer(session,destinationName,messageSelector,topic,durableSubscriptionId,false)
node.executorManager.executeLocally(new Runnable(){   public void run(){     MembershipEvent membershipEvent=new MembershipEvent(ClusterImpl.this,cm,MembershipEvent.MEMBER_REMOVED);     for (    MembershipListener listener : listenerSet) {       listener.memberRemoved(membershipEvent);     }   } } )
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ListBasicLocalTest extends ListAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } 
format(conf,true)
new FileWrapper(token).exists() || new FileWrapper(token).mkdirs()
compare(leftValue,rightValue) >= 0
key == null
(getStatus().getState() == OperationState.CANCELED) || (getStatus().getState() == OperationState.TIMEDOUT) || (getStatus().getState() == OperationState.CLOSED)|| (getStatus().getState() == OperationState.FINISHED)
new IllegalStateException("Comments are not consistent")
registry.bind("kinesisClient",amazonKinesisClient)
container.getAttributeModel().getEdgeTable()
new RuntimeException("Could not create TypeInformation for type " + data[0].getClass().getName() + "; please specify the TypeInformation manually via "+ "StreamExecutionEnvironment#fromElements(Collection, TypeInformation)",e)
ChannelBuffers.wrappedBuffer(request.getByteData())
new ArrayList<>()
pairs != null && pairs.getKeyValues() != null
GatherGetterAndSetterProperties.gather(compiler,externsRoot)
id=13108
type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType
id=6
QuartzHelper.class
MAX_ITEMS=100
AbstractBootstrap<ServerBootstrap,ServerChannel>
new IntRangeValidator(1,true)
entry.getValue().health().transformDeferred(this.timeoutCompose)
BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat(mRpcAddress,client)
endpoint.getCamelContext().getClassResolver().resolveMandatoryClass(endpoint.getConfiguration().getTargetModel())
interceptorParamTypes.length - 3
RetriesExhaustedException.class
T exception
exchange.getResponse().setComplete()
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(2).newInstances();   } } 
new StringBuilder(256)
config.getClientNumThreads()
StatBuckets.prettyUptimeStr(secs)
SSOTestBase.executeNoAuthSingleSignOnTest(baseURLNoAuth,baseURLNoAuth,log)
stats.facetFilter(standardFilters(range,filter))
Class.forName(serializerConfigClassname,false,userCodeClassLoader)
DirectMessage.createDirectMessageList(get(getBaseURL() + "direct_messages/sent.json",new PostParameter[0],true))
Preconditions.checkNotNull(object,"object")
MathUtils.random(width)
Runnable t=new RunAfterTester(new DisconnectionBehavior(h1,h2),new MultiCallBuilder(h1)); 
new java.util.Date(System.currentTimeMillis() - 24 * 3600 * 1000)
Assert.assertTrue(Boolean.valueOf(response.getFirstHeader("serialized").getValue()))
webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b,offset,length))
currentModelTransform=renderable.modelTransform
getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())
new FlinkRuntimeException("Unexpected list element deserialization failure",e)
twitter1.getPublicTimeline()
cache.remove(r)
analysis.getTypeWithCoercions(expression)
VERSION=1
Arrays.asList("bool","qint32","qint64","float","double")
targetClass != null && field != null
deletionRetentionStrategyConfig == null
hashFunction.newHasher().putBytes(bigEndian)
loadModel(file)
zController.enqueue(doRequestStop())
waitYieldLatch.await()
1000 * 1000 * 1
Integer.valueOf(1)
saveTask instanceof LongTask
log.debug("Cannot scale anymore. Num workers = %d, Max num workers = %d",zkWorkers.size(),workerSetupdDataRef.get().getMaxNumWorkers())
view.getClusteredLayerDegree(absNode)
LOG.warn("Promotion of block " + blockId + " failed.")
public class XpathRegressionNestedTryDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedTryDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,"SuppressionXpathRegressionNestedTryDepth.java"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedTryDepthCheck.class);     final String[] expectedViolation={"7:17: " + getCheckMessage(NestedTryDepthCheck.class,NestedTryDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList("/CLASS_DEF[@text='SuppressionXpathRegressionNestedTryDepth']/OBJBLOCK" + "/METHOD_DEF[@text='test']/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } 
lastException != null && i < (flushRetriesNumber - 1)
this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE)
cf.getCompressionType() == null || cf.getCompressionType() == Compression.Algorithm.NONE
buffer.nextValue(null,i,info.type,info.meta)
Duration.seconds(200)
mapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,new CglibBeanPropertyFilter()))
typesArray.length != row.productArity()
camera.setMatrices()
CollectionUtils.isEmpty(elements)
public abstract <T>SctpServerChannel setOption(SctpSocketOption<T> name,T value) throws IOException ; 
id=10996
lookup="java:/queue/myAwesomeQueue"
tblObj.getPath()
/**   * Changes the owner of a file or directory specified by args.  */ public final class ChownCommand extends AbstractAclCommand {   public ChownCommand(  TachyonConf conf,  TachyonFileSystem tfs){     super(conf,tfs);   }   @Override public String getCommandName(){     return "chown";   }   @Override protected int getNumOfArgs(){     return 2;   }   @Override public void run(  String... args) throws IOException {     String owner=args[0];     TachyonURI path=new TachyonURI(args[1]);     chown(path,owner,false);   }   @Override public String getUsage(){     return "chown <owner> <path>";   } } 
value == null
assertEquals("Was: " + map + ", no-auto-index:"+ functionalTestHelper.removeAnyAutoIndex(map),1,functionalTestHelper.removeAnyAutoIndex(map).size())
if (mAllowUndeclaredRTE) {   processPackage(aAST); } 
1000.0 * FILES_BYTES
mock.expectedBodiesReceivedInAnyOrder("Hello World 2","Hello World 4")
Arrays.asList("onThreadPoolAdd","onContextStart","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onServiceAdd","onComponentAdd","onEndpointAdd","onComponentRemove","onContextStop")
super.doCreateDataFormat(camelContext)
setTimeToIdleSeconds(Long.valueOf((String)cacheSettings.get("timeToIdleSeconds")).longValue())
static void writeFile(NameNode namenode,Configuration conf,Path name,short replication) throws Exception {   FileSystem fileSys=FileSystem.get(conf);   SequenceFile.Writer writer=SequenceFile.createWriter(fileSys,conf,name,BytesWritable.class,BytesWritable.class,CompressionType.NONE);   writer.append(new BytesWritable(),new BytesWritable());   writer.close();   fileSys.setReplication(name,replication);   DFSTestUtil.waitReplication(fileSys,name,replication); } 
Object getBean() throws NoBeanAvailableException ; 
from("direct:start").transform(body().append(" World")).async().waitForTaskToComplete(WaitForTaskToComplete.IfReplyExpected).to("mock:foo").delay(1000)
config.setProxyURL(modelconf.get(CommonAttributes.PROXY_URL).asString())
deployOneTaskTestProcess()
srcActivity.getParent() == null || !(srcActivity.getParent() instanceof PvmActivity)
doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())
nameTextField.getText()
vindex > Short.MAX_VALUE
assertTrue(jmsTemplate.isPubSubDomain())
booleanSessionProperty(LEGACY_ORDER_BY,"Use legacy rules for column resolution in ORDER BY clause",featuresConfig.isLegacyOrderBy(),false)
assertEquals(1,helper.getRelationshipIndexes().length)
Sets.difference(queryIdsSnapshot,liveQueries)
lock.tryLock(30,TimeUnit.SECONDS)
findDelegateForNewObject(name)
buffer.writeBytes(content,content.readerIndex(),content.readableBytes())
id=16506
current.getLabel().startsWith("ns") && !pre.getLabel().startsWith("ns") && !pre.getValue().equals(Predefine.TAG_BIGIN)
type.equalsIgnoreCase("boolean") || type.equalsIgnoreCase("bool")
CommonUtils.sleepMs(200)
addr.isAnyLocalAddress() || addr.isLoopbackAddress()
builder.put(columnHandle,0.0)
ch == '|' && JdbcConstants.POSTGRESQL.equals(dbType)
assertEquals(3,historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size())
Assert.assertEquals(1202,details.get(2).getAbsolutePosition())
TestSuiteEnvironment.getHttpAddress()
getConnectionAddOperation(name,outboundSocketBindingRef,username,securityRealm,address)
testError(js,VariableReferenceCheck.REDECLARED_VARIABLE)
new IllegalArgumentException("the ast is null")
responseModels.entrySet()
List<Item>
uncompressedProto.length < 2500000
/**   * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.  */ private Integer autoCommitInterval; 
new RuntimeException("Error during multilang processing",e)
to.getClass()
new MapJsonReader(streamDescriptor,writeStackType,checkForNulls,hiveStorageTimeZone,sessionTimeZone)
DEFAULT_MAX_METHODS=100
MkdirsOptions.class
Status.createStatuseList(get(getBaseURL() + "statuses/mentions.json",null,paging.asPostParameterList(),true))
!inbound.isBypass() && inbound.isEmpty() && inbound.hasByteBuffer()
logger.debug("Receive queue ADD: Length={}",recvQueue.size())
HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())
new PartitionsStatsRequest(databaseName,tableName,columnNames,partitionNames)
removeQuotes(timestring.trim())
free(path,true)
numTouched >= 1
routes.BuffersResource()
hash != 0
new char[8192]
args.length != 2
LOG.debug("Terminating channel to the remote gRPC server")
url != null
submittedNode.get("values") == null
filteredMessage.addLast(perRequestFilter(r,new Entry(o,r,f,o),false))
twitter4j.List.createListList(get(getApiBaseURL() + V1 + user+ "/lists.json?cursor="+ cursor,true))
GL20.glUniform3iv(location,v)
undertowHost.getServer().getListeners().get(0).getBinding().getValue().getAbsolutePort()
@RunWith(HazelcastSerialClassRunner.class) @Category(SlowTest.class) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest {   @Test public void testPutWithTTL_withMigration() throws Exception {     int nodeCount=1;     int keyCount=10000;     int operationCount=10000;     int threadCount=15;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,true);   }   @Test public void testPutWithTTL_withoutMigration() throws Exception {     int nodeCount=5;     int keyCount=10000;     int operationCount=10000;     int threadCount=10;     int ttl=500;     testPutWithTTL(nodeCount,keyCount,operationCount,threadCount,ttl,false);   }   private void testPutWithTTL(  int nodeCount,  int keyCount,  int operationCount,  int threadCount,  int ttl,  boolean causeMigration) throws InterruptedException {     TimeUnit timeUnit=TimeUnit.MILLISECONDS;     TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory();     HazelcastInstance[] instances=factory.newInstances(null,nodeCount);     String mapName=randomMapName();     List<ReplicatedMap> maps=createMapOnEachInstance(instances,mapName);     ArrayList<Integer> keys=generateRandomIntegerList(keyCount);     Thread[] threads=createThreads(threadCount,maps,keys,ttl,timeUnit,operationCount);     for (    Thread thread : threads) {       thread.start();     }     HazelcastInstance instance=null;     if (causeMigration) {       instance=factory.newHazelcastInstance();     }     for (    Thread thread : threads) {       thread.join();     }     if (causeMigration) {       ReplicatedMap<Object,Object> map=instance.getReplicatedMap(mapName);       maps.add(map);     }     for (    ReplicatedMap map : maps) {       assertSizeEventually(0,map,60);     }   }   private Thread[] createThreads(  int count,  List<ReplicatedMap> maps,  ArrayList<Integer> keys,  long ttl,  TimeUnit timeunit,  int operations){     Thread[] threads=new Thread[count];     int size=maps.size();     for (int i=0; i < count; i++) {       threads[i]=createPutOperationThread(maps.get(i % size),keys,ttl,timeunit,operations);     }     return threads;   }   private Thread createPutOperationThread(  final ReplicatedMap<String,Object> map,  final ArrayList<Integer> keys,  final long ttl,  final TimeUnit timeunit,  final int operations){     return new Thread(new Runnable(){       @Override public void run(){         Random random=new Random();         int size=keys.size();         for (int i=0; i < operations; i++) {           int index=i % size;           String key="foo-" + keys.get(index);           map.put(key,random.nextLong(),1 + random.nextInt((int)ttl),timeunit);         }       }     } );   } } 
details.setProperty(CONFIG_HASH_KEY,currentConfigHash)
assignedServers.add(holder)
logger.debug("Could not send module un-availability notification of module " + deploymentModuleIdentifier + " to channel "+ this.channel,e)
config.setPort(25668)
config.getMapConfig(mapName).setTimeToLiveSeconds(10)
Status.createStatuseList(get(getBaseURL() + "statuses/public_timeline.json",null,new Paging((long)sinceID).asPostParameterList(Paging.S),false))
snapshot.getCount()
logger.trace("attempting to login")
@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest {   @Override protected HazelcastInstance[] newInstances(){     return createHazelcastInstanceFactory(1).newInstances();   } } 
28 * ClassSize.REFERENCE
jmsManager.removeTopicFromJNDI(name)
Utilities.isMac() || Utilities.isUnix()
endpointA.expectedBodiesReceivedInAnyOrder("A blue car!","A blue car, again!")
cookies.rowMap()
a.getBoolean(R.styleable.DragSortListView_use_default_controller,true)
new PriorityTieredBrokerSelectorStrategy(0,1)
mock.setMinimumResultWaitTime(1500)
endFunction("write_partition_column_statistics: ",ret != false,null)
d.addWelcomePages(file)
bits2[1]
assertEquals(8,data.size())
beanFactory.getBeanNamesForType(CacheAspectSupport.class,false,false)
