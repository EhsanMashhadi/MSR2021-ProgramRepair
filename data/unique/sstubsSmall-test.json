[
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8716b68d562606ede1091f5a4dc90a2c9bac47f8",
        "fixCommitParentSHA1": "ed1e6b411f3668204a851476cfde58c66feb48b0",
        "bugFilePath": "components/camel-zookeeper-master/src/test/java/org/apache/camel/component/zookeepermaster/MasterEndpointFailoverTest.java",
        "fixPatch": "diff --git a/components/camel-zookeeper-master/src/test/java/org/apache/camel/component/zookeepermaster/MasterEndpointFailoverTest.java b/components/camel-zookeeper-master/src/test/java/org/apache/camel/component/zookeepermaster/MasterEndpointFailoverTest.java\nindex ea8118a..da80a16 100644\n--- a/components/camel-zookeeper-master/src/test/java/org/apache/camel/component/zookeepermaster/MasterEndpointFailoverTest.java\n+++ b/components/camel-zookeeper-master/src/test/java/org/apache/camel/component/zookeepermaster/MasterEndpointFailoverTest.java\n@@ -57,7 +57,7 @@\n \n         // Need to bind the zookeeper client with the name \"curator\"\n         SimpleRegistry registry = new SimpleRegistry();\n-        registry.put(\"curator\", client);\n+        registry.bind(\"curator\", client);\n \n         producerContext = new DefaultCamelContext(registry);\n         // Add the vm:start endpoint to avoid the NPE before starting the consumerContext1\n",
        "projectName": "apache.camel",
        "bugLineNum": 60,
        "bugNodeStartChar": 2546,
        "bugNodeLength": 31,
        "fixLineNum": 60,
        "fixNodeStartChar": 2546,
        "fixNodeLength": 32,
        "sourceBeforeFix": "registry.put(\"curator\",client)",
        "sourceAfterFix": "registry.bind(\"curator\",client)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e3c68859dd31ee2d651cbba5f31474652c9553dd",
        "fixCommitParentSHA1": "66b38acd3b82967c44450d9eec58266e1d2fb124",
        "bugFilePath": "flink-runtime/src/test/java/org/apache/flink/runtime/util/clock/ManualClock.java",
        "fixPatch": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/util/clock/ManualClock.java b/flink-runtime/src/test/java/org/apache/flink/runtime/util/clock/ManualClock.java\nindex 69ae7be..a3a15e5 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/util/clock/ManualClock.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/util/clock/ManualClock.java\n@@ -30,12 +30,12 @@\n \n \t@Override\n \tpublic long absoluteTimeMillis() {\n-\t\treturn currentTime.get() / 1_000L;\n+\t\treturn currentTime.get() / 1_000_000L;\n \t}\n \n \t@Override\n \tpublic long relativeTimeMillis() {\n-\t\treturn currentTime.get() / 1_000L;\n+\t\treturn currentTime.get() / 1_000_000L;\n \t}\n \n \t@Override\n",
        "projectName": "apache.flink",
        "bugLineNum": 33,
        "bugNodeStartChar": 1171,
        "bugNodeLength": 26,
        "fixLineNum": 33,
        "fixNodeStartChar": 1171,
        "fixNodeLength": 30,
        "sourceBeforeFix": "currentTime.get() / 1_000L",
        "sourceAfterFix": "currentTime.get() / 1_000_000L"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "b5a714a3ed5c3d4f85ece1bf1faacd0b4a274383",
        "fixCommitParentSHA1": "dac3afdfd9cda8475b9e2ff6a95f64dad1826e7b",
        "bugFilePath": "clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StateTransferResourceDefinition.java",
        "fixPatch": "diff --git a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StateTransferResourceDefinition.java b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StateTransferResourceDefinition.java\nindex 0af1e8c..72c5c67 100644\n--- a/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StateTransferResourceDefinition.java\n+++ b/clustering/infinispan/extension/src/main/java/org/jboss/as/clustering/infinispan/subsystem/StateTransferResourceDefinition.java\n@@ -53,7 +53,7 @@\n     static final PathElement PATH = pathElement(\"state-transfer\");\n \n     enum Attribute implements org.jboss.as.clustering.controller.Attribute {\n-        CHUNK_SIZE(\"chunk-size\", ModelType.INT, new ModelNode(10000)),\n+        CHUNK_SIZE(\"chunk-size\", ModelType.INT, new ModelNode(512)),\n         TIMEOUT(\"timeout\", ModelType.LONG, new ModelNode(TimeUnit.MINUTES.toMillis(4))),\n         ;\n         private final AttributeDefinition definition;\n@@ -98,7 +98,10 @@\n         ResourceTransformationDescriptionBuilder builder = InfinispanModel.VERSION_4_0_0.requiresTransformation(version) ? parent.addChildRedirection(PATH, LEGACY_PATH) : parent.addChildResource(PATH);\n \n         if (InfinispanModel.VERSION_4_0_0.requiresTransformation(version)) {\n-            builder.getAttributeBuilder().setValueConverter(new AttributeConverter.DefaultValueAttributeConverter(Attribute.TIMEOUT.getDefinition()), Attribute.TIMEOUT.getDefinition());\n+            builder.getAttributeBuilder()\n+                    .setValueConverter(new AttributeConverter.DefaultValueAttributeConverter(Attribute.TIMEOUT.getDefinition()), Attribute.TIMEOUT.getDefinition())\n+                    .setValueConverter(new AttributeConverter.DefaultValueAttributeConverter(Attribute.CHUNK_SIZE.getDefinition()), Attribute.CHUNK_SIZE.getDefinition())\n+            ;\n         }\n     }\n \n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 56,
        "bugNodeStartChar": 2704,
        "bugNodeLength": 20,
        "fixLineNum": 56,
        "fixNodeStartChar": 2704,
        "fixNodeLength": 18,
        "sourceBeforeFix": "new ModelNode(10000)",
        "sourceAfterFix": "new ModelNode(512)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "b5fd7c00a9da43067409219c59c749104b92aa29",
        "fixCommitParentSHA1": "b89e201598e0fa497c84a036400f4d774d20b19a",
        "bugFilePath": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentInfoService.java",
        "fixPatch": "diff --git a/undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentInfoService.java b/undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentInfoService.java\nindex 1155c27..e95db6c 100644\n--- a/undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentInfoService.java\n+++ b/undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentInfoService.java\n@@ -762,9 +762,9 @@\n             }\n \n             if (mergedMetaData.getDefaultEncoding()!=null){\n-                deploymentInfo.setDefaultEncoding(mergedMetaData.getDefaultEncoding());\n+                d.setDefaultEncoding(mergedMetaData.getDefaultEncoding());\n             }else if (servletContainer.getDefaultEncoding()!=null){\n-                deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding());\n+                d.setDefaultEncoding(servletContainer.getDefaultEncoding());\n             }\n \n             return d;\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 767,
        "bugNodeStartChar": 39814,
        "bugNodeLength": 72,
        "fixLineNum": 767,
        "fixNodeStartChar": 39814,
        "fixNodeLength": 59,
        "sourceBeforeFix": "deploymentInfo.setDefaultEncoding(servletContainer.getDefaultEncoding())",
        "sourceAfterFix": "d.setDefaultEncoding(servletContainer.getDefaultEncoding())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8",
        "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0",
        "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java",
        "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\nindex 8c2d48c..470134d 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java\n@@ -139,8 +139,7 @@\n     @Test\n     public void testGenericEndsTheLine() throws Exception {\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n-        verify(checkConfig, getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\"),\n-                expected);\n+        verify(checkConfig, getPath(\"InputGenericWhitespaceEndsTheLine.java\"), expected);\n     }\n \n     @Test\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 142,
        "bugNodeStartChar": 6220,
        "bugNodeLength": 62,
        "fixLineNum": 142,
        "fixNodeStartChar": 6220,
        "fixNodeLength": 49,
        "sourceBeforeFix": "getNonCompilablePath(\"InputGenericWhitespaceEndsTheLine.java\")",
        "sourceAfterFix": "getPath(\"InputGenericWhitespaceEndsTheLine.java\")"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "3c7e125fc08f7d752e848dcb7e83a574ce4bd8ec",
        "fixCommitParentSHA1": "6ead83e3206d43688226fa7a6ac18ce2a271160f",
        "bugFilePath": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex d7ecd32..bcfc68b 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -1754,7 +1754,7 @@\n     ConformanceConfig.Builder builder = ConformanceConfig.newBuilder();\n \n     // Looking for BOM.\n-    if (textProto.charAt(0) == UTF8_BOM_CODE) {\n+    if (!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE) {\n       // Stripping the BOM.\n       textProto = textProto.substring(1);\n     }\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 1757,
        "bugNodeStartChar": 65407,
        "bugNodeLength": 36,
        "fixLineNum": 1757,
        "fixNodeStartChar": 65407,
        "fixNodeLength": 60,
        "sourceBeforeFix": "textProto.charAt(0) == UTF8_BOM_CODE",
        "sourceAfterFix": "!textProto.isEmpty() && textProto.charAt(0) == UTF8_BOM_CODE"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "06ed1d48da4a57dc87cf3c1215bfe23bce4e78d8",
        "fixCommitParentSHA1": "07d477a7107ce6a50f98f3f6cc57d46c106a21f0",
        "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java",
        "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\nindex ea875cd..d26c96a 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java\n@@ -40,7 +40,7 @@\n public class AllChecksTest extends BaseCheckTestSupport {\n     @Test\n     public void testAllChecksWithDefaultConfiguration() throws Exception {\n-        final String inputFilePath = getNonCompilablePath(\"InputDefaultConfig.java\");\n+        final String inputFilePath = getPath(\"InputDefaultConfig.java\");\n         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;\n \n         for (Class<?> check : CheckUtil.getCheckstyleChecks()) {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 43,
        "bugNodeStartChar": 1884,
        "bugNodeLength": 47,
        "fixLineNum": 43,
        "fixNodeStartChar": 1884,
        "fixNodeLength": 34,
        "sourceBeforeFix": "getNonCompilablePath(\"InputDefaultConfig.java\")",
        "sourceAfterFix": "getPath(\"InputDefaultConfig.java\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "ead7c5c75fd253dbeccc62673d180cc620b689c0",
        "fixCommitParentSHA1": "d185f7b3f6c08b43d6b57c0e0b0a163ad48a2950",
        "bugFilePath": "enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java",
        "fixPatch": "diff --git a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\nindex 95ffc50..1f0500b 100644\n--- a/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n+++ b/enterprise/ha/src/test/java/slavetest/SingleJvmWithNettyTest.java\n@@ -569,7 +569,7 @@\n         } );\n         \n         DoubleLatch latch = latchFetcher.fetch();\n-        latch.countDownFirst();\n+        latch.awaitFirst(); // Wait for lockHolder to grab the lock\n         try\n         {\n             executeJob( new CommonJobs.SetNodePropertyWithThrowJob( otherNodeId.longValue(),\n",
        "projectName": "neo4j.neo4j",
        "bugLineNum": 572,
        "bugNodeStartChar": 21276,
        "bugNodeLength": 22,
        "fixLineNum": 572,
        "fixNodeStartChar": 21276,
        "fixNodeLength": 18,
        "sourceBeforeFix": "latch.countDownFirst()",
        "sourceAfterFix": "latch.awaitFirst()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "57c1a20ed514174389b336b03ba40c191e2c6d32",
        "fixCommitParentSHA1": "1bfd2a3176f89ecfae25af2343708f9f2bb1c811",
        "bugFilePath": "catalog/camel-route-parser/src/test/java/org/apache/camel/parser/java/RoasterEndpointInjectTest.java",
        "fixPatch": "diff --git a/catalog/camel-route-parser/src/test/java/org/apache/camel/parser/java/RoasterEndpointInjectTest.java b/catalog/camel-route-parser/src/test/java/org/apache/camel/parser/java/RoasterEndpointInjectTest.java\nindex 296483c..5d4619d 100644\n--- a/catalog/camel-route-parser/src/test/java/org/apache/camel/parser/java/RoasterEndpointInjectTest.java\n+++ b/catalog/camel-route-parser/src/test/java/org/apache/camel/parser/java/RoasterEndpointInjectTest.java\n@@ -48,26 +48,26 @@\n         Assert.assertEquals(\"timer:foo?period=4999\", details.get(0).getEndpointUri());\n         Assert.assertEquals(\"28\", details.get(0).getLineNumber());\n         Assert.assertEquals(\"28\", details.get(0).getLineNumberEnd());\n-        Assert.assertEquals(1062, details.get(0).getAbsolutePosition());\n+        Assert.assertEquals(1061, details.get(0).getAbsolutePosition());\n         Assert.assertEquals(10, details.get(0).getLinePosition());\n \n         Assert.assertEquals(\"log:a\", details.get(1).getEndpointUri());\n         Assert.assertEquals(\"32\", details.get(1).getLineNumber());\n         Assert.assertEquals(\"32\", details.get(1).getLineNumberEnd());\n-        Assert.assertEquals(1145, details.get(1).getAbsolutePosition());\n+        Assert.assertEquals(1144, details.get(1).getAbsolutePosition());\n         Assert.assertEquals(10, details.get(1).getLinePosition());\n \n         Assert.assertEquals(\"netty4-http:http:someserver:80/hello\", details.get(2).getEndpointUri());\n         Assert.assertEquals(\"36\", details.get(2).getLineNumber());\n         Assert.assertEquals(\"36\", details.get(2).getLineNumberEnd());\n-        Assert.assertEquals(1203, details.get(2).getAbsolutePosition());\n+        Assert.assertEquals(1202, details.get(2).getAbsolutePosition());\n         Assert.assertEquals(10, details.get(2).getLinePosition());\n \n         // spans 2 lines\n         Assert.assertEquals(\"mock:foo?retainFirst=1\", details.get(6).getEndpointUri());\n         Assert.assertEquals(\"45\", details.get(6).getLineNumber());\n         Assert.assertEquals(\"46\", details.get(6).getLineNumberEnd());\n-        Assert.assertEquals(1457, details.get(6).getAbsolutePosition());\n+        Assert.assertEquals(1456, details.get(6).getAbsolutePosition());\n         Assert.assertEquals(17, details.get(6).getLinePosition());\n \n         List<ParserResult> list = CamelJavaParserHelper.parseCamelConsumerUris(method, true, true);\n",
        "projectName": "apache.camel",
        "bugLineNum": 57,
        "bugNodeStartChar": 2654,
        "bugNodeLength": 63,
        "fixLineNum": 57,
        "fixNodeStartChar": 2654,
        "fixNodeLength": 63,
        "sourceBeforeFix": "Assert.assertEquals(1145,details.get(1).getAbsolutePosition())",
        "sourceAfterFix": "Assert.assertEquals(1144,details.get(1).getAbsolutePosition())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "be9816e087e65c306879308f425ce4b024640e4c",
        "fixCommitParentSHA1": "bcfc87cd8c6076ecc5606ee7c249d93455492760",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\nindex 47cf31a..8150d3b 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n@@ -29,7 +29,7 @@\n  */\n public class AtmosphereInterceptorWriter extends AsyncIOWriterAdapter {\n \n-    private static final Logger logger = LoggerFactory.getLogger(AsyncIOWriterAdapter.class);\n+    private static final Logger logger = LoggerFactory.getLogger(AtmosphereInterceptorWriter.class);\n     private final AtmosphereResponse response;\n \n     private final ArrayList<AsyncIOInterceptor> filters = new ArrayList<AsyncIOInterceptor>();\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 32,
        "bugNodeStartChar": 1132,
        "bugNodeLength": 26,
        "fixLineNum": 32,
        "fixNodeStartChar": 1132,
        "fixNodeLength": 33,
        "sourceBeforeFix": "AsyncIOWriterAdapter.class",
        "sourceAfterFix": "AtmosphereInterceptorWriter.class"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "cdbe9fde5523faa218e24c8ed2781267078b9caf",
        "fixCommitParentSHA1": "1b9a53fba3582e119dea0b2aa75d90a6aaea2af9",
        "bugFilePath": "tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java",
        "fixPatch": "diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\nindex 924cdb1..68a3685 100644\n--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n@@ -701,14 +701,14 @@\n             File[] components = componentsDir.listFiles();\n             if (components != null) {\n                 for (File dir : components) {\n-                    if (dir.isDirectory() && !\"target\".equals(dir.getName())) {\n+                    if (dir.isDirectory() && !\"target\".equals(dir.getName()) && !dir.getName().startsWith(\".\")) {\n                         File target = new File(dir, \"src/main/docs\");\n \n                         int before = adocFiles.size();\n                         findAsciiDocFilesRecursive(target, adocFiles, new CamelAsciiDocFileFilter());\n                         int after = adocFiles.size();\n \n-                        if (before != after) {\n+                        if (before == after) {\n                             missingAdocFiles.add(dir);\n                         }\n                     }\n",
        "projectName": "apache.camel",
        "bugLineNum": 704,
        "bugNodeStartChar": 27525,
        "bugNodeLength": 52,
        "fixLineNum": 704,
        "fixNodeStartChar": 27525,
        "fixNodeLength": 86,
        "sourceBeforeFix": "dir.isDirectory() && !\"target\".equals(dir.getName())",
        "sourceAfterFix": "dir.isDirectory() && !\"target\".equals(dir.getName()) && !dir.getName().startsWith(\".\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
        "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
        "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\nindex 461ea4d..2595728 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java\n@@ -189,7 +189,7 @@\n \t */\n \tprivate void poll() {\n \t\tif (invalidCredentials || this.myqOnlineData == null) {\n-\t\t\tlogger.debug(\"Invalid Account Credentials\");\n+\t\t\tlogger.trace(\"Invalid Account Credentials\");\n \t\t\treturn;\n \t\t}\n \n@@ -278,7 +278,7 @@\n \t@Override\n \tpublic void internalReceiveCommand(String itemName, Command command) {\n \t\tsuper.internalReceiveCommand(itemName, command);\n-\t\tlogger.debug(\"MyQ binding received command '{}' for item '{}'\",\n+\t\tlogger.trace(\"MyQ binding received command '{}' for item '{}'\",\n \t\t\t\tcommand, itemName);\n \t\tif (myqOnlineData != null) {\n \t\t\tcomputeCommandForItem(command, itemName);\n@@ -357,7 +357,7 @@\n \t\tif (pollFuture != null && !pollFuture.isCancelled())\n \t\t\tpollFuture.cancel(false);\n \n-\t\tlogger.debug(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n+\t\tlogger.trace(\"rapidRefreshFuture scheduleing for {} millis\", millis);\n \t\t// start polling at the RAPID_REFRESH_SECS interval\n \t\tpollFuture = pollService.scheduleAtFixedRate(new Runnable() {\n \t\t\t@Override\n@@ -374,7 +374,7 @@\n \t\t// stop rapid polling after MAX_RAPID_REFRESH_SECS\n \t\tpollResetFuture = pollService.schedule(new Runnable() {\n \t\t\tpublic void run() {\n-\t\t\t\tlogger.debug(\"rapidRefreshFutureEnd stopping\");\n+\t\t\t\tlogger.trace(\"rapidRefreshFutureEnd stopping\");\n \t\t\t\tschedulePoll(refreshInterval);\n \t\t\t}\n \t\t}, MAX_RAPID_REFRESH, TimeUnit.MILLISECONDS);\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 281,
        "bugNodeStartChar": 8765,
        "bugNodeLength": 86,
        "fixLineNum": 281,
        "fixNodeStartChar": 8765,
        "fixNodeLength": 86,
        "sourceBeforeFix": "logger.debug(\"MyQ binding received command '{}' for item '{}'\",command,itemName)",
        "sourceAfterFix": "logger.trace(\"MyQ binding received command '{}' for item '{}'\",command,itemName)"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "5c2c075b4b31b12c4970f6a77ab0cc6e3702421a",
        "fixCommitParentSHA1": "b4a6dbd103ec611f70879cfc78fc5cce5c63a4e6",
        "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java",
        "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 421ad83..dfc12a3 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -208,7 +208,7 @@\n             if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.EXECUTE_ASYNC_CONNECT) != null) {\n                 executeConnectAsync = true;\n             } else if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.DISABLE_NESTED_REQUEST) != null) {\n-                DefaultChannelFuture.setUseDeadLockChecker(false);\n+                DefaultChannelFuture.setUseDeadLockChecker(true);\n             }\n         }\n     }\n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 211,
        "bugNodeStartChar": 9249,
        "bugNodeLength": 49,
        "fixLineNum": 211,
        "fixNodeStartChar": 9249,
        "fixNodeLength": 48,
        "sourceBeforeFix": "DefaultChannelFuture.setUseDeadLockChecker(false)",
        "sourceAfterFix": "DefaultChannelFuture.setUseDeadLockChecker(true)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2ccd6714a1039f58ba171438af36ffada86343e1",
        "fixCommitParentSHA1": "bf832ee9d60b348f0b003631c411c5f3fe23226c",
        "bugFilePath": "src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java",
        "fixPatch": "diff --git a/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java b/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java\nindex 3dfb048..0cb5ca2 100644\n--- a/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/PlaySoundCommand.java\n@@ -74,10 +74,10 @@\n             final double delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) / 2.0D;\n \n             if (delta > 0.0D) {\n-                soundLocation.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n+                location.add(deltaX / delta, deltaY / delta, deltaZ / delta);\n             }\n \n-            player.playSound(soundLocation, soundArg, (float) minimumVolume, (float) pitch);\n+            player.playSound(location, soundArg, (float) minimumVolume, (float) pitch);\n         } else {\n             player.playSound(soundLocation, soundArg, (float) volume, (float) pitch);\n         }\n",
        "projectName": "Bukkit.Bukkit",
        "bugLineNum": 80,
        "bugNodeStartChar": 2854,
        "bugNodeLength": 79,
        "fixLineNum": 80,
        "fixNodeStartChar": 2854,
        "fixNodeLength": 74,
        "sourceBeforeFix": "player.playSound(soundLocation,soundArg,(float)minimumVolume,(float)pitch)",
        "sourceAfterFix": "player.playSound(location,soundArg,(float)minimumVolume,(float)pitch)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "625a5418d2035a5598c46c33fe99405f71ab3c64",
        "fixCommitParentSHA1": "1ca61237c10e891682da45d9a3014409320ac4a9",
        "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java",
        "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\nindex 78f1fdd..530d155 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/DetermineHashedPartitionsJob.java\n@@ -348,7 +348,7 @@\n     {\n \n       if (config.get(\"mapred.job.tracker\").equals(\"local\") || determineIntervals) {\n-        return 1;\n+        return 0;\n       } else {\n         return reducerLookup.get(interval);\n       }\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 351,
        "bugNodeStartChar": 13119,
        "bugNodeLength": 9,
        "fixLineNum": 351,
        "fixNodeStartChar": 13119,
        "fixNodeLength": 9,
        "sourceBeforeFix": "return 1; ",
        "sourceAfterFix": "return 0; "
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "7109f6f55968c830c5f43ff798e106ef2f14c71c",
        "fixCommitParentSHA1": "fffd5a36c95b9e576a648c352eeb4c13c329ffb4",
        "bugFilePath": "components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java",
        "fixPatch": "diff --git a/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java b/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java\nindex 4d8771e..7ecfbbe 100644\n--- a/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java\n+++ b/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppProducer.java\n@@ -143,7 +143,7 @@\n                 submitSm.getReplaceIfPresent(),\n                 new GeneralDataCoding(\n                         false,\n-                        false,\n+                        true,\n                         MessageClass.CLASS1,\n                         Alphabet.valueOf(submitSm.getDataCoding())),\n                 (byte) 0,\n",
        "projectName": "apache.camel",
        "bugLineNum": 144,
        "bugNodeStartChar": 5919,
        "bugNodeLength": 197,
        "fixLineNum": 144,
        "fixNodeStartChar": 5919,
        "fixNodeLength": 196,
        "sourceBeforeFix": "new GeneralDataCoding(false,false,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))",
        "sourceAfterFix": "new GeneralDataCoding(false,true,MessageClass.CLASS1,Alphabet.valueOf(submitSm.getDataCoding()))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
        "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
        "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
        "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 231,
        "bugNodeStartChar": 9362,
        "bugNodeLength": 47,
        "fixLineNum": 231,
        "fixNodeStartChar": 9362,
        "fixNodeLength": 46,
        "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"rabbit\")",
        "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"rabbit\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "fbbd169b6e8ac15010ea51ba6debef36299fc696",
        "fixCommitParentSHA1": "c17b1acdfe66fb096cbd2a57fcd93f001bca66ab",
        "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java",
        "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java b/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\nindex ee68639..23a04cd 100644\n--- a/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/SerializeConfig.java\n@@ -549,7 +549,7 @@\n \t}\n \n     public boolean put(Object type, Object value) {\n-        return put((Type)type, (ObjectDeserializer)value);\n+        return put((Type)type, (ObjectSerializer)value);\n     }\n \n \tpublic boolean put(Type type, ObjectSerializer value) {\n",
        "projectName": "alibaba.fastjson",
        "bugLineNum": 552,
        "bugNodeStartChar": 21569,
        "bugNodeLength": 25,
        "fixLineNum": 552,
        "fixNodeStartChar": 21569,
        "fixNodeLength": 23,
        "sourceBeforeFix": "(ObjectDeserializer)value",
        "sourceAfterFix": "(ObjectSerializer)value"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "d31a409d8f87800c523f1cc4f7862f716cac7313",
        "fixCommitParentSHA1": "5bcc7fae4c09f6be2c12b74223ce8ea16c4c0ed6",
        "bugFilePath": "components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java",
        "fixPatch": "diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java\nindex 8f2dc8f..31bb0ce 100644\n--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java\n+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy/SftpChangedExclusiveReadLockStrategy.java\n@@ -64,7 +64,7 @@\n                 List<ChannelSftp.LsEntry> files = operations.listFiles(file.getParent());\n                 for (ChannelSftp.LsEntry f : files) {\n                     if (f.getFilename().equals(file.getFileName())) {\n-                        newLastModified = f.getAttrs().getATime();\n+                        newLastModified = f.getAttrs().getMTime();\n                         newLength = f.getAttrs().getSize();\n                     }\n                 }\n",
        "projectName": "apache.camel",
        "bugLineNum": 67,
        "bugNodeStartChar": 3086,
        "bugNodeLength": 23,
        "fixLineNum": 67,
        "fixNodeStartChar": 3086,
        "fixNodeLength": 23,
        "sourceBeforeFix": "f.getAttrs().getATime()",
        "sourceAfterFix": "f.getAttrs().getMTime()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8bd88339696a90c36a772424eaa92d9cea6ad42a",
        "fixCommitParentSHA1": "02c058104902caeb2d72917b6a8d381301c343e3",
        "bugFilePath": "backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java",
        "fixPatch": "diff --git a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java\nindex 5495aee..9012832 100644\n--- a/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java\n+++ b/backends/gdx-backend-robovm/src/com/badlogic/gdx/backends/iosrobovm/IOSApplication.java\n@@ -431,12 +431,12 @@\n \t\treturn new Clipboard() {\n \t\t\t@Override\n \t\t\tpublic void setContents (String content) {\n-\t\t\t\tUIPasteboard.getGeneral().setString(content);\n+\t\t\t\tUIPasteboard.getGeneralPasteboard().setString(content);\n \t\t\t}\n \n \t\t\t@Override\n \t\t\tpublic String getContents () {\n-\t\t\t\treturn UIPasteboard.getGeneral().getString();\n+\t\t\t\treturn UIPasteboard.getGeneralPasteboard().getString();\n \t\t\t}\n \t\t};\n \t}\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 434,
        "bugNodeStartChar": 12812,
        "bugNodeLength": 25,
        "fixLineNum": 434,
        "fixNodeStartChar": 12812,
        "fixNodeLength": 35,
        "sourceBeforeFix": "UIPasteboard.getGeneral()",
        "sourceAfterFix": "UIPasteboard.getGeneralPasteboard()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "d33a3d853e6465ec8985d1a1b36b7d64f066c130",
        "fixCommitParentSHA1": "7f3d64372b182310a1fc76ef8260b22171d798a4",
        "bugFilePath": "bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\nindex 3eb189c..a9b8f7b 100644\n--- a/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n+++ b/bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java\n@@ -329,7 +329,7 @@\n \t\t\tif (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {\n \t\t\t\tstateHolder.reloadVariables();\n \t\t\t} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {\n-\t\t\t\tstateHolder.reloadVariables();\n+\t\t\t\tstateHolder.reloadDatapoints();\n \t\t\t} else {\n \t\t\t\tlogger.warn(\"Unknown action {}\", bindingConfig.getAction());\n \t\t\t}\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 332,
        "bugNodeStartChar": 11505,
        "bugNodeLength": 29,
        "fixLineNum": 332,
        "fixNodeStartChar": 11505,
        "fixNodeLength": 30,
        "sourceBeforeFix": "stateHolder.reloadVariables()",
        "sourceAfterFix": "stateHolder.reloadDatapoints()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "8d08e816a79a7390dc6ba086d5709f1049b5807f",
        "fixCommitParentSHA1": "7942d9f78765d57097ce4cf36c49feced3525a2b",
        "bugFilePath": "spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java",
        "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\nindex 63a14e3..3152bdc 100644\n--- a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n@@ -39,7 +39,7 @@\n \t\ttry {\n \t\t\tSampleRedisApplication.main(new String[0]);\n \t\t}\n-\t\tcatch (IllegalStateException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tif (!redisServerRunning(ex)) {\n \t\t\t\treturn;\n \t\t\t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 42,
        "bugNodeStartChar": 1197,
        "bugNodeLength": 24,
        "fixLineNum": 42,
        "fixNodeStartChar": 1197,
        "fixNodeLength": 12,
        "sourceBeforeFix": "IllegalStateException ex",
        "sourceAfterFix": "Exception ex"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "ee8bd325463cae737e0ffd836a3d5376fe695f3f",
        "fixCommitParentSHA1": "3d542f7c5084070ba61ca84dbaa7e84d7013d724",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/ShutdownDeferTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/ShutdownDeferTest.java b/camel-core/src/test/java/org/apache/camel/processor/ShutdownDeferTest.java\nindex b1ed53b..cd805b4 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/ShutdownDeferTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/ShutdownDeferTest.java\n@@ -32,7 +32,7 @@\n \n         MockEndpoint bar = getMockEndpoint(\"mock:bar\");\n         bar.expectedMinimumMessageCount(1);\n-        bar.setResultWaitTime(3000);\n+        bar.setResultWaitTime(1000);\n \n         template.sendBody(\"seda:foo\", \"A\");\n         template.sendBody(\"seda:foo\", \"B\");\n@@ -59,7 +59,7 @@\n             public void configure() throws Exception {\n                 from(\"seda:foo\")\n                     .startupOrder(1)\n-                    .delay(1000).to(\"file://target/deferred\");\n+                    .delay(500).to(\"file://target/deferred\");\n \n                 // use file component to transfer files from route 1 -> route 2 as it\n                 // will normally suspend, but by deferring this we can let route 1\n",
        "projectName": "apache.camel",
        "bugLineNum": 35,
        "bugNodeStartChar": 1341,
        "bugNodeLength": 27,
        "fixLineNum": 35,
        "fixNodeStartChar": 1341,
        "fixNodeLength": 27,
        "sourceBeforeFix": "bar.setResultWaitTime(3000)",
        "sourceAfterFix": "bar.setResultWaitTime(1000)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "2b77ee60c2b8229ff24ac01937d16ec4dc36fe3d",
        "fixCommitParentSHA1": "09d327aa1f52300b895e725428c8905901069ec6",
        "bugFilePath": "modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java",
        "fixPatch": "diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java\nindex c6c7531..2f5c1ad 100644\n--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java\n+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SetProcessDefinitionVersionCmd.java\n@@ -115,7 +115,7 @@\n     \n     // switch all sub-executions of the process instance to the new process definition version\n     List<ExecutionEntity> childExecutions = executionManager\n-      .findChildExecutionsByParentExecutionId(processInstanceId);\n+      .findChildExecutionsByProcessInstanceId(processInstanceId);\n     for (ExecutionEntity executionEntity : childExecutions) {\n       validateAndSwitchVersionOfExecution(commandContext, executionEntity, newProcessDefinition);\n     }\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 117,
        "bugNodeStartChar": 5901,
        "bugNodeLength": 81,
        "fixLineNum": 117,
        "fixNodeStartChar": 5901,
        "fixNodeLength": 81,
        "sourceBeforeFix": "executionManager.findChildExecutionsByParentExecutionId(processInstanceId)",
        "sourceAfterFix": "executionManager.findChildExecutionsByProcessInstanceId(processInstanceId)"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "ec6418b6bdbd1595b0cc5446b298ba68bf27af37",
        "fixCommitParentSHA1": "005de1611062926782fd0d68de6943d43be8a90b",
        "bugFilePath": "VisualizationModule/src/org/gephi/visualization/opengl/text/TextModel.java",
        "fixPatch": "diff --git a/VisualizationModule/src/org/gephi/visualization/opengl/text/TextModel.java b/VisualizationModule/src/org/gephi/visualization/opengl/text/TextModel.java\nindex 8af1225..53bee10 100644\n--- a/VisualizationModule/src/org/gephi/visualization/opengl/text/TextModel.java\n+++ b/VisualizationModule/src/org/gephi/visualization/opengl/text/TextModel.java\n@@ -231,13 +231,13 @@\n         String nodeFontName = nodeFontE.getAttribute(\"name\");\n         int nodeFontSize = Integer.parseInt(nodeFontE.getAttribute(\"size\"));\n         int nodeFontStyle = Integer.parseInt(nodeFontE.getAttribute(\"style\"));\n-        nodeFont = new Font(nodeFontName, nodeFontSize, nodeFontStyle);\n+        nodeFont = new Font(nodeFontName, nodeFontStyle, nodeFontSize);\n \n         Element edgeFontE = (Element) textModelElement.getElementsByTagName(\"edgefont\").item(0);\n         String edgeFontName = edgeFontE.getAttribute(\"name\");\n         int edgeFontSize = Integer.parseInt(edgeFontE.getAttribute(\"size\"));\n         int edgeFontStyle = Integer.parseInt(edgeFontE.getAttribute(\"style\"));\n-        edgeFont = new Font(edgeFontName, edgeFontSize, edgeFontStyle);\n+        edgeFont = new Font(edgeFontName, edgeFontStyle, edgeFontSize);\n \n         //Color\n         Element nodeColorE = (Element) textModelElement.getElementsByTagName(\"nodecolor\").item(0);\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 240,
        "bugNodeStartChar": 7684,
        "bugNodeLength": 51,
        "fixLineNum": 240,
        "fixNodeStartChar": 7684,
        "fixNodeLength": 51,
        "sourceBeforeFix": "new Font(edgeFontName,edgeFontSize,edgeFontStyle)",
        "sourceAfterFix": "new Font(edgeFontName,edgeFontStyle,edgeFontSize)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "fa77c758483c1f10c3a60fd76076e9d49fe89133",
        "fixCommitParentSHA1": "3708198817e34bf67997c812b7f1fcef8119005a",
        "bugFilePath": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java",
        "fixPatch": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java\nindex 3823103..36d31b4 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java\n@@ -1155,14 +1155,14 @@\n     }\n   }\n \n-  @Test(expected = IOException.class)\n+  @Test(expected = NullPointerException.class)\n   public void testNullTableName() throws IOException {\n     // Null table name (should NOT work)\n     TEST_UTIL.createTable((TableName)null, FAMILY);\n     fail(\"Creating a table with null name passed, should have failed\");\n   }\n \n-  @Test(expected = IOException.class)\n+  @Test(expected = IllegalArgumentException.class)\n   public void testNullFamilyName() throws IOException {\n     final TableName tableName = TableName.valueOf(name.getMethodName());\n \n",
        "projectName": "apache.hbase",
        "bugLineNum": 1158,
        "bugNodeStartChar": 45276,
        "bugNodeLength": 17,
        "fixLineNum": 1158,
        "fixNodeStartChar": 45276,
        "fixNodeLength": 26,
        "sourceBeforeFix": "IOException.class",
        "sourceAfterFix": "NullPointerException.class"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0b31e2f4558706b0831744485a80958c93524a44",
        "fixCommitParentSHA1": "063bc8616e8322dca47ae4b9d4860b864a61f215",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\nindex 7bbaa4a..db73b37 100644\n--- a/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/topic/impl/reliable/ReliableTopicBasicLocalTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {\n+public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {\n \n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 11,
        "bugNodeStartChar": 365,
        "bugNodeLength": 325,
        "fixLineNum": 11,
        "fixNodeStartChar": 365,
        "fixNodeLength": 328,
        "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } ",
        "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(1).newInstances(config);   } } "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "149b8d85f0e5390ddcf03810279fbbe9d34f64f8",
        "fixCommitParentSHA1": "6b8c08187f96dd6730c5d5d318f1f2f52d5b2861",
        "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java",
        "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\nindex fa8f555..63eee99 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java\n@@ -165,7 +165,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n@@ -182,7 +182,7 @@\n                 public KeyIterator call() throws StorageException {\n                     KeyIterator ki = backend.getKeys(query, txh);\n                     if (null != p) {\n-                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_ITERATOR);\n+                        return MetricInstrumentedIterator.of(ki, p + \".\" + M_GET_KEYS + \".\" + M_ITERATOR);\n                     } else {\n                         return ki;\n                     }\n",
        "projectName": "thinkaurelius.titan",
        "bugLineNum": 168,
        "bugNodeStartChar": 7629,
        "bugNodeLength": 20,
        "fixLineNum": 168,
        "fixNodeStartChar": 7629,
        "fixNodeLength": 39,
        "sourceBeforeFix": "p + \".\" + M_ITERATOR",
        "sourceAfterFix": "p + \".\" + M_GET_KEYS+ \".\"+ M_ITERATOR"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "8777c0882b68f70d662d21b862b0db35cf50826d",
        "fixCommitParentSHA1": "f648367f9b73cc125cd9c007c22a3c6881930e28",
        "bugFilePath": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "fixPatch": "diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\nindex d53da5e..ba8dc74 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n@@ -243,7 +243,7 @@\n       this.content = new StringCharIterator(lineMap);\n     }\n \n-    void build() {\n+    void build() throws SourceMapParseException {\n       int [] temp = new int[MAX_ENTRY_VALUES];\n       ArrayList<Entry> entries = new ArrayList<>();\n       while (content.hasNext()) {\n@@ -309,7 +309,7 @@\n      * @param entryValues The number of entries in the array.\n      * @return The entry object.\n      */\n-    private Entry decodeEntry(int[] vals, int entryValues) {\n+    private Entry decodeEntry(int[] vals, int entryValues) throws SourceMapParseException {\n       Entry entry;\n       switch (entryValues) {\n         // The first values, if present are in the following order:\n@@ -363,7 +363,7 @@\n           return entry;\n \n         default:\n-          throw new IllegalStateException(\n+          throw new SourceMapParseException(\n               \"Unexpected number of values for entry:\" + entryValues);\n       }\n     }\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 366,
        "bugNodeStartChar": 12203,
        "bugNodeLength": 96,
        "fixLineNum": 366,
        "fixNodeStartChar": 12203,
        "fixNodeLength": 98,
        "sourceBeforeFix": "new IllegalStateException(\"Unexpected number of values for entry:\" + entryValues)",
        "sourceAfterFix": "new SourceMapParseException(\"Unexpected number of values for entry:\" + entryValues)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "1274b076e0f5efb4d4114ecf61d985b2000b2d46",
        "fixCommitParentSHA1": "bba4df4514240d9fb88a25cbe4d4e6448f1f1a82",
        "bugFilePath": "external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java",
        "fixPatch": "diff --git a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\nindex a391fc6..0028b87 100644\n--- a/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n+++ b/external/storm-hive/src/main/java/org/apache/storm/hive/bolt/mapper/JsonRecordHiveMapper.java\n@@ -38,7 +38,7 @@\n import java.io.IOException;\n \n public class JsonRecordHiveMapper implements HiveMapper {\n-    private static final Logger LOG = LoggerFactory.getLogger(DelimitedRecordHiveMapper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JsonRecordHiveMapper.class);\n     private Fields columnFields;\n     private Fields partitionFields;\n     private String timeFormat;\n",
        "projectName": "apache.storm",
        "bugLineNum": 41,
        "bugNodeStartChar": 1621,
        "bugNodeLength": 31,
        "fixLineNum": 41,
        "fixNodeStartChar": 1621,
        "fixNodeLength": 26,
        "sourceBeforeFix": "DelimitedRecordHiveMapper.class",
        "sourceAfterFix": "JsonRecordHiveMapper.class"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "c634d7acdb3ce922a82807d8d85f863b65d0c673",
        "fixCommitParentSHA1": "a688096fc57f10eca4088dae9b0df3102379a31c",
        "bugFilePath": "src/main/java/org/bukkit/inventory/ItemStack.java",
        "fixPatch": "diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java\nindex 95dc1f1..c730db6 100644\n--- a/src/main/java/org/bukkit/inventory/ItemStack.java\n+++ b/src/main/java/org/bukkit/inventory/ItemStack.java\n@@ -211,7 +211,7 @@\n     @Override\n     public ItemStack clone() {\n         ItemStack result = new ItemStack(type, amount, durability);\n-        result.addEnchantments(getEnchantments());\n+        result.addUnsafeEnchantments(getEnchantments());\n \n         return result;\n     }\n",
        "projectName": "Bukkit.Bukkit",
        "bugLineNum": 214,
        "bugNodeStartChar": 5708,
        "bugNodeLength": 41,
        "fixLineNum": 214,
        "fixNodeStartChar": 5708,
        "fixNodeLength": 47,
        "sourceBeforeFix": "result.addEnchantments(getEnchantments())",
        "sourceAfterFix": "result.addUnsafeEnchantments(getEnchantments())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "b6555180a56d77e9043823160de051498ff480da",
        "fixCommitParentSHA1": "4e37f07aaad1d895ff0195cf580a28d0cfebe178",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\nindex 87ce4cd..9ed7930 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/invalidation/InvalidationMemberAddRemoveTest.java\n@@ -153,7 +153,7 @@\n         //stop threads\n         stopTest.set(true);\n         shadowMember.join();\n-        clearFromMember.start();\n+        clearFromMember.join();\n         populateClientNearCache.join();\n         putFromMember.join();\n \n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 156,
        "bugNodeStartChar": 5641,
        "bugNodeLength": 23,
        "fixLineNum": 156,
        "fixNodeStartChar": 5641,
        "fixNodeLength": 22,
        "sourceBeforeFix": "clearFromMember.start()",
        "sourceAfterFix": "clearFromMember.join()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "220a7265cb4eafdd5fc40895b5822715b4f4461f",
        "fixCommitParentSHA1": "02f9028d294910d08e432969886ea4e321d91e89",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\nindex 28029f5..1693c76 100644\n--- a/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/cache/impl/operation/CachePutAllBackupOperation.java\n@@ -90,7 +90,7 @@\n             final CacheWanEventPublisher publisher = service.getCacheWanEventPublisher();\n             final CacheEntryView<Data, Data> view = CacheEntryViews.createDefaultEntryView(\n                     key, toData(record.getValue()), record);\n-            publisher.publishWanReplicationUpdate(name, view);\n+            publisher.publishWanReplicationUpdateBackup(name, view);\n         }\n     }\n \n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 93,
        "bugNodeStartChar": 3502,
        "bugNodeLength": 49,
        "fixLineNum": 93,
        "fixNodeStartChar": 3502,
        "fixNodeLength": 55,
        "sourceBeforeFix": "publisher.publishWanReplicationUpdate(name,view)",
        "sourceAfterFix": "publisher.publishWanReplicationUpdateBackup(name,view)"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "e1f8f60d8b6743cf1718ae626abf81a554e8354b",
        "fixCommitParentSHA1": "dc1cdb41f9ee89bc807b2a4d49b56d6d3e336d22",
        "bugFilePath": "nephele/nephele-server/src/main/java/eu/stratosphere/nephele/checkpointing/ReplayThread.java",
        "fixPatch": "diff --git a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/checkpointing/ReplayThread.java b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/checkpointing/ReplayThread.java\nindex 0f15fb2..0a5158c 100644\n--- a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/checkpointing/ReplayThread.java\n+++ b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/checkpointing/ReplayThread.java\n@@ -110,7 +110,7 @@\n \t\t\tfinal Iterator<ReplayOutputBroker> it = this.outputBrokerMap.values().iterator();\n \t\t\twhile (it.hasNext()) {\n \n-\t\t\t\tif (it.next().hasFinished()) {\n+\t\t\t\tif (!it.next().hasFinished()) {\n \t\t\t\t\tfinished = false;\n \t\t\t\t}\n \t\t\t}\n",
        "projectName": "apache.flink",
        "bugLineNum": 113,
        "bugNodeStartChar": 3465,
        "bugNodeLength": 23,
        "fixLineNum": 113,
        "fixNodeStartChar": 3465,
        "fixNodeLength": 24,
        "sourceBeforeFix": "it.next().hasFinished()",
        "sourceAfterFix": "!it.next().hasFinished()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf",
        "fixCommitParentSHA1": "83c1c3967b56cc59c9bd241e2a2fe6570fc3f258",
        "bugFilePath": "src/test/java/twitter4j/DAOTest.java",
        "fixPatch": "diff --git a/src/test/java/twitter4j/DAOTest.java b/src/test/java/twitter4j/DAOTest.java\nindex 943457b..6abbcfa 100644\n--- a/src/test/java/twitter4j/DAOTest.java\n+++ b/src/test/java/twitter4j/DAOTest.java\n@@ -66,22 +66,22 @@\n         HttpClient http = new HttpClient();\n \n         // empty User list\n-        List<User> users = User.createCursorSupportUserList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n+        List<User> users = User.createUsersList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n         assertTrue(users.size() == 0);\n         trySerializeable(users);\n \n         // empty Status list\n-        List<Status> statuses = Status.constructStatuses(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n+        List<Status> statuses = Status.createStatuseList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n         assertTrue(statuses.size() == 0);\n         trySerializeable(statuses);\n \n         // empty DirectMessages list\n-        List<DirectMessage> directMessages = DirectMessage.constructDirectMessages(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n+        List<DirectMessage> directMessages = DirectMessage.createDirectMessageList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n         assertTrue(directMessages.size() == 0);\n         trySerializeable(directMessages);\n \n         // empty Trends list\n-        List<Trends> trends = Trends.constructTrendsList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/trends/daily-empty.json\"));\n+        List<Trends> trends = Trends.createTrendsList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/trends/daily-empty.json\"));\n         assertTrue(trends.size() == 0);\n         trySerializeable(trends);\n \n@@ -131,7 +131,7 @@\n         List<User> users;\n \n         // User list\n-        users = User.createCursorSupportUserList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json\"));\n+        users = User.createUsersList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json\"));\n         assertTrue(users.size() > 0);\n         trySerializeable(users);\n     }\n@@ -139,7 +139,7 @@\n     public void testStatusAsJSON() throws Exception {\n         // single Status\n         HttpClient http = new HttpClient();\n-        List<Status> statuses = Status.constructStatuses(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json\"));\n+        List<Status> statuses = Status.createStatuseList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json\"));\n         Status status = statuses.get(0);\n         assertEquals(new Date(1259041785000l), status.getCreatedAt());\n         assertEquals(6000554383l, status.getId());\n@@ -175,7 +175,7 @@\n \n     public void testDirectMessagesAsJSON() throws Exception {\n         HttpClient http = new HttpClient();\n-        List<DirectMessage> directMessages = DirectMessage.constructDirectMessages(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json\"));\n+        List<DirectMessage> directMessages = DirectMessage.createDirectMessageList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json\"));\n         DirectMessage dm = directMessages.get(0);\n         assertEquals(new java.util.Date(1248177356000l),dm.getCreatedAt());\n         assertEquals(6358482,dm.getRecipient().getId());\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 69,
        "bugNodeStartChar": 2756,
        "bugNodeLength": 126,
        "fixLineNum": 69,
        "fixNodeStartChar": 2756,
        "fixNodeLength": 114,
        "sourceBeforeFix": "User.createCursorSupportUserList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"))",
        "sourceAfterFix": "User.createUsersList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"))"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "bd23d1bddd1154c7bc2a249b76d4ffdd5e4cfd92",
        "fixCommitParentSHA1": "6b85df0846dcc8c39c33fb50f19369122090ea63",
        "bugFilePath": "ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java",
        "fixPatch": "diff --git a/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java b/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\nindex 5dbca04..6416034 100644\n--- a/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\n+++ b/ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java\n@@ -208,7 +208,7 @@\n             // Validate an unbounded queue\n             if (!queueLength.isDefined() || queueLength.asInt() == Integer.MAX_VALUE) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n-                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n+                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n \n             }\n@@ -216,7 +216,7 @@\n             // Validate a hand-off queue\n             if (queueLength.isDefined() && queueLength.asInt() == 0) {\n                 if (coreThreads.isDefined() && coreThreads.asInt() <= 0) {\n-                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(coreThreads.asString());\n+                    throw EeLogger.ROOT_LOGGER.invalidCoreThreadsSize(queueLength.asString());\n                 }\n             }\n \n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 211,
        "bugNodeStartChar": 11405,
        "bugNodeLength": 22,
        "fixLineNum": 211,
        "fixNodeStartChar": 11405,
        "fixNodeLength": 22,
        "sourceBeforeFix": "coreThreads.asString()",
        "sourceAfterFix": "queueLength.asString()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "95524c3fa58076c2490c89343e322205dded9fcc",
        "fixCommitParentSHA1": "a9b2bc631e37734c0568bb567667b6e03580f44f",
        "bugFilePath": "server/src/main/java/org/jboss/as/server/controller/resources/VaultResourceDefinition.java",
        "fixPatch": "diff --git a/server/src/main/java/org/jboss/as/server/controller/resources/VaultResourceDefinition.java b/server/src/main/java/org/jboss/as/server/controller/resources/VaultResourceDefinition.java\nindex 5ef1baa..8b28f9d 100644\n--- a/server/src/main/java/org/jboss/as/server/controller/resources/VaultResourceDefinition.java\n+++ b/server/src/main/java/org/jboss/as/server/controller/resources/VaultResourceDefinition.java\n@@ -58,7 +58,7 @@\n             .addFlag(Flag.RESTART_ALL_SERVICES)\n             .setAllowExpression(true)\n             .setCorrector(MapAttributeDefinition.LIST_TO_MAP_CORRECTOR)\n-            .setValidator(new StringLengthValidator(1))\n+            .setValidator(new StringLengthValidator(1, true, true))\n             .build();\n \n     public static AttributeDefinition[] ALL_ATTRIBUTES = new AttributeDefinition[]{CODE, VAULT_OPTIONS};\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 61,
        "bugNodeStartChar": 3161,
        "bugNodeLength": 28,
        "fixLineNum": 61,
        "fixNodeStartChar": 3161,
        "fixNodeLength": 40,
        "sourceBeforeFix": "new StringLengthValidator(1)",
        "sourceAfterFix": "new StringLengthValidator(1,true,true)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "4ef3a770a316068a6748f05a2c80969c3d6ffde1",
        "fixCommitParentSHA1": "6697f3a62b59c0f403da9bd9c784b3f29b0950ee",
        "bugFilePath": "benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java",
        "fixPatch": "diff --git a/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java b/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\nindex 3a2f644..b554268 100644\n--- a/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\n+++ b/benchmarks/src/main/java/io/druid/benchmark/ExpressionBenchmark.java\n@@ -166,7 +166,8 @@\n         index.getDataInterval(),\n         VirtualColumns.EMPTY,\n         Granularities.ALL,\n-        false\n+        false,\n+        null\n     );\n \n     final List<Double> results = Sequences.toList(\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 164,
        "bugNodeStartChar": 5995,
        "bugNodeLength": 144,
        "fixLineNum": 164,
        "fixNodeStartChar": 5995,
        "fixNodeLength": 158,
        "sourceBeforeFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false)",
        "sourceAfterFix": "adapter.makeCursors(null,index.getDataInterval(),VirtualColumns.EMPTY,Granularities.ALL,false,null)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "77ac46d3956f3231c8e50da43ceaa0b8ebdc0f1a",
        "fixCommitParentSHA1": "dfcb102c05c320d3e9ff40ae9c951f4261240458",
        "bugFilePath": "community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java",
        "fixPatch": "diff --git a/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java b/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\nindex c322222..17f3ff9 100644\n--- a/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\n+++ b/community/server/src/test/java/org/neo4j/server/rest/transactional/ExecutionResultSerializerTest.java\n@@ -475,7 +475,7 @@\n         // when\n         serializer.statementResult( mockExecutionResult(\n                 map( \"node\", node[0], \"rel\", rel[0], \"path\", path, \"map\", map( \"n1\", node[1], \"r1\", rel[1] ) )\n-        ), ResultDataContent.rest );\n+        ), false, ResultDataContent.rest );\n         serializer.finish();\n \n         // then\n",
        "projectName": "neo4j.neo4j",
        "bugLineNum": 476,
        "bugNodeStartChar": 20833,
        "bugNodeLength": 195,
        "fixLineNum": 476,
        "fixNodeStartChar": 20833,
        "fixNodeLength": 202,
        "sourceBeforeFix": "serializer.statementResult(mockExecutionResult(map(\"node\",node[0],\"rel\",rel[0],\"path\",path,\"map\",map(\"n1\",node[1],\"r1\",rel[1]))),ResultDataContent.rest)",
        "sourceAfterFix": "serializer.statementResult(mockExecutionResult(map(\"node\",node[0],\"rel\",rel[0],\"path\",path,\"map\",map(\"n1\",node[1],\"r1\",rel[1]))),false,ResultDataContent.rest)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "175ce3aa1fdf3ce5d8c4a6965edbfc6254d1488b",
        "fixCommitParentSHA1": "eb39fb1e727512e2ef938e9d4903c5ef15a4ceb8",
        "bugFilePath": "bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java",
        "fixPatch": "diff --git a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\nindex f76d1bf..c906bc0 100644\n--- a/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n+++ b/bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java\n@@ -539,7 +539,7 @@\n \t\t\tfilter.setItemName(item.getName());\n \t\t\tfilter.setOrdering(Ordering.DESCENDING);\n \n-\t\t\tfilter.setPageSize(3);\n+\t\t\tfilter.setPageSize(1000);\n \t\t\tint startPage = 0;\n \t\t\tfilter.setPageNumber(startPage);\n \n",
        "projectName": "openhab.openhab",
        "bugLineNum": 542,
        "bugNodeStartChar": 19416,
        "bugNodeLength": 21,
        "fixLineNum": 542,
        "fixNodeStartChar": 19416,
        "fixNodeLength": 24,
        "sourceBeforeFix": "filter.setPageSize(3)",
        "sourceAfterFix": "filter.setPageSize(1000)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "6031e948694c50252def3e1df5a65323567e03ed",
        "fixCommitParentSHA1": "baa9d88d9f8679d07c0a506ba3994790d6a1b505",
        "bugFilePath": "ejb3/src/test/java/org/jboss/as/ejb3/subsystem/SubsystemParsingUnitTestCase.java",
        "fixPatch": "diff --git a/ejb3/src/test/java/org/jboss/as/ejb3/subsystem/SubsystemParsingUnitTestCase.java b/ejb3/src/test/java/org/jboss/as/ejb3/subsystem/SubsystemParsingUnitTestCase.java\nindex e35625c..e1e11d5 100644\n--- a/ejb3/src/test/java/org/jboss/as/ejb3/subsystem/SubsystemParsingUnitTestCase.java\n+++ b/ejb3/src/test/java/org/jboss/as/ejb3/subsystem/SubsystemParsingUnitTestCase.java\n@@ -60,6 +60,6 @@\n         //Make sure the models from the two controllers are identical\n         super.compare(modelA, modelB);\n \n-        assertRemoveSubsystemResources(servicesA);\n+        assertRemoveSubsystemResources(servicesB);\n     }\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 63,
        "bugNodeStartChar": 2522,
        "bugNodeLength": 41,
        "fixLineNum": 63,
        "fixNodeStartChar": 2522,
        "fixNodeLength": 41,
        "sourceBeforeFix": "assertRemoveSubsystemResources(servicesA)",
        "sourceAfterFix": "assertRemoveSubsystemResources(servicesB)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "5a3d01d226ccd5e879fc301a9ca2706aa066e752",
        "fixCommitParentSHA1": "80ab94f8540d80dd24f444d3fbc58b791dc6baf7",
        "bugFilePath": "src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java",
        "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\nindex db2a1e7..325b097 100755\n--- a/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n+++ b/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java\n@@ -33,7 +33,7 @@\n \n public class ASMSerializerFactory implements Opcodes {\n \n-    protected final ASMClassLoader classLoader             = new ASMClassLoader();\n+    protected final ASMClassLoader classLoader             = new ASMClassLoader(ASMSerializerFactory.class.getClassLoader());\n \n     private final AtomicLong       seed                    = new AtomicLong();\n \n",
        "projectName": "alibaba.fastjson",
        "bugLineNum": 36,
        "bugNodeStartChar": 1280,
        "bugNodeLength": 20,
        "fixLineNum": 36,
        "fixNodeStartChar": 1280,
        "fixNodeLength": 63,
        "sourceBeforeFix": "new ASMClassLoader()",
        "sourceAfterFix": "new ASMClassLoader(ASMSerializerFactory.class.getClassLoader())"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "cb26d2f60ca204a6343a6cbf589e170b171a4303",
        "fixCommitParentSHA1": "fc9dbfd3b775478835cab2b6fe020985393c74b6",
        "bugFilePath": "twitter4j-core/src/main/java/twitter4j/StatusStreamImpl.java",
        "fixPatch": "diff --git a/twitter4j-core/src/main/java/twitter4j/StatusStreamImpl.java b/twitter4j-core/src/main/java/twitter4j/StatusStreamImpl.java\nindex 32534c7..f85fde5 100644\n--- a/twitter4j-core/src/main/java/twitter4j/StatusStreamImpl.java\n+++ b/twitter4j-core/src/main/java/twitter4j/StatusStreamImpl.java\n@@ -95,7 +95,7 @@\n                     if (!json.isNull (\"sender\")) {\n                         userStreamListener.onDirectMessage (new DirectMessageJSONImpl (json));\n                     } else if (!json.isNull(\"text\")) {\n-                        userStreamListener.onStatus(new StatusJSONImpl(json));\n+                        listener.onStatus(new StatusJSONImpl(json));\n                     } else if (!json.isNull(\"delete\")) {\n                         listener.onDeletionNotice(new StatusDeletionNoticeImpl(json));\n                     } else if (!json.isNull(\"limit\")) {\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 98,
        "bugNodeStartChar": 3983,
        "bugNodeLength": 53,
        "fixLineNum": 98,
        "fixNodeStartChar": 3983,
        "fixNodeLength": 43,
        "sourceBeforeFix": "userStreamListener.onStatus(new StatusJSONImpl(json))",
        "sourceAfterFix": "listener.onStatus(new StatusJSONImpl(json))"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "4497d9362a4347a82acc9d611df544eb64e2ca18",
        "fixCommitParentSHA1": "580a6e491a91fe4d53b43630440f952e376f7156",
        "bugFilePath": "src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java",
        "fixPatch": "diff --git a/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\nindex 94414d5..6b7fc38 100644\n--- a/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\n+++ b/src/main/java/org/jboss/netty/channel/local/DefaultLocalChannel.java\n@@ -114,7 +114,7 @@\n             fireChannelClosed(pairedChannel);\n         } finally {\n             future.setSuccess();\n-            if (localAddress != null) {\n+            if (localAddress != null && getParent() == null) {\n                 LocalChannelRegistry.unregister(localAddress);\n             }\n         }\n",
        "projectName": "netty.netty",
        "bugLineNum": 117,
        "bugNodeStartChar": 4185,
        "bugNodeLength": 20,
        "fixLineNum": 117,
        "fixNodeStartChar": 4185,
        "fixNodeLength": 43,
        "sourceBeforeFix": "localAddress != null",
        "sourceAfterFix": "localAddress != null && getParent() == null"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "df40e74265a3bdc4797efb30f49cd35733bde902",
        "fixCommitParentSHA1": "ec205f012b27d771fe4be30f023daf40eeb0234e",
        "bugFilePath": "gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java b/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java\nindex 2c443c5..518bad6 100644\n--- a/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java\n+++ b/gdx/src/com/badlogic/gdx/maps/tiled/AtlasTmxMapLoader.java\n@@ -337,7 +337,7 @@\n \t\t\tString atlasFilePath = map.getProperties().get(\"atlas\", String.class);\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tFileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + \".atlas\");\n-\t\t\t\tif (atlasFile.exists()) atlasFilePath = atlasFile.path();\n+\t\t\t\tif (atlasFile.exists()) atlasFilePath = atlasFile.name();\n \t\t\t}\n \t\t\tif (atlasFilePath == null) {\n \t\t\t\tthrow new GdxRuntimeException(\"The map is missing the 'atlas' property\");\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 340,
        "bugNodeStartChar": 12528,
        "bugNodeLength": 16,
        "fixLineNum": 340,
        "fixNodeStartChar": 12528,
        "fixNodeLength": 16,
        "sourceBeforeFix": "atlasFile.path()",
        "sourceAfterFix": "atlasFile.name()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "53b0527a5dd35cd2e36650a6352b882cc32f714f",
        "fixCommitParentSHA1": "1ddddec0180252872f3ef595b69745ba253ac800",
        "bugFilePath": "src/java/org/apache/hadoop/hbase/regionserver/HRegion.java",
        "fixPatch": "diff --git a/src/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/src/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex f985ef8..51e4612 100644\n--- a/src/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/src/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n@@ -1199,7 +1199,7 @@\n    * @throws IOException\n    */\n   public void put(Put put) throws IOException {\n-    this.put(put, null, put.writeToWAL());\n+    this.put(put, null, put.getWriteToWAL());\n   }\n   \n   /**\n@@ -1217,7 +1217,7 @@\n    * @throws IOException\n    */\n   public void put(Put put, Integer lockid) throws IOException {\n-    this.put(put, lockid, put.writeToWAL());\n+    this.put(put, lockid, put.getWriteToWAL());\n   }\n \n   /**\n",
        "projectName": "apache.hbase",
        "bugLineNum": 1202,
        "bugNodeStartChar": 42618,
        "bugNodeLength": 16,
        "fixLineNum": 1202,
        "fixNodeStartChar": 42618,
        "fixNodeLength": 19,
        "sourceBeforeFix": "put.writeToWAL()",
        "sourceAfterFix": "put.getWriteToWAL()"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "957c04e597ba47ce301a5aab98ed57be4a967f95",
        "fixCommitParentSHA1": "e16c835780193bde31ca62fd491a4870a03f8d23",
        "bugFilePath": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java",
        "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\nindex 9fa4c8e..11e209a 100644\n--- a/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n+++ b/transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java\n@@ -143,7 +143,7 @@\n         if (handlers == null) {\n             throw new NullPointerException(\"handlers\");\n         }\n-        if (handlers[0] == null) {\n+        if (handlers.length == 0 || handlers[0] == null) {\n             return this;\n         }\n \n",
        "projectName": "netty.netty",
        "bugLineNum": 146,
        "bugNodeStartChar": 4609,
        "bugNodeLength": 19,
        "fixLineNum": 146,
        "fixNodeStartChar": 4609,
        "fixNodeLength": 43,
        "sourceBeforeFix": "handlers[0] == null",
        "sourceAfterFix": "handlers.length == 0 || handlers[0] == null"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "b2a7d26514776c6404a755f65d5a9feaab3c4f6a",
        "fixCommitParentSHA1": "004bd2413db5120a21236db3e7a163b05486cad1",
        "bugFilePath": "library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java",
        "fixPatch": "diff --git a/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java b/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\nindex 8eb3472..f9bae17 100644\n--- a/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\n+++ b/library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java\n@@ -137,7 +137,7 @@\n \t\t\tcontextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));\n \t\t}\n \n-\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), parent);\n+\t\tView contentView = super.getView(position, contextualUndoView.getContentView(), contextualUndoView);\n \t\tcontextualUndoView.updateContentView(contentView);\n \n \t\tlong itemId = getItemId(position);\n",
        "projectName": "nhaarman.ListViewAnimations",
        "bugLineNum": 140,
        "bugNodeStartChar": 6303,
        "bugNodeLength": 68,
        "fixLineNum": 140,
        "fixNodeStartChar": 6303,
        "fixNodeLength": 80,
        "sourceBeforeFix": "super.getView(position,contextualUndoView.getContentView(),parent)",
        "sourceAfterFix": "super.getView(position,contextualUndoView.getContentView(),contextualUndoView)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "d1bb887561bf3818d4a0f6964359786212a01d63",
        "fixCommitParentSHA1": "6e6e24bce6b0075bf1aaa819d64cb528435bd510",
        "bugFilePath": "src/com/google/javascript/jscomp/GlobalTypeInfo.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/GlobalTypeInfo.java b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\nindex d94399c..3bcfbf6 100644\n--- a/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n+++ b/src/com/google/javascript/jscomp/GlobalTypeInfo.java\n@@ -1509,11 +1509,10 @@\n             } else if (ctorType.isStruct() && !parentClass.isStruct()) {\n               warnings.add(JSError.make(\n                   declNode, TypeCheck.CONFLICTING_SHAPE_TYPE,\n-                      className, \"struct\", \"struct\"));\n+                      \"struct\", className));\n             } else if (ctorType.isDict() && !parentClass.isDict()) {\n               warnings.add(JSError.make(\n-                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, className,\n-                  \"dict\", \"dict\"));\n+                  declNode, TypeCheck.CONFLICTING_SHAPE_TYPE, \"dict\", className));\n             }\n           }\n           if (ctorType.isDict() && !implementedIntfs.isEmpty()) {\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 1510,
        "bugNodeStartChar": 60044,
        "bugNodeLength": 128,
        "fixLineNum": 1510,
        "fixNodeStartChar": 60044,
        "fixNodeLength": 118,
        "sourceBeforeFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,className,\"struct\",\"struct\")",
        "sourceAfterFix": "JSError.make(declNode,TypeCheck.CONFLICTING_SHAPE_TYPE,\"struct\",className)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "2111905af362bab4ac7c786787f79764aac90c9d",
        "fixCommitParentSHA1": "6583f6459050f3ce5ada603a355f85e6377059c9",
        "bugFilePath": "plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java",
        "fixPatch": "diff --git a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\nindex d749493..7db2927 100644\n--- a/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n+++ b/plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java\n@@ -110,7 +110,7 @@\n                     receivedMessages.offer(msg);\n                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);\n                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {\n-                        bc.broadcast(b.getTopicId());\n+                        bc.broadcast(b.getMessage());\n                     }\n                 }\n             }\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 113,
        "bugNodeStartChar": 4529,
        "bugNodeLength": 14,
        "fixLineNum": 113,
        "fixNodeStartChar": 4529,
        "fixNodeLength": 14,
        "sourceBeforeFix": "b.getTopicId()",
        "sourceAfterFix": "b.getMessage()"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "98877e768178e17c258a04a2a02e727d1217f580",
        "fixCommitParentSHA1": "e83fcbd2c80634b05767d87d82338eed3b6573ff",
        "bugFilePath": "gdx/src/com/badlogic/gdx/utils/Json.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/utils/Json.java b/gdx/src/com/badlogic/gdx/utils/Json.java\nindex c82366c..67c6273 100644\n--- a/gdx/src/com/badlogic/gdx/utils/Json.java\n+++ b/gdx/src/com/badlogic/gdx/utils/Json.java\n@@ -43,7 +43,7 @@\n  * https://code.google.com/p/libgdx/wiki/JsonParsing\r\n  * @author Nathan Sweet */\r\n public class Json {\r\n-\tprivate static final boolean debug = false;\r\n+\tprivate static final boolean debug = true;\r\n \r\n \tprivate JsonWriter writer;\r\n \tprivate String typeName = \"class\";\r\n@@ -428,7 +428,7 @@\n \t\t\t}\r\n \r\n \t\t\tif (value instanceof Array) {\r\n-\t\t\t\tif (knownType != null && actualType != knownType)\r\n+\t\t\t\tif (knownType != null && actualType != knownType && actualType != Array.class)\r\n \t\t\t\t\tthrow new SerializationException(\"Serialization of an Array other than the known type is not supported.\\n\"\r\n \t\t\t\t\t\t+ \"Known type: \" + knownType + \"\\nActual type: \" + actualType);\r\n \t\t\t\twriteArrayStart();\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 46,
        "bugNodeStartChar": 1755,
        "bugNodeLength": 13,
        "fixLineNum": 46,
        "fixNodeStartChar": 1710,
        "fixNodeLength": 12,
        "sourceBeforeFix": "debug=false",
        "sourceAfterFix": "debug=true"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "ceb0d5e68bc6cbf8015be6d5dd785991fbc81455",
        "fixCommitParentSHA1": "de1cc3ec7befee17d1a75a3b4549c92352464957",
        "bugFilePath": "src/contrib/stargate/src/test/org/apache/hadoop/hbase/stargate/TestRowResource.java",
        "fixPatch": "diff --git a/src/contrib/stargate/src/test/org/apache/hadoop/hbase/stargate/TestRowResource.java b/src/contrib/stargate/src/test/org/apache/hadoop/hbase/stargate/TestRowResource.java\nindex 0a8b9b7..fa76018 100644\n--- a/src/contrib/stargate/src/test/org/apache/hadoop/hbase/stargate/TestRowResource.java\n+++ b/src/contrib/stargate/src/test/org/apache/hadoop/hbase/stargate/TestRowResource.java\n@@ -317,7 +317,7 @@\n     Thread.yield();\n \n     // make sure the fake row was not actually created\n-    response = client.get(path);\n+    response = client.get(path, MIMETYPE_XML);\n     assertEquals(response.getCode(), 404);\n \n     // check that all of the values were created\n@@ -349,7 +349,7 @@\n     Thread.yield();\n \n     // make sure the fake row was not actually created\n-    response = client.get(path);\n+    response = client.get(path, MIMETYPE_PROTOBUF);\n     assertEquals(response.getCode(), 404);\n \n     // check that all of the values were created\n",
        "projectName": "apache.hbase",
        "bugLineNum": 320,
        "bugNodeStartChar": 11806,
        "bugNodeLength": 16,
        "fixLineNum": 320,
        "fixNodeStartChar": 11806,
        "fixNodeLength": 30,
        "sourceBeforeFix": "client.get(path)",
        "sourceAfterFix": "client.get(path,MIMETYPE_XML)"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "0357cee3c69cd265d295a0db716ae57fb1107ea4",
        "fixCommitParentSHA1": "4ed527fd142d53875101afbf5d4df7f161ec6178",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\nindex a32bfd5..6bb2c31 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\n@@ -1528,7 +1528,9 @@\n       boolean hasAsClause = (!isInTransform) && (child.getChildCount() == 2);\n \n       // EXPR AS (ALIAS,...) parses, but is only allowed for UDTF's\n-      if (!isUDTF && child.getChildCount() > 2) {\n+      // This check is not needed and invalid when there is a transform b/c the \n+      // AST's are slightly different.\n+      if (!isInTransform && !isUDTF && child.getChildCount() > 2) {\n         throw new SemanticException(ErrorMsg.INVALID_AS.getMsg());\n       }\n \n",
        "projectName": "apache.hive",
        "bugLineNum": 1531,
        "bugNodeStartChar": 60417,
        "bugNodeLength": 36,
        "fixLineNum": 1533,
        "fixNodeStartChar": 60537,
        "fixNodeLength": 54,
        "sourceBeforeFix": "!isUDTF && child.getChildCount() > 2",
        "sourceAfterFix": "!isInTransform && !isUDTF && child.getChildCount() > 2"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "356ec6bd0161edfd46b42ffe55961d52884eb7f0",
        "fixCommitParentSHA1": "e9a969f81e8e7e9f0e7529da9a81a810ad07f766",
        "bugFilePath": "controller/src/main/java/org/jboss/as/controller/parsing/CommonXml.java",
        "fixPatch": "diff --git a/controller/src/main/java/org/jboss/as/controller/parsing/CommonXml.java b/controller/src/main/java/org/jboss/as/controller/parsing/CommonXml.java\nindex 539ffa1..11f7b69 100644\n--- a/controller/src/main/java/org/jboss/as/controller/parsing/CommonXml.java\n+++ b/controller/src/main/java/org/jboss/as/controller/parsing/CommonXml.java\n@@ -1852,7 +1852,7 @@\n         if (offset < 0) {\n             offset = 0;\n         }\n-        if (offset >= 0) {\n+        if (offset > 0) {\n             update = Util.getWriteAttributeOperation(address, SOCKET_BINDING_PORT_OFFSET, offset);\n         }\n         updates.add(update);\n@@ -2113,7 +2113,7 @@\n         attr = bindingGroup.get(DEFAULT_INTERFACE);\n         writeAttribute(writer, Attribute.DEFAULT_INTERFACE, attr.asString());\n \n-        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() >= 0) {\n+        if (fromServer && bindingGroup.hasDefined(PORT_OFFSET) && bindingGroup.get(PORT_OFFSET).asInt() > 0) {\n             attr = bindingGroup.get(PORT_OFFSET);\n             writeAttribute(writer, Attribute.PORT_OFFSET, attr.asString());\n         }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 2116,
        "bugNodeStartChar": 95195,
        "bugNodeLength": 42,
        "fixLineNum": 2116,
        "fixNodeStartChar": 95195,
        "fixNodeLength": 41,
        "sourceBeforeFix": "bindingGroup.get(PORT_OFFSET).asInt() >= 0",
        "sourceAfterFix": "bindingGroup.get(PORT_OFFSET).asInt() > 0"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "114870164ba9822afc3a92eefe5258f54a1c6a17",
        "fixCommitParentSHA1": "845ab7d135ab688e4943bd0f5472f0a5401528f8",
        "bugFilePath": "modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java",
        "fixPatch": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java\nindex 4de3611..f71b5a3 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/TaskInvolvementTest.java\n@@ -26,7 +26,7 @@\n             assertEquals(1, taskService.createTaskQuery()\n                     .or()\n                     .taskInvolvedUser(\"involvedUser\")\n-                    .taskInvolvedGroups(groups)\n+                    .taskInvolvedGroupsIn(groups)\n                     .endOr()\n                     .count());\n \n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 26,
        "bugNodeStartChar": 797,
        "bugNodeLength": 157,
        "fixLineNum": 26,
        "fixNodeStartChar": 797,
        "fixNodeLength": 159,
        "sourceBeforeFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroups(groups)",
        "sourceAfterFix": "taskService.createTaskQuery().or().taskInvolvedUser(\"involvedUser\").taskInvolvedGroupsIn(groups)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "1f4466a7a54f26f78f47d4fa3f5b6e6d786aefcc",
        "fixCommitParentSHA1": "ddbc5777098d58296d52ee2872f8a79e72f48ff8",
        "bugFilePath": "src/jvm/clojure/lang/Compiler.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/Compiler.java b/src/jvm/clojure/lang/Compiler.java\nindex dacdf0f..c1df153 100644\n--- a/src/jvm/clojure/lang/Compiler.java\n+++ b/src/jvm/clojure/lang/Compiler.java\n@@ -2951,12 +2951,13 @@\n \t}\n \n \tvoid emitClearLocals(GeneratorAdapter gen){\n-\t\tfor(int i = 0; i < numParams(); i++)\n+\t\tfor(int i = 1; i < numParams()+1; i++)\n \t\t\t{\n \t\t\tif(!localsUsedInCatchFinally.contains(i))\n \t\t\t\t{\n \t\t\t\tgen.visitInsn(Opcodes.ACONST_NULL);\n-\t\t\t\tgen.storeArg(i);\n+\t\t\t\tgen.visitVarInsn(OBJECT_TYPE.getOpcode(Opcodes.ISTORE), i);\n+//\t\t\t\tgen.storeArg(i);\n \t\t\t\t}\n \t\t\t}\n \t\tfor(int i = numParams() + 1; i < maxLocal + 1; i++)\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 2954,
        "bugNodeStartChar": 86896,
        "bugNodeLength": 5,
        "fixLineNum": 2954,
        "fixNodeStartChar": 86896,
        "fixNodeLength": 5,
        "sourceBeforeFix": "i=0",
        "sourceAfterFix": "i=1"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "da8362a2da7950fb84cba182a17a41e3b5152668",
        "fixCommitParentSHA1": "95e7fbeb1d96f7ebcc48ef582859d210d1828d2e",
        "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java",
        "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\nindex f5665b4..4f4c190 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -50,7 +50,7 @@\n \n \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n-\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n+\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 53,
        "bugNodeStartChar": 1838,
        "bugNodeLength": 55,
        "fixLineNum": 53,
        "fixNodeStartChar": 1838,
        "fixNodeLength": 53,
        "sourceBeforeFix": "Assert.notNull(jarScanner,\"Patterns must not be null\")",
        "sourceAfterFix": "Assert.notNull(patterns,\"Patterns must not be null\")"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "a207330fb2009b7e9b273d9a0b18518c9da7eea6",
        "fixCommitParentSHA1": "b8d461f7c0bd7a332b76dc2cbfe07974f822589d",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\nindex d5be62c..c89f143 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/query/QueryAdvancedTest.java\n@@ -104,10 +104,10 @@\n \n     @Test\n     @SuppressWarnings(\"deprecation\")\n-    public void testQueryWithTTL() throws Exception {\n+    public void testQueryWithTTL() {\n         Config config = getConfig();\n         String mapName = \"default\";\n-        config.getMapConfig(mapName).setTimeToLiveSeconds(5);\n+        config.getMapConfig(mapName).setTimeToLiveSeconds(10);\n \n         HazelcastInstance instance = createHazelcastInstance(config);\n \n@@ -140,7 +140,9 @@\n \n         // check the query result before eviction\n         Collection values = map.values(new SqlPredicate(\"active\"));\n-        assertEquals(activeEmployees, values.size());\n+        assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",\n+                activeEmployees, values.size(), allEmployees - latch.getCount()),\n+                activeEmployees, values.size());\n \n         // wait until eviction is completed\n         assertOpenEventually(latch);\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 143,
        "bugNodeStartChar": 5171,
        "bugNodeLength": 44,
        "fixLineNum": 143,
        "fixNodeStartChar": 5171,
        "fixNodeLength": 222,
        "sourceBeforeFix": "assertEquals(activeEmployees,values.size())",
        "sourceAfterFix": "assertEquals(String.format(\"Expected %s results but got %s. Number of evicted entries: %s.\",activeEmployees,values.size(),allEmployees - latch.getCount()),activeEmployees,values.size())"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "3ae514dcbcea3287baaf498f28cce0267a2d50bb",
        "fixCommitParentSHA1": "c22a5697f827ceec5df8d12bdeab1e27129d4f88",
        "bugFilePath": "host-controller/src/main/java/org/jboss/as/host/controller/HostControllerMessages.java",
        "fixPatch": "diff --git a/host-controller/src/main/java/org/jboss/as/host/controller/HostControllerMessages.java b/host-controller/src/main/java/org/jboss/as/host/controller/HostControllerMessages.java\nindex 63234a0..49f1b7f 100644\n--- a/host-controller/src/main/java/org/jboss/as/host/controller/HostControllerMessages.java\n+++ b/host-controller/src/main/java/org/jboss/as/host/controller/HostControllerMessages.java\n@@ -578,46 +578,46 @@\n     @Message(id = 10994, value = \"Home directory does not exist: %s\")\n     IllegalStateException homeDirectoryDoesNotExist(File f);\n \n-    @Message(id = 15848, value = \"Determined modules directory does not exist: %s\")\n+    @Message(id = 10995, value = \"Determined modules directory does not exist: %s\")\n     IllegalStateException modulesDirectoryDoesNotExist(File f);\n \n-    @Message(id = 15849, value = \"Domain base directory does not exist: %s\")\n+    @Message(id = 10996, value = \"Domain base directory does not exist: %s\")\n     IllegalStateException domainBaseDirectoryDoesNotExist(File f);\n \n-    @Message(id = 15850, value = \"Domain base directory is not a directory: %s\")\n+    @Message(id = 10997, value = \"Domain base directory is not a directory: %s\")\n     IllegalStateException domainBaseDirectoryIsNotADirectory(File file);\n \n-    @Message(id = 15851, value = \"Configuration directory does not exist: %s\")\n+    @Message(id = 10998, value = \"Configuration directory does not exist: %s\")\n     IllegalStateException configDirectoryDoesNotExist(File f);\n \n-    @Message(id = 15852, value = \"Domain data directory is not a directory: %s\")\n+    @Message(id = 10999, value = \"Domain data directory is not a directory: %s\")\n     IllegalStateException domainDataDirectoryIsNotDirectory(File file);\n \n-    @Message(id = 15853, value = \"Could not create domain data directory: %s\")\n+    @Message(id = 16500, value = \"Could not create domain data directory: %s\")\n     IllegalStateException couldNotCreateDomainDataDirectory(File file);\n \n-    @Message(id = 15854, value = \"Domain content directory is not a directory: %s\")\n+    @Message(id = 16501, value = \"Domain content directory is not a directory: %s\")\n     IllegalStateException domainContentDirectoryIsNotDirectory(File file);\n \n-    @Message(id = 15855, value = \"Could not create domain content directory: %s\")\n+    @Message(id = 16502, value = \"Could not create domain content directory: %s\")\n     IllegalStateException couldNotCreateDomainContentDirectory(File file);\n \n-    @Message(id = 15856, value = \"Log directory is not a directory: %s\")\n+    @Message(id = 16503, value = \"Log directory is not a directory: %s\")\n     IllegalStateException logDirectoryIsNotADirectory(File f);\n \n-    @Message(id = 15857, value = \"Could not create log directory: %s\")\n+    @Message(id = 16504, value = \"Could not create log directory: %s\")\n     IllegalStateException couldNotCreateLogDirectory(File f);\n \n-    @Message(id = 15858, value = \"Servers directory is not a directory: %s\")\n+    @Message(id = 16505, value = \"Servers directory is not a directory: %s\")\n     IllegalStateException serversDirectoryIsNotADirectory(File f);\n \n-    @Message(id = 15859, value = \"Could not create servers directory: %s\")\n+    @Message(id = 16506, value = \"Could not create servers directory: %s\")\n     IllegalStateException couldNotCreateServersDirectory(File f);\n \n-    @Message(id = 15860, value = \"Domain temp directory does not exist: %s\")\n+    @Message(id = 16507, value = \"Domain temp directory does not exist: %s\")\n     IllegalStateException domainTempDirectoryIsNotADirectory(File file);\n \n-    @Message(id = 15861, value = \"Could not create domain temp directory: %s\")\n+    @Message(id = 16508, value = \"Could not create domain temp directory: %s\")\n     IllegalStateException couldNotCreateDomainTempDirectory(File file);\n \n     /**\n@@ -627,18 +627,18 @@\n      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n-    @Message(id = 15862, value = \"Unable to connect due to SSL failure.\")\n+    @Message(id = 16509, value = \"Unable to connect due to SSL failure.\")\n     IllegalStateException sslFailureUnableToConnect(@Cause Throwable cause);\n \n-    @Message(id = 15863, value = \"Option '%s' already exists\")\n+    @Message(id = 16510, value = \"Option '%s' already exists\")\n     IllegalStateException jvmOptionAlreadyExists(String option);\n \n-    @Message(id = 15864, value = \"Environment variable '%s' already exists\")\n+    @Message(id = 16511, value = \"Environment variable '%s' already exists\")\n     IllegalStateException envVariableAlreadyExists(String var);\n \n-    @Message(id=15865, value=\"Host controller management version %s.%s is too old, Only %s.%s or higher are supported\")\n+    @Message(id = 16512, value=\"Host controller management version %s.%s is too old, Only %s.%s or higher are supported\")\n     OperationFailedException unsupportedManagementVersionForHost(int major, int minor, int minMajor, int minMinor);\n \n-    @Message(id=15866, value=\"Failed to add extensions used by the domain. Failure description: %s\")\n+    @Message(id = 16513, value=\"Failed to add extensions used by the domain. Failure description: %s\")\n     IllegalStateException failedToAddExtensions(ModelNode failureDescription);\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 605,
        "bugNodeStartChar": 22889,
        "bugNodeLength": 10,
        "fixLineNum": 605,
        "fixNodeStartChar": 22889,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=15856",
        "sourceAfterFix": "id=16503"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "dc300f2c812b2231b527c761f4c73d5155137516",
        "fixCommitParentSHA1": "0f6c3137f6b44ca2ca8a1017b6e9ede93c1744a5",
        "bugFilePath": "buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java",
        "fixPatch": "diff --git a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\nindex 18710d9..bf59be8 100644\n--- a/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n+++ b/buffer/src/main/java/io/netty/buffer/CompositeByteBuf.java\n@@ -592,7 +592,7 @@\n      * less than zero, or larger than {@code capacity()}\n      */\n     public ByteBuf getBufferFor(int index) throws IndexOutOfBoundsException {\n-        if (index < 0 || index > capacity()) {\n+        if (index < 0 || index >= capacity()) {\n             throw new IndexOutOfBoundsException(\"Invalid index: \" + index\n                     + \" - Bytes needed: \" + index + \", maximum is \"\n                     + capacity());\n",
        "projectName": "netty.netty",
        "bugLineNum": 595,
        "bugNodeStartChar": 20894,
        "bugNodeLength": 18,
        "fixLineNum": 595,
        "fixNodeStartChar": 20894,
        "fixNodeLength": 19,
        "sourceBeforeFix": "index > capacity()",
        "sourceAfterFix": "index >= capacity()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452",
        "fixCommitParentSHA1": "ab3c312544029343fc974caa03168a1c3a7e21e4",
        "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java",
        "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 1814,
        "bugNodeStartChar": 69121,
        "bugNodeLength": 469,
        "fixLineNum": 1814,
        "fixNodeStartChar": 67308,
        "fixNodeLength": 456,
        "sourceBeforeFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Integer getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } ",
        "sourceAfterFix": "/**   * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String,boolean)  */ @Override public Long getCountOfConceptReferenceTerms(String query,ConceptSource conceptSource,boolean includeRetired) throws DAOException {   Criteria criteria=createConceptReferenceTermCriteria(query,conceptSource,includeRetired);   criteria.setProjection(Projections.rowCount());   return (Integer)criteria.uniqueResult(); } "
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "01ef614e77ec45d2b1abbe97e28d3fb6fe11bd13",
        "fixCommitParentSHA1": "e8b5f19b82eb116abb4e53a9fb1fa716e7623742",
        "bugFilePath": "codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java",
        "fixPatch": "diff --git a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\nindex c73a5ca..6411cb7 100644\n--- a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\n+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdRequest.java\n@@ -63,7 +63,7 @@\n             case UNKNOWN:\n                 break;\n         }\n-        if (port < 0 && port >= 65535) {\n+        if (port < 0 && port >= 65536) {\n             throw new IllegalArgumentException(port + \" is not in bounds 0 < x < 65536\");\n         }\n         this.cmdType = cmdType;\n",
        "projectName": "netty.netty",
        "bugLineNum": 66,
        "bugNodeStartChar": 2311,
        "bugNodeLength": 13,
        "fixLineNum": 66,
        "fixNodeStartChar": 2311,
        "fixNodeLength": 13,
        "sourceBeforeFix": "port >= 65535",
        "sourceAfterFix": "port >= 65536"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "43b2fa49ca351c05c453c8cd0eec32ce6277c830",
        "fixCommitParentSHA1": "783fd9c0cca8da433e7eeb81d84b9c4cf07bf2b3",
        "bugFilePath": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\nindex f1f5e6a..b182ba1 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\n@@ -34,7 +34,7 @@\n public class Label extends Widget {\r\n \tprivate LabelStyle style;\r\n \tprivate final TextBounds bounds = new TextBounds();\r\n-\tprivate String text;\r\n+\tprivate CharSequence text;\r\n \tprivate BitmapFontCache cache;\r\n \tprivate float prefWidth, prefHeight;\r\n \tprivate int labelAlign = Align.LEFT;\r\n@@ -46,27 +46,27 @@\n \t\tthis(\"\", skin);\r\n \t}\r\n \r\n-\tpublic Label (String text, Skin skin) {\r\n+\tpublic Label (CharSequence text, Skin skin) {\r\n \t\tthis(text, skin.getStyle(LabelStyle.class), null);\r\n \t}\r\n \r\n \t/** Creates a label, using a {@link LabelStyle} that has a BitmapFont with the specified name from the skin and the specified\r\n \t * color. */\r\n-\tpublic Label (String text, String fontName, Color color, Skin skin) {\r\n+\tpublic Label (CharSequence text, String fontName, Color color, Skin skin) {\r\n \t\tthis(text, new LabelStyle(skin.getFont(fontName), color), null);\r\n \t}\r\n \r\n \t/** Creates a label, using a {@link LabelStyle} that has a BitmapFont with the specified name and the specified color from the\r\n \t * skin. */\r\n-\tpublic Label (String text, String fontName, String colorName, Skin skin) {\r\n+\tpublic Label (CharSequence text, String fontName, String colorName, Skin skin) {\r\n \t\tthis(text, new LabelStyle(skin.getFont(fontName), skin.getColor(colorName)), null);\r\n \t}\r\n \r\n-\tpublic Label (String text, LabelStyle style) {\r\n+\tpublic Label (CharSequence text, LabelStyle style) {\r\n \t\tthis(text, style, null);\r\n \t}\r\n \r\n-\tpublic Label (String text, LabelStyle style, String name) {\r\n+\tpublic Label (CharSequence text, LabelStyle style, String name) {\r\n \t\tsuper(name);\r\n \t\tif (text == null) text = \"\";\r\n \t\tthis.text = text;\r\n@@ -91,7 +91,7 @@\n \t\treturn style;\r\n \t}\r\n \r\n-\tpublic void setText (String text) {\r\n+\tpublic void setText (CharSequence text) {\r\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tif (text.equals(this.text)) return;\r\n \t\tthis.text = text;\r\n@@ -99,7 +99,7 @@\n \t\tinvalidateHierarchy();\r\n \t}\r\n \r\n-\tpublic String getText () {\r\n+\tpublic CharSequence getText () {\r\n \t\treturn text;\r\n \t}\r\n \r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 37,
        "bugNodeStartChar": 1682,
        "bugNodeLength": 20,
        "fixLineNum": 37,
        "fixNodeStartChar": 1646,
        "fixNodeLength": 26,
        "sourceBeforeFix": "private String text; ",
        "sourceAfterFix": "private CharSequence text; "
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "de0c4d4c37435ce0c7287cd6846dde492ca1c51c",
        "fixCommitParentSHA1": "b5c5096c49c439ddb97cd7253520f9485fe88f24",
        "bugFilePath": "gdx/src/com/badlogic/gdx/math/Intersector.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/math/Intersector.java b/gdx/src/com/badlogic/gdx/math/Intersector.java\nindex cb89080..47053d0 100644\n--- a/gdx/src/com/badlogic/gdx/math/Intersector.java\n+++ b/gdx/src/com/badlogic/gdx/math/Intersector.java\n@@ -699,7 +699,7 @@\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {\n+\t\t\tif (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);\n@@ -764,7 +764,7 @@\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (!((min1 < min2 && max1 > min2) || (min2 < min1 && max2 > min1))) {\n+\t\t\tif (!((min1 <= min2 && max1 >= min2) || (min2 <= min1 && max2 >= min1))) {\n \t\t\t\treturn false;\n \t\t\t} else {\n \t\t\t\tfloat o = Math.min(max1, max2) - Math.max(min1, min2);\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 702,
        "bugNodeStartChar": 24176,
        "bugNodeLength": 11,
        "fixLineNum": 702,
        "fixNodeStartChar": 24176,
        "fixNodeLength": 12,
        "sourceBeforeFix": "min1 < min2",
        "sourceAfterFix": "min1 <= min2"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "31753da961740937fe2f6d86432c2d57827bf975",
        "fixCommitParentSHA1": "0a5b28605ffbadb0178467b2d16c91684ddef6bd",
        "bugFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java",
        "fixPatch": "diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java\nindex 88dbf81..0d4a271 100644\n--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java\n+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java\n@@ -344,10 +344,11 @@\n         // getContainerStatus can be called after stopContainer\n         try {\n           // O is possible if CLEANUP_CONTAINER is executed too late\n-          // 137 is possible if the container is not terminated but killed\n+          // -105 is possible if the container is not terminated but killed\n           testGetContainerStatus(container, i, ContainerState.COMPLETE,\n               \"Container killed by the ApplicationMaster.\", Arrays.asList(\n-                  new Integer[] {ContainerExitStatus.KILLED_BY_APPMASTER}));\n+                  new Integer[] {ContainerExitStatus.KILLED_BY_APPMASTER,\n+                  ContainerExitStatus.SUCCESS}));\n         } catch (YarnException e) {\n           // The exception is possible because, after the container is stopped,\n           // it may be removed from NM's context.\n@@ -383,7 +384,10 @@\n           assertEquals(container.getId(), status.getContainerId());\n           assertTrue(\"\" + index + \": \" + status.getDiagnostics(),\n               status.getDiagnostics().contains(diagnostics));\n-          assertTrue(exitStatuses.contains(status.getExitStatus()));\n+          \n+          assertTrue(\"Exit Statuses are supposed to be in: \" + exitStatuses +\n+              \", but the actual exit status code is: \" + status.getExitStatus(),\n+              exitStatuses.contains(status.getExitStatus()));\n           break;\n         }\n         Thread.sleep(100);\n",
        "projectName": "apache.hadoop",
        "bugLineNum": 386,
        "bugNodeStartChar": 14985,
        "bugNodeLength": 57,
        "fixLineNum": 387,
        "fixNodeStartChar": 14996,
        "fixNodeLength": 209,
        "sourceBeforeFix": "assertTrue(exitStatuses.contains(status.getExitStatus()))",
        "sourceAfterFix": "assertTrue(\"Exit Statuses are supposed to be in: \" + exitStatuses + \", but the actual exit status code is: \"+ status.getExitStatus(),exitStatuses.contains(status.getExitStatus()))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "fc97fa76f122c0288617975b047a7a813f6b2c88",
        "fixCommitParentSHA1": "1de68e447dd02d55c704c625058981192d58a5e3",
        "bugFilePath": "src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java",
        "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java b/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\nindex cc75fd4..85d97e7 100644\n--- a/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\n+++ b/src/test/java/com/alibaba/json/bvt/joda/JodaTest_7_DateTimeZone.java\n@@ -8,7 +8,7 @@\n     public void test_for_joda_0() throws Exception {\n \n        Model m = new Model();\n-       m.zone = DateTimeZone.getDefault();\n+       m.zone = DateTimeZone.forID(\"Asia/Shanghai\");\n \n        String json = JSON.toJSONString(m);\n \n",
        "projectName": "alibaba.fastjson",
        "bugLineNum": 11,
        "bugNodeStartChar": 295,
        "bugNodeLength": 25,
        "fixLineNum": 11,
        "fixNodeStartChar": 295,
        "fixNodeLength": 35,
        "sourceBeforeFix": "DateTimeZone.getDefault()",
        "sourceAfterFix": "DateTimeZone.forID(\"Asia/Shanghai\")"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "6373dd6c75eea278d3b3f05663640304ea570e08",
        "fixCommitParentSHA1": "e4c5c7793595ca58810100f90fe0596b227ff774",
        "bugFilePath": "api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java",
        "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\nindex 9cbccb9..1e8ba28 100644\n--- a/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n+++ b/api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java\n@@ -91,7 +91,7 @@\n                 } catch (IOException ie) {\n                     Assert.fail(\"read failure\");\n                 }\n-                if (readBytes >= 0) {\n+                if (readBytes > 0) {\n                     totalBytes += readBytes;\n                 } else {\n                     last = true;\n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 94,
        "bugNodeStartChar": 3434,
        "bugNodeLength": 14,
        "fixLineNum": 94,
        "fixNodeStartChar": 3434,
        "fixNodeLength": 13,
        "sourceBeforeFix": "readBytes >= 0",
        "sourceAfterFix": "readBytes > 0"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c7c9e743ce8d08fecccea11372c976e63b2f2955",
        "fixCommitParentSHA1": "bc483724f42215c4ba53590540d83b57bfdf2099",
        "bugFilePath": "example/src/main/java/io/netty/example/telnet/TelnetServer.java",
        "fixPatch": "diff --git a/example/src/main/java/io/netty/example/telnet/TelnetServer.java b/example/src/main/java/io/netty/example/telnet/TelnetServer.java\nindex 6d31936..d69da7a 100644\n--- a/example/src/main/java/io/netty/example/telnet/TelnetServer.java\n+++ b/example/src/main/java/io/netty/example/telnet/TelnetServer.java\n@@ -38,7 +38,7 @@\n             ServerBootstrap b = new ServerBootstrap();\n             b.group(bossGroup, workerGroup)\n              .channel(NioServerSocketChannel.class)\n-             .childHandler(new TelnetServerPipelineFactory());\n+             .childHandler(new TelnetServerInitializer());\n \n             b.bind(port).sync().channel().closeFuture().sync();\n         } finally {\n",
        "projectName": "netty.netty",
        "bugLineNum": 41,
        "bugNodeStartChar": 1378,
        "bugNodeLength": 33,
        "fixLineNum": 41,
        "fixNodeStartChar": 1378,
        "fixNodeLength": 29,
        "sourceBeforeFix": "new TelnetServerPipelineFactory()",
        "sourceAfterFix": "new TelnetServerInitializer()"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "179170224d6f8b547a7b6ba2c2fe3d1b17bde65b",
        "fixCommitParentSHA1": "f547049929ff97decdad6fbb5730aac8f41463a2",
        "bugFilePath": "server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java",
        "fixPatch": "diff --git a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\nindex 0da1a9a..bf1b575 100644\n--- a/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\n+++ b/server/src/main/java/io/druid/segment/realtime/plumber/RealtimePlumber.java\n@@ -356,7 +356,7 @@\n               log.makeAlert(e, \"Failed to persist merged index[%s]\", schema.getDataSource())\n                  .addData(\"interval\", interval)\n                  .emit();\n-              if (!shuttingDown) {\n+              if (shuttingDown) {\n                 // We're trying to shut down, and this segment failed to push. Let's just get rid of it.\n                 // This call will also delete possibly-partially-written files, so we don't need to do it explicitly.\n                 abandonSegment(truncatedTime, sink);\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 359,
        "bugNodeStartChar": 12962,
        "bugNodeLength": 13,
        "fixLineNum": 359,
        "fixNodeStartChar": 12962,
        "fixNodeLength": 12,
        "sourceBeforeFix": "!shuttingDown",
        "sourceAfterFix": "shuttingDown"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "c2023397cf81452d755a5401fe95b1d47dbde48a",
        "fixCommitParentSHA1": "5d9939034fe7bce54ba6d40f5e8e6d5d98b0fe39",
        "bugFilePath": "scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java",
        "fixPatch": "diff --git a/scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java b/scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java\nindex 4f3e7e4..67df4b0 100644\n--- a/scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java\n+++ b/scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java\n@@ -165,19 +165,19 @@\n         BYTE_ARRAY {\n             @Override\n             RequestBody createBody(MediaType mediaType, Object bodyContents) {\n-                return RequestBody.create(mediaType, (byte[]) bodyContents);\n+                return RequestBody.create((byte[]) bodyContents, mediaType);\n             }\n         },\n         STRING {\n             @Override\n             RequestBody createBody(MediaType mediaType, Object bodyContents) {\n-                return RequestBody.create(mediaType, (String) bodyContents);\n+                return RequestBody.create((String) bodyContents, mediaType);\n             }\n         },\n         FILE {\n             @Override\n             RequestBody createBody(MediaType mediaType, Object bodyContents) {\n-                return RequestBody.create(mediaType, (File) bodyContents);\n+                return RequestBody.create((File) bodyContents, mediaType);\n             }\n         };\n \n",
        "projectName": "scribejava.scribejava",
        "bugLineNum": 174,
        "bugNodeStartChar": 7265,
        "bugNodeLength": 52,
        "fixLineNum": 174,
        "fixNodeStartChar": 7265,
        "fixNodeLength": 52,
        "sourceBeforeFix": "RequestBody.create(mediaType,(String)bodyContents)",
        "sourceAfterFix": "RequestBody.create((String)bodyContents,mediaType)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "46fa8090954480eecdeb6e7367f0e30655853f42",
        "fixCommitParentSHA1": "68d0572d3b89d738e0c2fc1a91ff174b5b763b33",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\nindex 09ea87c..35c11e6 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java\n@@ -119,7 +119,7 @@\n         if (levels.cardinality() == 1) {\n             return String.valueOf(levels.nextSetBit(0));\n         }\n-        final StringBuilder sb = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder(50);\n         for (int i = levels.nextSetBit(0); i >= 0;\n             i = levels.nextSetBit(i + 1)) {\n             if (sb.length() > 0) {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 122,
        "bugNodeStartChar": 3874,
        "bugNodeLength": 19,
        "fixLineNum": 122,
        "fixNodeStartChar": 3874,
        "fixNodeLength": 21,
        "sourceBeforeFix": "new StringBuilder()",
        "sourceAfterFix": "new StringBuilder(50)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "46125686874f5b69bcdb6f4c9bef3f900a7057c6",
        "fixCommitParentSHA1": "2b9df060dd916abb7774b65ce43e2d60fde0052e",
        "bugFilePath": "transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java",
        "fixPatch": "diff --git a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\nindex 363407f..b72c4f5 100644\n--- a/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n+++ b/transport-sctp/src/main/java/io/netty/channel/sctp/SctpClientPipelineSink.java\n@@ -262,7 +262,7 @@\n                 wakenUp.set(false);\n \n                 try {\n-                    int selectedKeyCount = selector.select(500);\n+                    int selectedKeyCount = selector.select(10);\n \n                     // 'wakenUp.compareAndSet(false, true)' is always evaluated\n                     // before calling 'selector.wakeup()' to reduce the wake-up\n@@ -302,9 +302,9 @@\n                         processSelectedKeys(selector.selectedKeys());\n                     }\n \n-                    // Handle connection timeout every 0.5 seconds approximately.\n+                    // Handle connection timeout every 10 milliseconds approximately.\n                     long currentTimeNanos = System.nanoTime();\n-                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 500 * 1000000L) {\n+                    if (currentTimeNanos - lastConnectTimeoutCheckTimeNanos >= 10 * 1000000L) {\n                         lastConnectTimeoutCheckTimeNanos = currentTimeNanos;\n                         processConnectTimeout(selector.keys(), currentTimeNanos);\n                     }\n",
        "projectName": "netty.netty",
        "bugLineNum": 265,
        "bugNodeStartChar": 9763,
        "bugNodeLength": 20,
        "fixLineNum": 265,
        "fixNodeStartChar": 9763,
        "fixNodeLength": 19,
        "sourceBeforeFix": "selector.select(500)",
        "sourceAfterFix": "selector.select(10)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9",
        "fixCommitParentSHA1": "4f952dac30892ce9458bee0403d908ee642c4481",
        "bugFilePath": "logging/src/main/java/org/jboss/as/logging/CommonAttributes.java",
        "fixPatch": "diff --git a/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java b/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\nindex 962e407..69a59e4 100644\n--- a/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\n+++ b/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\n@@ -77,7 +77,7 @@\n \n     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n \n-    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n+    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();\n@@ -105,25 +105,25 @@\n \n     SimpleAttributeDefinition MATCH = SimpleAttributeDefinitionBuilder.create(\"match\", ModelType.STRING, true).build();\n \n-    SimpleAttributeDefinition MAX_BACKUP_INDEX = SimpleAttributeDefinitionBuilder.create(\"max-backup-index\", ModelType.INT).\n+    SimpleAttributeDefinition MAX_BACKUP_INDEX = SimpleAttributeDefinitionBuilder.create(\"max-backup-index\", ModelType.INT, true).\n             setDefaultValue(new ModelNode().set(1)).\n             setValidator(new IntRangeValidator(1, true)).\n             build();\n \n-    SimpleAttributeDefinition MAX_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"max-inclusive\", ModelType.BOOLEAN).\n+    SimpleAttributeDefinition MAX_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"max-inclusive\", ModelType.BOOLEAN, true).\n             setDefaultValue(new ModelNode().set(true)).\n             build();\n \n-    SimpleAttributeDefinition MAX_LEVEL = SimpleAttributeDefinitionBuilder.create(\"max-level\", ModelType.STRING).\n+    SimpleAttributeDefinition MAX_LEVEL = SimpleAttributeDefinitionBuilder.create(\"max-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n \n-    SimpleAttributeDefinition MIN_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"min-inclusive\", ModelType.BOOLEAN).\n+    SimpleAttributeDefinition MIN_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"min-inclusive\", ModelType.BOOLEAN, true).\n             setDefaultValue(new ModelNode().set(true)).\n             build();\n \n-    SimpleAttributeDefinition MIN_LEVEL = SimpleAttributeDefinitionBuilder.create(\"min-level\", ModelType.STRING).\n+    SimpleAttributeDefinition MIN_LEVEL = SimpleAttributeDefinitionBuilder.create(\"min-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n@@ -134,7 +134,7 @@\n \n     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n \n-    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n+    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n@@ -190,7 +190,7 @@\n \n     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n-            setValidator(EnumValidator.create(Target.class, false, false)).\n+            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n \n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 117,
        "bugNodeStartChar": 5342,
        "bugNodeLength": 70,
        "fixLineNum": 117,
        "fixNodeStartChar": 5342,
        "fixNodeLength": 76,
        "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING)",
        "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"max-level\",ModelType.STRING,true)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "3ff50741ae92e513825b787591ba82e4ee00026e",
        "fixCommitParentSHA1": "f794b3c042925b634dde3134488a8e1d65fb42d6",
        "bugFilePath": "twitter4j-core/src/main/java/twitter4j/internal/http/HttpResponse.java",
        "fixPatch": "diff --git a/twitter4j-core/src/main/java/twitter4j/internal/http/HttpResponse.java b/twitter4j-core/src/main/java/twitter4j/internal/http/HttpResponse.java\nindex 07ea7b4..158f4f5 100644\n--- a/twitter4j-core/src/main/java/twitter4j/internal/http/HttpResponse.java\n+++ b/twitter4j-core/src/main/java/twitter4j/internal/http/HttpResponse.java\n@@ -188,7 +188,7 @@\n                     jsonArray = new JSONArray(responseAsString);\n                 }\n                 if (CONF.isPrettyDebugEnabled()) {\n-                    logger.debug(json.toString(1));\n+                    logger.debug(jsonArray.toString(1));\n                 }\n             } catch (JSONException jsone) {\n                 if (logger.isDebugEnabled()) {\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 191,
        "bugNodeStartChar": 6346,
        "bugNodeLength": 16,
        "fixLineNum": 191,
        "fixNodeStartChar": 6346,
        "fixNodeLength": 21,
        "sourceBeforeFix": "json.toString(1)",
        "sourceAfterFix": "jsonArray.toString(1)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "63d67dfa1995b51ffa10fee42e2dc9df5694febb",
        "fixCommitParentSHA1": "28993fd4395f537a6552a9791b79313b007dd595",
        "bugFilePath": "src/main/java/com/zaxxer/hikari/HikariPool.java",
        "fixPatch": "diff --git a/src/main/java/com/zaxxer/hikari/HikariPool.java b/src/main/java/com/zaxxer/hikari/HikariPool.java\nindex 2d6070b..dd2dbe7 100644\n--- a/src/main/java/com/zaxxer/hikari/HikariPool.java\n+++ b/src/main/java/com/zaxxer/hikari/HikariPool.java\n@@ -334,17 +334,17 @@\n      */\n     private boolean isConnectionAlive(final Connection connection, long timeoutMs)\n     {\n-        // Set a realistic minimum timeout\n-        if (timeoutMs < 500)\n+        // java.sql.Connection.isValid timeout is seconds, and can't be zero for timeout to work\n+        if (timeoutMs < 1000)\n         {\n-            timeoutMs = 500;\n+            timeoutMs = 1000;\n         }\n \n         try\n         {\n             if (jdbc4ConnectionTest)\n             {\n-                return connection.isValid((int) timeoutMs * 1000);\n+                return connection.isValid((int) timeoutMs / 1000);\n             }\n \n             Statement statement = connection.createStatement();\n",
        "projectName": "brettwooldridge.HikariCP",
        "bugLineNum": 338,
        "bugNodeStartChar": 11356,
        "bugNodeLength": 15,
        "fixLineNum": 338,
        "fixNodeStartChar": 11410,
        "fixNodeLength": 16,
        "sourceBeforeFix": "timeoutMs < 500",
        "sourceAfterFix": "timeoutMs < 1000"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "a6e3cf98a60a9dcf8de13232df29a6b059d46442",
        "fixCommitParentSHA1": "5b158f1d0cde438929d420a2984bdf09a88b2ab5",
        "bugFilePath": "dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java",
        "fixPatch": "diff --git a/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java b/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java\nindex 0ba2be2..1a87955 100644\n--- a/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java\n+++ b/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/JsonHelpers.java\n@@ -32,9 +32,9 @@\n      *\n      * @param object    an object\n      * @return {@code object} as a JSON string\n-     * @throws IOException if there is an error writing {@code object} as JSON\n+     * @throws IllegalArgumentException if there is an error encoding {@code object}\n      */\n-    public static String asJson(Object object) throws IOException {\n+    public static String asJson(Object object) throws IllegalArgumentException {\n         return JSON.writeValueAsString(object);\n     }\n \n",
        "projectName": "dropwizard.dropwizard",
        "bugLineNum": 30,
        "bugNodeStartChar": 981,
        "bugNodeLength": 363,
        "fixLineNum": 30,
        "fixNodeStartChar": 981,
        "fixNodeLength": 376,
        "sourceBeforeFix": "/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IOException {   return JSON.writeValueAsString(object); } ",
        "sourceAfterFix": "/**   * Converts the given object into a canonical JSON string.  * @param object    an object  * @return {@code object} as a JSON string  * @throws IOException if there is an error writing {@code object} as JSON  */ public static String asJson(Object object) throws IllegalArgumentException {   return JSON.writeValueAsString(object); } "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "31113bf0d908a8fc194f078dae57b81494db7126",
        "fixCommitParentSHA1": "0dbdc47f05c914a6437ab50ab19db5c2f0e61d5a",
        "bugFilePath": "src/test/java/com/zaxxer/hikari/TestValidation.java",
        "fixPatch": "diff --git a/src/test/java/com/zaxxer/hikari/TestValidation.java b/src/test/java/com/zaxxer/hikari/TestValidation.java\nindex e0c8207..a3c6536 100644\n--- a/src/test/java/com/zaxxer/hikari/TestValidation.java\n+++ b/src/test/java/com/zaxxer/hikari/TestValidation.java\n@@ -59,7 +59,7 @@\n          config.validate();\n          Assert.fail();\n       }\n-      catch (IllegalStateException ise) {\n+      catch (IllegalArgumentException ise) {\n          // pass\n       }\n    }\n@@ -183,7 +183,7 @@\n          config.validate();\n          Assert.fail();\n       }\n-      catch (IllegalStateException ise) {\n+      catch (IllegalArgumentException ise) {\n          Assert.assertTrue(ise.getMessage().contains(\"together\"));\n       }\n    }\n",
        "projectName": "brettwooldridge.HikariCP",
        "bugLineNum": 62,
        "bugNodeStartChar": 1754,
        "bugNodeLength": 25,
        "fixLineNum": 62,
        "fixNodeStartChar": 1754,
        "fixNodeLength": 28,
        "sourceBeforeFix": "IllegalStateException ise",
        "sourceAfterFix": "IllegalArgumentException ise"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "3065ef5006b71e1369756b451da4c0746ab20b8c",
        "fixCommitParentSHA1": "a07c6f3f491760498f15e0ff0b9350eb3be06928",
        "bugFilePath": "gdx/src/com/badlogic/gdx/graphics/Mesh.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/graphics/Mesh.java b/gdx/src/com/badlogic/gdx/graphics/Mesh.java\nindex dff092b..f49d299 100644\n--- a/gdx/src/com/badlogic/gdx/graphics/Mesh.java\n+++ b/gdx/src/com/badlogic/gdx/graphics/Mesh.java\n@@ -281,7 +281,7 @@\n \t\t\tif (transformations != null)\r\n \t\t\t\ttransform(transformations[i], vertices, vertexSize, offset, numComponents, voffset / vertexSize, vsize / vertexSize);\r\n \t\t\tmesh.getIndices(indices, ioffset);\r\n-\t\t\tfor (int j = 0; j < isize; i++)\r\n+\t\t\tfor (int j = 0; j < isize; j++)\r\n \t\t\t\tindices[ioffset+j] = (short)(indices[ioffset+j] + voffset);\r\n \t\t\tvoffset += vsize;\r\n \t\t\tioffset += isize;\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 284,
        "bugNodeStartChar": 13608,
        "bugNodeLength": 3,
        "fixLineNum": 284,
        "fixNodeStartChar": 13325,
        "fixNodeLength": 3,
        "sourceBeforeFix": "i++",
        "sourceAfterFix": "j++"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "994da4e53abe98a0f0004d7bb8c57e08c621570d",
        "fixCommitParentSHA1": "9d834f0e8632504ee215b5fe94d7e1211204e805",
        "bugFilePath": "modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java",
        "fixPatch": "diff --git a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\nindex 1d3441b..c132326 100644\n--- a/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n+++ b/modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java\n@@ -92,7 +92,7 @@\n         processor.registerWebSocketHandler(\"/*\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"yoWebSocket\");\n \n         assertEquals(b.toString(), \"yoWebSocket\");\n@@ -108,7 +108,7 @@\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"yoComet\").pathInfo(\"/abcd\").build();\n         try {\n-            processor.open(w, request);\n+            processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n             fail();\n         } catch (Exception ex) {\n             assertEquals(ex.getClass(), AtmosphereMappingException.class);\n@@ -126,13 +126,13 @@\n         processor.registerWebSocketHandler(\"/b\", new EchoHandler());\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n \n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"b\");\n \n         // The WebSocketHandler is shared.\n@@ -155,14 +155,14 @@\n         });\n \n         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body(\"a\").pathInfo(\"/a\").build();\n-        processor.open(w, request);\n+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w, \"a\");\n \n         assertEquals(b.toString(), \"a\");\n         ByteArrayOutputStream b2 = new ByteArrayOutputStream();\n         final WebSocket w2 = new ArrayBaseWebSocket(b2);\n         request = new AtmosphereRequest.Builder().destroyable(false).body(\"b\").pathInfo(\"/b\").build();\n-        processor.open(w2, request);\n+        processor.open(w2, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));\n         processor.invokeWebSocketProtocol(w2, \"b\");\n \n         // The WebSocketHandler is shared.\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 95,
        "bugNodeStartChar": 3556,
        "bugNodeLength": 26,
        "fixLineNum": 95,
        "fixNodeStartChar": 3556,
        "fixNodeLength": 103,
        "sourceBeforeFix": "processor.open(w,request)",
        "sourceAfterFix": "processor.open(w,request,AtmosphereResponse.newInstance(framework.getAtmosphereConfig(),request,w))"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "cb6f6e26c12839e59243f25bfb142ec5e5b71135",
        "fixCommitParentSHA1": "f559da2880b0d7ada18167b583e3b1173e645e90",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java\nindex 5e8b3b4..375f6c9 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTimeoutTest.java\n@@ -32,8 +32,8 @@\n \n     public void testBeanRecipientListParallelTimeout() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n-        // A will timeout so we only get B and C\n-        mock.expectedBodiesReceived(\"BC\");\n+        // A will timeout so we only get B and/or C\n+        mock.message(0).body().not(body().contains(\"A\"));\n \n         template.sendBody(\"direct:start\", \"Hello\");\n \n@@ -53,7 +53,7 @@\n             public void configure() {\n                 from(\"direct:start\").beanRef(\"myBean\", \"route\").to(\"mock:result\");\n \n-                from(\"direct:a\").delay(3000).setBody(constant(\"A\"));\n+                from(\"direct:a\").delay(2000).setBody(constant(\"A\"));\n \n                 from(\"direct:b\").setBody(constant(\"B\"));\n \n@@ -64,7 +64,7 @@\n \n     public static class MyBean {\n \n-        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 2000)\n+        @org.apache.camel.RecipientList(strategyRef = \"myStrategy\", parallelProcessing = true, timeout = 1000)\n         public String[] route(String body) {\n             return new String[] {\"direct:a\", \"direct:b\", \"direct:c\"};\n         }\n@@ -73,7 +73,7 @@\n     private class MyAggregationStrategy implements TimeoutAwareAggregationStrategy {\n \n         public void timeout(Exchange oldExchange, int index, int total, long timeout) {\n-            assertEquals(2000, timeout);\n+            assertEquals(1000, timeout);\n             assertEquals(3, total);\n             assertEquals(0, index);\n             assertNotNull(oldExchange);\n",
        "projectName": "apache.camel",
        "bugLineNum": 76,
        "bugNodeStartChar": 2764,
        "bugNodeLength": 27,
        "fixLineNum": 76,
        "fixNodeStartChar": 2764,
        "fixNodeLength": 27,
        "sourceBeforeFix": "assertEquals(2000,timeout)",
        "sourceAfterFix": "assertEquals(1000,timeout)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "e2ff3aba4529be755b56da7a8f2a034856f12181",
        "fixCommitParentSHA1": "03d75166e85f9304a272add93e52ef210ad326d8",
        "bugFilePath": "twitter4j-core/src/test/java/twitter4j/TwitterTestBase.java",
        "fixPatch": "diff --git a/twitter4j-core/src/test/java/twitter4j/TwitterTestBase.java b/twitter4j-core/src/test/java/twitter4j/TwitterTestBase.java\nindex 02b6b21..1f702e1 100644\n--- a/twitter4j-core/src/test/java/twitter4j/TwitterTestBase.java\n+++ b/twitter4j-core/src/test/java/twitter4j/TwitterTestBase.java\n@@ -34,7 +34,7 @@\n     protected final Properties p = new Properties();\n \n     protected String numberId, numberPass, followsOneWay;\n-    protected int numberIdId;\n+    protected long numberIdId;\n     protected TestUserInfo id1, id2, id3, bestFriend1, bestFriend2;\n     protected Configuration conf1, conf2, conf3;\n \n@@ -85,7 +85,7 @@\n         numberId = p.getProperty(\"numberid.user\");\n         numberPass = p.getProperty(\"numberid.password\");\n //        id1id = Integer.valueOf(p.getProperty(\"id1id\"));\n-        numberIdId = Integer.valueOf(p.getProperty(\"numberid.id\"));\n+        numberIdId = Long.valueOf(p.getProperty(\"numberid.id\"));\n \n         twitter1 = new TwitterFactory(conf1).getInstance();\n \n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 88,
        "bugNodeStartChar": 3510,
        "bugNodeLength": 45,
        "fixLineNum": 88,
        "fixNodeStartChar": 3510,
        "fixNodeLength": 42,
        "sourceBeforeFix": "Integer.valueOf(p.getProperty(\"numberid.id\"))",
        "sourceAfterFix": "Long.valueOf(p.getProperty(\"numberid.id\"))"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "a829d431df342200f7ce9030c9a6045ebe13deed",
        "fixCommitParentSHA1": "90a2d97e9309c056408717cd3af39570485efc03",
        "bugFilePath": "itest/src/edu/stanford/nlp/pipeline/ProtobufAnnotationSerializerSlowITest.java",
        "fixPatch": "diff --git a/itest/src/edu/stanford/nlp/pipeline/ProtobufAnnotationSerializerSlowITest.java b/itest/src/edu/stanford/nlp/pipeline/ProtobufAnnotationSerializerSlowITest.java\nindex 81ebc62..ce43530 100644\n--- a/itest/src/edu/stanford/nlp/pipeline/ProtobufAnnotationSerializerSlowITest.java\n+++ b/itest/src/edu/stanford/nlp/pipeline/ProtobufAnnotationSerializerSlowITest.java\n@@ -306,7 +306,7 @@\n \n     // Check size\n     assertTrue(\"\" + compressedProto.length, compressedProto.length < 380000);\n-    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 1700000);\n+    assertTrue(\"\" + uncompressedProto.length, uncompressedProto.length < 1800000);\n   }\n \n   @Test\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 309,
        "bugNodeStartChar": 44649,
        "bugNodeLength": 34,
        "fixLineNum": 309,
        "fixNodeStartChar": 44649,
        "fixNodeLength": 34,
        "sourceBeforeFix": "uncompressedProto.length < 1700000",
        "sourceAfterFix": "uncompressedProto.length < 1800000"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "a975408b7c90e2d545a7a490687cddb717d43807",
        "fixCommitParentSHA1": "29a192ef3cbe3b9cc12a6ee38f39e1199ac9790f",
        "bugFilePath": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java",
        "fixPatch": "diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java\nindex 7242791..85b3913 100644\n--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java\n+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java\n@@ -460,7 +460,7 @@\n \n   public static boolean matchingRow(final Cell left, final byte[] buf) {\n     if (buf == null) {\n-      return left.getQualifierLength() == 0;\n+      return left.getRowLength() == 0;\n     }\n     return matchingRow(left, buf, 0, buf.length);\n   }\n",
        "projectName": "apache.hbase",
        "bugLineNum": 463,
        "bugNodeStartChar": 16750,
        "bugNodeLength": 25,
        "fixLineNum": 463,
        "fixNodeStartChar": 16750,
        "fixNodeLength": 19,
        "sourceBeforeFix": "left.getQualifierLength()",
        "sourceAfterFix": "left.getRowLength()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "7ce110d5b6334d4e13fca74bae58f0522afc9fed",
        "fixCommitParentSHA1": "cb23e294caba222311b4f14c145da75b6c2ec59c",
        "bugFilePath": "src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java",
        "fixPatch": "diff --git a/src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java b/src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java\nindex 5a491de..f328f44 100644\n--- a/src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java\n+++ b/src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java\n@@ -47,7 +47,7 @@\n //        System.out.println(\"coditions : \" + visitor.getConditions());\n \n         assertEquals(2, visitor.getColumns().size());\n-        assertEquals(4, visitor.getTables().size());\n+        assertEquals(2, visitor.getTables().size());\n     }\n     \n     public void test_1() throws Exception {\n",
        "projectName": "alibaba.druid",
        "bugLineNum": 50,
        "bugNodeStartChar": 1945,
        "bugNodeLength": 43,
        "fixLineNum": 50,
        "fixNodeStartChar": 1945,
        "fixNodeLength": 43,
        "sourceBeforeFix": "assertEquals(4,visitor.getTables().size())",
        "sourceAfterFix": "assertEquals(2,visitor.getTables().size())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "6ba4ff2eed6ffb1393a898b642f8f42e0bbff0cf",
        "fixCommitParentSHA1": "f622591e032c552afd84483fdcab2e9cd5b14065",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\nindex fafcb67..1918175 100644\n--- a/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/collection/impl/txnset/TransactionalSetBasicDistributedTest.java\n@@ -10,7 +10,7 @@\n \n @RunWith(HazelcastParallelClassRunner.class)\n @Category({QuickTest.class, ParallelTest.class})\n-public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest{\n+public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {\n     @Override\n     protected HazelcastInstance[] newInstances(Config config) {\n         return createHazelcastInstanceFactory(2).newInstances(config);\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 11,
        "bugNodeStartChar": 368,
        "bugNodeLength": 335,
        "fixLineNum": 11,
        "fixNodeStartChar": 368,
        "fixNodeLength": 339,
        "sourceBeforeFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetBasicTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } ",
        "sourceAfterFix": "@RunWith(HazelcastParallelClassRunner.class) @Category({QuickTest.class,ParallelTest.class}) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest {   @Override protected HazelcastInstance[] newInstances(  Config config){     return createHazelcastInstanceFactory(2).newInstances(config);   } } "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "94ddfa907427d4545237cfc4f881fc14c59ec7f5",
        "fixCommitParentSHA1": "88a52438f4a695b6601e307a3a6ed5301643a5df",
        "bugFilePath": "components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java",
        "fixPatch": "diff --git a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java\nindex 4988564..6219e18 100644\n--- a/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java\n+++ b/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/ServletComponent.java\n@@ -67,7 +67,7 @@\n                 CastUtils.cast(parameters));\n         uri = httpUri.toString();\n \n-        ServletEndpoint result = createServletEndpoint(uri, this, httpUri, clientParams, getHttpConnectionManager(), httpClientConfigurer);\n+        ServletEndpoint result = createServletEndpoint(uri, this, httpUri, clientParams, getClientConnectionManager(), httpClientConfigurer);\n         if (httpBinding != null) {\n             result.setBinding(httpBinding);\n         }\n",
        "projectName": "apache.camel",
        "bugLineNum": 70,
        "bugNodeStartChar": 2934,
        "bugNodeLength": 26,
        "fixLineNum": 70,
        "fixNodeStartChar": 2934,
        "fixNodeLength": 28,
        "sourceBeforeFix": "getHttpConnectionManager()",
        "sourceAfterFix": "getClientConnectionManager()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "6f981f77e5bd9e2eecbd851a2a02933cdb9af0d8",
        "fixCommitParentSHA1": "450f0f6ef5d9b1bea2bc556e6029fa4f2f8554a2",
        "bugFilePath": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\nindex e6e6f8c..8c0b429 100644\n--- a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\n+++ b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java\n@@ -205,7 +205,7 @@\n   public void testGoogIsArray2() throws Exception {\n     testClosureFunction(\"goog.isArray\",\n         ALL_TYPE,\n-        ALL_TYPE, // TODO(johnlenz): should be ARRAY_TYPE?\n+        ARRAY_TYPE,\n         ALL_TYPE);\n   }\n \n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 206,
        "bugNodeStartChar": 6110,
        "bugNodeLength": 130,
        "fixLineNum": 206,
        "fixNodeStartChar": 6110,
        "fixNodeLength": 91,
        "sourceBeforeFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ALL_TYPE,ALL_TYPE)",
        "sourceAfterFix": "testClosureFunction(\"goog.isArray\",ALL_TYPE,ARRAY_TYPE,ALL_TYPE)"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "cfa8eba2d2d6b3d15b2e81a1f4360bf87ebc6520",
        "fixCommitParentSHA1": "a70a6eac18491c8ba1759a5e1bc9b8ab92ec0aa7",
        "bugFilePath": "testsuite/shared/src/main/java/org/jboss/as/test/integration/management/rbac/RbacUtil.java",
        "fixPatch": "diff --git a/testsuite/shared/src/main/java/org/jboss/as/test/integration/management/rbac/RbacUtil.java b/testsuite/shared/src/main/java/org/jboss/as/test/integration/management/rbac/RbacUtil.java\nindex 38c81dd..e4ecdf8 100644\n--- a/testsuite/shared/src/main/java/org/jboss/as/test/integration/management/rbac/RbacUtil.java\n+++ b/testsuite/shared/src/main/java/org/jboss/as/test/integration/management/rbac/RbacUtil.java\n@@ -109,7 +109,7 @@\n                     fail(\"Didn't fail: \" + result.asString());\n                 }\n                 String failureDesc = result.get(FAILURE_DESCRIPTION).asString();\n-                if (!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\")) {\n+                if (!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\") && !failureDesc.contains(\"11340\")) {\n                     fail(\"Incorrect failure type: \" + result.asString());\n                 }\n                 break;\n@@ -120,7 +120,7 @@\n                 }\n                 String failureDesc = result.get(FAILURE_DESCRIPTION).asString();\n                 if (failureDesc.contains(\"14807\") || failureDesc.contains(\"14883\")\n-                        || failureDesc.contains(\"13456\")) {\n+                        || failureDesc.contains(\"13456\") || failureDesc.contains(\"11340\")) {\n                     fail(\"Incorrect failure type: \" + result.asString());\n                 }\n                 break;\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 112,
        "bugNodeStartChar": 5472,
        "bugNodeLength": 64,
        "fixLineNum": 112,
        "fixNodeStartChar": 5472,
        "fixNodeLength": 98,
        "sourceBeforeFix": "!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\")",
        "sourceAfterFix": "!failureDesc.contains(\"14807\") && !failureDesc.contains(\"14883\") && !failureDesc.contains(\"11340\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "8d2b29db30bafa130f414fcefec1f50fc0b1cd62",
        "fixCommitParentSHA1": "f0280d1e599e930d781b2acac5fbd59a8d892e87",
        "bugFilePath": "tests/camel-itest/src/test/java/org/apache/camel/itest/jms/JmsMediumQueuePerformanceTest.java",
        "fixPatch": "diff --git a/tests/camel-itest/src/test/java/org/apache/camel/itest/jms/JmsMediumQueuePerformanceTest.java b/tests/camel-itest/src/test/java/org/apache/camel/itest/jms/JmsMediumQueuePerformanceTest.java\nindex 493eb7e..1900c63 100644\n--- a/tests/camel-itest/src/test/java/org/apache/camel/itest/jms/JmsMediumQueuePerformanceTest.java\n+++ b/tests/camel-itest/src/test/java/org/apache/camel/itest/jms/JmsMediumQueuePerformanceTest.java\n@@ -26,13 +26,13 @@\n     @Override\n     public void testSendingAndReceivingMessages() throws Exception {\n         int expected = mediumQueueCount + messageCount;\n-        setExpectedMessageCount(messageCount);\n+        setExpectedMessageCount(expected);\n \n         System.out.println(\"Sending \" + mediumQueueCount + \" messages first\");\n         sendLoop(0, mediumQueueCount);\n         System.out.println(\"Sent!\");\n \n-        Thread.sleep(20000);\n+        Thread.sleep(2000);\n \n         // TODO now start the route!\n         \n",
        "projectName": "apache.camel",
        "bugLineNum": 29,
        "bugNodeStartChar": 1139,
        "bugNodeLength": 37,
        "fixLineNum": 29,
        "fixNodeStartChar": 1139,
        "fixNodeLength": 33,
        "sourceBeforeFix": "setExpectedMessageCount(messageCount)",
        "sourceAfterFix": "setExpectedMessageCount(expected)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "bfffe6afb376df07702965da9106062f5fa47e22",
        "fixCommitParentSHA1": "be13ae3f79efb90e3d1832b21984edf45a73f3df",
        "bugFilePath": "presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java",
        "fixPatch": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\nindex 833afdd..b780e41 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveSessionProperties.java\n@@ -59,7 +59,7 @@\n                 dataSizeSessionProperty(\n                         ORC_STREAM_BUFFER_SIZE,\n                         \"ORC: Size of buffer for streaming reads\",\n-                        config.getOrcMaxBufferSize(),\n+                        config.getOrcStreamBufferSize(),\n                         false),\n                 booleanSessionProperty(\n                         PARQUET_OPTIMIZED_READER_ENABLED,\n",
        "projectName": "facebook.presto",
        "bugLineNum": 62,
        "bugNodeStartChar": 2795,
        "bugNodeLength": 28,
        "fixLineNum": 62,
        "fixNodeStartChar": 2795,
        "fixNodeLength": 31,
        "sourceBeforeFix": "config.getOrcMaxBufferSize()",
        "sourceAfterFix": "config.getOrcStreamBufferSize()"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "4e92c5bf64ea83a33f1a3898cf2335c983f4858e",
        "fixCommitParentSHA1": "c5f73c0062764413556d8bd7ec8200a632327fef",
        "bugFilePath": "DesktopFilters/src/org/gephi/filters/impl/FilterControllerImpl.java",
        "fixPatch": "diff --git a/DesktopFilters/src/org/gephi/filters/impl/FilterControllerImpl.java b/DesktopFilters/src/org/gephi/filters/impl/FilterControllerImpl.java\nindex 8c3122b..ad4678c 100644\n--- a/DesktopFilters/src/org/gephi/filters/impl/FilterControllerImpl.java\n+++ b/DesktopFilters/src/org/gephi/filters/impl/FilterControllerImpl.java\n@@ -93,7 +93,7 @@\n \n             public void disable() {\n                 GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\n-                if (model.getCurrentResult() != null) {\n+                if (model.getCurrentResult() != null && graphModel != null) {\n                     graphModel.destroyView(model.getCurrentResult());\n                     model.setCurrentResult(null);\n                 }\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 96,
        "bugNodeStartChar": 3648,
        "bugNodeLength": 32,
        "fixLineNum": 96,
        "fixNodeStartChar": 3648,
        "fixNodeLength": 54,
        "sourceBeforeFix": "model.getCurrentResult() != null",
        "sourceAfterFix": "model.getCurrentResult() != null && graphModel != null"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe",
        "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234",
        "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java",
        "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\nindex 1eacb66..97b66cf 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java\n@@ -30,7 +30,7 @@\n import com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck;\n \n // -@cs[AbbreviationAsWordInName] Test should be named as its main class.\n-public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNPathComplexityTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 33,
        "bugNodeStartChar": 1417,
        "bugNodeLength": 2285,
        "fixLineNum": 33,
        "fixNodeStartChar": 1417,
        "fixNodeLength": 2277,
        "sourceBeforeFix": "public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ",
        "sourceAfterFix": "public class XpathRegressionNPathComplexityTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Arrays.asList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS\",\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=NPathComplexityCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNPathComplexityTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NPathComplexityCheck.class);     moduleConfig.addAttribute(\"max\",\"0\");     final String[] expectedViolation={\"4:5: \" + getCheckMessage(NPathComplexityCheck.class,NPathComplexityCheck.MSG_KEY,3,0)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNPathComplexityTwo']/OBJBLOCK/STATIC_INIT\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "b3c2d1521f396a5d30a132be0d4e6d648ddc6444",
        "fixCommitParentSHA1": "2c619232b3a734510f2901bc2e01dc6bedf25275",
        "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java",
        "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\nindex c898557..ba68424 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,8 +55,8 @@\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n-\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n-\t\t\t\t\t.getChannelSendCount(name)));\n+\t\t\tmetrics.add(new Metric<Long>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCountLong(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter\n@@ -66,8 +66,8 @@\n \t\t\tmetrics.addAll(getStatistics(\"integration.handler.\" + name + \".duration\",\n \t\t\t\t\texporter.getHandlerDuration(name)));\n \t\t}\n-\t\tmetrics.add(new Metric<Long>(\"integration.activeHandlerCount\", exporter\n-\t\t\t\t.getActiveHandlerCountLong()));\n+\t\tmetrics.add(new Metric<Integer>(\"integration.activeHandlerCount\", exporter\n+\t\t\t\t.getActiveHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.handlerCount\", exporter\n \t\t\t\t.getHandlerCount()));\n \t\tmetrics.add(new Metric<Integer>(\"integration.channelCount\", exporter\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 69,
        "bugNodeStartChar": 2405,
        "bugNodeLength": 12,
        "fixLineNum": 69,
        "fixNodeStartChar": 2405,
        "fixNodeLength": 15,
        "sourceBeforeFix": "Metric<Long>",
        "sourceAfterFix": "Metric<Integer>"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "5411f0477194933cea95f870e946426af1e4fd58",
        "fixCommitParentSHA1": "9e67329cdd8cad94dfbe78acf139b6fc95c14935",
        "bugFilePath": "tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java",
        "fixPatch": "diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java\nindex b7eb995..5ee8872 100644\n--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java\n+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/conformance/DisplayModeTest.java\n@@ -47,9 +47,9 @@\n \t\tif (a.length != b.length) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));\n \t\t}\n-\t\tboolean equal = false;\n+\t\tboolean equal = true;\n \t\tfor (int i = 0; i < a.length; i++) {\n-\t\t\tequal = isDisplayModeEqual(a[i], b[i]);\n+\t\t\tequal = equal && isDisplayModeEqual(a[i], b[i]);\n \t\t}\n \t\tif (!equal) {\n \t\t\tthrow new AssertionError(\"Display modes \" + Arrays.toString(a) + \" aren't equal to display modes \" + Arrays.toString(b));\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 50,
        "bugNodeStartChar": 2368,
        "bugNodeLength": 13,
        "fixLineNum": 50,
        "fixNodeStartChar": 2368,
        "fixNodeLength": 12,
        "sourceBeforeFix": "equal=false",
        "sourceAfterFix": "equal=true"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "dd71f595b4d5b44ae6b98a34ef85d23e97187a19",
        "fixCommitParentSHA1": "06ec0d169119cf8ca627c6a992e16a509757f6a2",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java b/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\nindex c5cd3b8..d8c423c 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\n@@ -31,7 +31,7 @@\n  */\n public class RoutePerformanceTest extends ContextTestSupport {\n \n-    private int size = 500;\n+    private int size = 250;\n     private SimpleDataSet dataSet = new SimpleDataSet(size);\n     private String uri = \"mock:results\";\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 34,
        "bugNodeStartChar": 1368,
        "bugNodeLength": 10,
        "fixLineNum": 34,
        "fixNodeStartChar": 1368,
        "fixNodeLength": 10,
        "sourceBeforeFix": "size=500",
        "sourceAfterFix": "size=250"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "301e32209610a63a67d360ee1d9ee0d89ed9396a",
        "fixCommitParentSHA1": "65d5b0b9d3659270619ee8330bbaa6703e79f3ec",
        "bugFilePath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
        "fixPatch": "diff --git a/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java b/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java\nindex bcd2115..585ec85 100644\n--- a/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java\n+++ b/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java\n@@ -100,7 +100,8 @@\n       String appIdStr = app.toString();\n       Path containerLogDir =\n           this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR\n-              + containerIdStr, LocalDirAllocator.SIZE_UNKNOWN, this.conf);\n+              + containerIdStr, LocalDirAllocator.SIZE_UNKNOWN, this.conf, \n+              false);\n       for (String str : command) {\n         // TODO: Should we instead work via symlinks without this grammar?\n         newCmds.add(str.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR,\n@@ -147,7 +148,7 @@\n               + Path.SEPARATOR + user + Path.SEPARATOR\n               + ContainerLocalizer.APPCACHE + Path.SEPARATOR + appIdStr\n               + Path.SEPARATOR + containerIdStr,\n-              LocalDirAllocator.SIZE_UNKNOWN, this.conf);\n+              LocalDirAllocator.SIZE_UNKNOWN, this.conf, false);\n       try {\n         // /////////// Write out the container-script in the nmPrivate space.\n         String[] localDirs =\n",
        "projectName": "apache.hadoop",
        "bugLineNum": 102,
        "bugNodeStartChar": 4469,
        "bugNodeLength": 142,
        "fixLineNum": 102,
        "fixNodeStartChar": 4469,
        "fixNodeLength": 164,
        "sourceBeforeFix": "this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf)",
        "sourceAfterFix": "this.logDirsSelector.getLocalPathForWrite(appIdStr + Path.SEPARATOR + containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,this.conf,false)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "7b6d887302ff951e04e9df4d907f6c7dfca608fb",
        "fixCommitParentSHA1": "0d62f9d2e47cc960422ca39070b116b3783ea750",
        "bugFilePath": "modcluster/src/main/java/org/jboss/as/modcluster/ModClusterDefinition.java",
        "fixPatch": "diff --git a/modcluster/src/main/java/org/jboss/as/modcluster/ModClusterDefinition.java b/modcluster/src/main/java/org/jboss/as/modcluster/ModClusterDefinition.java\nindex f06ddc8..649b193 100644\n--- a/modcluster/src/main/java/org/jboss/as/modcluster/ModClusterDefinition.java\n+++ b/modcluster/src/main/java/org/jboss/as/modcluster/ModClusterDefinition.java\n@@ -103,12 +103,12 @@\n         final DescriptionProvider readProxiesInfoConfiguration = new DefaultOperationDescriptionProvider(CommonAttributes.READ_PROXIES_CONFIGURATION, rootResolver);\n         registration.registerOperationHandler(CommonAttributes.READ_PROXIES_CONFIGURATION, ModClusterGetProxyConfiguration.INSTANCE, readProxiesInfoConfiguration, false, runtimeOnlyFlags);\n \n-        //These seem to be modifying the state so don't add the runtimeOnly stuff for now\n+        // add/remove a proxy from the proxy-list (it is not persisted operation).\n         final DescriptionProvider addProxy = new DefaultOperationDescriptionProvider(CommonAttributes.ADD_PROXY, rootResolver, HOST, PORT);\n-        registration.registerOperationHandler(CommonAttributes.ADD_PROXY, ModClusterAddProxy.INSTANCE, addProxy, false);\n+        registration.registerOperationHandler(CommonAttributes.ADD_PROXY, ModClusterAddProxy.INSTANCE, addProxy, false, runtimeOnlyFlags);\n \n         final DescriptionProvider removeProxy = new DefaultOperationDescriptionProvider(CommonAttributes.REMOVE_PROXY, rootResolver, HOST, PORT);\n-        registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY, ModClusterRemoveProxy.INSTANCE, removeProxy, false);\n+        registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY, ModClusterRemoveProxy.INSTANCE, removeProxy, false, runtimeOnlyFlags);\n \n         // node related operations.\n         final DescriptionProvider refresh = new DefaultOperationDescriptionProvider(CommonAttributes.REFRESH, rootResolver);\n@@ -119,23 +119,23 @@\n \n         // node (all contexts) related operations.\n         final DescriptionProvider enable = new DefaultOperationDescriptionProvider(CommonAttributes.ENABLE, rootResolver);\n-        registration.registerOperationHandler(CommonAttributes.ENABLE, ModClusterEnable.INSTANCE, enable, false);\n+        registration.registerOperationHandler(CommonAttributes.ENABLE, ModClusterEnable.INSTANCE, enable, false, runtimeOnlyFlags);\n \n         final DescriptionProvider disable = new DefaultOperationDescriptionProvider(CommonAttributes.DISABLE, rootResolver);\n-        registration.registerOperationHandler(CommonAttributes.DISABLE, ModClusterDisable.INSTANCE, disable, false);\n+        registration.registerOperationHandler(CommonAttributes.DISABLE, ModClusterDisable.INSTANCE, disable, false, runtimeOnlyFlags);\n \n         final DescriptionProvider stop = new DefaultOperationDescriptionProvider(CommonAttributes.STOP, rootResolver);\n-        registration.registerOperationHandler(CommonAttributes.STOP, ModClusterStop.INSTANCE, stop, false);\n+        registration.registerOperationHandler(CommonAttributes.STOP, ModClusterStop.INSTANCE, stop, false, runtimeOnlyFlags);\n \n         // Context related operations.\n         final DescriptionProvider enableContext = new DefaultOperationDescriptionProvider(CommonAttributes.ENABLE_CONTEXT, rootResolver, VIRTUAL_HOST, CONTEXT);\n-        registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT, ModClusterEnableContext.INSTANCE, enableContext, false);\n+        registration.registerOperationHandler(CommonAttributes.ENABLE_CONTEXT, ModClusterEnableContext.INSTANCE, enableContext, false, runtimeOnlyFlags);\n \n         final DescriptionProvider disableContext = new DefaultOperationDescriptionProvider(CommonAttributes.DISABLE_CONTEXT, rootResolver, VIRTUAL_HOST, CONTEXT);\n-        registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT, ModClusterDisableContext.INSTANCE, disableContext, false);\n+        registration.registerOperationHandler(CommonAttributes.DISABLE_CONTEXT, ModClusterDisableContext.INSTANCE, disableContext, false, runtimeOnlyFlags);\n \n         final DescriptionProvider stopContext = new DefaultOperationDescriptionProvider(CommonAttributes.STOP_CONTEXT, rootResolver, VIRTUAL_HOST, CONTEXT, WAIT_TIME);\n-        registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT, ModClusterStopContext.INSTANCE, stopContext, false);\n+        registration.registerOperationHandler(CommonAttributes.STOP_CONTEXT, ModClusterStopContext.INSTANCE, stopContext, false, runtimeOnlyFlags);\n     }\n \n \n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 111,
        "bugNodeStartChar": 5955,
        "bugNodeLength": 120,
        "fixLineNum": 111,
        "fixNodeStartChar": 5955,
        "fixNodeLength": 138,
        "sourceBeforeFix": "registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false)",
        "sourceAfterFix": "registration.registerOperationHandler(CommonAttributes.REMOVE_PROXY,ModClusterRemoveProxy.INSTANCE,removeProxy,false,runtimeOnlyFlags)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8b3c80c0bf286943881455566423a18c563c3896",
        "fixCommitParentSHA1": "2d1ad9d0ef8014d03c4ed3a6c77abc95e3df39f3",
        "bugFilePath": "app/controllers/SearchController.java",
        "fixPatch": "diff --git a/app/controllers/SearchController.java b/app/controllers/SearchController.java\nindex 0ee950f..ce1dd13 100755\n--- a/app/controllers/SearchController.java\n+++ b/app/controllers/SearchController.java\n@@ -126,7 +126,7 @@\n     }\n \n     protected Set<String> getSelectedFields(String fields) {\n-        Set<String> selectedFields = Sets.newHashSet();\n+        Set<String> selectedFields = Sets.newLinkedHashSet();\n         if (fields != null && !fields.isEmpty()) {\n             Iterables.addAll(selectedFields, Splitter.on(',').split(fields));\n         } else {\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 129,
        "bugNodeStartChar": 5330,
        "bugNodeLength": 17,
        "fixLineNum": 129,
        "fixNodeStartChar": 5330,
        "fixNodeLength": 23,
        "sourceBeforeFix": "Sets.newHashSet()",
        "sourceAfterFix": "Sets.newLinkedHashSet()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "bc1adbde03308cb046dbc14e562a85b5e42d6ed1",
        "fixCommitParentSHA1": "4e76f946c28b6ce828fc6c1a6f8d53678a71124b",
        "bugFilePath": "graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java",
        "fixPatch": "diff --git a/graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java b/graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java\nindex 0a817cd..017cb2c 100644\n--- a/graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java\n+++ b/graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java\n@@ -92,7 +92,7 @@\n         if (inputState != null)\n             inputState.setState(IOState.Type.TERMINATED);\n \n-        return super.remove(input);\n+        return super.remove(inputState);\n     }\n \n     public boolean remove(IOState<MessageInput> inputState) {\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 95,
        "bugNodeStartChar": 2990,
        "bugNodeLength": 19,
        "fixLineNum": 95,
        "fixNodeStartChar": 2990,
        "fixNodeLength": 24,
        "sourceBeforeFix": "super.remove(input)",
        "sourceAfterFix": "super.remove(inputState)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "09694b9eaf40fff637428b473b8fdcef8f8c37c2",
        "fixCommitParentSHA1": "107f644b7dc87a491e0b82c5f79f021f5fc1740e",
        "bugFilePath": "core/common/src/main/java/alluxio/PropertyKey.java",
        "fixPatch": "diff --git a/core/common/src/main/java/alluxio/PropertyKey.java b/core/common/src/main/java/alluxio/PropertyKey.java\nindex 4d8e986..ae6acf8 100644\n--- a/core/common/src/main/java/alluxio/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/PropertyKey.java\n@@ -151,7 +151,7 @@\n       \"alluxio.worker.block.allocator.MaxFreeAllocator\"),\n   WORKER_BIND_HOST(Name.WORKER_BIND_HOST, \"0.0.0.0\"),\n   WORKER_BLOCK_HEARTBEAT_INTERVAL_MS(Name.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS, 1000),\n-  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 10000),\n+  WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS, 60000),\n   WORKER_BLOCK_THREADS_MAX(Name.WORKER_BLOCK_THREADS_MAX, 2048),\n   WORKER_BLOCK_THREADS_MIN(Name.WORKER_BLOCK_THREADS_MIN, 256),\n   WORKER_DATA_BIND_HOST(Name.WORKER_DATA_BIND_HOST, \"0.0.0.0\"),\n@@ -184,7 +184,7 @@\n   WORKER_NETWORK_NETTY_WORKER_THREADS(Name.WORKER_NETWORK_NETTY_WORKER_THREADS, 0),\n   WORKER_PRINCIPAL(Name.WORKER_PRINCIPAL, null),\n   WORKER_RPC_PORT(Name.WORKER_RPC_PORT, 29998),\n-  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 10000),\n+  WORKER_SESSION_TIMEOUT_MS(Name.WORKER_SESSION_TIMEOUT_MS, 60000),\n   WORKER_TIERED_STORE_BLOCK_LOCKS(Name.WORKER_TIERED_STORE_BLOCK_LOCKS, 1000),\n   WORKER_TIERED_STORE_LEVEL0_ALIAS(Name.WORKER_TIERED_STORE_LEVEL0_ALIAS, \"MEM\"),\n   WORKER_TIERED_STORE_LEVEL0_DIRS_PATH(Name.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH, \"/mnt/ramdisk\"),\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 154,
        "bugNodeStartChar": 8386,
        "bugNodeLength": 80,
        "fixLineNum": 154,
        "fixNodeStartChar": 8386,
        "fixNodeLength": 80,
        "sourceBeforeFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,10000)",
        "sourceAfterFix": "WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS(Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "71c955dccb934d8c459398728a7dbb2b169e4e03",
        "fixCommitParentSHA1": "bea6849f515408303d87a0cb7ef05f30c4a8858b",
        "bugFilePath": "itest/src/edu/stanford/nlp/coref/hybrid/ChineseCorefBenchmarkSlowITest.java",
        "fixPatch": "diff --git a/itest/src/edu/stanford/nlp/coref/hybrid/ChineseCorefBenchmarkSlowITest.java b/itest/src/edu/stanford/nlp/coref/hybrid/ChineseCorefBenchmarkSlowITest.java\nindex 36f215c..444fbc7 100644\n--- a/itest/src/edu/stanford/nlp/coref/hybrid/ChineseCorefBenchmarkSlowITest.java\n+++ b/itest/src/edu/stanford/nlp/coref/hybrid/ChineseCorefBenchmarkSlowITest.java\n@@ -114,7 +114,7 @@\n     setLowHighExpected(lowResults, highResults, expectedResults, MUC_F1, 58.30, 58.80, 58.52); // In 2015 was: 57.87\n \n     setLowHighExpected(lowResults, highResults, expectedResults, BCUBED_TP, 6990, 7110.00, 7026.39); // In 2015 was: 6936.32\n-    setLowHighExpected(lowResults, highResults, expectedResults, BCUBED_F1, 51.60, 52.10, 52.08); // In 2015 was: 51.07\n+    setLowHighExpected(lowResults, highResults, expectedResults, BCUBED_F1, 51.60, 52.20, 52.11); // In 2015 was: 51.07\n \n     setLowHighExpected(lowResults, highResults, expectedResults, CEAFM_TP, 8220, 8260, 8224); // In 2015 was: 8074\n     setLowHighExpected(lowResults, highResults, expectedResults, CEAFM_F1, 55.40, 56.00, 55.43); // In 2015 was: 55.10\n@@ -124,7 +124,7 @@\n \n     setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.00, 47.25, 46.68); // In 2015 was: 46.19\n \n-    setLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 53.98); // In 2015 was: 53.19\n+    setLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.75, 54.00, 54.01); // In 2015 was: 53.19\n \n     BenchmarkingHelper.benchmarkResults(results, lowResults, highResults, expectedResults);\n   }\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 127,
        "bugNodeStartChar": 5971,
        "bugNodeLength": 94,
        "fixLineNum": 127,
        "fixNodeStartChar": 5971,
        "fixNodeLength": 94,
        "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,53.98)",
        "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,CONLL_SCORE,53.75,54.00,54.01)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "cad6e4d396e7b901b8c83257312860021f01c060",
        "fixCommitParentSHA1": "5ee5dbf3dd9e5240ed13c8c3eaff6cca158010b3",
        "bugFilePath": "flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java",
        "fixPatch": "diff --git a/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java b/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java\nindex b2f7a47..fb835e3 100644\n--- a/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java\n+++ b/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/network/AbstractServerHandler.java\n@@ -165,7 +165,7 @@\n \t@Override\n \tpublic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n \t\tfinal String msg = \"Exception in server pipeline. Caused by: \" + ExceptionUtils.stringifyException(cause);\n-\t\tfinal ByteBuf err = serializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n+\t\tfinal ByteBuf err = MessageSerializer.serializeServerFailure(ctx.alloc(), new RuntimeException(msg));\n \n \t\tLOG.debug(msg);\n \t\tctx.writeAndFlush(err).addListener(ChannelFutureListener.CLOSE);\n",
        "projectName": "apache.flink",
        "bugLineNum": 168,
        "bugNodeStartChar": 6248,
        "bugNodeLength": 73,
        "fixLineNum": 168,
        "fixNodeStartChar": 6248,
        "fixNodeLength": 80,
        "sourceBeforeFix": "serializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))",
        "sourceAfterFix": "MessageSerializer.serializeServerFailure(ctx.alloc(),new RuntimeException(msg))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "283b039b2b8ce9bdc4beae8c7df3442d0eb4175a",
        "fixCommitParentSHA1": "d8d4c61fa241b59da1df3287ca2349d7e6f4edab",
        "bugFilePath": "pact/pact-clients/src/main/java/eu/stratosphere/pact/client/CliFrontend.java",
        "fixPatch": "diff --git a/pact/pact-clients/src/main/java/eu/stratosphere/pact/client/CliFrontend.java b/pact/pact-clients/src/main/java/eu/stratosphere/pact/client/CliFrontend.java\nindex 3adabf6..47de3bc 100644\n--- a/pact/pact-clients/src/main/java/eu/stratosphere/pact/client/CliFrontend.java\n+++ b/pact/pact-clients/src/main/java/eu/stratosphere/pact/client/CliFrontend.java\n@@ -490,7 +490,7 @@\n \t\t\t\tif(scheduledJobs.size() == 0) {\n \t\t\t\t\tSystem.out.println(\"No scheduled jobs.\");\n \t\t\t\t} else {\n-\t\t\t\t\tCollections.sort(runningJobs, njec);\n+\t\t\t\t\tCollections.sort(scheduledJobs, njec);\n \t\t\t\t\t\n \t\t\t\t\tSystem.out.println(\"----------------------- Scheduled Jobs -----------------------\");\n \t\t\t\t\tfor(RecentJobEvent je : scheduledJobs) {\n",
        "projectName": "apache.flink",
        "bugLineNum": 493,
        "bugNodeStartChar": 14575,
        "bugNodeLength": 35,
        "fixLineNum": 493,
        "fixNodeStartChar": 14575,
        "fixNodeLength": 37,
        "sourceBeforeFix": "Collections.sort(runningJobs,njec)",
        "sourceAfterFix": "Collections.sort(scheduledJobs,njec)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40",
        "fixCommitParentSHA1": "801f563e80fa53e5db8a0a250571f1a0a3dd0d3a",
        "bugFilePath": "transport/src/main/java/io/netty/channel/nio/NioEventLoop.java",
        "fixPatch": "diff --git a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\nindex c90252f..0c924a5 100644\n--- a/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n+++ b/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java\n@@ -295,10 +295,10 @@\n \n                 cancelledKeys = 0;\n \n-                runAllTasks();\n+                processSelectedKeys();\n                 selector = this.selector;\n \n-                processSelectedKeys();\n+                runAllTasks();\n                 selector = this.selector;\n \n                 if (isShutdown()) {\n@@ -502,7 +502,7 @@\n \n     @Override\n     protected void wakeup(boolean inEventLoop) {\n-        if (wakenUp.compareAndSet(false, true)) {\n+        if (!inEventLoop && wakenUp.compareAndSet(false, true)) {\n             selector.wakeup();\n         }\n     }\n",
        "projectName": "netty.netty",
        "bugLineNum": 301,
        "bugNodeStartChar": 11391,
        "bugNodeLength": 21,
        "fixLineNum": 301,
        "fixNodeStartChar": 11391,
        "fixNodeLength": 13,
        "sourceBeforeFix": "processSelectedKeys()",
        "sourceAfterFix": "runAllTasks()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf",
        "fixCommitParentSHA1": "83c1c3967b56cc59c9bd241e2a2fe6570fc3f258",
        "bugFilePath": "src/main/java/twitter4j/Twitter.java",
        "fixPatch": "diff --git a/src/main/java/twitter4j/Twitter.java b/src/main/java/twitter4j/Twitter.java\nindex f9d6b94..a40ce20 100644\n--- a/src/main/java/twitter4j/Twitter.java\n+++ b/src/main/java/twitter4j/Twitter.java\n@@ -363,7 +363,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getTrends() throws TwitterException {\n-        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n+        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n \n     /**\n@@ -375,7 +375,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }\n \n@@ -389,7 +389,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }\n \n@@ -403,7 +403,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily\">Twitter Search API Method: trends daily</a>\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n \n     /**\n@@ -417,7 +417,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily\">Twitter Search API Method: trends daily</a>\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }\n@@ -439,7 +439,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly\">Twitter Search API Method: trends weekly</a>\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }\n \n@@ -454,7 +454,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly\">Twitter Search API Method: trends weekly</a>\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }\n@@ -471,7 +471,7 @@\n      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() +\n+        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }\n \n@@ -486,7 +486,7 @@\n      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() +\n+        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }\n@@ -502,7 +502,7 @@\n      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }\n \n \n@@ -518,7 +518,7 @@\n      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n \n     /**\n@@ -532,7 +532,7 @@\n      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n \n     /**\n@@ -547,7 +547,7 @@\n      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n \n     /**\n@@ -563,7 +563,7 @@\n      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }\n \n@@ -577,7 +577,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline\">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n \n     /**\n@@ -590,7 +590,7 @@\n      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }\n \n@@ -606,7 +606,7 @@\n      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }\n \n@@ -620,7 +620,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions\">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }\n \n@@ -635,7 +635,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions\">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -649,7 +649,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }\n \n@@ -664,7 +664,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -678,7 +678,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }\n \n@@ -693,7 +693,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -707,7 +707,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }\n \n@@ -722,7 +722,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -860,7 +860,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets\">Twitter API Wiki / Twitter REST API Method: statuses retweets</a>\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL()\n+        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }\n \n@@ -1073,7 +1073,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists\">Twitter REST API Method: GET lists</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }\n \n@@ -1117,7 +1117,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses\">Twitter REST API Method: GET list statuses</a>\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n+        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }\n@@ -1132,7 +1132,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-memberships\">Twitter REST API Method: GET /:user/lists/memberships</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }\n \n@@ -1146,7 +1146,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions\">Twitter REST API Method: GET list subscriptions</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }\n \n@@ -1160,7 +1160,7 @@\n     * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages\">Twitter API Wiki / Twitter REST API Method: direct_messages</a>\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n \n     /**\n@@ -1173,7 +1173,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages\">Twitter API Wiki / Twitter REST API Method: direct_messages</a>\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL()\n+        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }\n \n@@ -1187,7 +1187,7 @@\n      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }\n \n@@ -1203,7 +1203,7 @@\n      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }\n@@ -1578,7 +1578,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n \n     /**\n@@ -1591,7 +1591,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n \n     /**\n@@ -1604,7 +1604,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n \n     /**\n@@ -1618,7 +1618,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites\">Twitter API Wiki / Twitter REST API Method: favorites</a>\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n \n     /**\n@@ -1774,7 +1774,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches\">Twitter API Wiki / Twitter REST API Method: saved_searches</a>\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n-        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n+        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n \n     /**\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 667,
        "bugNodeStartChar": 32856,
        "bugNodeLength": 135,
        "fixLineNum": 667,
        "fixNodeStartChar": 32856,
        "fixNodeLength": 135,
        "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,paging.asPostParameterList(),true))",
        "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",null,paging.asPostParameterList(),true))"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "27fb87cfcea241c2d7961baf68e84ce97f2dee7a",
        "fixCommitParentSHA1": "345353c0ea5d3ddda9f6d89cbf8cd0e92726fcb6",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java\nindex d6852dc..eb4488a 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/ColumnStatsUpdateTask.java\n@@ -98,7 +98,9 @@\n     \n     String columnType = colType.get(0);\n \n-    if (columnType.equalsIgnoreCase(\"long\")) {\n+    if (columnType.equalsIgnoreCase(\"long\") || columnType.equalsIgnoreCase(\"tinyint\")\n+            || columnType.equalsIgnoreCase(\"smallint\") || columnType.equalsIgnoreCase(\"int\")\n+            || columnType.equalsIgnoreCase(\"bigint\")) {\n       LongColumnStatsData longStats = new LongColumnStatsData();\n       longStats.setNumNullsIsSet(false);\n       longStats.setNumDVsIsSet(false);\n@@ -123,7 +125,7 @@\n       }\n       statsData.setLongStats(longStats);\n       statsObj.setStatsData(statsData);\n-    } else if (columnType.equalsIgnoreCase(\"double\")) {\n+    } else if (columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")) {\n       DoubleColumnStatsData doubleStats = new DoubleColumnStatsData();\n       doubleStats.setNumNullsIsSet(false);\n       doubleStats.setNumDVsIsSet(false);\n@@ -147,7 +149,8 @@\n       }\n       statsData.setDoubleStats(doubleStats);\n       statsObj.setStatsData(statsData);\n-    } else if (columnType.equalsIgnoreCase(\"string\")) {\n+    } else if (columnType.equalsIgnoreCase(\"string\") || columnType.toLowerCase().startsWith(\"char\")\n+              || columnType.toLowerCase().startsWith(\"varchar\")) { //char(x),varchar(x) types\n       StringColumnStatsData stringStats = new StringColumnStatsData();\n       stringStats.setMaxColLenIsSet(false);\n       stringStats.setAvgColLenIsSet(false);\n@@ -213,7 +216,7 @@\n       }\n       statsData.setBinaryStats(binaryStats);\n       statsObj.setStatsData(statsData);\n-    } else if (columnType.equalsIgnoreCase(\"decimal\")) {\n+    } else if (columnType.toLowerCase().startsWith(\"decimal\")) { //decimal(a,b) type\n       DecimalColumnStatsData decimalStats = new DecimalColumnStatsData();\n       decimalStats.setNumNullsIsSet(false);\n       decimalStats.setNumDVsIsSet(false);\n@@ -241,7 +244,8 @@\n       }\n       statsData.setDecimalStats(decimalStats);\n       statsObj.setStatsData(statsData);\n-    } else if (columnType.equalsIgnoreCase(\"date\")) {\n+    } else if (columnType.equalsIgnoreCase(\"date\")\n+            || columnType.equalsIgnoreCase(\"timestamp\")) {\n       DateColumnStatsData dateStats = new DateColumnStatsData();\n       Map<String, String> mapProp = work.getMapProp();\n       for (Entry<String, String> entry : mapProp.entrySet()) {\n",
        "projectName": "apache.hive",
        "bugLineNum": 126,
        "bugNodeStartChar": 5282,
        "bugNodeLength": 37,
        "fixLineNum": 126,
        "fixNodeStartChar": 5282,
        "fixNodeLength": 77,
        "sourceBeforeFix": "columnType.equalsIgnoreCase(\"double\")",
        "sourceAfterFix": "columnType.equalsIgnoreCase(\"double\") || columnType.equalsIgnoreCase(\"float\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
        "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
        "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
        "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
        "projectName": "square.retrofit",
        "bugLineNum": 118,
        "bugNodeStartChar": 5290,
        "bugNodeLength": 53,
        "fixLineNum": 118,
        "fixNodeStartChar": 5290,
        "fixNodeLength": 53,
        "sourceBeforeFix": "factory.get(sResponseClass,NO_ANNOTATIONS,retrofit)",
        "sourceAfterFix": "factory.get(fResponseClass,NO_ANNOTATIONS,retrofit)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "c9c1e8b5173d3dd69475f7a1711606ffaf7f88a8",
        "fixCommitParentSHA1": "fbe97748900f2c899fabeb881fd15d7b318c3326",
        "bugFilePath": "spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java",
        "fixPatch": "diff --git a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\nindex 8f0b4fd..dbf825c 100644\n--- a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n@@ -42,7 +42,7 @@\n \t\t\tInterruptedException {\n \t\tInvocation cli = this.cli.invoke(\"hint\");\n \t\tassertThat(cli.await(), equalTo(0));\n-\t\tassertThat(cli.getErrorOutput().length(), equalTo(0));\n+\t\tassertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(), cli.getErrorOutput().length(), equalTo(0));\n \t\tassertThat(cli.getStandardOutputLines().size(), equalTo(10));\n \t}\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 45,
        "bugNodeStartChar": 1454,
        "bugNodeLength": 53,
        "fixLineNum": 45,
        "fixNodeStartChar": 1454,
        "fixNodeLength": 100,
        "sourceBeforeFix": "assertThat(cli.getErrorOutput().length(),equalTo(0))",
        "sourceAfterFix": "assertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(),cli.getErrorOutput().length(),equalTo(0))"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "be92987b18c2e991a5ae64367a12d76f8cae2029",
        "fixCommitParentSHA1": "255ceb1c9eea219b0e2c3af9d79bc77efcbb7a97",
        "bugFilePath": "jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java",
        "fixPatch": "diff --git a/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java b/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\nindex 936e971..054e8d9 100644\n--- a/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\n+++ b/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\n@@ -106,27 +106,27 @@\n     @Message(id = 19903, value = \"No attribute called %s\")\n     AttributeNotFoundException noAttributeCalled(String attribute);\n \n-    @Message(id = 19903, value = \"No mbean found called %s\")\n+    @Message(id = 19904, value = \"No mbean found called %s\")\n     InstanceNotFoundException noMBeanCalled(ObjectName name);\n \n-    @Message(id = 19904, value = \"Should not get called\")\n+    @Message(id = 19905, value = \"Should not get called\")\n     IllegalStateException shouldNotGetCalled();\n \n-    @Message(id = 19905, value = \"Could not find %s\")\n+    @Message(id = 19906, value = \"Could not find %s\")\n     InstanceNotFoundException couldNotFindJ2eeType(String j2eeType);\n \n-    @Message(id = 19906, value = \"Invalid ObjectName: %s\")\n+    @Message(id = 19907, value = \"Invalid ObjectName: %s\")\n     IllegalStateException invalidObjectName(@Cause Throwable t, String s);\n \n-    @Message(id = 19907, value = \"Could not create ObjectName: %s\")\n+    @Message(id = 19908, value = \"Could not create ObjectName: %s\")\n     IllegalStateException couldNotCreateObjectName(@Cause Throwable t, String s);\n \n-    @Message(id = 19908, value = \"%s is read-only\")\n+    @Message(id = 19909, value = \"%s is read-only\")\n     IllegalStateException mbeanIsReadOnly(ObjectName on);\n \n-    @Message(id = 19909, value = \"Not yet implemented\")\n+    @Message(id = 19910, value = \"Not yet implemented\")\n     IllegalStateException notYetImplemented();\n \n-    @Message(id = 19910, value = \"Unknown method: %s\")\n+    @Message(id = 19911, value = \"Unknown method: %s\")\n     IllegalArgumentException unknownMethod(Method m);\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 115,
        "bugNodeStartChar": 4202,
        "bugNodeLength": 10,
        "fixLineNum": 115,
        "fixNodeStartChar": 4202,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=19905",
        "sourceAfterFix": "id=19906"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "98390cf27b0ce41447e0a104a8963b2cfdc20795",
        "fixCommitParentSHA1": "9be601a6b3dc046ea61e6bd8e5da6bdcf556f4e8",
        "bugFilePath": "gdx/src/com/badlogic/gdx/utils/Array.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/utils/Array.java b/gdx/src/com/badlogic/gdx/utils/Array.java\nindex 860bbc3..f064ef8 100644\n--- a/gdx/src/com/badlogic/gdx/utils/Array.java\n+++ b/gdx/src/com/badlogic/gdx/utils/Array.java\n@@ -120,7 +120,7 @@\n \r\n \tpublic void add (T value1, T value2, T value3, T value4) {\r\n \t\tT[] items = this.items;\r\n-\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.75f)));\r\n+\t\tif (size + 3 >= items.length) items = resize(Math.max(8, (int)(size * 1.8f))); // 1.75 isn't enough when size=5.\r\n \t\titems[size] = value1;\r\n \t\titems[size + 1] = value2;\r\n \t\titems[size + 2] = value3;\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 123,
        "bugNodeStartChar": 5213,
        "bugNodeLength": 12,
        "fixLineNum": 123,
        "fixNodeStartChar": 5091,
        "fixNodeLength": 11,
        "sourceBeforeFix": "size * 1.75f",
        "sourceAfterFix": "size * 1.8f"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913",
        "fixCommitParentSHA1": "46a3fbcb5cf35fbd18472658627a90a53be89ccf",
        "bugFilePath": "src/jvm/clojure/lang/RestFn.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/RestFn.java b/src/jvm/clojure/lang/RestFn.java\nindex e33d21f..e87c77f 100644\n--- a/src/jvm/clojure/lang/RestFn.java\n+++ b/src/jvm/clojure/lang/RestFn.java\n@@ -139,34 +139,34 @@\n \tswitch(reqArity)\r\n \t\t{\r\n \t\tcase 0:\r\n-\t\t\treturn invoke(args);\r\n+\t\t\treturn doInvoke(args);\r\n \t\tcase 1:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 2:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 3:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 4:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 5:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 6:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -174,7 +174,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -183,7 +183,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -193,7 +193,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -204,7 +204,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -216,7 +216,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -229,7 +229,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -243,7 +243,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -258,7 +258,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -274,7 +274,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -291,7 +291,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -309,7 +309,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -328,7 +328,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -348,7 +348,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -369,7 +369,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 219,
        "bugNodeStartChar": 8251,
        "bugNodeLength": 410,
        "fixLineNum": 219,
        "fixNodeStartChar": 8033,
        "fixNodeLength": 401,
        "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())",
        "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b",
        "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6",
        "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java",
        "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 185,
        "bugNodeStartChar": 4148,
        "bugNodeLength": 24,
        "fixLineNum": 185,
        "fixNodeStartChar": 4148,
        "fixNodeLength": 29,
        "sourceBeforeFix": "@IntMethodAnnotation(42)",
        "sourceAfterFix": "@InputIntMethodAnnotation(42)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "adb55e4806f0f4df52f9fff937ca9785b79228bb",
        "fixCommitParentSHA1": "16c8f2ccd1c8c0487b2de0eaee0b1eea72f575a0",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/MapService.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/MapService.java b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\nindex 9d3384d..6c914bb 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/MapService.java\n@@ -412,12 +412,12 @@\n         if (shouldSchedule) {\n             // if ttl is 0 then no eviction. if ttl is -1 then default configured eviction is applied\n             if (ttl < 0 && mapContainer.getMapConfig().getTimeToLiveSeconds() > 0) {\n-                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000);\n+                scheduleTtlEviction(name, record, mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L);\n             } else if (ttl > 0) {\n                 scheduleTtlEviction(name, record, ttl);\n             }\n             if (mapContainer.getMapConfig().getMaxIdleSeconds() > 0) {\n-                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000);\n+                scheduleIdleEviction(name, dataKey, mapContainer.getMapConfig().getMaxIdleSeconds() * 1000L);\n             }\n         }\n         return record;\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 415,
        "bugNodeStartChar": 19030,
        "bugNodeLength": 57,
        "fixLineNum": 415,
        "fixNodeStartChar": 19030,
        "fixNodeLength": 58,
        "sourceBeforeFix": "mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000",
        "sourceAfterFix": "mapContainer.getMapConfig().getTimeToLiveSeconds() * 1000L"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "de8f91ad67b9881afc9f5af9cf9736b341bc3fbf",
        "fixCommitParentSHA1": "e6faf188e28b2ee83d5715d28c9a047301ff9a4b",
        "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java",
        "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\nindex 22421ff..cb2c118 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java\n@@ -90,7 +90,7 @@\n         }\n         catch (IllegalArgumentException e) {\n             final String msg = e.getMessage();\n-            Assert.assertEquals(msg, \"Unexpected token type: methodStub\");\n+            Assert.assertEquals(\"Unexpected token type: methodStub\", msg);\n         }\n     }\n }\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 93,
        "bugNodeStartChar": 3946,
        "bugNodeLength": 61,
        "fixLineNum": 93,
        "fixNodeStartChar": 3946,
        "fixNodeLength": 61,
        "sourceBeforeFix": "Assert.assertEquals(msg,\"Unexpected token type: methodStub\")",
        "sourceAfterFix": "Assert.assertEquals(\"Unexpected token type: methodStub\",msg)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "1dc7ebfc26b5ef1f88e84702582715eb631202db",
        "fixCommitParentSHA1": "d9e13ceacf00bcfa4df8cb6a0b56fc344f6a9f96",
        "bugFilePath": "graylog2-rest-client/src/main/java/org/graylog2/restclient/models/IndexService.java",
        "fixPatch": "diff --git a/graylog2-rest-client/src/main/java/org/graylog2/restclient/models/IndexService.java b/graylog2-rest-client/src/main/java/org/graylog2/restclient/models/IndexService.java\nindex b838bab..600a4ac 100644\n--- a/graylog2-rest-client/src/main/java/org/graylog2/restclient/models/IndexService.java\n+++ b/graylog2-rest-client/src/main/java/org/graylog2/restclient/models/IndexService.java\n@@ -103,7 +103,7 @@\n \n     // Not part an Index model instance method because opening/closing can be applied to indices without calculated ranges.\n     public void delete(String index) throws APIException, IOException {\n-        api.path(routes.IndicesResource().single(index))\n+        api.path(routes.IndicesResource().delete(index))\n                 .timeout(apiTimeout(\"index_delete\", 60, TimeUnit.SECONDS))\n                 .expect(204)\n                 .execute();\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 106,
        "bugNodeStartChar": 4041,
        "bugNodeLength": 38,
        "fixLineNum": 106,
        "fixNodeStartChar": 4041,
        "fixNodeLength": 38,
        "sourceBeforeFix": "routes.IndicesResource().single(index)",
        "sourceAfterFix": "routes.IndicesResource().delete(index)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "114211dc376cd85d1c97dde06cc7b347181314e1",
        "fixCommitParentSHA1": "06bc4f0fc48c8f98b5a6426af9de6882dbd06f16",
        "bugFilePath": "gdx-tests-android/src/com/badlogic/gdx/GDXTester.java",
        "fixPatch": "diff --git a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\nindex a554f46..dd972e9 100644\n--- a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n+++ b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n@@ -78,41 +78,41 @@\n \t\t\tintent = new Intent( this, LagTest.class );\r\n \t\tif( keyword.equals( items[14] ) )\r\n \t\t\tintent = new Intent( this, Pong.class );\r\n-\t\tif( keyword.equals( items[16] ) )\r\n+\t\tif( keyword.equals( items[15] ) )\r\n \t\t\tintent = new Intent( this, AudioDeviceTest.class );\r\n-\t\tif( keyword.equals( items[17] ) )\r\n+\t\tif( keyword.equals( items[16] ) )\r\n \t\t\tintent = new Intent( this, Mpg123Test.class );\r\n-\t\tif( keyword.equals( items[18] ) )\r\n+\t\tif( keyword.equals( items[17] ) )\r\n \t\t\tintent = new Intent( this, VorbisTest.class );\r\n-\t\tif( keyword.equals( items[19] ) )\r\n+\t\tif( keyword.equals( items[18] ) )\r\n \t\t\tintent = new Intent( this, PerformanceTest.class );\r\n-\t\tif( keyword.equals( items[20] ) )\r\n+\t\tif( keyword.equals( items[19] ) )\r\n \t\t\tintent = new Intent( this, MeshShaderTest.class );\r\n-\t\tif( keyword.equals( items[21] ) )\r\n+\t\tif( keyword.equals( items[20] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchTest.class );\r\n-\t\tif( keyword.equals( items[22] ) )\r\n+\t\tif( keyword.equals( items[21] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchShaderTest.class );\r\n-\t\tif( keyword.equals( items[23] ) )\r\n+\t\tif( keyword.equals( items[22] ) )\r\n \t\t\tintent = new Intent( this, FrameBufferTest.class );\r\n-\t\tif( keyword.equals( items[24] ) )\r\n+\t\tif( keyword.equals( items[23] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchRotationTest.class );\r\n-\t\tif( keyword.equals( items[25] ) )\r\n+\t\tif( keyword.equals( items[24] ) )\r\n \t\t\tintent = new Intent( this, Box2DTest.class );\r\n-\t\tif( keyword.equals( items[26] ) )\r\n+\t\tif( keyword.equals( items[25] ) )\r\n \t\t\tintent = new Intent( this, AudioRecorderTest.class );\r\n-\t\tif( keyword.equals( items[27] ) )\r\n+\t\tif( keyword.equals( items[26] ) )\r\n \t\t\tintent = new Intent( this, TestCollection.class );\r\n-\t\tif( keyword.equals( items[28] ) )\r\n+\t\tif( keyword.equals( items[27] ) )\r\n \t\t\tintent = new Intent( this, ResourcesTest.class );\r\n-\t\tif( keyword.equals( items[29] ) )\r\n+\t\tif( keyword.equals( items[28] ) )\r\n \t\t\tintent = new Intent( this, MD5Test.class );\r\n-\t\tif( keyword.equals( items[30] ) )\r\n+\t\tif( keyword.equals( items[29] ) )\r\n \t\t\tintent = new Intent( this, MicroBenchmarks.class );\r\n-\t\tif( keyword.equals( items[31] ) )\r\n+\t\tif( keyword.equals( items[30] ) )\r\n \t\t\tintent = new Intent( this, MultitouchTest.class );\r\n-\t\tif( keyword.equals( items[32] ) )\r\n+\t\tif( keyword.equals( items[31] ) )\r\n \t\t\tintent = new Intent( this, BufferUtilsTest.class );\r\n-\t\tif( keyword.equals( items[33] ) )\r\n+\t\tif( keyword.equals( items[32] ) )\r\n \t\t\tintent = new Intent( this, TerrainTest.class );\r\n \t\t\t\r\n \t\tstartActivity( intent );\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 103,
        "bugNodeStartChar": 4643,
        "bugNodeLength": 9,
        "fixLineNum": 103,
        "fixNodeStartChar": 4541,
        "fixNodeLength": 9,
        "sourceBeforeFix": "items[27]",
        "sourceAfterFix": "items[26]"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "8d133e14729b78621a02916a0ce96a56363c8e0c",
        "fixCommitParentSHA1": "64eb17f8d0efc7070a0f1e19394b7eb15086cec7",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java b/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\nindex d5ae64a..c5cd3b8 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/RoutePerformanceTest.java\n@@ -31,7 +31,7 @@\n  */\n public class RoutePerformanceTest extends ContextTestSupport {\n \n-    private int size = 10000;\n+    private int size = 500;\n     private SimpleDataSet dataSet = new SimpleDataSet(size);\n     private String uri = \"mock:results\";\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 34,
        "bugNodeStartChar": 1368,
        "bugNodeLength": 12,
        "fixLineNum": 34,
        "fixNodeStartChar": 1368,
        "fixNodeLength": 10,
        "sourceBeforeFix": "size=10000",
        "sourceAfterFix": "size=500"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "c13ff9e39a62c0cf6ef41cb7593fd4bb4ea5ac4b",
        "fixCommitParentSHA1": "ae2c66f7379615364af444b97d6911794f04da0d",
        "bugFilePath": "modules/DesktopBranding/src/main/java/org/gephi/branding/desktop/Installer.java",
        "fixPatch": "diff --git a/modules/DesktopBranding/src/main/java/org/gephi/branding/desktop/Installer.java b/modules/DesktopBranding/src/main/java/org/gephi/branding/desktop/Installer.java\nindex a7bdf3b..e46af77 100644\n--- a/modules/DesktopBranding/src/main/java/org/gephi/branding/desktop/Installer.java\n+++ b/modules/DesktopBranding/src/main/java/org/gephi/branding/desktop/Installer.java\n@@ -129,7 +129,7 @@\n         int option = JOptionPane.showConfirmDialog(WindowManager.getDefault().getMainWindow(), NbBundle.getMessage(Installer.class, \"CloseConfirmation.message\"), NbBundle.getMessage(Installer.class, \"CloseConfirmation.message\"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);\n         if (option == JOptionPane.YES_OPTION) {\n             Lookup.getDefault().lookup(ProjectControllerUI.class).saveProject();\n-        } else if (option == JOptionPane.CANCEL_OPTION) {\n+        } else if (option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION) {\n             return false;//Exit canceled\n         }\n         Lookup.getDefault().lookup(ProjectController.class).closeCurrentProject();\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 132,
        "bugNodeStartChar": 5080,
        "bugNodeLength": 35,
        "fixLineNum": 132,
        "fixNodeStartChar": 5080,
        "fixNodeLength": 74,
        "sourceBeforeFix": "option == JOptionPane.CANCEL_OPTION",
        "sourceAfterFix": "option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa",
        "fixCommitParentSHA1": "7a8678decaae4216d3cd55f60a189ce24c48f759",
        "bugFilePath": "host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java",
        "fixPatch": "diff --git a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\nindex ebd88ed..f704207 100644\n--- a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\n+++ b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\n@@ -34,7 +34,7 @@\n import org.jboss.logging.MessageLogger;\n \n /**\n- * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n+ * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n  * controller logger messages. See http://community.jboss.org/docs/DOC-16810 for the full list of currently reserved\n  * JBAS message id blocks.\n  * <p/>\n@@ -71,11 +71,11 @@\n     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n \n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n+    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n \n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n+    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n \n     /**\n@@ -86,7 +86,7 @@\n      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n+    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n \n     /**\n@@ -98,7 +98,7 @@\n      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n+    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n \n     /**\n@@ -108,7 +108,7 @@\n      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n+    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n \n     /**\n@@ -119,7 +119,7 @@\n      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n+    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n \n     /**\n@@ -128,7 +128,7 @@\n      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15806, value = \"Caught exception closing input stream\")\n+    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n \n     /**\n@@ -138,7 +138,7 @@\n      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n-    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n+    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n \n     /**\n@@ -150,7 +150,7 @@\n      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n-    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n+    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n \n     /**\n@@ -162,7 +162,7 @@\n      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n-    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n+    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n \n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 153,
        "bugNodeStartChar": 6613,
        "bugNodeLength": 10,
        "fixLineNum": 153,
        "fixNodeStartChar": 6613,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=15808",
        "sourceAfterFix": "id=10808"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "787e87270e6cf8aca4728e3c938e6ee2f8c11fca",
        "fixCommitParentSHA1": "ae76962f9e754f6eaddec4c8dbf1a628ac282a4f",
        "bugFilePath": "okhttp-tests/src/test/java/okhttp3/CookiesTest.java",
        "fixPatch": "diff --git a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\nindex dc655c3..be8d238 100644\n--- a/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n+++ b/okhttp-tests/src/test/java/okhttp3/CookiesTest.java\n@@ -99,7 +99,7 @@\n     assertThat(cookie.getCommentURL()).isNull();\n     assertThat(cookie.getDiscard()).isFalse();\n     // Converting to a fixed date can cause rounding!\n-    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(1.0));\n+    assertThat((double) cookie.getMaxAge()).isCloseTo(60.0, offset(5.0));\n     assertThat(cookie.getPath()).isEqualTo(\"/path\");\n     assertThat(cookie.getSecure()).isTrue();\n   }\n",
        "projectName": "square.okhttp",
        "bugLineNum": 102,
        "bugNodeStartChar": 3955,
        "bugNodeLength": 11,
        "fixLineNum": 102,
        "fixNodeStartChar": 3955,
        "fixNodeLength": 11,
        "sourceBeforeFix": "offset(1.0)",
        "sourceAfterFix": "offset(5.0)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "49203981ee544f1443c40991cc2adcf319345562",
        "fixCommitParentSHA1": "ad8efa0d85e71b86dabfb7c37614001d3d435255",
        "bugFilePath": "titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java",
        "fixPatch": "diff --git a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\nindex a1242ba..7b74333 100644\n--- a/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n+++ b/titan-test/src/main/java/com/thinkaurelius/titan/blueprints/TitanBlueprintsTest.java\n@@ -49,7 +49,7 @@\n \n     public void testGraphTestSuite() throws Exception {\n         this.stopWatch();                       //Excluded test case because toString representation is non-standard\n-        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\"));\n+        doTestSuite(new GraphTestSuite(this), ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\"));\n         printTestPerformance(\"GraphTestSuite\", this.stopWatch());\n     }\n \n",
        "projectName": "thinkaurelius.titan",
        "bugLineNum": 52,
        "bugNodeStartChar": 2013,
        "bugNodeLength": 43,
        "fixLineNum": 52,
        "fixNodeStartChar": 2013,
        "fixNodeLength": 80,
        "sourceBeforeFix": "ImmutableSet.of(\"testStringRepresentation\")",
        "sourceAfterFix": "ImmutableSet.of(\"testStringRepresentation\",\"testDataTypeValidationOnProperties\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c81cb94226a8381f512b8293659c82338a4626c3",
        "fixCommitParentSHA1": "c5405bb5929b117b31ad0f4c4ba8c6faf38beb63",
        "bugFilePath": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java",
        "fixPatch": "diff --git a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\nindex 92f01ac..d0d7a43 100644\n--- a/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n+++ b/indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/OverlordResource.java\n@@ -627,7 +627,7 @@\n   public Response getTasks(\n       @QueryParam(\"state\") final String state,\n       @QueryParam(\"datasource\") final String dataSource,\n-      @PathParam(\"createdTimeInterval\") final String createdTimeInterval,\n+      @QueryParam(\"createdTimeInterval\") final String createdTimeInterval,\n       @QueryParam(\"max\") final Integer maxCompletedTasks,\n       @QueryParam(\"type\") final String type,\n       @Context final HttpServletRequest req\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 630,
        "bugNodeStartChar": 20708,
        "bugNodeLength": 33,
        "fixLineNum": 630,
        "fixNodeStartChar": 20708,
        "fixNodeLength": 34,
        "sourceBeforeFix": "@PathParam(\"createdTimeInterval\")",
        "sourceAfterFix": "@QueryParam(\"createdTimeInterval\")"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "28ba4cee88e6eb983244cb85dcd91e5f150f7e32",
        "fixCommitParentSHA1": "afdea2f442589013487b23008f40d7c05a0ba150",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex 8e558ed..eb868a4 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -118,9 +118,9 @@\n         String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);\n         if (s == null) {\n             s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n-            if (s == null) {\n+            if (s == null && req != null) {\n                 String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);\n-                s = !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n+                s = tmp != null && !tmp.equalsIgnoreCase(\"0\") ? tmp : null;\n             }\n         }\n         uuid = s == null ? UUID.randomUUID().toString() : s;\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 121,
        "bugNodeStartChar": 5340,
        "bugNodeLength": 9,
        "fixLineNum": 121,
        "fixNodeStartChar": 5340,
        "fixNodeLength": 24,
        "sourceBeforeFix": "s == null",
        "sourceAfterFix": "s == null && req != null"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "158ca9e3d3f7785d2fa3f0aad0d12339a74be2c7",
        "fixCommitParentSHA1": "98e265a3a74e4c4ae1eb6e762598b9b0f53a6b8f",
        "bugFilePath": "clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java",
        "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\nindex 2a11f6d..66fb717 100644\n--- a/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n+++ b/clients/unshaded/src/main/java/tachyon/client/tcp/TCPRemoteBlockReader.java\n@@ -68,7 +68,7 @@\n       LOG.info(\"Data \" + blockId + \" from remote machine \" + address + \" received\");\n \n       if (recvMsg.getStatus() != RPCResponse.Status.SUCCESS) {\n-        LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n+        LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"\n             + recvMsg.getStatus().getMessage());\n         return null;\n       }\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 71,
        "bugNodeStartChar": 2687,
        "bugNodeLength": 129,
        "fixLineNum": 71,
        "fixNodeStartChar": 2687,
        "fixNodeLength": 128,
        "sourceBeforeFix": "LOG.error(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())",
        "sourceAfterFix": "LOG.warn(\"Error in response for blockId: \" + recvMsg.getBlockId() + \" message: \"+ recvMsg.getStatus().getMessage())"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "dbb575b5861a30bd4ab660603c671441abb3f2cf",
        "fixCommitParentSHA1": "532a11ab5914c8b4b5b9da62273ac76f7f944531",
        "bugFilePath": "src/edu/stanford/nlp/pipeline/CleanXmlAnnotator.java",
        "fixPatch": "diff --git a/src/edu/stanford/nlp/pipeline/CleanXmlAnnotator.java b/src/edu/stanford/nlp/pipeline/CleanXmlAnnotator.java\nindex 44fddeb..1c954bd 100644\n--- a/src/edu/stanford/nlp/pipeline/CleanXmlAnnotator.java\n+++ b/src/edu/stanford/nlp/pipeline/CleanXmlAnnotator.java\n@@ -699,7 +699,7 @@\n             currSectionCoreMap.set(CoreAnnotations.AuthorAnnotation.class, foundAuthor);\n             // get author mention info\n             Pattern p = Pattern.compile(foundAuthor);\n-            Matcher matcher = p.matcher(sectionStartToken.word());\n+            Matcher matcher = p.matcher(sectionStartTagToken.word());\n             if (matcher.find()) {\n               int authorMentionStart = matcher.start() + sectionStartTagCharBegin;\n               int authorMentionEnd = matcher.end() + sectionStartTagCharBegin;\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 702,
        "bugNodeStartChar": 28684,
        "bugNodeLength": 24,
        "fixLineNum": 702,
        "fixNodeStartChar": 28684,
        "fixNodeLength": 27,
        "sourceBeforeFix": "sectionStartToken.word()",
        "sourceAfterFix": "sectionStartTagToken.word()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "dfb43299a88507211e9acb9a9f21a8ba54f0205a",
        "fixCommitParentSHA1": "b2dd175851917c68aa19d4fa235d5fc0189dc5e5",
        "bugFilePath": "prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java",
        "fixPatch": "diff --git a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\nindex add5617..839f27b 100644\n--- a/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n+++ b/prototype/src/test/java/com/iluwatar/prototype/PrototypeTest.java\n@@ -56,7 +56,7 @@\n   /**\n    * The tested prototype instance\n    */\n-  private final Prototype testedPrototype;\n+  private final P testedPrototype;\n \n   /**\n    * The expected {@link Prototype#toString()} value\n@@ -69,7 +69,7 @@\n    * @param testedPrototype  The tested prototype instance\n    * @param expectedToString The expected {@link Prototype#toString()} value\n    */\n-  public PrototypeTest(final Prototype testedPrototype, final String expectedToString) {\n+  public PrototypeTest(final P testedPrototype, final String expectedToString) {\n     this.expectedToString = expectedToString;\n     this.testedPrototype = testedPrototype;\n   }\n",
        "projectName": "iluwatar.java-design-patterns",
        "bugLineNum": 56,
        "bugNodeStartChar": 2141,
        "bugNodeLength": 87,
        "fixLineNum": 56,
        "fixNodeStartChar": 2141,
        "fixNodeLength": 79,
        "sourceBeforeFix": "/**   * The tested prototype instance  */ private final Prototype testedPrototype; ",
        "sourceAfterFix": "/**   * The tested prototype instance  */ private final P testedPrototype; "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "96b353d98f6b6d441ebedf69ec12cfa333a1d7c9",
        "fixCommitParentSHA1": "48b469ad4f0da466b347071cea82913965645de3",
        "bugFilePath": "flink-tests/src/test/java/org/apache/flink/test/javaApiOperators/GroupReduceITCase.java",
        "fixPatch": "diff --git a/flink-tests/src/test/java/org/apache/flink/test/javaApiOperators/GroupReduceITCase.java b/flink-tests/src/test/java/org/apache/flink/test/javaApiOperators/GroupReduceITCase.java\nindex 075e60c..6f93722 100644\n--- a/flink-tests/src/test/java/org/apache/flink/test/javaApiOperators/GroupReduceITCase.java\n+++ b/flink-tests/src/test/java/org/apache/flink/test/javaApiOperators/GroupReduceITCase.java\n@@ -1033,7 +1033,7 @@\n \n \t\t// check if automatic type registration with Kryo worked\n \t\tAssert.assertTrue(ec.getRegisteredKryoTypes().contains(BigInt.class));\n-\t\tAssert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class));\n+\t\tAssert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class));\n \n \t\tString expected = null;\n \n",
        "projectName": "apache.flink",
        "bugLineNum": 1036,
        "bugNodeStartChar": 34872,
        "bugNodeLength": 76,
        "fixLineNum": 1036,
        "fixNodeStartChar": 34872,
        "fixNodeLength": 77,
        "sourceBeforeFix": "Assert.assertTrue(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))",
        "sourceAfterFix": "Assert.assertFalse(ec.getRegisteredKryoTypes().contains(java.sql.Date.class))"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "c888434580c601ac9c4734e19d8eefac63518031",
        "fixCommitParentSHA1": "8818cf9ff4c491391eea41952031a91036dd62e0",
        "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java",
        "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\nindex c20a70d..d80afd1 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JavascriptClientCodegen.java\n@@ -762,9 +762,11 @@\n             + (StringUtils.isEmpty(modelPackage) ? \"\" : (modelPackage + \"/\")) + dataType;\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenModel cm, CodegenProperty cp) {\n         return \"{\" + getJSDocType(cm, cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenModel cm, CodegenProperty cp) {\n         if (Boolean.TRUE.equals(cp.isContainer)) {\n@@ -787,9 +789,11 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.datatype : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenParameter cp) {\n         return \"{\" + getJSDocType(cp) + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenParameter cp) {\n         String dataType = trimBrackets(cp.dataType);\n@@ -808,10 +812,12 @@\n         return cp.isEnum || !languageSpecificPrimitives.contains(cp.baseType == null ? cp.dataType : cp.baseType);\n     }\n \n+    /*\n     private String getJSDocTypeWithBraces(CodegenOperation co) {\n         String jsDocType = getJSDocType(co);\n         return jsDocType == null ? null : \"{\" + jsDocType + \"}\";\n     }\n+    */\n \n     private String getJSDocType(CodegenOperation co) {\n         String returnType = trimBrackets(co.returnType);\n@@ -860,10 +866,10 @@\n \n                 // Store JSDoc type specification into vendor-extension: x-jsdoc-type.\n                 for (CodegenParameter cp : operation.allParams) {\n-                    String jsdocType = getJSDocTypeWithBraces(cp);\n+                    String jsdocType = getJSDocType(cp);\n                     cp.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n                 }\n-                String jsdocType = getJSDocTypeWithBraces(operation);\n+                String jsdocType = getJSDocType(operation);\n                 operation.vendorExtensions.put(\"x-jsdoc-type\", jsdocType);\n             }\n         }\n@@ -889,7 +895,7 @@\n \n             for (CodegenProperty var : cm.vars) {\n                 // Add JSDoc @type value for this property.\n-                String jsDocType = getJSDocTypeWithBraces(cm, var);\n+                String jsDocType = getJSDocType(cm, var);\n                 var.vendorExtensions.put(\"x-jsdoc-type\", jsDocType);\n \n                 if (Boolean.TRUE.equals(var.required)) {\n",
        "projectName": "swagger-api.swagger-codegen",
        "bugLineNum": 892,
        "bugNodeStartChar": 35985,
        "bugNodeLength": 31,
        "fixLineNum": 892,
        "fixNodeStartChar": 35985,
        "fixNodeLength": 21,
        "sourceBeforeFix": "getJSDocTypeWithBraces(cm,var)",
        "sourceAfterFix": "getJSDocType(cm,var)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "5a6d98ac56f8dec608c79c242c81389149fc3def",
        "fixCommitParentSHA1": "94e3d25ab862aa4845406bacb25092de24d578d7",
        "bugFilePath": "src/main/java/redis/clients/jedis/Connection.java",
        "fixPatch": "diff --git a/src/main/java/redis/clients/jedis/Connection.java b/src/main/java/redis/clients/jedis/Connection.java\nindex 7aadc7f..5a168a7 100644\n--- a/src/main/java/redis/clients/jedis/Connection.java\n+++ b/src/main/java/redis/clients/jedis/Connection.java\n@@ -209,7 +209,7 @@\n     public List<Long> getIntegerMultiBulkReply() {\n         flush();\n         pipelinedCommands--;\n-        return (List<Long>) protocol.read(inputStream);\n+        return (List<Long>) Protocol.read(inputStream);\n     }\n \n     public List<Object> getAll() {\n",
        "projectName": "xetorthio.jedis",
        "bugLineNum": 212,
        "bugNodeStartChar": 5965,
        "bugNodeLength": 26,
        "fixLineNum": 212,
        "fixNodeStartChar": 5965,
        "fixNodeLength": 26,
        "sourceBeforeFix": "protocol.read(inputStream)",
        "sourceAfterFix": "Protocol.read(inputStream)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "5625c762fd70e1a630ab64da8772c2ef611b16f7",
        "fixCommitParentSHA1": "82555d3d1bc71f713ad22937d980b700d072e727",
        "bugFilePath": "bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java b/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\nindex 14dea73..33f0318 100644\n--- a/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\n+++ b/bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java\n@@ -434,7 +434,7 @@\n \t\t\tthrow new MessageParseException(\"need 2 comma separated fields in msg\");\n \t\t}\n \t\ttry {\n-\t\t\tint numeric = Integer.parseInt(parts[1]);\n+\t\t\tint numeric = Integer.parseInt(parts[1], 16);\n \t\t\tArrayList<AlarmDecoderBindingConfig> bcl = getItems(ADMsgType.RFX, parts[0], null);\n \t\t\tfor (AlarmDecoderBindingConfig c : bcl) {\n \t\t\t\tif (c.hasFeature(\"data\")) {\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 437,
        "bugNodeStartChar": 14865,
        "bugNodeLength": 26,
        "fixLineNum": 437,
        "fixNodeStartChar": 14865,
        "fixNodeLength": 30,
        "sourceBeforeFix": "Integer.parseInt(parts[1])",
        "sourceAfterFix": "Integer.parseInt(parts[1],16)"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "0095d1d5839085cb2d299a0956a22e7b2958688f",
        "fixCommitParentSHA1": "84be87ec8b76a97d617f5d72094dc9aaca8621e8",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/operator/MultiChannelGroupByHash.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/MultiChannelGroupByHash.java b/presto-main/src/main/java/com/facebook/presto/operator/MultiChannelGroupByHash.java\nindex 8986038..26f257c 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/MultiChannelGroupByHash.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/MultiChannelGroupByHash.java\n@@ -632,7 +632,7 @@\n         public boolean process()\n         {\n             int positionCount = page.getPositionCount();\n-            checkState(lastPosition < positionCount, \"position count out of bound\");\n+            checkState(lastPosition <= positionCount, \"position count out of bound\");\n             checkState(!finished);\n \n             // needRehash() == false indicates we have reached capacity boundary and a rehash is needed.\n",
        "projectName": "facebook.presto",
        "bugLineNum": 635,
        "bugNodeStartChar": 24079,
        "bugNodeLength": 28,
        "fixLineNum": 635,
        "fixNodeStartChar": 24079,
        "fixNodeLength": 29,
        "sourceBeforeFix": "lastPosition < positionCount",
        "sourceAfterFix": "lastPosition <= positionCount"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "94fe91293c283842805aac48ee545ab6fce24f20",
        "fixCommitParentSHA1": "586d01201b88df742b68579f3710ecfea252a0f6",
        "bugFilePath": "gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java b/gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java\nindex 7205b20..38bbe4d 100644\n--- a/gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java\n+++ b/gdx/src/com/badlogic/gdx/physics/box2d/joints/PrismaticJointDef.java\n@@ -63,7 +63,7 @@\n \t/**\r\n \t *  The local translation axis in body1.\r\n \t */\r\n-\tpublic final Vector2 localAxis1 = new Vector2( );\r\n+\tpublic final Vector2 localAxis1 = new Vector2(1, 0);\r\n \r\n \t/**\r\n \t *  The constrained angle between the bodies: body2_angle - body1_angle.\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 66,
        "bugNodeStartChar": 2425,
        "bugNodeLength": 14,
        "fixLineNum": 66,
        "fixNodeStartChar": 2360,
        "fixNodeLength": 17,
        "sourceBeforeFix": "new Vector2()",
        "sourceAfterFix": "new Vector2(1,0)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e78d8584a1298e79c17a45e01f79062b55c9f703",
        "fixCommitParentSHA1": "054cf8a18390f4a082629456d78f8657fc0515b3",
        "bugFilePath": "server/src/test/java/io/druid/server/initialization/JettyQosTest.java",
        "fixPatch": "diff --git a/server/src/test/java/io/druid/server/initialization/JettyQosTest.java b/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\nindex 1b37f48..a7d39dd 100644\n--- a/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\n+++ b/server/src/test/java/io/druid/server/initialization/JettyQosTest.java\n@@ -98,7 +98,7 @@\n     );\n   }\n \n-  @Test(timeout = 60_000L)\n+  @Test(timeout = 120_000L)\n   public void testQoS() throws Exception\n   {\n     final int fastThreads = 20;\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 101,
        "bugNodeStartChar": 3838,
        "bugNodeLength": 17,
        "fixLineNum": 101,
        "fixNodeStartChar": 3838,
        "fixNodeLength": 18,
        "sourceBeforeFix": "timeout=60_000L",
        "sourceAfterFix": "timeout=120_000L"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "2933e220ed5118e606b3d5cf4eabeb77e4b7acf8",
        "fixCommitParentSHA1": "5bfe67887fdd8a002bbe1919d93687be8b5a56a9",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\nindex 182d5fa..356e758 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/tx/TxnSetOperation.java\n@@ -112,7 +112,7 @@\n     public Operation getBackupOperation() {\n         final Record record = recordStore.getRecord(dataKey);\n         final RecordInfo replicationInfo = Records.buildRecordInfo(record);\n-        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true);\n+        return new PutBackupOperation(name, dataKey, dataValue, replicationInfo, true, false);\n     }\n \n     public void onWaitExpire() {\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 115,
        "bugNodeStartChar": 3779,
        "bugNodeLength": 71,
        "fixLineNum": 115,
        "fixNodeStartChar": 3779,
        "fixNodeLength": 78,
        "sourceBeforeFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true)",
        "sourceAfterFix": "new PutBackupOperation(name,dataKey,dataValue,replicationInfo,true,false)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "353cfe61160ef9355cc5e09fa135e81cb0cf0450",
        "fixCommitParentSHA1": "6a9fb5a813612085124c684612cf6b79cdab7552",
        "bugFilePath": "components/camel-ehcache/src/test/java/org/apache/camel/component/ehcache/EhcacheManagerTest.java",
        "fixPatch": "diff --git a/components/camel-ehcache/src/test/java/org/apache/camel/component/ehcache/EhcacheManagerTest.java b/components/camel-ehcache/src/test/java/org/apache/camel/component/ehcache/EhcacheManagerTest.java\nindex 839dee4..e2663ff 100644\n--- a/components/camel-ehcache/src/test/java/org/apache/camel/component/ehcache/EhcacheManagerTest.java\n+++ b/components/camel-ehcache/src/test/java/org/apache/camel/component/ehcache/EhcacheManagerTest.java\n@@ -75,7 +75,7 @@\n \n         try {\n             SimpleRegistry registry = new SimpleRegistry();\n-            registry.put(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n+            registry.bind(\"myConf\", new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")));\n \n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {\n@@ -120,7 +120,7 @@\n             cacheManager = CacheManagerBuilder.newCacheManagerBuilder().build(true);\n \n             SimpleRegistry registry = new SimpleRegistry();\n-            registry.put(\"myManager\", cacheManager);\n+            registry.bind(\"myManager\", cacheManager);\n \n             context = new DefaultCamelContext(registry);\n             context.addRoutes(new RouteBuilder() {\n",
        "projectName": "apache.camel",
        "bugLineNum": 78,
        "bugNodeStartChar": 3270,
        "bugNodeLength": 104,
        "fixLineNum": 78,
        "fixNodeStartChar": 3270,
        "fixNodeLength": 105,
        "sourceBeforeFix": "registry.put(\"myConf\",new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")))",
        "sourceAfterFix": "registry.bind(\"myConf\",new XmlConfiguration(getClass().getResource(\"/ehcache/ehcache-file-config.xml\")))"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "8e5020ce3091e4fb07d86e4b935afec5ec1c5815",
        "fixCommitParentSHA1": "f10e03d91a0fb7afc7ebdbdb128048106a2355b4",
        "bugFilePath": "core/src/main/java/tachyon/UserInfo.java",
        "fixPatch": "diff --git a/core/src/main/java/tachyon/UserInfo.java b/core/src/main/java/tachyon/UserInfo.java\nindex 8df6b4d..95adf37 100644\n--- a/core/src/main/java/tachyon/UserInfo.java\n+++ b/core/src/main/java/tachyon/UserInfo.java\n@@ -28,7 +28,7 @@\n   private long mLastHeartbeatMs;\n \n   public UserInfo(long userId) {\n-    Preconditions.checkArgument(userId <= 0, \"Invalid user id \" + userId);\n+    Preconditions.checkArgument(userId > 0, \"Invalid user id \" + userId);\n     USER_ID = userId;\n     mOwnBytes = 0;\n     mLastHeartbeatMs = System.currentTimeMillis();\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 31,
        "bugNodeStartChar": 1151,
        "bugNodeLength": 11,
        "fixLineNum": 31,
        "fixNodeStartChar": 1151,
        "fixNodeLength": 10,
        "sourceBeforeFix": "userId <= 0",
        "sourceAfterFix": "userId > 0"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "dfdb8015332767b0678bff667e07b82a084a86fd",
        "fixCommitParentSHA1": "4b9cb6afeed1b85ca1084bd1d2b72c4bdbf836c0",
        "bugFilePath": "spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java",
        "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\nindex e734013..7e0d7a4 100755\n--- a/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-groovy-templates/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -70,7 +70,7 @@\n \t@Test\n \tpublic void testCreate() throws Exception {\n \t\tthis.mockMvc.perform(post(\"/\").param(\"text\", \"FOO text\").param(\"summary\", \"FOO\"))\n-\t\t\t\t.andExpect(status().isMovedTemporarily())\n+\t\t\t\t.andExpect(status().isFound())\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 73,
        "bugNodeStartChar": 2664,
        "bugNodeLength": 29,
        "fixLineNum": 73,
        "fixNodeStartChar": 2664,
        "fixNodeLength": 18,
        "sourceBeforeFix": "status().isMovedTemporarily()",
        "sourceAfterFix": "status().isFound()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "666029e58b807f3af2c083316a4df794365c1145",
        "fixCommitParentSHA1": "2fd773ce300cd8126cb5f183bbe2f0943ae8290b",
        "bugFilePath": "src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/strategies/adapters/LoopContextStateRetrievalToSingleStepOutputGenerationAdapter.java",
        "fixPatch": "diff --git a/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/strategies/adapters/LoopContextStateRetrievalToSingleStepOutputGenerationAdapter.java b/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/strategies/adapters/LoopContextStateRetrievalToSingleStepOutputGenerationAdapter.java\nindex 94f5557..0c55e09 100644\n--- a/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/strategies/adapters/LoopContextStateRetrievalToSingleStepOutputGenerationAdapter.java\n+++ b/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/strategies/adapters/LoopContextStateRetrievalToSingleStepOutputGenerationAdapter.java\n@@ -7,7 +7,7 @@\n \n \tprivate LoopContextStateRetrieval myRetrievalObjectToAdapt;\n \n-\tpublic LoopContextStateRetrievalToSingleStepOutputGenerationAdapter(LoopContextStepRetrieval retrievalToAdapt) {\n+\tpublic LoopContextStateRetrievalToSingleStepOutputGenerationAdapter(LoopContextStateRetrieval retrievalToAdapt) {\n \t\tmyRetrievalObjectToAdapt = retrievalToAdapt;\n \t}\n \n",
        "projectName": "EnterpriseQualityCoding.FizzBuzzEnterpriseEdition",
        "bugLineNum": 10,
        "bugNodeStartChar": 596,
        "bugNodeLength": 41,
        "fixLineNum": 10,
        "fixNodeStartChar": 596,
        "fixNodeLength": 42,
        "sourceBeforeFix": "LoopContextStepRetrieval retrievalToAdapt",
        "sourceAfterFix": "LoopContextStateRetrieval retrievalToAdapt"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "9b65f21aa8be862a861b64cb03dee1d9ae9440a6",
        "fixCommitParentSHA1": "62b84036b89056a0c9b8ac0d61eb25f1b3a954a5",
        "bugFilePath": "hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java",
        "fixPatch": "diff --git a/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java b/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\nindex 89f1836..8a7c8cb 100644\n--- a/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\n+++ b/hazelcast-ra/hazelcast-jca/src/main/java/com/hazelcast/jca/HazelcastConnectionImpl.java\n@@ -104,8 +104,7 @@\n      */\n     @Override\n     public ResultSetInfo getResultSetInfo() throws NotSupportedException {\n-        //as per spec 15.11.3\n-        throw new NotSupportedException();\n+        throw new NotSupportedException(\"getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3\");\n     }\n \n     @Override\n@@ -333,12 +332,12 @@\n \n     @Override\n     public LifecycleService getLifecycleService() {\n-        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JEE Container\");\n+        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JCA Container\");\n     }\n \n     @Override\n     public void shutdown() {\n-        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JEE Container\");\n+        throw new UnsupportedOperationException(\"Hazelcast Lifecycle is only managed by JCA Container\");\n     }\n \n     @Override\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 108,
        "bugNodeStartChar": 3831,
        "bugNodeLength": 27,
        "fixLineNum": 107,
        "fixNodeStartChar": 3801,
        "fixNodeLength": 109,
        "sourceBeforeFix": "new NotSupportedException()",
        "sourceAfterFix": "new NotSupportedException(\"getResultSetInfo() is not supported by this resource adapter as per spec 15.11.3\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0e2a0eede5bf85f3c1f64e5752501eddf9ab7202",
        "fixCommitParentSHA1": "c8765bc9e09df13164a8513efc91141767239eea",
        "bugFilePath": "guava-tests/test/com/google/common/math/StatsTesting.java",
        "fixPatch": "diff --git a/guava-tests/test/com/google/common/math/StatsTesting.java b/guava-tests/test/com/google/common/math/StatsTesting.java\nindex da9625c..ae26f1f 100644\n--- a/guava-tests/test/com/google/common/math/StatsTesting.java\n+++ b/guava-tests/test/com/google/common/math/StatsTesting.java\n@@ -246,7 +246,7 @@\n     LONG_MANY_VALUES_STATS_SNAPSHOT = accumulator.snapshot();\n   }\n \n-  static final List<Stats> ALL_STATS =\n+  static final ImmutableList<Stats> ALL_STATS =\n       ImmutableList.of(\n           EMPTY_STATS_VARARGS,\n           EMPTY_STATS_ITERABLE,\n@@ -313,7 +313,7 @@\n     CONSTANT_VALUES_PAIRED_STATS = accumulator.snapshot();\n   }\n \n-  static final List<PairedStats> ALL_PAIRED_STATS =\n+  static final ImmutableList<PairedStats> ALL_PAIRED_STATS =\n       ImmutableList.of(\n           EMPTY_PAIRED_STATS,\n           ONE_VALUE_PAIRED_STATS,\n",
        "projectName": "google.guava",
        "bugLineNum": 249,
        "bugNodeStartChar": 11074,
        "bugNodeLength": 11,
        "fixLineNum": 249,
        "fixNodeStartChar": 11074,
        "fixNodeLength": 20,
        "sourceBeforeFix": "List<Stats>",
        "sourceAfterFix": "ImmutableList<Stats>"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "7e53685310fa22abd12307e141511184fa6ede3a",
        "fixCommitParentSHA1": "70631bb4cff0c0cbd7055e843e091bfd4fae8e4e",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java\nindex 2e77bc4..9546191 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/metadata/Partition.java\n@@ -283,7 +283,7 @@\n   public void setOutputFormatClass(Class<? extends HiveOutputFormat> outputFormatClass) {\n     this.outputFormatClass = outputFormatClass;\n     tPartition.getSd().setOutputFormat(HiveFileFormatUtils\n-        .getOutputFormatSubstitute(outputFormatClass).toString());\n+        .getOutputFormatSubstitute(outputFormatClass).getName());\n   }\n \n   final public Class<? extends InputFormat> getInputFormatClass()\n",
        "projectName": "apache.hive",
        "bugLineNum": 285,
        "bugNodeStartChar": 9880,
        "bugNodeLength": 84,
        "fixLineNum": 285,
        "fixNodeStartChar": 9880,
        "fixNodeLength": 83,
        "sourceBeforeFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).toString()",
        "sourceAfterFix": "HiveFileFormatUtils.getOutputFormatSubstitute(outputFormatClass).getName()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "cafd66e2cd040453fc09e5078b9dbb25657ad19a",
        "fixCommitParentSHA1": "7d1377b7487816edd1d1d52aff98d58ca89acdc1",
        "bugFilePath": "components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java",
        "fixPatch": "diff --git a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java\nindex 7470f1a..d810f05 100644\n--- a/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java\n+++ b/components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java\n@@ -1053,7 +1053,8 @@\n             // because the factory has already been instantiated\n             try {\n                 for (String component : components) {\n-                    if (camelContext.getComponent(component) == null) {\n+                    if (camelContext.getComponent(component, false) == null) {\n+                        // component not already in camel-context so resolve an OSGi reference to it\n                         getComponentResolverReference(context, component);\n                     } else {\n                         LOG.debug(\"Not creating a service reference for component {} because a component already exists in the Camel Context\", component);\n",
        "projectName": "apache.camel",
        "bugLineNum": 1056,
        "bugNodeStartChar": 51220,
        "bugNodeLength": 36,
        "fixLineNum": 1056,
        "fixNodeStartChar": 51220,
        "fixNodeLength": 43,
        "sourceBeforeFix": "camelContext.getComponent(component)",
        "sourceAfterFix": "camelContext.getComponent(component,false)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "1d558cc635e458d5a50e3548a1e810f3d6944864",
        "fixCommitParentSHA1": "50da26094577b2535dbbfdc245fe568e3ad9574c",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java b/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java\nindex 72b449c..7ed8202 100644\n--- a/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java\n@@ -264,9 +264,9 @@\n         }\n \n         @Override\n-        public OperatorFactory createOutputOperator(int operatorId, List<Type> sourceType)\n+        public OperatorFactory createOutputOperator(int operatorId, List<Type> sourceTypes)\n         {\n-            checkNotNull(sourceType, \"sourceType is null\");\n+            checkNotNull(sourceTypes, \"sourceType is null\");\n \n             return new OperatorFactory()\n             {\n@@ -280,7 +280,7 @@\n                 public Operator createOperator(DriverContext driverContext)\n                 {\n                     OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, MaterializingOperator.class.getSimpleName());\n-                    MaterializingOperator operator = new MaterializingOperator(operatorContext, sourceType);\n+                    MaterializingOperator operator = new MaterializingOperator(operatorContext, sourceTypes);\n \n                     if (!materializingOperator.compareAndSet(null, operator)) {\n                         throw new IllegalArgumentException(\"Output already created\");\n",
        "projectName": "facebook.presto",
        "bugLineNum": 283,
        "bugNodeStartChar": 11017,
        "bugNodeLength": 54,
        "fixLineNum": 283,
        "fixNodeStartChar": 11017,
        "fixNodeLength": 55,
        "sourceBeforeFix": "new MaterializingOperator(operatorContext,sourceType)",
        "sourceAfterFix": "new MaterializingOperator(operatorContext,sourceTypes)"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "d8cd49c1b725a5e0a9355a25d6fa7ce887774138",
        "fixCommitParentSHA1": "33187d0285e1c48f1fb4953f1199a53e123da6a6",
        "bugFilePath": "src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java",
        "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\nindex d1f8223..2e5f940 100644\n--- a/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n+++ b/src/main/java/org/jboss/netty/buffer/CompositeChannelBuffer.java\n@@ -261,7 +261,7 @@\n         if (index + 3 <= indices[sliceId + 1]) {\n             slices[sliceId].setMedium(index - indices[sliceId], value);\n         } else if (order() == ByteOrder.BIG_ENDIAN) {\n-            setShort(index, (short) (value >>> 8));\n+            setShort(index, (short) (value >> 8));\n             setByte(index + 2, (byte) value);\n         } else {\n             setShort(index    , (short) value);\n",
        "projectName": "netty.netty",
        "bugLineNum": 264,
        "bugNodeStartChar": 9603,
        "bugNodeLength": 11,
        "fixLineNum": 264,
        "fixNodeStartChar": 9603,
        "fixNodeLength": 10,
        "sourceBeforeFix": "value >>> 8",
        "sourceAfterFix": "value >> 8"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "ed6b93c315cebbf53ffecd330f0835a791dad92c",
        "fixCommitParentSHA1": "b4e937c42701753d9459ddeccafd309ccfe49e47",
        "bugFilePath": "server/src/main/java/org/jboss/as/server/controller/resources/ModuleLoadingResourceDefinition.java",
        "fixPatch": "diff --git a/server/src/main/java/org/jboss/as/server/controller/resources/ModuleLoadingResourceDefinition.java b/server/src/main/java/org/jboss/as/server/controller/resources/ModuleLoadingResourceDefinition.java\nindex 6942ab2..7b49edc 100644\n--- a/server/src/main/java/org/jboss/as/server/controller/resources/ModuleLoadingResourceDefinition.java\n+++ b/server/src/main/java/org/jboss/as/server/controller/resources/ModuleLoadingResourceDefinition.java\n@@ -211,7 +211,7 @@\n         // TODO get a formal API from jboss-modules to replace this reflection\n \n         List<String> result = new ArrayList<String>();\n-        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.create(moduleName));\n+        Module module = Module.getModuleFromCallerModuleLoader(ModuleIdentifier.fromString(moduleName));\n         ModuleClassLoader mcl = module.getClassLoader();\n         Field pathsField = ModuleClassLoader.class.getDeclaredField(\"paths\");\n         Field sourceListField = null;\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 214,
        "bugNodeStartChar": 9513,
        "bugNodeLength": 35,
        "fixLineNum": 214,
        "fixNodeStartChar": 9513,
        "fixNodeLength": 39,
        "sourceBeforeFix": "ModuleIdentifier.create(moduleName)",
        "sourceAfterFix": "ModuleIdentifier.fromString(moduleName)"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "24749f1b18508de151e892dbb756c721bec29f1b",
        "fixCommitParentSHA1": "e9ee271e20607ced950da075cbf998d616296dc1",
        "bugFilePath": "storm-core/src/jvm/backtype/storm/utils/Utils.java",
        "fixPatch": "diff --git a/storm-core/src/jvm/backtype/storm/utils/Utils.java b/storm-core/src/jvm/backtype/storm/utils/Utils.java\nindex 2c91ec5..77580c4 100644\n--- a/storm-core/src/jvm/backtype/storm/utils/Utils.java\n+++ b/storm-core/src/jvm/backtype/storm/utils/Utils.java\n@@ -361,8 +361,8 @@\n                 .sessionTimeoutMs(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_SESSION_TIMEOUT)))\n                 .retryPolicy(new StormBoundedExponentialBackoffRetry(\n                             Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),\n-                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),\n-                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING))));\n+                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),\n+                            Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES))));\n         if(auth!=null && auth.scheme!=null) {\n             builder = builder.authorization(auth.scheme, auth.payload);\n         }\n",
        "projectName": "apache.storm",
        "bugLineNum": 362,
        "bugNodeStartChar": 12700,
        "bugNodeLength": 318,
        "fixLineNum": 362,
        "fixNodeStartChar": 12700,
        "fixNodeLength": 318,
        "sourceBeforeFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)))",
        "sourceAfterFix": "new StormBoundedExponentialBackoffRetry(Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING)),Utils.getInt(conf.get(Config.STORM_ZOOKEEPER_RETRY_TIMES)))"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "492fd118d4902c730fc8619851a7135b623631e2",
        "fixCommitParentSHA1": "f27d133d348fb653bc468851b86938078034c28b",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBatchOptionsTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBatchOptionsTest.java b/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBatchOptionsTest.java\nindex 0d34eaa..be82d96 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBatchOptionsTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatorBatchOptionsTest.java\n@@ -23,8 +23,8 @@\n                     // as we have not configured more on the aggregator it will default to aggregate the\r\n                     // latest exchange only\r\n                     .aggregator().header(\"id\")\r\n-                    // wait for 2 seconds to aggregate\r\n-                    .batchTimeout(2000L)\r\n+                    // wait for 0.5 seconds to aggregate\r\n+                    .batchTimeout(500L)\r\n                     // batch size in is the limit of number of exchanges recieved, so when we have received 100\r\n                     // exchanges then whatever we have in the collection will be sent\r\n                     .batchSize(100)\r\n@@ -41,7 +41,7 @@\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n \r\n         // we expect 3 messages grouped by the latest message only\r\n-        result.expectedMessageCount(3);\r\n+        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r\n \r\n         // then we sent all the message at once\r\n@@ -72,8 +72,8 @@\n                     // as we have not configured more on the aggregator it will default to aggregate the\r\n                     // latest exchange only\r\n                     .aggregator().header(\"id\")\r\n-                    // wait for 2 seconds to aggregate\r\n-                    .batchTimeout(2000L)\r\n+                    // wait for 0.5 seconds to aggregate\r\n+                    .batchTimeout(500L)\r\n                     // batch size in is the limit of number of exchanges recieved, so when we have received 100\r\n                     // exchanges then whatever we have in the collection will be sent\r\n                     .batchSize(5)\r\n@@ -87,7 +87,7 @@\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n \r\n         // we expect 3 messages grouped by the latest message only\r\n-        result.expectedMessageCount(2);\r\n+        result.expectedMinimumMessageCount(2);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\");\r\n \r\n         // then we sent all the message at once\r\n@@ -130,7 +130,7 @@\n         MockEndpoint result = getMockEndpoint(\"mock:result\");\r\n \r\n         // we expect 3 messages grouped by the latest message only\r\n-        result.expectedMessageCount(3);\r\n+        result.expectedMinimumMessageCount(3);\r\n         result.expectedBodiesReceived(\"Message 1c\", \"Message 2b\", \"Message 3a\");\r\n \r\n         // then we sent all the message at once\r\n",
        "projectName": "apache.camel",
        "bugLineNum": 44,
        "bugNodeStartChar": 1854,
        "bugNodeLength": 30,
        "fixLineNum": 44,
        "fixNodeStartChar": 1811,
        "fixNodeLength": 37,
        "sourceBeforeFix": "result.expectedMessageCount(3)",
        "sourceAfterFix": "result.expectedMinimumMessageCount(3)"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "58d4d29c049c0bf8314d2c0b00ef133ee68c77e9",
        "fixCommitParentSHA1": "a481dcbd4696e4b1277028ec08b9b781502fb5df",
        "bugFilePath": "bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\nindex c697033..f815f51 100644\n--- a/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n+++ b/bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java\n@@ -599,13 +599,13 @@\n             int level = this.rfStatus.intValue();\n             int result;\n \n-            if (level <= RF_STATUS_FULL_SIGNAL) {\n+            if (level < RF_STATUS_FULL_SIGNAL) {\n                 result = 5;\n-            } else if (level <= RF_STATUS_HIGH_SIGNAL) {\n+            } else if (level < RF_STATUS_HIGH_SIGNAL) {\n                 result = 4;\n-            } else if (level <= RF_STATUS_MEDIUM_SIGNAL) {\n+            } else if (level < RF_STATUS_MEDIUM_SIGNAL) {\n                 result = 3;\n-            } else if (level <= RF_STATUS_LOW_SIGNAL) {\n+            } else if (level < RF_STATUS_LOW_SIGNAL) {\n                 result = 2;\n             } else {\n                 result = 1;\n@@ -643,13 +643,13 @@\n \n             int batteryVp = this.batteryVp;\n             int result;\n-            if (batteryVp >= full) {\n+            if (batteryVp > full) {\n                 result = 5;\n-            } else if (batteryVp >= high) {\n+            } else if (batteryVp > high) {\n                 result = 4;\n-            } else if (batteryVp >= medium) {\n+            } else if (batteryVp > medium) {\n                 result = 3;\n-            } else if (batteryVp >= low) {\n+            } else if (batteryVp > low) {\n                 result = 2;\n             } else { /* very low */\n                 result = 1;\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 650,
        "bugNodeStartChar": 18159,
        "bugNodeLength": 19,
        "fixLineNum": 650,
        "fixNodeStartChar": 18159,
        "fixNodeLength": 18,
        "sourceBeforeFix": "batteryVp >= medium",
        "sourceAfterFix": "batteryVp > medium"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "1d577b1b8bd3f51bcf8d9d89bb4598a28020af07",
        "fixCommitParentSHA1": "d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5",
        "bugFilePath": "example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java",
        "fixPatch": "diff --git a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\nindex 5421956..0e599fb 100644\n--- a/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n+++ b/example/src/main/java/io/netty/example/securechat/SecureChatServerHandler.java\n@@ -47,10 +47,10 @@\n                 new GenericFutureListener<Future<Channel>>() {\n             @Override\n             public void operationComplete(Future<Channel> future) throws Exception {\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Welcome to \" + InetAddress.getLocalHost().getHostName() +\n                         \" secure chat service!\\n\");\n-                ctx.write(\n+                ctx.writeAndFlush(\n                         \"Your session is protected by \" +\n                         ctx.pipeline().get(SslHandler.class).engine().getSession().getCipherSuite() +\n                         \" cipher suite.\\n\");\n@@ -65,10 +65,10 @@\n         // Send the received message to all channels but the current one.\n         for (Channel c: channels) {\n             if (c != ctx.channel()) {\n-                c.write(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n+                c.writeAndFlush(\"[\" + ctx.channel().remoteAddress() + \"] \" +\n                         msg + '\\n');\n             } else {\n-                c.write(\"[you] \" + msg + '\\n');\n+                c.writeAndFlush(\"[you] \" + msg + '\\n');\n             }\n         }\n \n",
        "projectName": "netty.netty",
        "bugLineNum": 71,
        "bugNodeStartChar": 2894,
        "bugNodeLength": 30,
        "fixLineNum": 71,
        "fixNodeStartChar": 2894,
        "fixNodeLength": 38,
        "sourceBeforeFix": "c.write(\"[you] \" + msg + '\\n')",
        "sourceAfterFix": "c.writeAndFlush(\"[you] \" + msg + '\\n')"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "a448fc53877d025130f05b8738d8104c66139fbb",
        "fixCommitParentSHA1": "926547582d62733bdedb1cdcc277653b2ff7b4e7",
        "bugFilePath": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java",
        "fixPatch": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java\nindex 19fa04f..1168eb0 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/WindowOperatorMigrationTest.java\n@@ -826,7 +826,7 @@\n \t\t\t\t\tif (comparison != 0) {\n \t\t\t\t\t\treturn comparison;\n \t\t\t\t\t}\n-\t\t\t\t\treturn (int) (sr0.getValue().f1 - sr1.getValue().f1);\n+\t\t\t\t\treturn (int) (sr0.getValue().f2 - sr1.getValue().f2);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n",
        "projectName": "apache.flink",
        "bugLineNum": 829,
        "bugNodeStartChar": 37736,
        "bugNodeLength": 17,
        "fixLineNum": 829,
        "fixNodeStartChar": 37736,
        "fixNodeLength": 17,
        "sourceBeforeFix": "sr0.getValue().f1",
        "sourceAfterFix": "sr0.getValue().f2"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "898c6236741d2a46907350d1ad116c9509050bc2",
        "fixCommitParentSHA1": "02b875e4b9a1af770c32346f649176787a84fdde",
        "bugFilePath": "src/test/java/io/vertx/test/core/HATest.java",
        "fixPatch": "diff --git a/src/test/java/io/vertx/test/core/HATest.java b/src/test/java/io/vertx/test/core/HATest.java\nindex 984e355..7e5558d 100644\n--- a/src/test/java/io/vertx/test/core/HATest.java\n+++ b/src/test/java/io/vertx/test/core/HATest.java\n@@ -424,7 +424,7 @@\n       } catch (Exception e) {\n         fut.fail(e);\n       }\n-    }, ar -> {\n+    }, false, ar -> {\n       if (!ar.succeeded()) {\n         fail(ar.cause());\n       }\n",
        "projectName": "eclipse.vert.x",
        "bugLineNum": 420,
        "bugNodeStartChar": 14779,
        "bugNodeLength": 232,
        "fixLineNum": 420,
        "fixNodeStartChar": 14779,
        "fixNodeLength": 239,
        "sourceBeforeFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )",
        "sourceAfterFix": "v.executeBlocking(fut -> {   try {     v.simulateKill();     fut.complete();   }  catch (  Exception e) {     fut.fail(e);   } } ,false,ar -> {   if (!ar.succeeded()) {     fail(ar.cause());   } } )"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "4031a54f71a1df311b0b9ab24640297e0d526bfe",
        "fixCommitParentSHA1": "9c1eea2dc00e2feb14c13e9a00d6a392f680df17",
        "bugFilePath": "src/com/google/javascript/jscomp/VarCheck.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/VarCheck.java b/src/com/google/javascript/jscomp/VarCheck.java\nindex 19b4d21..8de8c93 100644\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n@@ -53,7 +53,7 @@\n       \"module {1}\");\n \n   static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n-    DiagnosticType.error(\n+    DiagnosticType.warning(\n       \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n       \"accessing name {0} in externs has no effect\");\n \n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 56,
        "bugNodeStartChar": 2062,
        "bugNodeLength": 113,
        "fixLineNum": 56,
        "fixNodeStartChar": 2062,
        "fixNodeLength": 115,
        "sourceBeforeFix": "DiagnosticType.error(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")",
        "sourceAfterFix": "DiagnosticType.warning(\"JSC_NAME_REFERENCE_IN_EXTERNS\",\"accessing name {0} in externs has no effect\")"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "a5d3bc31007ab431577308c669e389a8fba09a56",
        "fixCommitParentSHA1": "f8ceb2daac6ee16b27991a402dcda63d8e54967a",
        "bugFilePath": "clustering/ejb/infinispan/src/main/java/org/wildfly/clustering/ejb/infinispan/InfinispanBeanManagerFactoryServiceConfiguratorFactory.java",
        "fixPatch": "diff --git a/clustering/ejb/infinispan/src/main/java/org/wildfly/clustering/ejb/infinispan/InfinispanBeanManagerFactoryServiceConfiguratorFactory.java b/clustering/ejb/infinispan/src/main/java/org/wildfly/clustering/ejb/infinispan/InfinispanBeanManagerFactoryServiceConfiguratorFactory.java\nindex 60262cd..724d84b 100644\n--- a/clustering/ejb/infinispan/src/main/java/org/wildfly/clustering/ejb/infinispan/InfinispanBeanManagerFactoryServiceConfiguratorFactory.java\n+++ b/clustering/ejb/infinispan/src/main/java/org/wildfly/clustering/ejb/infinispan/InfinispanBeanManagerFactoryServiceConfiguratorFactory.java\n@@ -116,7 +116,7 @@\n             }\n         };\n \n-        List<CapabilityServiceConfigurator> builders = new ArrayList<>(4);\n+        List<CapabilityServiceConfigurator> builders = new ArrayList<>(3);\n         builders.add(new TemplateConfigurationServiceConfigurator(ServiceName.parse(InfinispanCacheRequirement.CONFIGURATION.resolve(containerName, cacheName)), containerName, cacheName, templateCacheName, configurator));\n         builders.add(new CacheServiceConfigurator<>(ServiceName.parse(InfinispanCacheRequirement.CACHE.resolve(containerName, cacheName)), containerName, cacheName).require(new ServiceDependency(name.append(\"marshalling\"))));\n         builders.add(new ServiceConfiguratorAdapter(new RemoveOnCancelScheduledExecutorServiceConfigurator(name.append(this.name, \"expiration\"), EXPIRATION_THREAD_FACTORY)));\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 119,
        "bugNodeStartChar": 5853,
        "bugNodeLength": 18,
        "fixLineNum": 119,
        "fixNodeStartChar": 5853,
        "fixNodeLength": 18,
        "sourceBeforeFix": "new ArrayList<>(4)",
        "sourceAfterFix": "new ArrayList<>(3)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "486b290863a66641b0ec30dbf2d9e349733cae44",
        "fixCommitParentSHA1": "2f64d221e1f4d11a64838effa7742ac89884f508",
        "bugFilePath": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java",
        "fixPatch": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java\nindex cf6b749..a9bae62 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java\n@@ -1148,7 +1148,7 @@\n    */\n   public void closeRegion(final String regionname, final String serverName)\n   throws IOException {\n-    closeRegion(Bytes.toBytesBinary(regionname), serverName);\n+    closeRegion(Bytes.toBytes(regionname), serverName);\n   }\n \n   /**\n@@ -1266,7 +1266,7 @@\n    */\n   public void flush(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n-    flush(Bytes.toBytesBinary(tableNameOrRegionName));\n+    flush(Bytes.toBytes(tableNameOrRegionName));\n   }\n \n   /**\n@@ -1335,7 +1335,7 @@\n    */\n   public void compact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n-    compact(Bytes.toBytesBinary(tableNameOrRegionName));\n+    compact(Bytes.toBytes(tableNameOrRegionName));\n   }\n \n   /**\n@@ -1362,7 +1362,7 @@\n    */\n   public void compact(String tableOrRegionName, String columnFamily)\n     throws IOException,  InterruptedException {\n-    compact(Bytes.toBytesBinary(tableOrRegionName), Bytes.toBytes(columnFamily));\n+    compact(Bytes.toBytes(tableOrRegionName), Bytes.toBytes(columnFamily));\n   }\n \n   /**\n@@ -1389,7 +1389,7 @@\n    */\n   public void majorCompact(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n-    majorCompact(Bytes.toBytesBinary(tableNameOrRegionName));\n+    majorCompact(Bytes.toBytes(tableNameOrRegionName));\n   }\n \n   /**\n@@ -1696,7 +1696,7 @@\n    */\n   public void split(final String tableNameOrRegionName)\n   throws IOException, InterruptedException {\n-    split(Bytes.toBytesBinary(tableNameOrRegionName));\n+    split(Bytes.toBytes(tableNameOrRegionName));\n   }\n \n   /**\n@@ -1714,7 +1714,7 @@\n \n   public void split(final String tableNameOrRegionName,\n     final String splitPoint) throws IOException, InterruptedException {\n-    split(Bytes.toBytesBinary(tableNameOrRegionName), Bytes.toBytesBinary(splitPoint));\n+    split(Bytes.toBytes(tableNameOrRegionName), Bytes.toBytes(splitPoint));\n   }\n \n   /**\n",
        "projectName": "apache.hbase",
        "bugLineNum": 1151,
        "bugNodeStartChar": 45868,
        "bugNodeLength": 31,
        "fixLineNum": 1151,
        "fixNodeStartChar": 45868,
        "fixNodeLength": 25,
        "sourceBeforeFix": "Bytes.toBytesBinary(regionname)",
        "sourceAfterFix": "Bytes.toBytes(regionname)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "1be5812cf0e582602dedd34a2bbc450c42b0e3bf",
        "fixCommitParentSHA1": "95be208f0ff1f463db9cba22f361b2150c738382",
        "bugFilePath": "spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java",
        "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java b/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\nindex 93847c0..3dfbeff 100644\n--- a/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-method-security/src/main/java/sample/security/method/SampleMethodSecurityApplication.java\n@@ -73,7 +73,7 @@\n \t\t@Override\n \t\tpublic void init(AuthenticationManagerBuilder auth) throws Exception {\n \t\t\tauth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\")\n-\t\t\t\t\t.roles(\"ADMIN\", \"USER\").and().withUser(\"user\").password(\"user\")\n+\t\t\t\t\t.roles(\"ADMIN\", \"USER\", \"ACTUATOR\").and().withUser(\"user\").password(\"user\")\n \t\t\t\t\t.roles(\"USER\");\n \t\t}\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 75,
        "bugNodeStartChar": 3019,
        "bugNodeLength": 94,
        "fixLineNum": 75,
        "fixNodeStartChar": 3019,
        "fixNodeLength": 106,
        "sourceBeforeFix": "auth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\")",
        "sourceAfterFix": "auth.inMemoryAuthentication().withUser(\"admin\").password(\"admin\").roles(\"ADMIN\",\"USER\",\"ACTUATOR\")"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "5f1632dd4a5274c4180b4b35b778e198b1ddd8ff",
        "fixCommitParentSHA1": "3fd18a93e0ca4dbe1e50aefb88d084c7ab28bb72",
        "bugFilePath": "src/main/java/spark/http/matching/MatcherFilter.java",
        "fixPatch": "diff --git a/src/main/java/spark/http/matching/MatcherFilter.java b/src/main/java/spark/http/matching/MatcherFilter.java\nindex c801a98..00042a6 100644\n--- a/src/main/java/spark/http/matching/MatcherFilter.java\n+++ b/src/main/java/spark/http/matching/MatcherFilter.java\n@@ -146,7 +146,13 @@\n             try {\n                 DoneFilters.execute(context);\n             } catch (Exception generalException) {\n-                GeneralError.modify(httpResponse, body, requestWrapper, responseWrapper, generalException);\n+                GeneralError.modify(\n+                        httpRequest,\n+                        httpResponse,\n+                        body,\n+                        requestWrapper,\n+                        responseWrapper,\n+                        generalException);\n             }\n         }\n \n",
        "projectName": "perwendel.spark",
        "bugLineNum": 149,
        "bugNodeStartChar": 5150,
        "bugNodeLength": 90,
        "fixLineNum": 149,
        "fixNodeStartChar": 5150,
        "fixNodeLength": 248,
        "sourceBeforeFix": "GeneralError.modify(httpResponse,body,requestWrapper,responseWrapper,generalException)",
        "sourceAfterFix": "GeneralError.modify(httpRequest,httpResponse,body,requestWrapper,responseWrapper,generalException)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "ba7c6a38ba78dd2db7c8062509df342e22c25b3c",
        "fixCommitParentSHA1": "ab38273f0fe91b5777914686b2d1b6260d1b741a",
        "bugFilePath": "metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java",
        "fixPatch": "diff --git a/metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java b/metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java\nindex 4c84009..a82b138 100644\n--- a/metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java\n+++ b/metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java\n@@ -134,7 +134,7 @@\n      * @throws IOException if there is an error opening the stream\n      */\n     protected PrintStream createStreamForMetric(MetricName metricName) throws IOException {\n-        final File newFile = new File(outputDir, metricName.getName() + \".csv\");\n+        final File newFile = new File(outputDir, metricName.toString() + \".csv\");\n         if (newFile.createNewFile()) {\n             return new PrintStream(new FileOutputStream(newFile));\n         }\n",
        "projectName": "dropwizard.metrics",
        "bugLineNum": 137,
        "bugNodeStartChar": 5822,
        "bugNodeLength": 20,
        "fixLineNum": 137,
        "fixNodeStartChar": 5822,
        "fixNodeLength": 21,
        "sourceBeforeFix": "metricName.getName()",
        "sourceAfterFix": "metricName.toString()"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "55fb8b3008f3a0514ad28982f884d5d20fba9fe2",
        "fixCommitParentSHA1": "3e4853d6ad9282b0aff0ee8c1201b737bdab61f5",
        "bugFilePath": "components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java",
        "fixPatch": "diff --git a/components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java b/components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java\nindex a1e3bbb..e347716 100755\n--- a/components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java\n+++ b/components/camel-cache/src/main/java/org/apache/camel/component/cache/CacheProducer.java\n@@ -102,13 +102,13 @@\n                 LOG.debug(\"Adding an element with key \" + key + \" into the Cache\");\n             }\n             element = createElementFromBody(exchange, CacheConstants.CACHE_OPERATION_ADD);\n-            cache.put(new Element(key, element), true);\n+            cache.put(new Element(key, element));\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Updating an element with key \" + key + \" into the Cache\");\n             }\n             element = createElementFromBody(exchange, CacheConstants.CACHE_OPERATION_UPDATE);\n-            cache.put(new Element(key, element), true);\n+            cache.put(new Element(key, element));\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting All elements from the Cache\");\n@@ -118,7 +118,7 @@\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n             }\n-            cache.remove(key, true);\n+            cache.remove(key);\n         } else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Quering an element with key \" + key + \" from the Cache\");\n",
        "projectName": "apache.camel",
        "bugLineNum": 121,
        "bugNodeStartChar": 5297,
        "bugNodeLength": 23,
        "fixLineNum": 121,
        "fixNodeStartChar": 5297,
        "fixNodeLength": 17,
        "sourceBeforeFix": "cache.remove(key,true)",
        "sourceAfterFix": "cache.remove(key)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "5221c15e183cb7029a305766d137d909f77e8941",
        "fixCommitParentSHA1": "b7a02b02d81c830d148355c90bc309bcd66fb592",
        "bugFilePath": "core/src/com/google/inject/spi/InterceptorBinding.java",
        "fixPatch": "diff --git a/core/src/com/google/inject/spi/InterceptorBinding.java b/core/src/com/google/inject/spi/InterceptorBinding.java\nindex 4d87157..a16e701 100644\n--- a/core/src/com/google/inject/spi/InterceptorBinding.java\n+++ b/core/src/com/google/inject/spi/InterceptorBinding.java\n@@ -56,7 +56,7 @@\n     this.source = checkNotNull(source, \"source\");\n     this.classMatcher = checkNotNull(classMatcher, \"classMatcher\");\n     this.methodMatcher = checkNotNull(methodMatcher, \"methodMatcher\");\n-    this.interceptors = ImmutableList.of(interceptors);\n+    this.interceptors = ImmutableList.copyOf(interceptors);\n   }\n \n   public Object getSource() {\n",
        "projectName": "google.guice",
        "bugLineNum": 59,
        "bugNodeStartChar": 2262,
        "bugNodeLength": 30,
        "fixLineNum": 59,
        "fixNodeStartChar": 2262,
        "fixNodeLength": 34,
        "sourceBeforeFix": "ImmutableList.of(interceptors)",
        "sourceAfterFix": "ImmutableList.copyOf(interceptors)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "0a2b272cb8cb45faafd95a3bbc9e9af813620e09",
        "fixCommitParentSHA1": "94716aca9293ae7a7b2de68cef8a803623ba11c9",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\nindex 40b8019..209a6c3 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/impl/MapManagedService.java\n@@ -40,7 +40,7 @@\n \n     @Override\n     public void init(NodeEngine nodeEngine, Properties properties) {\n-        final LockService lockService = nodeEngine.getService(LockService.SERVICE_NAME);\n+        final LockService lockService = nodeEngine.getSharedService(LockService.SERVICE_NAME);\n         if (lockService != null) {\n             lockService.registerLockStoreConstructor(MapService.SERVICE_NAME,\n                     new ObjectNamespaceLockStoreInfoConstructorFunction());\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 43,
        "bugNodeStartChar": 1401,
        "bugNodeLength": 47,
        "fixLineNum": 43,
        "fixNodeStartChar": 1401,
        "fixNodeLength": 53,
        "sourceBeforeFix": "nodeEngine.getService(LockService.SERVICE_NAME)",
        "sourceAfterFix": "nodeEngine.getSharedService(LockService.SERVICE_NAME)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "dbc0ca8d1cb03f2da2c8fc0062e5d4b681fef11a",
        "fixCommitParentSHA1": "d9c72eadecbf3507c6188e9edae3fb8512597ade",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\nindex 2de2c45..1ef72c9 100644\n--- a/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/spi/impl/operationexecutor/classic/ExecutePacketTest.java\n@@ -35,7 +35,7 @@\n \n         final NormalResponse normalResponse = new NormalResponse(null, 1, 0, false);\n         Data data = serializationService.toData(normalResponse);\n-        final Packet packet = new Packet(data, 0, serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, 0);\n         packet.setHeader(Packet.HEADER_RESPONSE);\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n@@ -56,7 +56,7 @@\n \n         final DummyOperation operation = new DummyOperation(0);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n@@ -76,7 +76,7 @@\n \n         final DummyOperation operation = new DummyOperation(Operation.GENERIC_PARTITION_ID);\n         Data data = serializationService.toData(operation);\n-        final Packet packet = new Packet(data, operation.getPartitionId(), serializationService.getPortableContext());\n+        final Packet packet = new Packet(data, operation.getPartitionId());\n         packet.setHeader(Packet.HEADER_OP);\n         executor.execute(packet);\n \n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 38,
        "bugNodeStartChar": 1306,
        "bugNodeLength": 62,
        "fixLineNum": 38,
        "fixNodeStartChar": 1306,
        "fixNodeLength": 19,
        "sourceBeforeFix": "new Packet(data,0,serializationService.getPortableContext())",
        "sourceAfterFix": "new Packet(data,0)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d",
        "fixCommitParentSHA1": "22cc1f679312b3222cf3f460afa62f76a63c4c2f",
        "bugFilePath": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java\nindex ee5e6f6..7169470 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Window.java\n@@ -255,7 +255,7 @@\n \t\t\telse\r\n \t\t\t\ty -= (padTop - bounds.height) / 2;\r\n \t\t}\r\n-\t\ttitleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor));\r\n+\t\ttitleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor));\r\n \t\ttitleCache.setPosition((int)x, (int)y);\r\n \t\ttitleCache.draw(batch, parentAlpha);\r\n \t}\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 258,
        "bugNodeStartChar": 9258,
        "bugNodeLength": 72,
        "fixLineNum": 258,
        "fixNodeStartChar": 9001,
        "fixNodeLength": 73,
        "sourceBeforeFix": "titleCache.setColor(Color.tmp.set(getColor()).mul(style.titleFontColor))",
        "sourceAfterFix": "titleCache.setColors(Color.tmp.set(getColor()).mul(style.titleFontColor))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2230a91829f39b72973e6fecf275d9c664911ca0",
        "fixCommitParentSHA1": "0456649282c4e3f298a5c75af2f979b8001e977a",
        "bugFilePath": "src/jvm/clojure/lang/Compiler.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/Compiler.java b/src/jvm/clojure/lang/Compiler.java\nindex bc19538..1eaa9e8 100644\n--- a/src/jvm/clojure/lang/Compiler.java\n+++ b/src/jvm/clojure/lang/Compiler.java\n@@ -5774,7 +5774,7 @@\n \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n-\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n+\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}\n@@ -5947,7 +5947,7 @@\n \tcatch(Throwable e)\n \t\t{\n \t\tif(!(e instanceof CompilerException))\n-\t\t\tthrow new CompilerException((String) SOURCE.deref(), (Integer) LINE.deref(), e);\n+\t\t\tthrow new CompilerException((String) SOURCE_PATH.deref(), (Integer) LINE.deref(), e);\n \t\telse\n \t\t\tthrow (CompilerException) e;\n \t\t}\n@@ -6434,7 +6434,7 @@\n \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n-\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n+\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{\n@@ -6653,7 +6653,7 @@\n \t\t}\n \tcatch(LispReader.ReaderException e)\n \t\t{\n-\t\tthrow new CompilerException(sourceName, e.line, e.getCause());\n+\t\tthrow new CompilerException(sourcePath, e.line, e.getCause());\n \t\t}\n \tfinally\n \t\t{\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 6437,
        "bugNodeStartChar": 190666,
        "bugNodeLength": 55,
        "fixLineNum": 6437,
        "fixNodeStartChar": 190666,
        "fixNodeLength": 55,
        "sourceBeforeFix": "new CompilerException(sourceName,e.line,e.getCause())",
        "sourceAfterFix": "new CompilerException(sourcePath,e.line,e.getCause())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913",
        "fixCommitParentSHA1": "46a3fbcb5cf35fbd18472658627a90a53be89ccf",
        "bugFilePath": "src/jvm/clojure/lang/RestFn.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/RestFn.java b/src/jvm/clojure/lang/RestFn.java\nindex e33d21f..e87c77f 100644\n--- a/src/jvm/clojure/lang/RestFn.java\n+++ b/src/jvm/clojure/lang/RestFn.java\n@@ -139,34 +139,34 @@\n \tswitch(reqArity)\r\n \t\t{\r\n \t\tcase 0:\r\n-\t\t\treturn invoke(args);\r\n+\t\t\treturn doInvoke(args);\r\n \t\tcase 1:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 2:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 3:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 4:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 5:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 6:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -174,7 +174,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -183,7 +183,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -193,7 +193,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -204,7 +204,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -216,7 +216,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -229,7 +229,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -243,7 +243,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -258,7 +258,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -274,7 +274,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -291,7 +291,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -309,7 +309,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -328,7 +328,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -348,7 +348,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -369,7 +369,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 232,
        "bugNodeStartChar": 8686,
        "bugNodeLength": 447,
        "fixLineNum": 232,
        "fixNodeStartChar": 8455,
        "fixNodeLength": 437,
        "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())",
        "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "20420fc6ee153c7171265dda7bf7d593c17fb375",
        "fixCommitParentSHA1": "70475b367d0dfcf2d467ba3d15ccb544b6076a73",
        "bugFilePath": "flink-runtime/src/main/java/org/apache/flink/runtime/blob/BlobUtils.java",
        "fixPatch": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/blob/BlobUtils.java b/flink-runtime/src/main/java/org/apache/flink/runtime/blob/BlobUtils.java\nindex 136df09..aeaa602 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/blob/BlobUtils.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/blob/BlobUtils.java\n@@ -124,7 +124,7 @@\n \tprivate static File getCacheDirectory(File storageDir) {\n \t\tfinal File cacheDirectory = new File(storageDir, \"cache\");\n \n-\t\tif (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {\n+\t\tif (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {\n \t\t\tthrow new RuntimeException(\"Could not create cache directory '\" + cacheDirectory.getAbsolutePath() + \"'.\");\n \t\t}\n \n",
        "projectName": "apache.flink",
        "bugLineNum": 127,
        "bugNodeStartChar": 3949,
        "bugNodeLength": 23,
        "fixLineNum": 127,
        "fixNodeStartChar": 3949,
        "fixNodeLength": 23,
        "sourceBeforeFix": "cacheDirectory.exists()",
        "sourceAfterFix": "cacheDirectory.mkdirs()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "01652fca46c0149bb14ed9f159224213175c30d7",
        "fixCommitParentSHA1": "26017367786d5a149bcce98bd68b1ea15e5e7520",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\nindex 8c3fbc4..70b5065 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n@@ -53,7 +53,7 @@\n     private final boolean closeError;\n \n     /** Formatter for the log message. */\n-    private final AuditEvemtFormatter formatter;\n+    private final AuditEventFormatter formatter;\n \n     /**\n      * Creates a new {@code DefaultLogger} instance.\n@@ -93,7 +93,7 @@\n                          boolean closeInfoAfterUse,\n                          OutputStream errorStream,\n                          boolean closeErrorAfterUse,\n-                         AuditEvemtFormatter messageFormatter) {\n+                         AuditEventFormatter messageFormatter) {\n         closeInfo = closeInfoAfterUse;\n         closeError = closeErrorAfterUse;\n         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 55,
        "bugNodeStartChar": 2271,
        "bugNodeLength": 86,
        "fixLineNum": 55,
        "fixNodeStartChar": 2271,
        "fixNodeLength": 86,
        "sourceBeforeFix": "/**   * Formatter for the log message.   */ private final AuditEvemtFormatter formatter; ",
        "sourceAfterFix": "/**   * Formatter for the log message.   */ private final AuditEventFormatter formatter; "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "41467c8004b716fb78002c3139ea771b70ed165d",
        "fixCommitParentSHA1": "22cc1f679312b3222cf3f460afa62f76a63c4c2f",
        "bugFilePath": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\nindex eda0d0e..7071518 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Label.java\n@@ -207,7 +207,7 @@\n \t\t\tbatch.setColor(color.r, color.g, color.b, color.a * parentAlpha);\r\n \t\t\tstyle.background.draw(batch, getX(), getY(), getWidth(), getHeight());\r\n \t\t}\r\n-\t\tcache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));\r\n+\t\tcache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor));\r\n \t\tcache.setPosition(getX(), getY());\r\n \t\tcache.draw(batch, parentAlpha);\r\n \t}\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 210,
        "bugNodeStartChar": 7388,
        "bugNodeLength": 91,
        "fixLineNum": 210,
        "fixNodeStartChar": 7179,
        "fixNodeLength": 92,
        "sourceBeforeFix": "cache.setColor(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))",
        "sourceAfterFix": "cache.setColors(style.fontColor == null ? color : Color.tmp.set(color).mul(style.fontColor))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c1360673a472a8ae6b8674992f95f799f866a79f",
        "fixCommitParentSHA1": "d71ad13d452665185ddca9ff9d13685381a30f9a",
        "bugFilePath": "camel-core/src/main/java/org/apache/camel/builder/AdviceWithBuilder.java",
        "fixPatch": "diff --git a/camel-core/src/main/java/org/apache/camel/builder/AdviceWithBuilder.java b/camel-core/src/main/java/org/apache/camel/builder/AdviceWithBuilder.java\nindex b89ffa5..403d744 100644\n--- a/camel-core/src/main/java/org/apache/camel/builder/AdviceWithBuilder.java\n+++ b/camel-core/src/main/java/org/apache/camel/builder/AdviceWithBuilder.java\n@@ -149,7 +149,7 @@\n         } else if (toString != null) {\n             builder.getAdviceWithTasks().add(AdviceWithTasks.removeByToString(route, toString, selectLast, selectFirst, selectFrom, selectTo, maxDeep));\n         } else if (type != null) {\n-            builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectFirst, selectFrom, selectTo, maxDeep));\n+            builder.getAdviceWithTasks().add(AdviceWithTasks.removeByType(route, type, selectFirst, selectLast, selectFrom, selectTo, maxDeep));\n         }\n     }\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 152,
        "bugNodeStartChar": 5600,
        "bugNodeLength": 98,
        "fixLineNum": 152,
        "fixNodeStartChar": 5600,
        "fixNodeLength": 97,
        "sourceBeforeFix": "AdviceWithTasks.removeByType(route,type,selectFirst,selectFirst,selectFrom,selectTo,maxDeep)",
        "sourceAfterFix": "AdviceWithTasks.removeByType(route,type,selectFirst,selectLast,selectFrom,selectTo,maxDeep)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "25c95d8dd9ec2d4e712aaeccedec306be41a3c8a",
        "fixCommitParentSHA1": "b04e6a3cbd6ab891caaf65c65c8011a96878668a",
        "bugFilePath": "hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableInputFormatBase.java",
        "fixPatch": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableInputFormatBase.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableInputFormatBase.java\nindex 783ade9..e23ea37 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableInputFormatBase.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/TableInputFormatBase.java\n@@ -190,7 +190,7 @@\n       try {\n         regionLocation = reverseDNS(regionAddress);\n       } catch (NamingException e) {\n-        LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n+        LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \" + e);\n         regionLocation = location.getHostname();\n       }\n \n",
        "projectName": "apache.hbase",
        "bugLineNum": 193,
        "bugNodeStartChar": 7600,
        "bugNodeLength": 83,
        "fixLineNum": 193,
        "fixNodeStartChar": 7600,
        "fixNodeLength": 82,
        "sourceBeforeFix": "LOG.error(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)",
        "sourceAfterFix": "LOG.warn(\"Cannot resolve the host name for \" + regionAddress + \" because of \"+ e)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "d039be568920d4aa4ef836f6b323faec909f965a",
        "fixCommitParentSHA1": "9b03e0cc5e3e6f477063029bbde58a96f7b34325",
        "bugFilePath": "ee/src/main/java/org/jboss/as/ee/EeMessages.java",
        "fixPatch": "diff --git a/ee/src/main/java/org/jboss/as/ee/EeMessages.java b/ee/src/main/java/org/jboss/as/ee/EeMessages.java\nindex f74cee2..a71dd6a 100644\n--- a/ee/src/main/java/org/jboss/as/ee/EeMessages.java\n+++ b/ee/src/main/java/org/jboss/as/ee/EeMessages.java\n@@ -47,6 +47,13 @@\n import org.jboss.vfs.VirtualFile;\n \n /**\n+ * This module is using message IDs in the range 11000-11099 and 16700-16799.\n+ * <p/>\n+ * This file is using the subset 11025-11099 and 16700-16799 for non-logger messages.\n+ * <p/>\n+ * See <a href=\"http://community.jboss.org/docs/DOC-16810\">http://community.jboss.org/docs/DOC-16810</a> for the full\n+ * list of currently reserved JBAS message id blocks.\n+ * <p/>\n  * Date: 05.11.2011\n  *\n  * @author <a href=\"mailto:jperkins@redhat.com\">James R. Perkins</a>\n@@ -866,6 +873,6 @@\n     @Message(id = 11099, value = \"More than one message destination with name %s for binding %s destinations: %s\")\n     String moreThanOneMessageDestination(String name, String binding, Set<String> jndiNames);\n \n-    @Message(id = 11100, value = \"Failed to load jboss.properties\")\n+    @Message(id = 16700, value = \"Failed to load jboss.properties\")\n     DeploymentUnitProcessingException failedToLoadJbossProperties(@Cause IOException e);\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 869,
        "bugNodeStartChar": 35591,
        "bugNodeLength": 10,
        "fixLineNum": 869,
        "fixNodeStartChar": 35591,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=11100",
        "sourceAfterFix": "id=16700"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "6207b66e20a807c1cc74c914f2734c5dab5bfea7",
        "fixCommitParentSHA1": "953b96d0a436b2bd979c2aa6eecc3f636387633c",
        "bugFilePath": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java",
        "fixPatch": "diff --git a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\nindex 46eb02c..1690ef9 100644\n--- a/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\n+++ b/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java\n@@ -161,7 +161,7 @@\n \n     final PlannerConfig plannerConfig = new PlannerConfig();\n     final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n+    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n     final DruidOperatorTable operatorTable = new DruidOperatorTable(\n         ImmutableSet.of(new HllSketchSqlAggregator()),\n         ImmutableSet.of()\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 164,
        "bugNodeStartChar": 7599,
        "bugNodeLength": 56,
        "fixLineNum": 164,
        "fixNodeStartChar": 7599,
        "fixNodeLength": 71,
        "sourceBeforeFix": "CalciteTests.createMockSystemSchema(druidSchema,walker)",
        "sourceAfterFix": "CalciteTests.createMockSystemSchema(druidSchema,walker,plannerConfig)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9b86a4684080319a63970fbc4d8b49c4e8113df5",
        "fixCommitParentSHA1": "da2a7836c5cdf32a8ea95ef87c769744ae66d908",
        "bugFilePath": "src/main/java/com/alibaba/fastjson/JSONPath.java",
        "fixPatch": "diff --git a/src/main/java/com/alibaba/fastjson/JSONPath.java b/src/main/java/com/alibaba/fastjson/JSONPath.java\nindex 2553e33..15e81d1 100644\n--- a/src/main/java/com/alibaba/fastjson/JSONPath.java\n+++ b/src/main/java/com/alibaba/fastjson/JSONPath.java\n@@ -2189,7 +2189,7 @@\n                 FieldSerializer fieldDeser = beanSerializer.getFieldSerializer(propertyName);\n                 if (fieldDeser != null) {\n                     try {\n-                        Object val = fieldDeser.getPropertyValue(currentObject);\n+                        Object val = fieldDeser.getPropertyValueDirect(currentObject);\n                         results.add(val);\n                     } catch (InvocationTargetException ex) {\n                         throw new JSONException(\"getFieldValue error.\" + propertyName, ex);\n",
        "projectName": "alibaba.fastjson",
        "bugLineNum": 2192,
        "bugNodeStartChar": 71757,
        "bugNodeLength": 42,
        "fixLineNum": 2192,
        "fixNodeStartChar": 71757,
        "fixNodeLength": 48,
        "sourceBeforeFix": "fieldDeser.getPropertyValue(currentObject)",
        "sourceAfterFix": "fieldDeser.getPropertyValueDirect(currentObject)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "a068d0ce41a1e500671bdd0c5706378aeee3e840",
        "fixCommitParentSHA1": "7595058e4a9342af0da8d43b5ccf207c41631155",
        "bugFilePath": "src/main/java/redis/clients/jedis/JedisSentinelPool.java",
        "fixPatch": "diff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 05672f7..1140fdc 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -298,7 +298,7 @@\n             }\n           }, \"+switch-master\");\n \n-        } catch (JedisConnectionException e) {\n+        } catch (JedisException e) {\n \n           if (running.get()) {\n             log.log(Level.SEVERE, \"Lost connection to Sentinel at \" + host + \":\" + port\n",
        "projectName": "xetorthio.jedis",
        "bugLineNum": 301,
        "bugNodeStartChar": 10137,
        "bugNodeLength": 26,
        "fixLineNum": 301,
        "fixNodeStartChar": 10137,
        "fixNodeLength": 16,
        "sourceBeforeFix": "JedisConnectionException e",
        "sourceAfterFix": "JedisException e"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "51a15ac4a78ae570251ccc7c6a81b568663f1212",
        "fixCommitParentSHA1": "83c680850eded20e09b78393548798371564c938",
        "bugFilePath": "runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java",
        "fixPatch": "diff --git a/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java b/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\nindex 212f2d0..f6dffa8 100644\n--- a/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\n+++ b/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java\n@@ -335,7 +335,7 @@\n \t\t\ts = target; // flip; current DFA target becomes new src/from state\n \t\t}\n \n-\t\treturn failOrAccept(prevAccept, input, reach, t);\n+\t\treturn failOrAccept(prevAccept, input, closure, t);\n \t}\n \n \tprotected int failOrAccept(ExecState prevAccept, CharStream input,\n",
        "projectName": "antlr.antlr4",
        "bugLineNum": 338,
        "bugNodeStartChar": 10835,
        "bugNodeLength": 41,
        "fixLineNum": 338,
        "fixNodeStartChar": 10835,
        "fixNodeLength": 43,
        "sourceBeforeFix": "failOrAccept(prevAccept,input,reach,t)",
        "sourceAfterFix": "failOrAccept(prevAccept,input,closure,t)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a",
        "fixCommitParentSHA1": "c4a20abf032decffe74ade4d7df3787528e4edf3",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\nindex 19e868b..fbf1508 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java\n@@ -574,7 +574,7 @@\n         if (serializer != null) {\n             serializer.write(os, o);\n         } else {\n-            response.getOutputStream().write(o.toString().getBytes());\n+            response.getOutputStream().write(o.toString().getBytes(response.getCharacterEncoding()));\n         }\n         return this;\n     }\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 577,
        "bugNodeStartChar": 20517,
        "bugNodeLength": 23,
        "fixLineNum": 577,
        "fixNodeStartChar": 20517,
        "fixNodeLength": 54,
        "sourceBeforeFix": "o.toString().getBytes()",
        "sourceAfterFix": "o.toString().getBytes(response.getCharacterEncoding())"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "7b998a45ff6bd91e340027dc7d51c65f932e441b",
        "fixCommitParentSHA1": "30a79c41ab2fa3fe2d1d64b4f0773353aac59d60",
        "bugFilePath": "src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java",
        "fixPatch": "diff --git a/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java b/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java\nindex fdb88d4..bc06fee 100644\n--- a/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java\n+++ b/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java\n@@ -967,7 +967,7 @@\n             return false;\r\n         }\r\n \r\n-        if (\"LEVEL\".equalsIgnoreCase(ident)) {\r\n+        if (\"LEVEL\".equalsIgnoreCase(ident) || \"CONNECT_BY_ISCYCLE\".equalsIgnoreCase(ident)) {\r\n             SQLObject parent = x.getParent();\r\n             if (parent instanceof SQLSelectItem) {\r\n                 SQLObject parent2 = parent.getParent();\r\n",
        "projectName": "alibaba.druid",
        "bugLineNum": 970,
        "bugNodeStartChar": 32070,
        "bugNodeLength": 31,
        "fixLineNum": 970,
        "fixNodeStartChar": 31101,
        "fixNodeLength": 79,
        "sourceBeforeFix": "\"LEVEL\".equalsIgnoreCase(ident)",
        "sourceAfterFix": "\"LEVEL\".equalsIgnoreCase(ident) || \"CONNECT_BY_ISCYCLE\".equalsIgnoreCase(ident)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "7eef2314cb78d41def996cdd80c5a56c94a993f3",
        "fixCommitParentSHA1": "fba19ba73a93dcc2d18942b3cf4992ce010afdb2",
        "bugFilePath": "src/test/java/org/junit/tests/running/methods/TimeoutTest.java",
        "fixPatch": "diff --git a/src/test/java/org/junit/tests/running/methods/TimeoutTest.java b/src/test/java/org/junit/tests/running/methods/TimeoutTest.java\nindex 15efcd2..2cf7b95 100644\n--- a/src/test/java/org/junit/tests/running/methods/TimeoutTest.java\n+++ b/src/test/java/org/junit/tests/running/methods/TimeoutTest.java\n@@ -172,7 +172,7 @@\n                 if (fStall)\n                     for (; ; ) ;   \n                 try {\n-                    Thread.sleep (50);\n+                    Thread.sleep (500);\n                 } catch (InterruptedException e) {\n                 }\n             }\n",
        "projectName": "junit-team.junit",
        "bugLineNum": 175,
        "bugNodeStartChar": 5912,
        "bugNodeLength": 17,
        "fixLineNum": 175,
        "fixNodeStartChar": 5912,
        "fixNodeLength": 18,
        "sourceBeforeFix": "Thread.sleep(50)",
        "sourceAfterFix": "Thread.sleep(500)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "01fec049c0fb6b1c326d802687f3093b502123e0",
        "fixCommitParentSHA1": "cf8a65b329bdb4684c8afbc15913c02f38b48bec",
        "bugFilePath": "web/src/main/java/org/openmrs/web/Listener.java",
        "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/Listener.java b/web/src/main/java/org/openmrs/web/Listener.java\nindex dd63212..4a15bd5 100644\n--- a/web/src/main/java/org/openmrs/web/Listener.java\n+++ b/web/src/main/java/org/openmrs/web/Listener.java\n@@ -243,7 +243,7 @@\n \t\t\t// start the scheduled tasks\r\n \t\t\tSchedulerUtil.startup(getRuntimeProperties());\r\n \t\t}\r\n-\t\tcatch (Throwable t) {\r\n+\t\tcatch (Exception t) {\r\n \t\t\tContext.shutdown();\r\n \t\t\tWebModuleUtil.shutdownModules(servletContext);\r\n \t\t\tthrow new ServletException(t);\r\n@@ -558,7 +558,7 @@\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n-\t\tcatch (Throwable e) {\r\n+\t\tcatch (Exception e) {\r\n \t\t\tSystem.err.println(\"Listener.contextDestroyed: Failed to cleanup drivers in webapp\");\r\n \t\t\te.printStackTrace();\r\n \t\t}\r\n@@ -592,7 +592,7 @@\n \t * @throws ModuleMustStartException if the context cannot restart due to a\r\n \t *             {@link MandatoryModuleException} or {@link OpenmrsCoreModuleException}\r\n \t */\r\n-\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Throwable {\r\n+\tpublic static void performWebStartOfModules(ServletContext servletContext) throws ModuleMustStartException, Exception {\r\n \t\tLog log = LogFactory.getLog(Listener.class);\r\n \t\t\r\n \t\tList<Module> startedModules = new ArrayList<Module>();\r\n@@ -632,7 +632,7 @@\n \t\t\t\t\t\t\ttry {\r\n \t\t\t\t\t\t\t\tModuleFactory.stopModule(mod, true, true);\r\n \t\t\t\t\t\t\t}\r\n-\t\t\t\t\t\t\tcatch (Throwable t3) {\r\n+\t\t\t\t\t\t\tcatch (Exception t3) {\r\n \t\t\t\t\t\t\t\t// just keep going if we get an error shutting down.  was probably caused by the module \r\n \t\t\t\t\t\t\t\t// that actually got us to this point!\r\n \t\t\t\t\t\t\t\tlog.trace(\"Unable to shutdown module:\" + mod, t3);\r\n@@ -646,7 +646,7 @@\n \t\t\t\t\tthrow new MandatoryModuleException(ex.getModuleId(), \"Got an error while starting a mandatory module: \"\r\n \t\t\t\t\t        + e.getMessage() + \". Check the server logs for more information\");\r\n \t\t\t\t}\r\n-\t\t\t\tcatch (Throwable t2) {\r\n+\t\t\t\tcatch (Exception t2) {\r\n \t\t\t\t\t// a mandatory or core module is causing spring to fail to start up.  We don't want those\r\n \t\t\t\t\t// stopped so we must report this error to the higher authorities\r\n \t\t\t\t\tlog.warn(\"caught another error: \", t2);\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 635,
        "bugNodeStartChar": 23120,
        "bugNodeLength": 12,
        "fixLineNum": 635,
        "fixNodeStartChar": 22486,
        "fixNodeLength": 12,
        "sourceBeforeFix": "Throwable t3",
        "sourceAfterFix": "Exception t3"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "7d5e825abd68a4ffcb86865149b917edf76a47b6",
        "fixCommitParentSHA1": "193474f51804bf6255bfcec58befcb1dc8ff8329",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\nindex 93b2823..5f4f3f0 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java\n@@ -566,7 +566,7 @@\n     public static JavadocTagInfo fromText(final String text)\n     {\n         if (text == null) {\n-            throw new NullPointerException(\"the text is null\");\n+            throw new IllegalArgumentException(\"the text is null\");\n         }\n \n         final JavadocTagInfo tag = TEXT_TO_TAG.get(text);\n@@ -590,7 +590,7 @@\n     public static JavadocTagInfo fromName(final String name)\n     {\n         if (name == null) {\n-            throw new NullPointerException(\"the name is null\");\n+            throw new IllegalArgumentException(\"the name is null\");\n         }\n \n         final JavadocTagInfo tag = NAME_TO_TAG.get(name);\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 569,
        "bugNodeStartChar": 17792,
        "bugNodeLength": 44,
        "fixLineNum": 569,
        "fixNodeStartChar": 17792,
        "fixNodeLength": 48,
        "sourceBeforeFix": "new NullPointerException(\"the text is null\")",
        "sourceAfterFix": "new IllegalArgumentException(\"the text is null\")"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "f81170d3787c250ba3871577e77446dde5e98882",
        "fixCommitParentSHA1": "1c80e879c5613282117da0ba367ec182d651d034",
        "bugFilePath": "src/jvm/clojure/lang/Numbers.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/Numbers.java b/src/jvm/clojure/lang/Numbers.java\nindex b89ee0e..6912e62 100644\n--- a/src/jvm/clojure/lang/Numbers.java\n+++ b/src/jvm/clojure/lang/Numbers.java\n@@ -1493,7 +1493,7 @@\n     return clearBit(x,bitOpsCast(y));\n }\n static public long clearBit(long x, long n){\n-    return x & (1L << n);\n+    return x & ~(1L << n);\n }\n \n static public long setBit(Object x, Object y){\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 1496,
        "bugNodeStartChar": 33794,
        "bugNodeLength": 9,
        "fixLineNum": 1496,
        "fixNodeStartChar": 33794,
        "fixNodeLength": 10,
        "sourceBeforeFix": "(1L << n)",
        "sourceAfterFix": "~(1L << n)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "7dac3f1da5a04390d597b09fcc03ad08892a99d1",
        "fixCommitParentSHA1": "185193de3d44cab84a3fdc9b26d7fe8f3da54938",
        "bugFilePath": "app/models/MessagesService.java",
        "fixPatch": "diff --git a/app/models/MessagesService.java b/app/models/MessagesService.java\nindex 7be19c9..65a4ad0 100644\n--- a/app/models/MessagesService.java\n+++ b/app/models/MessagesService.java\n@@ -82,11 +82,11 @@\n         return Sets.newHashSet();\n     }\n \n-    public int total() {\n+    public long total() {\n         try {\n-            return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Integer>() {\n+            return Cache.getOrElse(TOTAL_CNT_CACHE_KEY, new Callable<Long>() {\n                 @Override\n-                public Integer call() throws Exception {\n+                public Long call() throws Exception {\n                     MessageCountResponse response = api.get(MessageCountResponse.class).path(\"/count/total\").execute();\n                     return response.events;\n                 }\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 87,
        "bugNodeStartChar": 3123,
        "bugNodeLength": 17,
        "fixLineNum": 87,
        "fixNodeStartChar": 3123,
        "fixNodeLength": 14,
        "sourceBeforeFix": "Callable<Integer>",
        "sourceAfterFix": "Callable<Long>"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "ae8511699a039b9a0b207b0699b32c2e7de72b83",
        "fixCommitParentSHA1": "4519fcc62fe227d1089e496e152545861d69e6da",
        "bugFilePath": "itest/src/edu/stanford/nlp/hcoref/DcorefChineseBenchmarkSlowITest.java",
        "fixPatch": "diff --git a/itest/src/edu/stanford/nlp/hcoref/DcorefChineseBenchmarkSlowITest.java b/itest/src/edu/stanford/nlp/hcoref/DcorefChineseBenchmarkSlowITest.java\nindex 9650222..9bc7b17 100644\n--- a/itest/src/edu/stanford/nlp/hcoref/DcorefChineseBenchmarkSlowITest.java\n+++ b/itest/src/edu/stanford/nlp/hcoref/DcorefChineseBenchmarkSlowITest.java\n@@ -105,23 +105,23 @@\n \n \n     setAll(lowResults, highResults, expectedResults, MENTION_TP, 12370);\n-    setLowHighExpected(lowResults, highResults, expectedResults, MENTION_F1, 55.5, 55.6, 55.7);\n+    setLowHighExpected(lowResults, highResults, expectedResults, MENTION_F1, 55.5, 55.7, 55.6);\n \n     setLowHighExpected(lowResults, highResults, expectedResults, MUC_TP, 5957, 5970, 5965);\n-    setAll(lowResults,highResults,expectedResults,MUC_F1,57.87);\n+    setLowHighExpected(lowResults, highResults, expectedResults, MUC_F1, 57.85, 57.90, 57.87);\n \n     setLowHighExpected(lowResults, highResults, expectedResults, BCUBED_TP, 6868.8, 6936.32, 6868.81);\n-    setAll(lowResults, highResults, expectedResults, BCUBED_F1,51.07);\n+    setLowHighExpected(lowResults, highResults, expectedResults, BCUBED_F1, 51.05, 51.10, 51.07);\n \n     setAll(lowResults, highResults, expectedResults, CEAFM_TP,8074);\n     setLowHighExpected(lowResults, highResults, expectedResults, CEAFM_F1, 54.75, 55.2, 54.79);\n \n     setAll(lowResults, highResults, expectedResults, CEAFE_TP, 2205.69);\n-    setLowHighExpected(lowResults, highResults, expectedResults, CEAFE_F1, 50.45, 50.61, 50.47);\n+    setLowHighExpected(lowResults, highResults, expectedResults, CEAFE_F1, 50.50, 50.65, 50.61);\n \n-    setAll(lowResults,highResults,expectedResults,BLANC_F1,46.19);\n+    setLowHighExpected(lowResults, highResults, expectedResults, BLANC_F1, 46.15, 46.25, 46.19);\n \n-    setAll(lowResults,highResults,expectedResults,CONLL_SCORE,53.19);\n+    setLowHighExpected(lowResults, highResults, expectedResults, CONLL_SCORE, 53.18, 53.20, 53.19);\n \n \n     Counter<String> results = new ClassicCounter<String>();\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 108,
        "bugNodeStartChar": 4631,
        "bugNodeLength": 90,
        "fixLineNum": 108,
        "fixNodeStartChar": 4631,
        "fixNodeLength": 90,
        "sourceBeforeFix": "setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.6,55.7)",
        "sourceAfterFix": "setLowHighExpected(lowResults,highResults,expectedResults,MENTION_F1,55.5,55.7,55.6)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "76063c69b78baee602935b2296eeac234030b5de",
        "fixCommitParentSHA1": "5e589785faada0d4d7bd69b2646294d5feaa9d2f",
        "bugFilePath": "src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java",
        "fixPatch": "diff --git a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\nindex 26847e2..70edc5c 100644\n--- a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n+++ b/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java\n@@ -1754,7 +1754,7 @@\n                     requestTimeout = p.getRequestTimeoutInMs();\n                 }\n \n-                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n+                markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));\n                 abort(this.nettyResponseFuture, new TimeoutException(String.format(\"No response received after %s\", requestTimeout)));\n \n                 this.nettyResponseFuture = null;\n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 1757,
        "bugNodeStartChar": 77241,
        "bugNodeLength": 77,
        "fixLineNum": 1757,
        "fixNodeStartChar": 77241,
        "fixNodeLength": 86,
        "sourceBeforeFix": "finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))",
        "sourceAfterFix": "markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class))"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "9c64f9378143b6804c384f0333014b8f1cbd8edd",
        "fixCommitParentSHA1": "97b4750c6314eea9025b426e4df73f795b601927",
        "bugFilePath": "serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java",
        "fixPatch": "diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java\nindex 40ede1a..c65174e 100644\n--- a/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java\n+++ b/serde/src/java/org/apache/hadoop/hive/serde2/SerDeUtils.java\n@@ -555,6 +555,6 @@\n   }\n \n   public static Text transformTextFromUTF8(Text text, Charset targetCharset) {\n-    return new Text(new String(text.getBytes()).getBytes(targetCharset));\n+    return new Text(new String(text.getBytes(), 0, text.getLength()).getBytes(targetCharset));\n   }\n }\n",
        "projectName": "apache.hive",
        "bugLineNum": 558,
        "bugNodeStartChar": 18569,
        "bugNodeLength": 27,
        "fixLineNum": 558,
        "fixNodeStartChar": 18569,
        "fixNodeLength": 48,
        "sourceBeforeFix": "new String(text.getBytes())",
        "sourceAfterFix": "new String(text.getBytes(),0,text.getLength())"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "c60610c399277d16c94872e2279f861eb8ccd9b1",
        "fixCommitParentSHA1": "57449181445da09713b55f6424befee33b22c1ef",
        "bugFilePath": "DesktopImport/src/org/gephi/desktop/importer/DesktopImportControllerUI.java",
        "fixPatch": "diff --git a/DesktopImport/src/org/gephi/desktop/importer/DesktopImportControllerUI.java b/DesktopImport/src/org/gephi/desktop/importer/DesktopImportControllerUI.java\nindex 70cf4d1..64fb1b6 100644\n--- a/DesktopImport/src/org/gephi/desktop/importer/DesktopImportControllerUI.java\n+++ b/DesktopImport/src/org/gephi/desktop/importer/DesktopImportControllerUI.java\n@@ -175,7 +175,7 @@\n             }\n \n             //Execute task\n-            final String containerSource = \"Stream \" + importer;\n+            final String containerSource = \"Stream \" + importerName;\n             executor.execute(task, new Runnable() {\n \n                 public void run() {\n@@ -234,7 +234,7 @@\n             }\n \n             //Execute task\n-            final String containerSource = \"Stream \" + importer;\n+            final String containerSource = \"Stream \" + importerName;\n             executor.execute(task, new Runnable() {\n \n                 public void run() {\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 178,
        "bugNodeStartChar": 7436,
        "bugNodeLength": 20,
        "fixLineNum": 178,
        "fixNodeStartChar": 7436,
        "fixNodeLength": 24,
        "sourceBeforeFix": "\"Stream \" + importer",
        "sourceAfterFix": "\"Stream \" + importerName"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "303eb811e0432ef3e843c20cbc282a1bf0007d2a",
        "fixCommitParentSHA1": "335a4624222d73227748d19527adedb4430720be",
        "bugFilePath": "integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java",
        "fixPatch": "diff --git a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\nindex a66272e..005f315 100644\n--- a/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n+++ b/integration/yarn/src/test/java/tachyon/yarn/ApplicationMasterTest.java\n@@ -185,7 +185,7 @@\n   public void stopTest() throws Exception {\n     mMaster.stop();\n     Mockito.verify(mRMClient).unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED, \"\", \"\");\n-    Mockito.verify(mRMClient).start();\n+    Mockito.verify(mRMClient).stop();\n   }\n \n   /**\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 188,
        "bugNodeStartChar": 7880,
        "bugNodeLength": 33,
        "fixLineNum": 188,
        "fixNodeStartChar": 7880,
        "fixNodeLength": 32,
        "sourceBeforeFix": "Mockito.verify(mRMClient).start()",
        "sourceAfterFix": "Mockito.verify(mRMClient).stop()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "f182eeb947f4b1d1bed386a3a68bc24bdb575581",
        "fixCommitParentSHA1": "758a8ee794c284528a79d1ce1481b22a59320531",
        "bugFilePath": "connectors/apache-connector/src/test/java/org/glassfish/jersey/apache/connector/AsyncTest.java",
        "fixPatch": "diff --git a/connectors/apache-connector/src/test/java/org/glassfish/jersey/apache/connector/AsyncTest.java b/connectors/apache-connector/src/test/java/org/glassfish/jersey/apache/connector/AsyncTest.java\nindex 32a570a..7da1255 100644\n--- a/connectors/apache-connector/src/test/java/org/glassfish/jersey/apache/connector/AsyncTest.java\n+++ b/connectors/apache-connector/src/test/java/org/glassfish/jersey/apache/connector/AsyncTest.java\n@@ -1,7 +1,7 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n- * Copyright (c) 2013-2014 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013-2015 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development\n@@ -242,7 +242,7 @@\n \n         final int asyncTimeoutMultiplier = getAsyncTimeoutMultiplier();\n         LOGGER.info(\"Using async timeout multiplier: \" + asyncTimeoutMultiplier);\n-        assertThat(\"Async processing took too long.\", toc - tic, Matchers.lessThan(3 * AsyncResource.OPERATION_DURATION\n+        assertThat(\"Async processing took too long.\", toc - tic, Matchers.lessThan(4 * AsyncResource.OPERATION_DURATION\n                 * asyncTimeoutMultiplier));\n \n     }\n",
        "projectName": "jersey.jersey",
        "bugLineNum": 245,
        "bugNodeStartChar": 9853,
        "bugNodeLength": 77,
        "fixLineNum": 245,
        "fixNodeStartChar": 9853,
        "fixNodeLength": 77,
        "sourceBeforeFix": "3 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier",
        "sourceAfterFix": "4 * AsyncResource.OPERATION_DURATION * asyncTimeoutMultiplier"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "498da9e77cec4d5cb9dfbb1044cb9634f1ff0422",
        "fixCommitParentSHA1": "3e098f12e2b09d4954eeeaaf807e4ff6006a6929",
        "bugFilePath": "storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java",
        "fixPatch": "diff --git a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\nindex 1dda41c..b0116e2 100644\n--- a/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n+++ b/storm-server/src/main/java/org/apache/storm/daemon/supervisor/Slot.java\n@@ -381,7 +381,7 @@\n      * @return the updated dynamicState\n      */\n     private static DynamicState filterChangingBlobsFor(DynamicState dynamicState, final LocalAssignment assignment) {\n-        if (!dynamicState.changingBlobs.isEmpty()) {\n+        if (dynamicState.changingBlobs.isEmpty()) {\n             return dynamicState;\n         }\n \n",
        "projectName": "apache.storm",
        "bugLineNum": 384,
        "bugNodeStartChar": 18466,
        "bugNodeLength": 37,
        "fixLineNum": 384,
        "fixNodeStartChar": 18466,
        "fixNodeLength": 36,
        "sourceBeforeFix": "!dynamicState.changingBlobs.isEmpty()",
        "sourceAfterFix": "dynamicState.changingBlobs.isEmpty()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "b1aa0100b3f37551bcd8507d168449d8b03c5c57",
        "fixCommitParentSHA1": "5fee5e8382579c75bf383897625e3c00ca05e14b",
        "bugFilePath": "DHNSGraph/src/org/gephi/graph/dhns/core/StructureModifier.java",
        "fixPatch": "diff --git a/DHNSGraph/src/org/gephi/graph/dhns/core/StructureModifier.java b/DHNSGraph/src/org/gephi/graph/dhns/core/StructureModifier.java\nindex a91b507..76cf514 100644\n--- a/DHNSGraph/src/org/gephi/graph/dhns/core/StructureModifier.java\n+++ b/DHNSGraph/src/org/gephi/graph/dhns/core/StructureModifier.java\n@@ -72,7 +72,7 @@\n             expand(view, absNode);\n         //sightManager.updateSight((SightImpl) sight);\n         }\n-        graphVersion.incNodeVersion();\n+        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }\n@@ -94,7 +94,7 @@\n             retract(view, ((AbstractNode) node));\n         //sightManager.updateSight((SightImpl)sight);\n         }\n-        graphVersion.incNodeVersion();\n+        graphVersion.incNodeAndEdgeVersion();\n         dhns.getWriteLock().unlock();\n         dhns.getEventManager().fireEvent(EventType.NODES_AND_EDGES_UPDATED);\n     }\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 75,
        "bugNodeStartChar": 2610,
        "bugNodeLength": 29,
        "fixLineNum": 75,
        "fixNodeStartChar": 2610,
        "fixNodeLength": 36,
        "sourceBeforeFix": "graphVersion.incNodeVersion()",
        "sourceAfterFix": "graphVersion.incNodeAndEdgeVersion()"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "52194cf080a8363b250b8f6c0fcb88c11e639122",
        "fixCommitParentSHA1": "f5104ee186b71432cd258cff5254fbeff07ce0aa",
        "bugFilePath": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/CompilerOptions.java b/src/com/google/javascript/jscomp/CompilerOptions.java\nindex b3d18b6..82d01b4 100644\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n@@ -215,13 +215,13 @@\n   private boolean useNewTypeInference;\n \n   /**\n-   * Several passes after type checking use type information. Some of these passes do not work\n-   * yet with the new type inference. For this reason, we run the old type checker after NTI,\n-   * so that the subsequent passes can use the old types.\n-   * Turning this option off allows us to debug NTI-only builds; with the goal to eventually\n-   * stop running OTI after NTI.\n+   * Several passes after type checking use type information. We have converted all these passes\n+   * to use TypeI, and most users of NTI use NTI types throughout their compilation.\n+   * But there are a few NTI users that still use the old mode, where OTI runs after NTI\n+   * and the optimizations see the old types. We plan to switch these users to NTI-only builds\n+   * and delete this option.\n    */\n-  private boolean runOTIafterNTI = true;\n+  private boolean runOTIafterNTI = false;\n \n   /**\n    * Relevant only when {@link #useNewTypeInference} is true, where we normally disable OTI errors.\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 224,
        "bugNodeStartChar": 7028,
        "bugNodeLength": 21,
        "fixLineNum": 224,
        "fixNodeStartChar": 7028,
        "fixNodeLength": 22,
        "sourceBeforeFix": "runOTIafterNTI=true",
        "sourceAfterFix": "runOTIafterNTI=false"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "43835eac144a13881b45d63bed0bfcd0147fc506",
        "fixCommitParentSHA1": "0b91f4a60b28e234b805a748ddcb2be06b3f9c4e",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\nindex f71fbb6..0070991 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java\n@@ -277,7 +277,7 @@\n     @Override\n     public void locate(String uuid, Async async) {\n         AtmosphereResource r = find(uuid);\n-        if (uuid != null) {\n+        if (r != null) {\n             async.available(r);\n         }\n     }\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 280,
        "bugNodeStartChar": 11318,
        "bugNodeLength": 12,
        "fixLineNum": 280,
        "fixNodeStartChar": 11318,
        "fixNodeLength": 9,
        "sourceBeforeFix": "uuid != null",
        "sourceAfterFix": "r != null"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "2f892430d9908b1676a2f7138f38c62547744f18",
        "fixCommitParentSHA1": "4878e35fe056ca42b3a52f08273c7d1878440518",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\nindex 72bc913..d2e24c0 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java\n@@ -869,7 +869,7 @@\n                 operatorSignature = functionRegistry.resolveOperator(operatorType, argumentTypes.build());\n             }\n             catch (OperatorNotFoundException e) {\n-                throw new SemanticException(TYPE_MISMATCH, node, e.getMessage());\n+                throw new SemanticException(TYPE_MISMATCH, node, \"%s\", e.getMessage());\n             }\n \n             for (int i = 0; i < arguments.length; i++) {\n",
        "projectName": "facebook.presto",
        "bugLineNum": 872,
        "bugNodeStartChar": 37905,
        "bugNodeLength": 58,
        "fixLineNum": 872,
        "fixNodeStartChar": 37905,
        "fixNodeLength": 64,
        "sourceBeforeFix": "new SemanticException(TYPE_MISMATCH,node,e.getMessage())",
        "sourceAfterFix": "new SemanticException(TYPE_MISMATCH,node,\"%s\",e.getMessage())"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "9e383f401a22ab6c7085d7cb2e949ad11f020e8b",
        "fixCommitParentSHA1": "89ce79eafb05ca594ef43c811f3dc304d4bf19ab",
        "bugFilePath": "components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java",
        "fixPatch": "diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java\nindex bf7d324..1dee194 100644\n--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java\n+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java\n@@ -171,7 +171,7 @@\n                                                           DataFormat.class);\n         boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class));\n         // propagate attachments if the data format is not POJO with MTOM enabled\n-        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && !isXop)) {\n+        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {\n             // propagate attachments\n             for (Attachment attachment : cxfMessage.getAttachments()) {\n                 camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler());\n",
        "projectName": "apache.camel",
        "bugLineNum": 174,
        "bugNodeStartChar": 7626,
        "bugNodeLength": 6,
        "fixLineNum": 174,
        "fixNodeStartChar": 7626,
        "fixNodeLength": 5,
        "sourceBeforeFix": "!isXop",
        "sourceAfterFix": "isXop"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "27c47507803729774b54977844d54495cfcb5b3b",
        "fixCommitParentSHA1": "bdfeccd092b3e0155715d338d851452f90c2eba9",
        "bugFilePath": "server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java",
        "fixPatch": "diff --git a/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java b/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\nindex 5f17601..2ab8265 100644\n--- a/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\n+++ b/server/src/test/java/io/druid/server/shard/HashBasedNumberedShardSpecTest.java\n@@ -196,8 +196,9 @@\n   }\n \n   @Test\n-  public void testValidity(){\n-    for(int i=Integer.MIN_VALUE;i<=Integer.MAX_VALUE;i++){\n+  public void testValidity()\n+  {\n+    for (int i = Integer.MIN_VALUE; i < Integer.MAX_VALUE; i++) {\n       {\n         int partitionNum = Math.abs((int) ((long) i % 2));\n         if(partitionNum != 0 && partitionNum != 1){\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 200,
        "bugNodeStartChar": 5541,
        "bugNodeLength": 20,
        "fixLineNum": 201,
        "fixNodeStartChar": 5548,
        "fixNodeLength": 21,
        "sourceBeforeFix": "i <= Integer.MAX_VALUE",
        "sourceAfterFix": "i < Integer.MAX_VALUE"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "98e7fe490c342853f703b473cc6bf19fb175b7db",
        "fixCommitParentSHA1": "d38e41f9c55acd76241a42993fa66efc73977e1b",
        "bugFilePath": "FiltersPlugin/src/org/gephi/filters/plugin/graph/EgoBuilder.java",
        "fixPatch": "diff --git a/FiltersPlugin/src/org/gephi/filters/plugin/graph/EgoBuilder.java b/FiltersPlugin/src/org/gephi/filters/plugin/graph/EgoBuilder.java\nindex ecdbe0f..4278a08 100644\n--- a/FiltersPlugin/src/org/gephi/filters/plugin/graph/EgoBuilder.java\n+++ b/FiltersPlugin/src/org/gephi/filters/plugin/graph/EgoBuilder.java\n@@ -90,7 +90,7 @@\n             for (Node n : graph.getNodes()) {\n                 if (n.getNodeData().getId().toLowerCase().contains(str)) {\n                     nodes.add(n);\n-                } else if (n.getNodeData().getLabel().toLowerCase().contains(str)) {\n+                } else if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().contains(str)) {\n                     nodes.add(n);\n                 }\n             }\n@@ -130,7 +130,7 @@\n         }\n \n         public String getName() {\n-            return NbBundle.getMessage(DegreeRangeBuilder.class, \"EgoBuilder.name\");\n+            return NbBundle.getMessage(EgoBuilder.class, \"EgoBuilder.name\");\n         }\n \n         public FilterProperty[] getProperties() {\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 133,
        "bugNodeStartChar": 3954,
        "bugNodeLength": 24,
        "fixLineNum": 133,
        "fixNodeStartChar": 3954,
        "fixNodeLength": 16,
        "sourceBeforeFix": "DegreeRangeBuilder.class",
        "sourceAfterFix": "EgoBuilder.class"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "1c93b2a8d7e7dc8d7a1620c5566e7eb20df8f0ec",
        "fixCommitParentSHA1": "b41598db1c05160ebaf543f4b78dc11fd8c17f88",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/util/StopWatchTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/util/StopWatchTest.java b/camel-core/src/test/java/org/apache/camel/util/StopWatchTest.java\nindex e83e2ba..38b7bf2 100644\n--- a/camel-core/src/test/java/org/apache/camel/util/StopWatchTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/util/StopWatchTest.java\n@@ -29,7 +29,7 @@\n         long taken = watch.stop();\n \n         assertEquals(taken, watch.taken());\n-        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n+        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n \n     public void testStopWatchNotStarted() throws Exception {\n@@ -42,7 +42,7 @@\n         taken = watch.stop();\n \n         assertEquals(taken, watch.taken());\n-        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n+        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n     }\n \n     public void testStopWatchRestart() throws Exception {\n@@ -51,14 +51,14 @@\n         long taken = watch.stop();\n \n         assertEquals(taken, watch.taken());\n-        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 190);\n+        assertTrue(\"Should take approx 200 millis, was: \" + taken, taken > 150);\n \n         watch.restart();\n         Thread.sleep(100);\n         taken = watch.stop();\n \n         assertEquals(taken, watch.taken());\n-        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 90);\n+        assertTrue(\"Should take approx 100 millis, was: \" + taken, taken > 50);\n     }\n \n     public void testStopWatchTaken() throws Exception {\n",
        "projectName": "apache.camel",
        "bugLineNum": 61,
        "bugNodeStartChar": 2113,
        "bugNodeLength": 10,
        "fixLineNum": 61,
        "fixNodeStartChar": 2113,
        "fixNodeLength": 10,
        "sourceBeforeFix": "taken > 90",
        "sourceAfterFix": "taken > 50"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "d41544432198f27825f44e650aa0190cf280e8ff",
        "fixCommitParentSHA1": "559273d2e4e240b5792767f9f61b479ed3e9fe2b",
        "bugFilePath": "src/test/java/com/ning/http/client/async/PostWithQSTest.java",
        "fixPatch": "diff --git a/src/test/java/com/ning/http/client/async/PostWithQSTest.java b/src/test/java/com/ning/http/client/async/PostWithQSTest.java\nindex 9e16598..b40b132 100644\n--- a/src/test/java/com/ning/http/client/async/PostWithQSTest.java\n+++ b/src/test/java/com/ning/http/client/async/PostWithQSTest.java\n@@ -41,7 +41,7 @@\n             if (\"POST\".equalsIgnoreCase(request.getMethod())) {\n                 String qs = request.getQueryString();\n                 ServletInputStream is = request.getInputStream();\n-                if (qs != null && !qs.isEmpty() && is.available() == 3) {\n+                if (qs != null && !qs.equals(\"\") && is.available() == 3) {\n                     response.setStatus(HttpServletResponse.SC_OK);\n                     byte buf[] = new byte[is.available()];\n                     is.readLine(buf, 0, is.available());\n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 44,
        "bugNodeStartChar": 1628,
        "bugNodeLength": 12,
        "fixLineNum": 44,
        "fixNodeStartChar": 1628,
        "fixNodeLength": 13,
        "sourceBeforeFix": "qs.isEmpty()",
        "sourceAfterFix": "qs.equals(\"\")"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "e7d4575d49668d1877d9ecdccb9f5d422b2b1a49",
        "fixCommitParentSHA1": "3e274401f4820232698a0d7605911d75fdb14ca6",
        "bugFilePath": "bootstrap/src/main/java/com/navercorp/pinpoint/bootstrap/interceptor/InterceptorRegistry.java",
        "fixPatch": "diff --git a/bootstrap/src/main/java/com/navercorp/pinpoint/bootstrap/interceptor/InterceptorRegistry.java b/bootstrap/src/main/java/com/navercorp/pinpoint/bootstrap/interceptor/InterceptorRegistry.java\nindex 7e64485..790e2cd 100644\n--- a/bootstrap/src/main/java/com/navercorp/pinpoint/bootstrap/interceptor/InterceptorRegistry.java\n+++ b/bootstrap/src/main/java/com/navercorp/pinpoint/bootstrap/interceptor/InterceptorRegistry.java\n@@ -13,7 +13,7 @@\n \r\n     public static final InterceptorRegistry REGISTRY = new InterceptorRegistry();\r\n \r\n-    private final static int DEFAULT_MAX = 1024;\r\n+    private final static int DEFAULT_MAX = 4096;\n     private final int max;\r\n \r\n     private final AtomicInteger id = new AtomicInteger(0);\r\n@@ -38,7 +38,7 @@\n             return -1;\r\n         }\r\n         int newId = nextId();\r\n-        if (newId > max) {\r\n+        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r\n \r\n@@ -56,7 +56,7 @@\n             return -1;\r\n         }\r\n         int newId = nextId();\r\n-        if (newId > max) {\r\n+        if (newId >= max) {\n             throw new IndexOutOfBoundsException(\"size=\" + index.length + \" id=\" + id);\r\n         }\r\n \r\n",
        "projectName": "naver.pinpoint",
        "bugLineNum": 41,
        "bugNodeStartChar": 1258,
        "bugNodeLength": 11,
        "fixLineNum": 41,
        "fixNodeStartChar": 1218,
        "fixNodeLength": 12,
        "sourceBeforeFix": "newId > max",
        "sourceAfterFix": "newId >= max"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "4047754cadfeb091f73672117f54b8d0279020ac",
        "fixCommitParentSHA1": "8948f15f51b0a7d0c34cad23dcf57d330fa2ff16",
        "bugFilePath": "aws-java-sdk-cloudwatchmetrics/src/main/java/com/amazonaws/metrics/internal/cloudwatch/MetricUploaderThread.java",
        "fixPatch": "diff --git a/aws-java-sdk-cloudwatchmetrics/src/main/java/com/amazonaws/metrics/internal/cloudwatch/MetricUploaderThread.java b/aws-java-sdk-cloudwatchmetrics/src/main/java/com/amazonaws/metrics/internal/cloudwatch/MetricUploaderThread.java\nindex 542c669..ae09584 100644\n--- a/aws-java-sdk-cloudwatchmetrics/src/main/java/com/amazonaws/metrics/internal/cloudwatch/MetricUploaderThread.java\n+++ b/aws-java-sdk-cloudwatchmetrics/src/main/java/com/amazonaws/metrics/internal/cloudwatch/MetricUploaderThread.java\n@@ -50,7 +50,7 @@\n \t\t\tamazonCloudWatchClient = new AmazonCloudWatchClient(config.getCredentialsProvider());\n \t\t} else if (config.getClientConfiguration() != null && config.getCredentialsProvider() == null) {\n \t\t\tamazonCloudWatchClient = new AmazonCloudWatchClient(config.getClientConfiguration());\n-\t\t} else if (config.getClientConfiguration() != null && config.getCredentialsProvider() == null) {\n+\t\t} else if (config.getClientConfiguration() != null && config.getCredentialsProvider() != null) {\n \t\t\tamazonCloudWatchClient = new AmazonCloudWatchClient(config.getCredentialsProvider(),\n \t\t\t\t\tconfig.getClientConfiguration());\n \t\t}\n",
        "projectName": "aws.aws-sdk-java",
        "bugLineNum": 53,
        "bugNodeStartChar": 2476,
        "bugNodeLength": 39,
        "fixLineNum": 53,
        "fixNodeStartChar": 2476,
        "fixNodeLength": 39,
        "sourceBeforeFix": "config.getCredentialsProvider() == null",
        "sourceAfterFix": "config.getCredentialsProvider() != null"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "d8d9e5711a908603f73f92872b127fe4d7ab4a15",
        "fixCommitParentSHA1": "cd6414e41c13cab60abb983a480dd9be2e7c389a",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/management/ManagedProducerRouteAddRemoveRegisterAlwaysTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/management/ManagedProducerRouteAddRemoveRegisterAlwaysTest.java b/camel-core/src/test/java/org/apache/camel/management/ManagedProducerRouteAddRemoveRegisterAlwaysTest.java\nindex f774bf6..55bd69f 100644\n--- a/camel-core/src/test/java/org/apache/camel/management/ManagedProducerRouteAddRemoveRegisterAlwaysTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/management/ManagedProducerRouteAddRemoveRegisterAlwaysTest.java\n@@ -29,7 +29,7 @@\n  */\n public class ManagedProducerRouteAddRemoveRegisterAlwaysTest extends ManagementTestSupport {\n \n-    private int services = 8;\n+    private int services = 9;\n \n     @Override\n     protected CamelContext createCamelContext() throws Exception {\n",
        "projectName": "apache.camel",
        "bugLineNum": 32,
        "bugNodeStartChar": 1206,
        "bugNodeLength": 12,
        "fixLineNum": 32,
        "fixNodeStartChar": 1206,
        "fixNodeLength": 12,
        "sourceBeforeFix": "services=8",
        "sourceAfterFix": "services=9"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "123e2eb64c4d5a57a8841576ffae66c0dcd2afa1",
        "fixCommitParentSHA1": "6bde1ed74a68d1a1ffccf127b5f06049da7062f2",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/RexNodeConverter.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/RexNodeConverter.java b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/RexNodeConverter.java\nindex f53739d..39ff591 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/RexNodeConverter.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/optimizer/calcite/translator/RexNodeConverter.java\n@@ -337,7 +337,7 @@\n         // If it is a floor <date> operator, we need to rewrite it\n         childRexNodeLst = rewriteFloorDateChildren(calciteOp, childRexNodeLst);\n       }\n-      expr = cluster.getRexBuilder().makeCall(calciteOp, childRexNodeLst);\n+      expr = cluster.getRexBuilder().makeCall(retType, calciteOp, childRexNodeLst);\n     } else {\n       retType = expr.getType();\n     }\n",
        "projectName": "apache.hive",
        "bugLineNum": 340,
        "bugNodeStartChar": 16595,
        "bugNodeLength": 60,
        "fixLineNum": 340,
        "fixNodeStartChar": 16595,
        "fixNodeLength": 69,
        "sourceBeforeFix": "cluster.getRexBuilder().makeCall(calciteOp,childRexNodeLst)",
        "sourceAfterFix": "cluster.getRexBuilder().makeCall(retType,calciteOp,childRexNodeLst)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "41e1d069bfa275a85a4a963c2ec5f437570f76f4",
        "fixCommitParentSHA1": "c739a779b8f03cc21665d1f0d877de62ffaabc9f",
        "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java",
        "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\nindex ff0bf09..d1f8242 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n@@ -194,7 +194,7 @@\n \t\t\t}\n \t\t}\n \n-\t\tCollection<Item> items = Collections.synchronizedCollection(new HashSet<Item>());\n+\t\tCollection<Item> items = Collections.synchronizedCollection(new ArrayList<Item>());\n \t\titemMap.put(provider, items);\n \n \t\tfor(Item item : provider.getItems()) {\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 197,
        "bugNodeStartChar": 6911,
        "bugNodeLength": 13,
        "fixLineNum": 197,
        "fixNodeStartChar": 6911,
        "fixNodeLength": 15,
        "sourceBeforeFix": "HashSet<Item>",
        "sourceAfterFix": "ArrayList<Item>"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "b78919c729be298474c00bd8a3504160408dcfc2",
        "fixCommitParentSHA1": "ae5a4ff54ceaa6d28a305f057cfecd62b067461a",
        "bugFilePath": "processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java",
        "fixPatch": "diff --git a/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java b/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\nindex b31ff2b..d1497a1 100644\n--- a/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\n+++ b/processing/src/test/java/io/druid/query/timeseries/TimeseriesQueryRunnerBonusTest.java\n@@ -90,7 +90,7 @@\n     final QueryRunnerFactory factory = TimeseriesQueryRunnerFactory.create();\n     final QueryRunner<Result<TimeseriesResultValue>> runner = makeQueryRunner(\n         factory,\n-        new IncrementalIndexSegment(index)\n+        new IncrementalIndexSegment(index, null)\n     );\n \n     TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 93,
        "bugNodeStartChar": 3586,
        "bugNodeLength": 34,
        "fixLineNum": 93,
        "fixNodeStartChar": 3586,
        "fixNodeLength": 40,
        "sourceBeforeFix": "new IncrementalIndexSegment(index)",
        "sourceAfterFix": "new IncrementalIndexSegment(index,null)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "ca2867e682778681afb334782cde94bef96202c1",
        "fixCommitParentSHA1": "8abe168cfceba16d36fb111c20af1ec2206e6d90",
        "bugFilePath": "test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java",
        "fixPatch": "diff --git a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\nindex 3dfb0fc..17d01ee 100644\n--- a/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n+++ b/test/com/google/javascript/jscomp/lint/CheckRequiresAndProvidesSortedTest.java\n@@ -62,9 +62,7 @@\n   }\n \n   public void testWarning_require() {\n-    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-        + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\");\n+    testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\", REQUIRES_NOT_SORTED);\n \n     testWarning(\"goog.require('a.c');\\ngoog.require('a')\", REQUIRES_NOT_SORTED);\n   }\n@@ -75,17 +73,7 @@\n             \"goog.require('a.c');\",\n             \"/** @suppress {extraRequire} */\",\n             \"goog.require('a.b')\"),\n-        REQUIRES_NOT_SORTED,\n-        LINE_JOINER.join(\n-            \"goog.require() statements are not sorted. The correct order is:\",\n-            \"\",\n-            \"/**\",\n-            \" @suppress {extraRequire}\",\n-            \" */\",\n-            \"goog.require('a.b');\",\n-            \"goog.require('a.c');\",\n-            \"\",\n-            \"\"));\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testWarning_provide() {\n@@ -157,9 +145,7 @@\n             \"var c = goog.require('a.c');\",\n             \"\",\n             \"alert(1);\"),\n-        REQUIRES_NOT_SORTED,\n-        \"goog.require() statements are not sorted. The correct order is:\\n\\n\"\n-            + \"var c = goog.require('a.c');\\nvar d = goog.require('a.b.d');\\n\\n\");\n+        REQUIRES_NOT_SORTED);\n   }\n \n   public void testGoogModule_shorthand_destructuring() {\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 65,
        "bugNodeStartChar": 2458,
        "bugNodeLength": 215,
        "fixLineNum": 65,
        "fixNodeStartChar": 2458,
        "fixNodeLength": 77,
        "sourceBeforeFix": "testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\",REQUIRES_NOT_SORTED,\"goog.require() statements are not sorted. The correct order is:\\n\\n\" + \"goog.require('a.b');\\ngoog.require('a.c');\\n\\n\")",
        "sourceAfterFix": "testWarning(\"goog.require('a.c');\\ngoog.require('a.b')\",REQUIRES_NOT_SORTED)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "69bf835b58721b263b5ecaca7de2c327e3c29d7f",
        "fixCommitParentSHA1": "5865636ba3d6173230bc1740ecc1aec91282ac5c",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\nindex 9461750..9cc3fd8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n+++ b/hazelcast/src/main/java/com/hazelcast/replicatedmap/ReplicatedMapService.java\n@@ -37,7 +37,7 @@\n \n public class ReplicatedMapService implements ManagedService, RemoteService,\n         PostJoinAwareService, SplitBrainHandlerService,\n-        EventPublishingService<ReplicationMessage, ReplicatedMessageListener>{\n+        EventPublishingService<IdentifiedDataSerializable, ReplicatedMessageListener>{\n \n     public static final String SERVICE_NAME = \"hz:impl:replicatedMapService\";\n     public static final String EVENT_TOPIC_NAME = SERVICE_NAME + \".replication\";\n@@ -140,7 +140,7 @@\n     }\n \n     @Override\n-    public void dispatchEvent(ReplicationMessage event, ReplicatedMessageListener listener) {\n+    public void dispatchEvent(IdentifiedDataSerializable event, ReplicatedMessageListener listener) {\n         listener.onMessage(event);\n     }\n \n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 40,
        "bugNodeStartChar": 1579,
        "bugNodeLength": 69,
        "fixLineNum": 40,
        "fixNodeStartChar": 1579,
        "fixNodeLength": 77,
        "sourceBeforeFix": "EventPublishingService<ReplicationMessage,ReplicatedMessageListener>",
        "sourceAfterFix": "EventPublishingService<IdentifiedDataSerializable,ReplicatedMessageListener>"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "cee3b890b7c9a95936a50951d503adf0de74c452",
        "fixCommitParentSHA1": "ab3c312544029343fc974caa03168a1c3a7e21e4",
        "bugFilePath": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java",
        "fixPatch": "diff --git a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\nindex 71d4ab5..45b1dfa 100644\n--- a/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n+++ b/api/src/main/java/org/openmrs/api/db/hibernate/HibernateConceptDAO.java\n@@ -1815,12 +1815,12 @@\n \t * @see org.openmrs.api.db.ConceptDAO#getCountOfConceptReferenceTerms(java.lang.String, boolean)\r\n \t */\r\n \t@Override\r\n-\tpublic Integer getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n+\tpublic Long getCountOfConceptReferenceTerms(String query, ConceptSource conceptSource, boolean includeRetired)\r\n \t        throws DAOException {\r\n \t\tCriteria criteria = createConceptReferenceTermCriteria(query, conceptSource, includeRetired);\r\n \t\t\r\n \t\tcriteria.setProjection(Projections.rowCount());\r\n-\t\treturn (Integer) criteria.uniqueResult();\r\n+\t\treturn (Long) criteria.uniqueResult();\r\n \t}\r\n \t\r\n \t/**\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 1823,
        "bugNodeStartChar": 69552,
        "bugNodeLength": 33,
        "fixLineNum": 1823,
        "fixNodeStartChar": 67730,
        "fixNodeLength": 30,
        "sourceBeforeFix": "(Integer)criteria.uniqueResult()",
        "sourceAfterFix": "(Long)criteria.uniqueResult()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "544285e04c0f376fe11c65e897ffa096d8049709",
        "fixCommitParentSHA1": "a4eabdb6677fcc58f38920dce7cc33987590d66f",
        "bugFilePath": "pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/task/util/OutputEmitter.java",
        "fixPatch": "diff --git a/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/task/util/OutputEmitter.java b/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/task/util/OutputEmitter.java\nindex 664f316..da045ea 100644\n--- a/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/task/util/OutputEmitter.java\n+++ b/pact/pact-runtime/src/main/java/eu/stratosphere/pact/runtime/task/util/OutputEmitter.java\n@@ -85,7 +85,7 @@\n \t */\n \tpublic OutputEmitter(ShipStrategy strategy, byte[] salt) {\n \t\tif (strategy != ShipStrategy.BROADCAST && strategy != ShipStrategy.PARTITION_HASH\n-\t\t\t\t&& strategy != ShipStrategy.NONE)\n+\t\t\t\t&& strategy != ShipStrategy.FORWARD)\n \t\t{\n \t\t\tthrow new UnsupportedOperationException(\"Unsupported distribution strategy: \" + strategy.name());\n \t\t}\n@@ -108,7 +108,7 @@\n \t\t\treturn broadcast(numberOfChannels);\n \t\tcase PARTITION_HASH:\n \t\t\treturn partition(pair, numberOfChannels);\n-\t\tcase NONE:\n+\t\tcase FORWARD:\n \t\t\treturn robin(numberOfChannels);\n \t\tdefault:\n \t\t\tthrow new UnsupportedOperationException();\n",
        "projectName": "apache.flink",
        "bugLineNum": 111,
        "bugNodeStartChar": 4028,
        "bugNodeLength": 10,
        "fixLineNum": 111,
        "fixNodeStartChar": 4028,
        "fixNodeLength": 13,
        "sourceBeforeFix": "case NONE: ",
        "sourceAfterFix": "case FORWARD: "
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305",
        "fixCommitParentSHA1": "5494af37be57a54ca5c1858ddfde6dd7d085e6e5",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b504800..e8b67ac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -188,11 +188,11 @@\n \n             releaseExternalResources();\n             if (notifierFuture != null) {\n-                notifierFuture.cancel(true);\n+                notifierFuture.cancel(false);\n             }\n \n             if (asyncWriteFuture != null) {\n-                asyncWriteFuture.cancel(true);\n+                asyncWriteFuture.cancel(false);\n             }\n \n             if (bc != null) {\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 191,
        "bugNodeStartChar": 8686,
        "bugNodeLength": 27,
        "fixLineNum": 191,
        "fixNodeStartChar": 8686,
        "fixNodeLength": 28,
        "sourceBeforeFix": "notifierFuture.cancel(true)",
        "sourceAfterFix": "notifierFuture.cancel(false)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "19c2a076c25faf94ae9e8f4072f2a4590c9ee1fe",
        "fixCommitParentSHA1": "018231d20a291587dc17c2be3c9f0d13c450bcb0",
        "bugFilePath": "spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java",
        "fixPatch": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\nindex d9f6f41..f231c1d 100644\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -81,7 +81,7 @@\n \tpublic void startServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -90,7 +90,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(0);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tthis.thrown.expectMessage(\"Connection refused\");\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -100,7 +100,7 @@\n \tpublic void stopServlet() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(ConnectException.class);\n \t\tgetResponse(\"http://localhost:8080/hello\");\n@@ -111,7 +111,7 @@\n \tpublic void restartWithKeepAlive() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tMultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();\n \t\tHttpClient client = new HttpClient(connectionManager);\n@@ -121,7 +121,7 @@\n \n \t\tthis.container.stop();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \n \t\tGetMethod get2 = new GetMethod(\"http://localhost:8080/hello\");\n \t\tassertThat(client.executeMethod(get2), equalTo(200));\n@@ -131,7 +131,7 @@\n \t@Test\n \tpublic void startServletAndFilter() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n-\t\tthis.container = factory.getEmbdeddedServletContainer(\n+\t\tthis.container = factory.getEmbeddedServletContainer(\n \t\t\t\texampleServletRegistration(), new FilterRegistrationBean(\n \t\t\t\t\t\tnew ExampleFilter()));\n \t\tassertThat(getResponse(\"http://localhost:8080/hello\"), equalTo(\"[Hello World]\"));\n@@ -143,7 +143,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfinal Date[] date = new Date[1];\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(new ServletContextInitializer() {\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)\n \t\t\t\t\t\t\tthrows ServletException {\n@@ -163,7 +163,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setPort(8081);\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8081/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -172,7 +172,7 @@\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setContextPath(\"/say\");\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tassertThat(getResponse(\"http://localhost:8080/say/hello\"), equalTo(\"Hello World\"));\n \t}\n \n@@ -202,7 +202,7 @@\n \tpublic void doubleStop() throws Exception {\n \t\tConfigurableEmbeddedServletContainerFactory factory = getFactory();\n \t\tthis.container = factory\n-\t\t\t\t.getEmbdeddedServletContainer(exampleServletRegistration());\n+\t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.stop();\n \t\tthis.container.stop();\n \t}\n@@ -216,7 +216,7 @@\n \t\t}\n \t\tfactory.setInitializers(Arrays.asList(initializers[2], initializers[3]));\n \t\tfactory.addInitializers(initializers[4], initializers[5]);\n-\t\tthis.container = factory.getEmbdeddedServletContainer(initializers[0],\n+\t\tthis.container = factory.getEmbeddedServletContainer(initializers[0],\n \t\t\t\tinitializers[1]);\n \t\tInOrder ordered = inOrder((Object[]) initializers);\n \t\tfor (ServletContextInitializer initializer : initializers) {\n@@ -230,7 +230,7 @@\n \t\t\t\tnew FileWriter(this.temporaryFolder.newFile(\"test.txt\")));\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tfactory.setDocumentRoot(this.temporaryFolder.getRoot());\n-\t\tthis.container = factory.getEmbdeddedServletContainer();\n+\t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tassertThat(getResponse(\"http://localhost:8080/test.txt\"), equalTo(\"test\"));\n \t}\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 233,
        "bugNodeStartChar": 8091,
        "bugNodeLength": 38,
        "fixLineNum": 233,
        "fixNodeStartChar": 8091,
        "fixNodeLength": 37,
        "sourceBeforeFix": "factory.getEmbdeddedServletContainer()",
        "sourceAfterFix": "factory.getEmbeddedServletContainer()"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "b4545cb01ba2f21d11d8b10507fe65e9e8a6558d",
        "fixCommitParentSHA1": "ceaaf1e2f0486cf43b531ec972b5287772fa6388",
        "bugFilePath": "collector/src/main/java/com/navercorp/pinpoint/collector/cluster/zookeeper/ZookeeperProfilerClusterManager.java",
        "fixPatch": "diff --git a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/zookeeper/ZookeeperProfilerClusterManager.java b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/zookeeper/ZookeeperProfilerClusterManager.java\nindex e9c61cb..3c046aa 100644\n--- a/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/zookeeper/ZookeeperProfilerClusterManager.java\n+++ b/collector/src/main/java/com/navercorp/pinpoint/collector/cluster/zookeeper/ZookeeperProfilerClusterManager.java\n@@ -156,7 +156,7 @@\n     }\r\n \r\n     public void initZookeeperClusterData() {\r\n-        profileCluster.clear();\r\n+        worker.clear();\r\n \r\n         synchronized (lock) {\r\n             List clusterPointList = profileCluster.getClusterPointList();\r\n",
        "projectName": "naver.pinpoint",
        "bugLineNum": 159,
        "bugNodeStartChar": 5948,
        "bugNodeLength": 22,
        "fixLineNum": 159,
        "fixNodeStartChar": 5790,
        "fixNodeLength": 14,
        "sourceBeforeFix": "profileCluster.clear()",
        "sourceAfterFix": "worker.clear()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "c50fb0490aaf8595274ac9cc33c0af6dc70f9d12",
        "fixCommitParentSHA1": "cde6fd13963e660507aa8d5776324db251db48dd",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\nindex 1df0d6b..38eb72d 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java\n@@ -137,7 +137,7 @@\n             throws IOException, ServletException {\n \n         if (!req.isAsyncStarted()) {\n-            AsyncContext asyncContext = req.startAsync();\n+            AsyncContext asyncContext = req.startAsync(req, res);\n             asyncContext.addListener(new CometListener(this));\n             // Do nothing except setting the times out\n             if (action.timeout() != -1) {\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 140,
        "bugNodeStartChar": 5469,
        "bugNodeLength": 16,
        "fixLineNum": 140,
        "fixNodeStartChar": 5469,
        "fixNodeLength": 24,
        "sourceBeforeFix": "req.startAsync()",
        "sourceAfterFix": "req.startAsync(req,res)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "38ec8babda50215f984e5f5532ae70918af77378",
        "fixCommitParentSHA1": "e7b414289c47fe090268d42fa41ac0a49c3985ff",
        "bugFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/SecretManager.java",
        "fixPatch": "diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/SecretManager.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/SecretManager.java\nindex cda36fe..37634b6 100644\n--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/SecretManager.java\n+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/SecretManager.java\n@@ -93,7 +93,7 @@\n   /**\n    * The length of the random keys to use.\n    */\n-  private static final int KEY_LENGTH = 20;\n+  private static final int KEY_LENGTH = 64;\n \n   /**\n    * A thread local store for the Macs.\n",
        "projectName": "apache.hadoop",
        "bugLineNum": 96,
        "bugNodeStartChar": 3135,
        "bugNodeLength": 15,
        "fixLineNum": 96,
        "fixNodeStartChar": 3135,
        "fixNodeLength": 15,
        "sourceBeforeFix": "KEY_LENGTH=20",
        "sourceAfterFix": "KEY_LENGTH=64"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "35e2253c8ceb7dc8f9d0d97355491fdf0b34db89",
        "fixCommitParentSHA1": "a21b8cb6e37559404f05e42b84f4d44b26bdce82",
        "bugFilePath": "actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java",
        "fixPatch": "diff --git a/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java b/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java\nindex bb49d7e..042648b 100644\n--- a/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java\n+++ b/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java\n@@ -17,14 +17,17 @@\n     private static final String TAG = \"Toast\";\n \n     public static Toast makeText(Context context, CharSequence s, int duration) {\n-        if(VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {\n+        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {\n             return Toast.makeText(context, s, duration);\n         }\n         IcsToast toast = new IcsToast(context);\n         toast.setDuration(duration);\n         TextView view = new TextView(context);\n         view.setText(s);\n-        view.setTextColor(0xFFDADADA);\n+        // Original AOSP using reference on @android:color/bright_foreground_dark\n+        // bright_foreground_dark - reference on @android:color/background_light\n+        // background_light - 0xffffffff\n+        view.setTextColor(0xffffffff);\n         view.setGravity(Gravity.CENTER);\n         view.setBackgroundResource(R.drawable.abs__toast_frame);\n         toast.setView(view);\n@@ -41,7 +44,7 @@\n \n     @Override\n     public void setText(CharSequence s) {\n-        if(VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {\n+        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {\n             super.setText(s);\n             return;\n         }\n@@ -51,7 +54,7 @@\n         try {\n             ((TextView) getView()).setText(s);\n         } catch (ClassCastException e) {\n-            Log.e(IcsToast.TAG, \"This Toast was not created with IcsToast.makeText\", e);\n+            Log.e(TAG, \"This Toast was not created with IcsToast.makeText\", e);\n         }\n     }\n }\n",
        "projectName": "JakeWharton.ActionBarSherlock",
        "bugLineNum": 27,
        "bugNodeStartChar": 883,
        "bugNodeLength": 29,
        "fixLineNum": 30,
        "fixNodeStartChar": 1087,
        "fixNodeLength": 29,
        "sourceBeforeFix": "view.setTextColor(0xFFDADADA)",
        "sourceAfterFix": "view.setTextColor(0xffffffff)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9",
        "fixCommitParentSHA1": "1cec456a2c5638818959856eb3cef98743cbe08b",
        "bugFilePath": "src/main/java/org/junit/runner/Description.java",
        "fixPatch": "diff --git a/src/main/java/org/junit/runner/Description.java b/src/main/java/org/junit/runner/Description.java\nindex 191dfc1..7cbd254 100644\n--- a/src/main/java/org/junit/runner/Description.java\n+++ b/src/main/java/org/junit/runner/Description.java\n@@ -207,7 +207,7 @@\n \t\tif (name == null)\n \t\t\treturn null;\n \t\ttry {\n-\t\t\treturn Class.forName(name);\n+\t\t\treturn Class.forName(name, false, getClass().getClassLoader());\n \t\t} catch (ClassNotFoundException e) {\n \t\t\treturn null;\n \t\t}\n",
        "projectName": "junit-team.junit",
        "bugLineNum": 210,
        "bugNodeStartChar": 6740,
        "bugNodeLength": 19,
        "fixLineNum": 210,
        "fixNodeStartChar": 6740,
        "fixNodeLength": 55,
        "sourceBeforeFix": "Class.forName(name)",
        "sourceAfterFix": "Class.forName(name,false,getClass().getClassLoader())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "5ee951ff70fe47c3ac6c7ace3e8b802c99598d14",
        "fixCommitParentSHA1": "966db876e160950e0f2a22808e1095fcb2029192",
        "bugFilePath": "src/com/google/javascript/jscomp/SymbolTable.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SymbolTable.java b/src/com/google/javascript/jscomp/SymbolTable.java\nindex b506bb3..4411e60 100644\n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n@@ -152,7 +152,7 @@\n     return ImmutableList.copyOf(symbol.references.values());\n   }\n \n-  public Iterable<Symbol> getAllSymbols() {\n+  public ImmutableList<Symbol> getAllSymbols() {\n     return ImmutableList.copyOf(symbols.values());\n   }\n \n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 155,
        "bugNodeStartChar": 6193,
        "bugNodeLength": 16,
        "fixLineNum": 155,
        "fixNodeStartChar": 6193,
        "fixNodeLength": 21,
        "sourceBeforeFix": "Iterable<Symbol>",
        "sourceAfterFix": "ImmutableList<Symbol>"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "f678fbc96b5c2efeb7c4b93a4d5cfd62b053029b",
        "fixCommitParentSHA1": "569c50977a40475db70f9a9f73dd8510ca8ebe4e",
        "bugFilePath": "src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java",
        "fixPatch": "diff --git a/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java b/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java\nindex 538b79e..c6f0345 100644\n--- a/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java\n+++ b/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java\n@@ -145,7 +145,7 @@\n \n         assertEquals(5, visitor.getTables().size());\n         assertEquals(24, visitor.getColumns().size());\n-        assertEquals(11, visitor.getConditions().size());\n+        assertEquals(12, visitor.getConditions().size());\n         assertEquals(4, visitor.getRelationships().size());\n         assertEquals(1, visitor.getOrderByColumns().size());\n     }\n",
        "projectName": "alibaba.druid",
        "bugLineNum": 148,
        "bugNodeStartChar": 7277,
        "bugNodeLength": 48,
        "fixLineNum": 148,
        "fixNodeStartChar": 7277,
        "fixNodeLength": 48,
        "sourceBeforeFix": "assertEquals(11,visitor.getConditions().size())",
        "sourceAfterFix": "assertEquals(12,visitor.getConditions().size())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "3b508f55d24ab4baa5164189d052fb3b320bce02",
        "fixCommitParentSHA1": "16cd1a77dfb13bf3a196389fcbd57aff313ad297",
        "bugFilePath": "tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java",
        "fixPatch": "diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java\nindex f758230..be93305 100644\n--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java\n+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootAutoConfigurationMojo.java\n@@ -276,7 +276,7 @@\n         }\n         javaClass.getJavaDoc().setFullText(doc);\n \n-        String prefix = \"camel.dataformat.\" + model.getModelName();\n+        String prefix = \"camel.dataformat.\" + model.getName();\n         javaClass.addAnnotation(\"org.springframework.boot.context.properties.ConfigurationProperties\").setStringValue(\"prefix\", prefix);\n \n         for (DataFormatOptionModel option : model.getDataFormatOptions()) {\n",
        "projectName": "apache.camel",
        "bugLineNum": 279,
        "bugNodeStartChar": 12329,
        "bugNodeLength": 20,
        "fixLineNum": 279,
        "fixNodeStartChar": 12329,
        "fixNodeLength": 15,
        "sourceBeforeFix": "model.getModelName()",
        "sourceAfterFix": "model.getName()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "de1fe68b90ff9e29a21095035c7ed02dbbf35f26",
        "fixCommitParentSHA1": "1357f6338796600fe37b81bb11600ad56da3d4e2",
        "bugFilePath": "jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java",
        "fixPatch": "diff --git a/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java b/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java\nindex 7195515..1ca77a1 100644\n--- a/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java\n+++ b/jdbc/src/java/org/apache/hive/jdbc/ZooKeeperHiveClientHelper.java\n@@ -159,7 +159,7 @@\n         }\n         // KERBEROS\n         // If delegation token is passed from the client side, do not set the principal\n-        if (matcher.group(2).equalsIgnoreCase(\"hive.server2.authentication.kerberos.principal\")\n+        if (matcher.group(1).equalsIgnoreCase(\"hive.server2.authentication.kerberos.principal\")\n             && !(connParams.getSessionVars().containsKey(JdbcConnectionParams.AUTH_TYPE) && connParams\n                 .getSessionVars().get(JdbcConnectionParams.AUTH_TYPE)\n                 .equalsIgnoreCase(JdbcConnectionParams.AUTH_TOKEN))\n",
        "projectName": "apache.hive",
        "bugLineNum": 162,
        "bugNodeStartChar": 7421,
        "bugNodeLength": 16,
        "fixLineNum": 162,
        "fixNodeStartChar": 7421,
        "fixNodeLength": 16,
        "sourceBeforeFix": "matcher.group(2)",
        "sourceAfterFix": "matcher.group(1)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "0559e4a6a1c956394bf3ce184be7bf4f9a91108e",
        "fixCommitParentSHA1": "93ecfc6406298b0e91e5298907e165fe391b3f6f",
        "bugFilePath": "stratosphere-addons/avro/src/test/java/eu/stratosphere/api/avro/AvroExternalJarProgramITCase.java",
        "fixPatch": "diff --git a/stratosphere-addons/avro/src/test/java/eu/stratosphere/api/avro/AvroExternalJarProgramITCase.java b/stratosphere-addons/avro/src/test/java/eu/stratosphere/api/avro/AvroExternalJarProgramITCase.java\nindex a34666d..cb4eb35 100644\n--- a/stratosphere-addons/avro/src/test/java/eu/stratosphere/api/avro/AvroExternalJarProgramITCase.java\n+++ b/stratosphere-addons/avro/src/test/java/eu/stratosphere/api/avro/AvroExternalJarProgramITCase.java\n@@ -36,7 +36,7 @@\n \tprivate static final String TEST_DATA_FILE = \"/testdata.avro\";\n \n \tstatic {\n-\t\tLogUtils.initializeDefaultConsoleLogger();\n+\t\tLogUtils.initializeDefaultTestConsoleLogger();\n \t}\n \t\n \t@Test\n",
        "projectName": "apache.flink",
        "bugLineNum": 39,
        "bugNodeStartChar": 1511,
        "bugNodeLength": 41,
        "fixLineNum": 39,
        "fixNodeStartChar": 1511,
        "fixNodeLength": 45,
        "sourceBeforeFix": "LogUtils.initializeDefaultConsoleLogger()",
        "sourceAfterFix": "LogUtils.initializeDefaultTestConsoleLogger()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "c26f75c7940a77e85f38406258c453a08ff75376",
        "fixCommitParentSHA1": "5d9193eb8fcb699722980d5e5680557553c3ee39",
        "bugFilePath": "components/camel-aws-sqs/src/test/java/org/apache/camel/component/aws/sqs/SqsFilterMessagesWithNoDeleteTest.java",
        "fixPatch": "diff --git a/components/camel-aws-sqs/src/test/java/org/apache/camel/component/aws/sqs/SqsFilterMessagesWithNoDeleteTest.java b/components/camel-aws-sqs/src/test/java/org/apache/camel/component/aws/sqs/SqsFilterMessagesWithNoDeleteTest.java\nindex 4b0cdc2..b5c2237 100644\n--- a/components/camel-aws-sqs/src/test/java/org/apache/camel/component/aws/sqs/SqsFilterMessagesWithNoDeleteTest.java\n+++ b/components/camel-aws-sqs/src/test/java/org/apache/camel/component/aws/sqs/SqsFilterMessagesWithNoDeleteTest.java\n@@ -67,7 +67,7 @@\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n-        registry.put(\"amazonSQSClient\", clientMock);\n+        registry.bind(\"amazonSQSClient\", clientMock);\n \n         result.expectedMessageCount(0);\n \n@@ -111,7 +111,7 @@\n             }\n         });\n         MockEndpoint result = MockEndpoint.resolve(ctx, \"mock:result\");\n-        registry.put(\"amazonSQSClient\", clientMock);\n+        registry.bind(\"amazonSQSClient\", clientMock);\n         clientMock.setScheduler(ctx.getExecutorServiceManager().newScheduledThreadPool(clientMock, \"ClientMock Scheduler\", 1));\n \n         result.expectedMessageCount(1);\n",
        "projectName": "apache.camel",
        "bugLineNum": 70,
        "bugNodeStartChar": 3059,
        "bugNodeLength": 43,
        "fixLineNum": 70,
        "fixNodeStartChar": 3059,
        "fixNodeLength": 44,
        "sourceBeforeFix": "registry.put(\"amazonSQSClient\",clientMock)",
        "sourceAfterFix": "registry.bind(\"amazonSQSClient\",clientMock)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "bb75dc34febfaebaee17da842105d4bb3274f863",
        "fixCommitParentSHA1": "7f549cb18b619e34a23df58cdbc235fe0a23fd10",
        "bugFilePath": "demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java",
        "fixPatch": "diff --git a/demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java b/demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java\nindex f497244..e43c953 100644\n--- a/demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java\n+++ b/demos/cuboc/cuboc/src/com/badlogic/cubocy/MapRenderer.java\n@@ -17,7 +17,7 @@\n \tMap map;\r\n \tOrthographicCamera cam;\r\n \tSpriteCache cache;\r\n-\tSpriteBatch batch = new SpriteBatch(10000);\r\n+\tSpriteBatch batch = new SpriteBatch(5460);\r\n \tImmediateModeRenderer20 renderer = new ImmediateModeRenderer20(false, true, 0);\r\n \tint[][] blocks;\r\n \tTextureRegion tile;\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 20,
        "bugNodeStartChar": 665,
        "bugNodeLength": 22,
        "fixLineNum": 20,
        "fixNodeStartChar": 646,
        "fixNodeLength": 21,
        "sourceBeforeFix": "new SpriteBatch(10000)",
        "sourceAfterFix": "new SpriteBatch(5460)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f",
        "fixCommitParentSHA1": "b9ed7d8912c94ef77749c5bd672c670a94728c50",
        "bugFilePath": "backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java",
        "fixPatch": "diff --git a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\nindex 0c1a19f..9fbfeff 100644\n--- a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n+++ b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n@@ -383,7 +383,7 @@\n \t}\r\n \r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL15.glGetBufferParameter(target, pname, params);\r\n+\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetError () {\r\n@@ -391,15 +391,15 @@\n \t}\r\n \r\n \tpublic void glGetFloatv (int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetFloat(pname, params);\r\n+\t\tGL11.glGetFloatv(pname, params);\r\n \t}\r\n \r\n \tpublic void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target, attachment, pname, params);\r\n+\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetIntegerv (int pname, IntBuffer params) {\r\n-\t\tGL11.glGetInteger(pname, params);\r\n+\t\tGL11.glGetIntegerv(pname, params);\r\n \t}\r\n \r\n \tpublic String glGetProgramInfoLog (int program) {\r\n@@ -417,11 +417,11 @@\n \t}\r\n \r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetProgram(program, pname, params);\r\n+\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n+\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetShaderInfoLog (int shader) {\r\n@@ -443,7 +443,7 @@\n \t}\r\n \r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetShader(shader, pname, params);\r\n+\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetString (int name) {\r\n@@ -451,11 +451,11 @@\n \t}\r\n \r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetUniformLocation (int program, String name) {\r\n@@ -463,11 +463,11 @@\n \t}\r\n \r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r\n@@ -475,11 +475,11 @@\n \t}\r\n \r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glHint (int target, int mode) {\r\n@@ -616,7 +616,7 @@\n \t}\r\n \r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r\n@@ -624,7 +624,7 @@\n \t}\r\n \r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r\n@@ -649,11 +649,11 @@\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform1i (int location, int x) {\r\n@@ -661,12 +661,12 @@\n \t}\r\n \r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform2f (int location, float x, float y) {\r\n@@ -674,11 +674,11 @@\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform2i (int location, int x, int y) {\r\n@@ -686,11 +686,11 @@\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r\n@@ -698,11 +698,11 @@\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r\n@@ -710,11 +710,11 @@\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r\n@@ -722,11 +722,11 @@\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r\n@@ -734,35 +734,35 @@\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toIntBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4iv(location, toIntBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n \t}\r\n \r\n \tpublic void glUseProgram (int program) {\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 761,
        "bugNodeStartChar": 25876,
        "bugNodeLength": 49,
        "fixLineNum": 761,
        "fixNodeStartChar": 25116,
        "fixNodeLength": 51,
        "sourceBeforeFix": "GL20.glUniformMatrix4(location,transpose,value)",
        "sourceAfterFix": "GL20.glUniformMatrix4fv(location,transpose,value)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9754de49878983bf090655203e0c880cccad7b2e",
        "fixCommitParentSHA1": "582c39a4d17c6cf78a325f9767df626b4d38df3f",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\nindex c6d47d9..1af9a45 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java\n@@ -130,7 +130,7 @@\n     }\n \n     protected void invalidateExpiredEntries() {\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         synchronized (messages) {\n \n             Set<String> inactiveClients = new HashSet<String>();\n@@ -177,7 +177,7 @@\n             logger.debug(\"Active clients {}\", activeClients());\n         }\n \n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n         String messageId = UUID.randomUUID().toString();\n         CacheMessage cacheMessage = new CacheMessage(messageId, e);\n         synchronized (messages) {\n@@ -272,7 +272,7 @@\n     @Override\n     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {\n         String clientId = r.uuid();\n-        long now = System.nanoTime();\n+        long now = System.currentTimeMillis();\n \n         List<Object> result = new ArrayList<Object>();\n \n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 133,
        "bugNodeStartChar": 4049,
        "bugNodeLength": 17,
        "fixLineNum": 133,
        "fixNodeStartChar": 4049,
        "fixNodeLength": 26,
        "sourceBeforeFix": "System.nanoTime()",
        "sourceAfterFix": "System.currentTimeMillis()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "e254b1b36eb99df733b04e16471aabc8abd3e386",
        "fixCommitParentSHA1": "74e37df61638d0aa6f27c5ad4cf36aa7527876a9",
        "bugFilePath": "src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java",
        "fixPatch": "diff --git a/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java b/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java\nindex d746716..4f14805 100644\n--- a/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java\n+++ b/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java\n@@ -200,7 +200,7 @@\n     protected final AtomicLong                         cachedPreparedStatementDeleteCount        = new AtomicLong();\n     protected final AtomicLong                         cachedPreparedStatementMissCount          = new AtomicLong();\n \n-    protected final Histogram                          transactionHistogram                      = new Histogram(\n+    protected final Histogram                          transactionHistogram                      = new Histogram(1,\n                                                                                                                  10,\n                                                                                                                  100,\n                                                                                                                  1000,\n",
        "projectName": "alibaba.druid",
        "bugLineNum": 203,
        "bugNodeStartChar": 11881,
        "bugNodeLength": 617,
        "fixLineNum": 203,
        "fixNodeStartChar": 11881,
        "fixNodeLength": 619,
        "sourceBeforeFix": "new Histogram(10,100,1000,10 * 1000,100 * 1000)",
        "sourceAfterFix": "new Histogram(1,10,100,1000,10 * 1000,100 * 1000)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "64454faa3bbc2c1d709779762d9f93a15a1b8c15",
        "fixCommitParentSHA1": "ff38cfb76e91a21ab10077d7ac62c6828514b0ad",
        "bugFilePath": "itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java",
        "fixPatch": "diff --git a/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java b/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java\nindex c9e6a13..d58a913 100644\n--- a/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java\n+++ b/itests/hive-unit/src/test/java/org/apache/hive/service/cli/session/TestHiveSessionImpl.java\n@@ -70,7 +70,7 @@\n     Map<String, String> confOverlay = new HashMap<String, String>();\n     String hql = \"drop table if exists table_not_exists\";\n     Mockito.when(operationManager.newExecuteStatementOperation(same(session), eq(hql),\n-        (Map<String, String>)Mockito.any(), eq(true), eq(0))).thenReturn(operation);\n+        (Map<String, String>)Mockito.any(), eq(true), eq(0L))).thenReturn(operation);\n \n     try {\n \n",
        "projectName": "apache.hive",
        "bugLineNum": 73,
        "bugNodeStartChar": 2887,
        "bugNodeLength": 5,
        "fixLineNum": 73,
        "fixNodeStartChar": 2887,
        "fixNodeLength": 6,
        "sourceBeforeFix": "eq(0)",
        "sourceAfterFix": "eq(0L)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "6b1aa819b0f3ce0b5dee0e70470738f22d81af38",
        "fixCommitParentSHA1": "732d9051d4be10de3b8f42771af2d08d0c14da7a",
        "bugFilePath": "bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\nindex 75c4b8b..9a689ac 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java\n@@ -384,7 +384,7 @@\n                     records.add(record);\n                 }\n \n-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n+                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {\n                     record = new OpenHABConfigurationRecord(domain + \"associations/\", \"Association Groups\");\n                     record.addAction(\"Refresh\", \"Refresh\");\n                     records.add(record);\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 387,
        "bugNodeStartChar": 18989,
        "bugNodeLength": 79,
        "fixLineNum": 387,
        "fixNodeStartChar": 18989,
        "fixNodeLength": 77,
        "sourceBeforeFix": "(ZWaveConfigurationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)",
        "sourceAfterFix": "(ZWaveAssociationCommandClass)node.getCommandClass(CommandClass.ASSOCIATION)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "49fbd32cd858759febfc166c20a2883a7d1b2df8",
        "fixCommitParentSHA1": "70cad53ff7a956b59bdfc44f2a80aa7979ee9c6f",
        "bugFilePath": "dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java",
        "fixPatch": "diff --git a/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java b/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java\nindex 013f5be..65f243e 100644\n--- a/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java\n+++ b/dubbo-registry/src/main/java/com/alibaba/dubbo/registry/support/RegistryDirectory.java\n@@ -104,7 +104,7 @@\n         this.serviceKey = url.getServiceKey();\r\n         this.queryMap = StringUtils.parseQueryString(url.getParameterAndDecoded(RpcConstants.REFER_KEY));\r\n         this.directoryUrl = url.removeParameter(RpcConstants.REFER_KEY).addParameters(queryMap);\r\n-        String group = directoryUrl.getParameter( Constants.GROUP_KEY );\r\n+        String group = directoryUrl.getParameter( Constants.GROUP_KEY, \"\" );\r\n         this.multiGroup = \"*\".equals(group) || group.contains( \",\" );\r\n     }\r\n \r\n",
        "projectName": "alibaba.dubbo",
        "bugLineNum": 107,
        "bugNodeStartChar": 4242,
        "bugNodeLength": 48,
        "fixLineNum": 107,
        "fixNodeStartChar": 4136,
        "fixNodeLength": 52,
        "sourceBeforeFix": "directoryUrl.getParameter(Constants.GROUP_KEY)",
        "sourceAfterFix": "directoryUrl.getParameter(Constants.GROUP_KEY,\"\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "41b3701231164cf35ccd61056c14260df6d93e6a",
        "fixCommitParentSHA1": "d5a9468736130e8ae147850c7a6fd9b977bbaf0e",
        "bugFilePath": "vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java",
        "fixPatch": "diff --git a/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java b/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\nindex cd3c756..7f2ada1 100644\n--- a/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\n+++ b/vertx-testsuite/src/test/java/vertx/tests/core/dns/DnsTestClient.java\n@@ -342,9 +342,9 @@\n       }\n     });\n \n-    dns.lookup(\"vertx.io\", new Handler<AsyncResult<InetAddress>>() {\n+    dns.lookup4(\"vertx.io\", new Handler<AsyncResult<Inet4Address>>() {\n       @Override\n-      public void handle(AsyncResult<InetAddress> event) {\n+      public void handle(AsyncResult<Inet4Address> event) {\n         InetAddress result = event.result();\n         tu.azzert(result != null);\n         tu.azzert(\"10.0.0.1\".equals(result.getHostAddress()));\n",
        "projectName": "eclipse.vert.x",
        "bugLineNum": 347,
        "bugNodeStartChar": 11744,
        "bugNodeLength": 24,
        "fixLineNum": 347,
        "fixNodeStartChar": 11744,
        "fixNodeLength": 25,
        "sourceBeforeFix": "AsyncResult<InetAddress>",
        "sourceAfterFix": "AsyncResult<Inet4Address>"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "f9dfe09527afac8deca02509f6e8bcae101ae8fb",
        "fixCommitParentSHA1": "3affd3cfe6f8256e85fadc2c734bd6a17cf82a82",
        "bugFilePath": "modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java",
        "fixPatch": "diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java\nindex a390b60..8bbe954 100755\n--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java\n+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/JobRetryCmd.java\n@@ -64,7 +64,7 @@\n     ProcessEngineConfiguration processEngineConfig = commandContext.getProcessEngineConfiguration();\r\n    \r\n     if (activity == null || activity.getFailedJobRetryTimeCycleValue() == null) {\r\n-      log.error(\"activitiy or FailedJobRetryTimerCycleValue is null in job \" + jobId + \"'. only decrementing retries.\");\r\n+      log.info(\"activitiy or FailedJobRetryTimerCycleValue is null in job \" + jobId + \"'. only decrementing retries.\");\r\n       job.setRetries(job.getRetries() - 1);\r\n       job.setLockOwner(null);\r\n       job.setLockExpirationTime(null);\r\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 67,
        "bugNodeStartChar": 2702,
        "bugNodeLength": 113,
        "fixLineNum": 67,
        "fixNodeStartChar": 2636,
        "fixNodeLength": 112,
        "sourceBeforeFix": "log.error(\"activitiy or FailedJobRetryTimerCycleValue is null in job \" + jobId + \"'. only decrementing retries.\")",
        "sourceAfterFix": "log.info(\"activitiy or FailedJobRetryTimerCycleValue is null in job \" + jobId + \"'. only decrementing retries.\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "8afc77b3acd1616a19c58863c71febaf702cf7bf",
        "fixCommitParentSHA1": "83c1c3967b56cc59c9bd241e2a2fe6570fc3f258",
        "bugFilePath": "src/main/java/twitter4j/Twitter.java",
        "fixPatch": "diff --git a/src/main/java/twitter4j/Twitter.java b/src/main/java/twitter4j/Twitter.java\nindex f9d6b94..a40ce20 100644\n--- a/src/main/java/twitter4j/Twitter.java\n+++ b/src/main/java/twitter4j/Twitter.java\n@@ -363,7 +363,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getTrends() throws TwitterException {\n-        return Trends.constructTrends(get(getSearchBaseURL() + \"trends.json\", false));\n+        return Trends.createTrends(get(getSearchBaseURL() + \"trends.json\", false));\n     }\n \n     /**\n@@ -375,7 +375,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getCurrentTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 , false)).get(0);\n     }\n \n@@ -389,7 +389,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends\">Twitter Search API Method: trends</a>\n      */\n     public Trends getCurrentTrends(boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/current.json\"\n                 + (excludeHashTags ? \"?exclude=hashtags\" : \"\"), false)).get(0);\n     }\n \n@@ -403,7 +403,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily\">Twitter Search API Method: trends daily</a>\n      */\n     public List<Trends> getDailyTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n+        return Trends.createTrendsList(get(getSearchBaseURL() + \"trends/daily.json\", false));\n     }\n \n     /**\n@@ -417,7 +417,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-daily\">Twitter Search API Method: trends daily</a>\n      */\n     public List<Trends> getDailyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/daily.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }\n@@ -439,7 +439,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly\">Twitter Search API Method: trends weekly</a>\n      */\n     public List<Trends> getWeeklyTrends() throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json\", false));\n     }\n \n@@ -454,7 +454,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-trends-weekly\">Twitter Search API Method: trends weekly</a>\n      */\n     public List<Trends> getWeeklyTrends(Date date, boolean excludeHashTags) throws TwitterException {\n-        return Trends.constructTrendsList(get(getSearchBaseURL()\n+        return Trends.createTrendsList(get(getSearchBaseURL()\n                 + \"trends/weekly.json?date=\" + toDateStr(date)\n                 + (excludeHashTags ? \"&exclude=hashtags\" : \"\"), false));\n     }\n@@ -471,7 +471,7 @@\n      */\n     public ResponseList<Status> getPublicTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() +\n+        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", false));\n     }\n \n@@ -486,7 +486,7 @@\n      */\n     public ResponseList<Status> getPublicTimeline(long sinceID) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() +\n+        return Status.createStatuseList(get(getBaseURL() +\n                 \"statuses/public_timeline.json\", null, new Paging((long) sinceID).asPostParameterList(Paging.S)\n                 , false));\n     }\n@@ -502,7 +502,7 @@\n      */\n     public ResponseList<Status> getHomeTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", true));\n     }\n \n \n@@ -518,7 +518,7 @@\n      */\n     public ResponseList<Status> getHomeTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/home_timeline.json\", null, paging.asPostParameterList(), true));\n     }\n \n     /**\n@@ -532,7 +532,7 @@\n      */\n     public ResponseList<Status> getFriendsTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\", true));\n     }\n \n     /**\n@@ -547,7 +547,7 @@\n      */\n     public ResponseList<Status> getFriendsTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",null, paging.asPostParameterList(), true));\n     }\n \n     /**\n@@ -563,7 +563,7 @@\n      */\n     public ResponseList<Status> getUserTimeline(String id, Paging paging)\n             throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\",\n                 null, paging.asPostParameterList(), http.isAuthenticationEnabled()));\n     }\n \n@@ -577,7 +577,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-friends_timeline\">Twitter API Wiki / Twitter REST API Method: statuses friends_timeline</a>\n      */\n     public ResponseList<Status> getUserTimeline(String id) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline/\" + id + \".json\", http.isAuthenticationEnabled()));\n     }\n \n     /**\n@@ -590,7 +590,7 @@\n      */\n     public ResponseList<Status> getUserTimeline() throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , true));\n     }\n \n@@ -606,7 +606,7 @@\n      */\n     public ResponseList<Status> getUserTimeline(Paging paging) throws\n             TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/user_timeline.json\"\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/user_timeline.json\"\n                 , null, paging.asPostParameterList(), true));\n     }\n \n@@ -620,7 +620,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions\">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>\n      */\n     public ResponseList<Status> getMentions() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, true));\n     }\n \n@@ -635,7 +635,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-mentions\">Twitter API Wiki / Twitter REST API Method: statuses mentions</a>\n      */\n     public ResponseList<Status> getMentions(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/mentions.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/mentions.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -649,7 +649,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>\n      */\n     public ResponseList<Status> getRetweetedByMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, true));\n     }\n \n@@ -664,7 +664,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_by_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_by_me</a>\n      */\n     public ResponseList<Status> getRetweetedByMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_by_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -678,7 +678,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>\n      */\n     public ResponseList<Status> getRetweetedToMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, true));\n     }\n \n@@ -693,7 +693,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweeted_to_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweeted_to_me</a>\n      */\n     public ResponseList<Status> getRetweetedToMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweeted_to_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -707,7 +707,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>\n      */\n     public ResponseList<Status> getRetweetsOfMe() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, true));\n     }\n \n@@ -722,7 +722,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets_of_me\">Twitter API Wiki / Twitter REST API Method: statuses/retweets_of_me</a>\n      */\n     public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n+        return Status.createStatuseList(get(getBaseURL() + \"statuses/retweets_of_me.json\",\n                 null, paging.asPostParameterList(), true));\n     }\n \n@@ -860,7 +860,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses-retweets\">Twitter API Wiki / Twitter REST API Method: statuses retweets</a>\n      */\n     public ResponseList<Status> getRetweets(long statusId) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL()\n+        return Status.createStatuseList(get(getBaseURL()\n                 + \"statuses/retweets/\" + statusId + \".json\", true));\n     }\n \n@@ -1073,7 +1073,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-lists\">Twitter REST API Method: GET lists</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserLists(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists.json?cursor=\" + cursor, true));\n     }\n \n@@ -1117,7 +1117,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-statuses\">Twitter REST API Method: GET list statuses</a>\n      */\n     public ResponseList<Status> getUserListStatuses(String user, int id, Paging paging) throws TwitterException {\n-        return Status.constructStatuses(get(getApiBaseURL() + V1 + user +\n+        return Status.createStatuseList(get(getApiBaseURL() + V1 + user +\n                 \"/lists/\" + id + \"/statuses.json\", new PostParameter[0],\n                 paging.asPostParameterList(Paging.SMCP, Paging.PER_PAGE), true));\n     }\n@@ -1132,7 +1132,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-memberships\">Twitter REST API Method: GET /:user/lists/memberships</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserListMemberships(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/memberships.json?cursor=\" + cursor, true));\n     }\n \n@@ -1146,7 +1146,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-GET-list-subscriptions\">Twitter REST API Method: GET list subscriptions</a>\n      */\n     public PagableResponseList<twitter4j.List> getUserListSubscriptions(String user, long cursor) throws TwitterException {\n-        return twitter4j.List.constructListOfLists(get(getApiBaseURL() + V1 +\n+        return twitter4j.List.createListList(get(getApiBaseURL() + V1 +\n                 user + \"/lists/subscriptions.json?cursor=\" + cursor, true));\n     }\n \n@@ -1160,7 +1160,7 @@\n     * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages\">Twitter API Wiki / Twitter REST API Method: direct_messages</a>\n     */\n     public ResponseList<DirectMessage> getDirectMessages() throws TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() + \"direct_messages.json\", true));\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() + \"direct_messages.json\", true));\n     }\n \n     /**\n@@ -1173,7 +1173,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-direct_messages\">Twitter API Wiki / Twitter REST API Method: direct_messages</a>\n      */\n     public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL()\n+        return DirectMessage.createDirectMessageList(get(getBaseURL()\n                 + \"direct_messages.json\", null, paging.asPostParameterList(), true));\n     }\n \n@@ -1187,7 +1187,7 @@\n      */\n     public ResponseList<DirectMessage> getSentDirectMessages() throws\n             TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0], true));\n     }\n \n@@ -1203,7 +1203,7 @@\n      */\n     public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws\n             TwitterException {\n-        return DirectMessage.constructDirectMessages(get(getBaseURL() +\n+        return DirectMessage.createDirectMessageList(get(getBaseURL() +\n                 \"direct_messages/sent.json\", new PostParameter[0],\n                 paging.asPostParameterList(), true));\n     }\n@@ -1578,7 +1578,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites() throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", new PostParameter[0], true));\n     }\n \n     /**\n@@ -1591,7 +1591,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(int page) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites.json\", \"page\", String.valueOf(page), true));\n     }\n \n     /**\n@@ -1604,7 +1604,7 @@\n      * @since Twitter4J 2.0.1\n      */\n     public ResponseList<Status> getFavorites(String id) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", new PostParameter[0], true));\n     }\n \n     /**\n@@ -1618,7 +1618,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-favorites\">Twitter API Wiki / Twitter REST API Method: favorites</a>\n      */\n     public ResponseList<Status> getFavorites(String id, int page) throws TwitterException {\n-        return Status.constructStatuses(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n+        return Status.createStatuseList(get(getBaseURL() + \"favorites/\" + id + \".json\", \"page\", String.valueOf(page), true));\n     }\n \n     /**\n@@ -1774,7 +1774,7 @@\n      * @see <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-saved_searches\">Twitter API Wiki / Twitter REST API Method: saved_searches</a>\n      */\n     public List<SavedSearch> getSavedSearches() throws TwitterException {\n-        return SavedSearch.constructSavedSearches(get(getBaseURL() + \"saved_searches.json\", true));\n+        return SavedSearch.createSavedSearchList(get(getBaseURL() + \"saved_searches.json\", true));\n     }\n \n     /**\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 535,
        "bugNodeStartChar": 25357,
        "bugNodeLength": 84,
        "fixLineNum": 535,
        "fixNodeStartChar": 25357,
        "fixNodeLength": 84,
        "sourceBeforeFix": "Status.constructStatuses(get(getBaseURL() + \"statuses/friends_timeline.json\",true))",
        "sourceAfterFix": "Status.createStatuseList(get(getBaseURL() + \"statuses/friends_timeline.json\",true))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "ad743978ed62cdf18bb3f8d580deb27b9b2195a4",
        "fixCommitParentSHA1": "d8f4792f8e20bf7c0c0ca7a057245c3fd1e2a75d",
        "bugFilePath": "src/java/org/apache/hadoop/hbase/HMaster.java",
        "fixPatch": "diff --git a/src/java/org/apache/hadoop/hbase/HMaster.java b/src/java/org/apache/hadoop/hbase/HMaster.java\nindex 9163eea..877379a 100644\n--- a/src/java/org/apache/hadoop/hbase/HMaster.java\n+++ b/src/java/org/apache/hadoop/hbase/HMaster.java\n@@ -2087,7 +2087,7 @@\n           if (closed.get()) {\n             return true;\n           }\n-          if (!rootScanned ||\n+          if (!rootRescanned ||\n               numberOfMetaRegions.get() != onlineMetaRegions.size()) {\n             // We can't proceed because not all of the meta regions are online.\n             // We can't block either because that would prevent the meta region\n@@ -2096,7 +2096,7 @@\n             \n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Requeuing shutdown because rootScanned: \" +\n-                  rootScanned + \", numberOfMetaRegions: \" +\n+                  rootRescanned + \", numberOfMetaRegions: \" +\n                   numberOfMetaRegions.get() + \", onlineMetaRegions.size(): \" +\n                   onlineMetaRegions.size());\n             }\n",
        "projectName": "apache.hbase",
        "bugLineNum": 2090,
        "bugNodeStartChar": 72502,
        "bugNodeLength": 12,
        "fixLineNum": 2090,
        "fixNodeStartChar": 72502,
        "fixNodeLength": 14,
        "sourceBeforeFix": "!rootScanned",
        "sourceAfterFix": "!rootRescanned"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0ab8dd9b65b9bb1fd80a946900b93ce803b0f617",
        "fixCommitParentSHA1": "915c8fdc924d7fce0f559bb05f6435f302d8dbc4",
        "bugFilePath": "src/api/org/openmrs/api/context/Context.java",
        "fixPatch": "diff --git a/src/api/org/openmrs/api/context/Context.java b/src/api/org/openmrs/api/context/Context.java\nindex f9e3974..005f2d7 100644\n--- a/src/api/org/openmrs/api/context/Context.java\n+++ b/src/api/org/openmrs/api/context/Context.java\n@@ -965,7 +965,7 @@\n \t\t\t\t\tGlobalProperty propToUpdate = propsMissingDescription.get(corePropName);\r\n \t\t\t\t\tif (propToUpdate != null) {\r\n \t\t\t\t\t\tpropToUpdate.setDescription(coreProp.getDescription());\r\n-\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(coreProp);\r\n+\t\t\t\t\t\tContext.getAdministrationService().saveGlobalProperty(propToUpdate);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 968,
        "bugNodeStartChar": 31492,
        "bugNodeLength": 63,
        "fixLineNum": 968,
        "fixNodeStartChar": 30525,
        "fixNodeLength": 67,
        "sourceBeforeFix": "Context.getAdministrationService().saveGlobalProperty(coreProp)",
        "sourceAfterFix": "Context.getAdministrationService().saveGlobalProperty(propToUpdate)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "0b3166b35fac48f68ba84f1110421d99c4222244",
        "fixCommitParentSHA1": "4a8eb0aac0677a6aeb66472f4cac1c0e3cdf0fcc",
        "bugFilePath": "bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\nindex 54b8255..1c8d002 100644\n--- a/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n+++ b/bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java\n@@ -137,7 +137,7 @@\n \r\n     @Override\r\n     public byte[] decodeMessage() {\r\n-        byte[] data = new byte[16];\r\n+        byte[] data = new byte[17];\r\n \r\n         data[0] = 0x10;\r\n         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();\r\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 140,
        "bugNodeStartChar": 4505,
        "bugNodeLength": 12,
        "fixLineNum": 140,
        "fixNodeStartChar": 4366,
        "fixNodeLength": 12,
        "sourceBeforeFix": "new byte[16]",
        "sourceAfterFix": "new byte[17]"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "0786ef300c31c2ba9ebaa4470635e22cee9397a3",
        "fixCommitParentSHA1": "7d5a8a662f28245ab37196c28063f729b80d3ff9",
        "bugFilePath": "src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java",
        "fixPatch": "diff --git a/src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java b/src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java\nindex bdb053b..4e97f8e 100644\n--- a/src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java\n+++ b/src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java\n@@ -10,7 +10,7 @@\n \t@Override\n \tpublic Result check() throws Exception {\n \t\tfinal Set<String> threads = VirtualMachineMetrics.deadlockedThreads();\n-\t\tif (threads.isEmpty()) {\n+\t\tif (!threads.isEmpty()) {\n \t\t\tfinal StringBuilder builder = new StringBuilder(\"Deadlocked threads detected:\\n\");\n \t\t\tfor (String thread : threads) {\n \t\t\t\tbuilder.append(thread).append('\\n');\n",
        "projectName": "dropwizard.metrics",
        "bugLineNum": 13,
        "bugNodeStartChar": 347,
        "bugNodeLength": 17,
        "fixLineNum": 13,
        "fixNodeStartChar": 347,
        "fixNodeLength": 18,
        "sourceBeforeFix": "threads.isEmpty()",
        "sourceAfterFix": "!threads.isEmpty()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "55ed50c4975cf694828d46ee9ca32ce72a9ef913",
        "fixCommitParentSHA1": "46a3fbcb5cf35fbd18472658627a90a53be89ccf",
        "bugFilePath": "src/jvm/clojure/lang/RestFn.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/RestFn.java b/src/jvm/clojure/lang/RestFn.java\nindex e33d21f..e87c77f 100644\n--- a/src/jvm/clojure/lang/RestFn.java\n+++ b/src/jvm/clojure/lang/RestFn.java\n@@ -139,34 +139,34 @@\n \tswitch(reqArity)\r\n \t\t{\r\n \t\tcase 0:\r\n-\t\t\treturn invoke(args);\r\n+\t\t\treturn doInvoke(args);\r\n \t\tcase 1:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 2:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 3:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 4:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 5:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 6:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -174,7 +174,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 7:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -183,7 +183,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 8:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -193,7 +193,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 9:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -204,7 +204,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 10:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -216,7 +216,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 11:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -229,7 +229,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 12:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -243,7 +243,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 13:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -258,7 +258,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 14:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -274,7 +274,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 15:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -291,7 +291,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 16:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -309,7 +309,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 17:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -328,7 +328,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 18:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -348,7 +348,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 19:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n@@ -369,7 +369,7 @@\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, args.rest());\r\n \t\tcase 20:\r\n-\t\t\treturn invoke(args.first()\r\n+\t\t\treturn doInvoke(args.first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n \t\t\t\t\t, (args = args.rest()).first()\r\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 261,
        "bugNodeStartChar": 9667,
        "bugNodeLength": 521,
        "fixLineNum": 261,
        "fixNodeStartChar": 9407,
        "fixNodeLength": 509,
        "sourceBeforeFix": "invoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())",
        "sourceAfterFix": "doInvoke(args.first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),(args=args.rest()).first(),args.rest())"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "ab2d880793dd983f1d71e560272cb4fff791cf4c",
        "fixCommitParentSHA1": "e92f196cd7e55a66290bbd9288c8ae6579485653",
        "bugFilePath": "twitter4j-core/src/test/java/twitter4j/auth/OAuthTest.java",
        "fixPatch": "diff --git a/twitter4j-core/src/test/java/twitter4j/auth/OAuthTest.java b/twitter4j-core/src/test/java/twitter4j/auth/OAuthTest.java\nindex 87e287c..158a4a4 100644\n--- a/twitter4j-core/src/test/java/twitter4j/auth/OAuthTest.java\n+++ b/twitter4j-core/src/test/java/twitter4j/auth/OAuthTest.java\n@@ -76,6 +76,7 @@\n         Twitter unauthenticated = new TwitterFactory().getInstance();\n         unauthenticated.setOAuthConsumer(desktopConsumerKey, desktopConsumerSecret);\n         RequestToken rt = unauthenticated.getOAuthRequestToken();\n+        //noinspection ResultOfMethodCallIgnored\n         rt.hashCode();\n         // trying to get an access token without permitting the request token.\n         try {\n@@ -91,7 +92,7 @@\n             twitter.getOAuthAccessToken(rt.getToken(), rt.getTokenSecret());\n             fail();\n         } catch (TwitterException te) {\n-            assertEquals(401, te.getStatusCode());\n+            assertEquals(403, te.getStatusCode());\n         }\n         AccessToken at = getAccessToken(twitter, rt.getAuthorizationURL(), rt, numberId, numberPass, true);\n         try {\n@@ -156,9 +157,9 @@\n         String authorizeURL = catchPattern(resStr, \"<form action=\\\"\", \"\\\" id=\\\"oauth_form\\\"\");\n         HttpParameter[] params = new HttpParameter[4];\n         params[0] = new HttpParameter(\"authenticity_token\"\n-                , catchPattern(resStr, \"\\\"authenticity_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\" />\"));\n+                , catchPattern(resStr, \"\\\"authenticity_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\">\"));\n         params[1] = new HttpParameter(\"oauth_token\",\n-                catchPattern(resStr, \"name=\\\"oauth_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\" />\"));\n+                catchPattern(resStr, \"name=\\\"oauth_token\\\" type=\\\"hidden\\\" value=\\\"\", \"\\\">\"));\n         params[2] = new HttpParameter(\"session[username_or_email]\", screenName);\n         params[3] = new HttpParameter(\"session[password]\", password);\n         response = http.request(new HttpRequest(RequestMethod.POST, authorizeURL, params, null, props));\n@@ -310,7 +311,7 @@\n             props.load(is);\n             Configuration conf = new PropertyConfiguration(props);\n             twitter = new TwitterFactory(conf).getInstance();\n-            AccessToken at = twitter.getOAuthAccessToken(id1.screenName, id1.password);\n+            twitter.getOAuthAccessToken(id1.screenName, id1.password);\n             twitter.updateStatus(new Date() + \": xAuth test.\");\n \n             twitter = new TwitterFactory().getInstance();\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 94,
        "bugNodeStartChar": 3657,
        "bugNodeLength": 37,
        "fixLineNum": 94,
        "fixNodeStartChar": 3657,
        "fixNodeLength": 37,
        "sourceBeforeFix": "assertEquals(401,te.getStatusCode())",
        "sourceAfterFix": "assertEquals(403,te.getStatusCode())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "cea954f5c93bc8830c9358ad16d3c39aaf9c9de8",
        "fixCommitParentSHA1": "936df7a15a3ce323300cabe7b2ebb90e22f2069d",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\nindex 8f5542b..47feeaf 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/SemanticAnalyzer.java\n@@ -825,9 +825,9 @@\n \n     qb.getParseInfo().setSrcForAlias(alias, tableTree);\n \n-    // if alias to CTE contains the alias, we do not do the translation because\n+    // if alias to CTE contains the table name, we do not do the translation because\n     // cte is actually a subquery.\n-    if (!this.aliasToCTEs.containsKey(alias)) {\n+    if (!this.aliasToCTEs.containsKey(tabIdName)) {\n       unparseTranslator.addTableNameTranslation(tableTree, SessionState.get().getCurrentDatabase());\n       if (aliasIndex != 0) {\n         unparseTranslator.addIdentifierTranslation((ASTNode) tabref.getChild(aliasIndex));\n",
        "projectName": "apache.hive",
        "bugLineNum": 830,
        "bugNodeStartChar": 36326,
        "bugNodeLength": 35,
        "fixLineNum": 830,
        "fixNodeStartChar": 36326,
        "fixNodeLength": 39,
        "sourceBeforeFix": "this.aliasToCTEs.containsKey(alias)",
        "sourceAfterFix": "this.aliasToCTEs.containsKey(tabIdName)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "1ff20529a2099ff20a8d6af0751ee410541c770f",
        "fixCommitParentSHA1": "13f4d0816620fa0d07ae852c163a873ea9fea7a1",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\nindex 073d4e4..172009a 100644\n--- a/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/cardinality/impl/hyperloglog/impl/HyperLogLogImplTest.java\n@@ -49,7 +49,7 @@\n     @Parameters(name = \"precision:{0}, errorRange:{1}\")\n     public static Collection<Object[]> parameters() {\n         return asList(new Object[][]{\n-                {11, 6.5f},\n+                {11, 7.0f},\n                 {12, 5.5f},\n                 {13, 3.5f},\n                 {14, 3.0f},\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 52,
        "bugNodeStartChar": 1906,
        "bugNodeLength": 10,
        "fixLineNum": 52,
        "fixNodeStartChar": 1906,
        "fixNodeLength": 10,
        "sourceBeforeFix": "{11,6.5f}",
        "sourceAfterFix": "{11,7.0f}"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772",
        "fixCommitParentSHA1": "1c148887c286d3333708dc2ee63dff9f70220c25",
        "bugFilePath": "components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java",
        "fixPatch": "diff --git a/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java b/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\nindex 4cf79d4..52bd453 100644\n--- a/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\n+++ b/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\n@@ -38,7 +38,7 @@\n     private final String path;\n     private AssetTree client;\n \n-    public ChronicleEngineConsumer(ChronicleEngineEnpoint endpoint, Processor processor) {\n+    public ChronicleEngineConsumer(ChronicleEngineEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n \n         this.path = endpoint.getPath();\n@@ -50,7 +50,7 @@\n             throw new IllegalStateException(\"AssetTree already configured\");\n         }\n \n-        ChronicleEngineEnpoint endpoint = (ChronicleEngineEnpoint)getEndpoint();\n+        ChronicleEngineEndpoint endpoint = (ChronicleEngineEndpoint)getEndpoint();\n         ChronicleEngineConfiguration conf = endpoint.getConfiguration();\n         client = endpoint.createRemoteAssetTree();\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 53,
        "bugNodeStartChar": 2003,
        "bugNodeLength": 72,
        "fixLineNum": 53,
        "fixNodeStartChar": 2003,
        "fixNodeLength": 74,
        "sourceBeforeFix": "ChronicleEngineEnpoint endpoint=(ChronicleEngineEnpoint)getEndpoint(); ",
        "sourceAfterFix": "ChronicleEngineEndpoint endpoint=(ChronicleEngineEndpoint)getEndpoint(); "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "00644912992eceb3de7d2dc0213a05bf2844c1b2",
        "fixCommitParentSHA1": "1af0e4bcd8878a1e01d2bc0121985d07beddcc63",
        "bugFilePath": "hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java",
        "fixPatch": "diff --git a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\nindex b2449a1..0901dbf 100644\n--- a/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n+++ b/hazelcast-client/src/test/java/com/hazelcast/client/ClientRegressionTest.java\n@@ -195,7 +195,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n@@ -226,7 +226,7 @@\n                 } catch (InterruptedException e) {\n                     e.printStackTrace();\n                 }\n-                hz1.getLifecycleService().terminate();\n+                hz1.getLifecycleService().shutdown();\n             }\n         };\n \n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 198,
        "bugNodeStartChar": 7115,
        "bugNodeLength": 37,
        "fixLineNum": 198,
        "fixNodeStartChar": 7115,
        "fixNodeLength": 36,
        "sourceBeforeFix": "hz1.getLifecycleService().terminate()",
        "sourceAfterFix": "hz1.getLifecycleService().shutdown()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "f59fbe6f81996df3541a69a1827c397bbb099886",
        "fixCommitParentSHA1": "6bfbcc291a3301ce7b02a5444df476cb8df17643",
        "bugFilePath": "spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java",
        "fixPatch": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\nindex bd950b2..05ee515 100644\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n@@ -140,7 +140,8 @@\n \t\tfor (HttpMessageConverter<?> converter : handlerAdapter.getMessageConverters()) {\n \t\t\tif (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n \t\t\t\tassertThat(converter.getSupportedMediaTypes())\n-\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON);\n+\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON, MediaType.parseMediaType(\n+\t\t\t\t\t\t\t\tMediaTypes.HAL_JSON_VALUE + \";charset=UTF-8\"));\n \t\t\t}\n \t\t}\n \t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 142,
        "bugNodeStartChar": 5954,
        "bugNodeLength": 90,
        "fixLineNum": 142,
        "fixNodeStartChar": 5954,
        "fixNodeLength": 171,
        "sourceBeforeFix": "assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON)",
        "sourceAfterFix": "assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON,MediaType.parseMediaType(MediaTypes.HAL_JSON_VALUE + \";charset=UTF-8\"))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "37dd809a837712952cd32776d4b81243c9fb3b59",
        "fixCommitParentSHA1": "6866906b54dda3f409aa3f8394c815db5da62741",
        "bugFilePath": "ee/src/main/java/org/jboss/as/ee/component/ComponentInterceptorAnnotationParsingProcessor.java",
        "fixPatch": "diff --git a/ee/src/main/java/org/jboss/as/ee/component/ComponentInterceptorAnnotationParsingProcessor.java b/ee/src/main/java/org/jboss/as/ee/component/ComponentInterceptorAnnotationParsingProcessor.java\nindex 677c109..f8aeeba 100644\n--- a/ee/src/main/java/org/jboss/as/ee/component/ComponentInterceptorAnnotationParsingProcessor.java\n+++ b/ee/src/main/java/org/jboss/as/ee/component/ComponentInterceptorAnnotationParsingProcessor.java\n@@ -97,7 +97,7 @@\n         //process the ExcludeClassInterceptors annotation\n         final List<AnnotationInstance> excludeClassAnnotations = classAnnotations.get(EXCLUDE_CLASS_ANNOTATION_NAME);\n         if(excludeClassAnnotations != null ) {\n-            for(AnnotationInstance annotation : excludeDefaultAnnotations) {\n+            for(AnnotationInstance annotation : excludeClassAnnotations) {\n                 final AnnotationTarget target = annotation.target();\n                 if (target instanceof MethodInfo) {\n                     final MethodInfo methodInfo = MethodInfo.class.cast(target);\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 100,
        "bugNodeStartChar": 5216,
        "bugNodeLength": 642,
        "fixLineNum": 100,
        "fixNodeStartChar": 5216,
        "fixNodeLength": 640,
        "sourceBeforeFix": "for (AnnotationInstance annotation : excludeDefaultAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException(\"ExcludeClassInterceptors not applied to method: \" + target);   } } ",
        "sourceAfterFix": "for (AnnotationInstance annotation : excludeClassAnnotations) {   final AnnotationTarget target=annotation.target();   if (target instanceof MethodInfo) {     final MethodInfo methodInfo=MethodInfo.class.cast(target);     final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);     componentConfiguration.excludeClassInterceptors(methodIdentifier);   }  else {     throw new DeploymentUnitProcessingException(\"ExcludeClassInterceptors not applied to method: \" + target);   } } "
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa",
        "fixCommitParentSHA1": "7a8678decaae4216d3cd55f60a189ce24c48f759",
        "bugFilePath": "host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java",
        "fixPatch": "diff --git a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\nindex ebd88ed..f704207 100644\n--- a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\n+++ b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerLogger.java\n@@ -34,7 +34,7 @@\n import org.jboss.logging.MessageLogger;\n \n /**\n- * This module is using message IDs in the range 10900-10999. This file is using the subset 10950-10974 for domain\n+ * This module is using message IDs in the range 10800-10999. This file is using the subset 10800-10829 for domain\n  * controller logger messages. See http://community.jboss.org/docs/DOC-16810 for the full list of currently reserved\n  * JBAS message id blocks.\n  * <p/>\n@@ -71,11 +71,11 @@\n     DomainControllerLogger HOST_CONTROLLER_LOGGER = Logger.getMessageLogger(DomainControllerLogger.class, \"org.jboss.as.host.controller\");\n \n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n+    @Message(id = 10800, value = \"Ignoring 'include' child of 'socket-binding-group' %s\")\n     void warnIgnoringSocketBindingGroupInclude(Location location);\n \n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15801, value = \"Ignoring 'include' child of 'profile' %s\")\n+    @Message(id = 10801, value = \"Ignoring 'include' child of 'profile' %s\")\n     void warnIgnoringProfileInclude(Location location);\n \n     /**\n@@ -86,7 +86,7 @@\n      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15802, value = \"Interrupted awaiting final response from server %s on host %s\")\n+    @Message(id = 10802, value = \"Interrupted awaiting final response from server %s on host %s\")\n     void interruptedAwaitingFinalResponse(String serverName, String hostName);\n \n     /**\n@@ -98,7 +98,7 @@\n      * @param hostName   the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15803, value = \"Caught exception awaiting final response from server %s on host %s\")\n+    @Message(id = 10803, value = \"Caught exception awaiting final response from server %s on host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String serverName, String hostName);\n \n     /**\n@@ -108,7 +108,7 @@\n      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15804, value = \"Interrupted awaiting final response from host %s\")\n+    @Message(id = 10804, value = \"Interrupted awaiting final response from host %s\")\n     void interruptedAwaitingFinalResponse(String hostName);\n \n     /**\n@@ -119,7 +119,7 @@\n      * @param hostName the name of the host.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15805, value = \"Caught exception awaiting final response from host %s\")\n+    @Message(id = 10805, value = \"Caught exception awaiting final response from host %s\")\n     void caughtExceptionAwaitingFinalResponse(@Cause Throwable cause, String hostName);\n \n     /**\n@@ -128,7 +128,7 @@\n      * @param cause the cause of the error.\n      */\n     @LogMessage(level = Level.WARN)\n-    @Message(id = 15806, value = \"Caught exception closing input stream\")\n+    @Message(id = 10806, value = \"Caught exception closing input stream\")\n     void caughtExceptionClosingInputStream(@Cause Throwable cause);\n \n     /**\n@@ -138,7 +138,7 @@\n      * @param servers the servers that need to restart.\n      */\n     @LogMessage(level = Level.INFO)\n-    @Message(id = 15807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n+    @Message(id = 10807, value = \"Domain model has changed on re-connect. The following servers will need to be restarted for changes to take affect: %s\")\n     void domainModelChangedOnReConnect(Set<ServerIdentity> servers);\n \n     /**\n@@ -150,7 +150,7 @@\n      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n-    @Message(id = 15808, value = \"%s caught %s waiting for task %s\")\n+    @Message(id = 10808, value = \"%s caught %s waiting for task %s\")\n     void caughtExceptionWaitingForTask(String className, String exceptionName, String task);\n \n     /**\n@@ -162,7 +162,7 @@\n      * @param task          the task.\n      */\n     @LogMessage(level = Level.ERROR)\n-    @Message(id = 15809, value = \"%s caught %s waiting for task %s; returning\")\n+    @Message(id = 10809, value = \"%s caught %s waiting for task %s; returning\")\n     void caughtExceptionWaitingForTaskReturning(String className, String exceptionName, String task);\n \n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 111,
        "bugNodeStartChar": 4786,
        "bugNodeLength": 10,
        "fixLineNum": 111,
        "fixNodeStartChar": 4786,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=15804",
        "sourceAfterFix": "id=10804"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2071f9b5421f853e8515f309b2874399c895c43a",
        "fixCommitParentSHA1": "b43c32ad0a3674fcda782d2e28d0975b72382470",
        "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java",
        "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\nindex cbbad88..c917a63 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java\n@@ -154,7 +154,7 @@\n                     || indentInComment < expectedMinimalIndent && isWarnComment;\n         }\n \n-        throw new IllegalArgumentException();\n+        throw new IllegalStateException();\n     }\n \n     private static int getLineStart(String line, final int tabWidth) {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 157,
        "bugNodeStartChar": 7103,
        "bugNodeLength": 30,
        "fixLineNum": 157,
        "fixNodeStartChar": 7103,
        "fixNodeLength": 27,
        "sourceBeforeFix": "new IllegalArgumentException()",
        "sourceAfterFix": "new IllegalStateException()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 164,
        "bugNodeStartChar": 5087,
        "bugNodeLength": 7,
        "fixLineNum": 164,
        "fixNodeStartChar": 5087,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=48",
        "sourceAfterFix": "id=46"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "0b70c36eb0dff06c81010d1569797c727712bddd",
        "fixCommitParentSHA1": "2ebdce20b1797858f8b20144eabfb46e3574f3e0",
        "bugFilePath": "core/src/main/java/org/apache/druid/math/expr/ExprEval.java",
        "fixPatch": "diff --git a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\nindex 2b649d4..4dad810 100644\n--- a/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n+++ b/core/src/main/java/org/apache/druid/math/expr/ExprEval.java\n@@ -197,7 +197,7 @@\n           return this;\n         case LONG:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofLong(null);\n           } else {\n             return ExprEval.of(asLong());\n           }\n@@ -239,7 +239,7 @@\n       switch (castTo) {\n         case DOUBLE:\n           if (value == null) {\n-            return ExprEval.of(null);\n+            return ExprEval.ofDouble(null);\n           } else {\n             return ExprEval.of(asDouble());\n           }\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 200,
        "bugNodeStartChar": 4625,
        "bugNodeLength": 17,
        "fixLineNum": 200,
        "fixNodeStartChar": 4625,
        "fixNodeLength": 21,
        "sourceBeforeFix": "ExprEval.of(null)",
        "sourceAfterFix": "ExprEval.ofLong(null)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "6bd9731f77303b53b9a03b22be0c57438e096355",
        "fixCommitParentSHA1": "9fc0391f63288e2e9da3001d42834f6e5882c9ec",
        "bugFilePath": "src/test/java/twitter4j/DAOTest.java",
        "fixPatch": "diff --git a/src/test/java/twitter4j/DAOTest.java b/src/test/java/twitter4j/DAOTest.java\nindex 06b1210..51ad79f 100644\n--- a/src/test/java/twitter4j/DAOTest.java\n+++ b/src/test/java/twitter4j/DAOTest.java\n@@ -81,7 +81,7 @@\n         trySerializeable(directMessages);\n \n         // empty Trends list\n-        List<Trends> trends = Trends.constructTrendsList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json\"));\n+        List<Trends> trends = Trends.constructTrendsList(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/trends/daily-empty.json\"));\n         assertTrue(trends.size() == 0);\n         trySerializeable(trends);\n \n@@ -91,7 +91,7 @@\n         // single User\n         HttpClient http = new HttpClient();\n         User user = new User(http.get(\"http://yusuke.homeip.net/twitter4j/en/testcases/users/show/twit4j.json\"));\n-        assertFalse(user.isGeoEnabled());\n+        assertTrue(user.isGeoEnabled());\n         assertFalse(user.isVerified());\n         assertEquals(id1, user.getName());\n         assertEquals(id1, user.getScreenName());\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 94,
        "bugNodeStartChar": 4014,
        "bugNodeLength": 32,
        "fixLineNum": 94,
        "fixNodeStartChar": 4014,
        "fixNodeLength": 31,
        "sourceBeforeFix": "assertFalse(user.isGeoEnabled())",
        "sourceAfterFix": "assertTrue(user.isGeoEnabled())"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "fcea9dfeb6b2e12cb04602baac67b3a1c3cb58c9",
        "fixCommitParentSHA1": "4f952dac30892ce9458bee0403d908ee642c4481",
        "bugFilePath": "logging/src/main/java/org/jboss/as/logging/CommonAttributes.java",
        "fixPatch": "diff --git a/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java b/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\nindex 962e407..69a59e4 100644\n--- a/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\n+++ b/logging/src/main/java/org/jboss/as/logging/CommonAttributes.java\n@@ -77,7 +77,7 @@\n \n     SimpleAttributeDefinition ENCODING = SimpleAttributeDefinitionBuilder.create(\"encoding\", ModelType.STRING, true).build();\n \n-    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, true).\n+    SimpleAttributeDefinition FILE = SimpleAttributeDefinitionBuilder.create(\"file\", ModelType.OBJECT, false).\n             setCorrector(FileCorrector.INSTANCE).\n             setValidator(new FileValidator()).\n             build();\n@@ -105,25 +105,25 @@\n \n     SimpleAttributeDefinition MATCH = SimpleAttributeDefinitionBuilder.create(\"match\", ModelType.STRING, true).build();\n \n-    SimpleAttributeDefinition MAX_BACKUP_INDEX = SimpleAttributeDefinitionBuilder.create(\"max-backup-index\", ModelType.INT).\n+    SimpleAttributeDefinition MAX_BACKUP_INDEX = SimpleAttributeDefinitionBuilder.create(\"max-backup-index\", ModelType.INT, true).\n             setDefaultValue(new ModelNode().set(1)).\n             setValidator(new IntRangeValidator(1, true)).\n             build();\n \n-    SimpleAttributeDefinition MAX_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"max-inclusive\", ModelType.BOOLEAN).\n+    SimpleAttributeDefinition MAX_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"max-inclusive\", ModelType.BOOLEAN, true).\n             setDefaultValue(new ModelNode().set(true)).\n             build();\n \n-    SimpleAttributeDefinition MAX_LEVEL = SimpleAttributeDefinitionBuilder.create(\"max-level\", ModelType.STRING).\n+    SimpleAttributeDefinition MAX_LEVEL = SimpleAttributeDefinitionBuilder.create(\"max-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n \n-    SimpleAttributeDefinition MIN_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"min-inclusive\", ModelType.BOOLEAN).\n+    SimpleAttributeDefinition MIN_INCLUSIVE = SimpleAttributeDefinitionBuilder.create(\"min-inclusive\", ModelType.BOOLEAN, true).\n             setDefaultValue(new ModelNode().set(true)).\n             build();\n \n-    SimpleAttributeDefinition MIN_LEVEL = SimpleAttributeDefinitionBuilder.create(\"min-level\", ModelType.STRING).\n+    SimpleAttributeDefinition MIN_LEVEL = SimpleAttributeDefinitionBuilder.create(\"min-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n@@ -134,7 +134,7 @@\n \n     SimpleAttributeDefinition VALUE = SimpleAttributeDefinitionBuilder.create(\"value\", ModelType.STRING).build();\n \n-    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING).\n+    SimpleAttributeDefinition NEW_LEVEL = SimpleAttributeDefinitionBuilder.create(\"new-level\", ModelType.STRING, true).\n             setCorrector(CaseParameterCorrector.TO_UPPER).\n             setValidator(new LogLevelValidator(true)).\n             build();\n@@ -190,7 +190,7 @@\n \n     SimpleAttributeDefinition TARGET = SimpleAttributeDefinitionBuilder.create(\"target\", ModelType.STRING, true).\n             setDefaultValue(new ModelNode().set(Target.SYSTEM_OUT.toString())).\n-            setValidator(EnumValidator.create(Target.class, false, false)).\n+            setValidator(EnumValidator.create(Target.class, true, false)).\n             build();\n \n     SimpleAttributeDefinition USE_PARENT_HANDLERS = SimpleAttributeDefinitionBuilder.create(\"use-parent-handlers\", ModelType.BOOLEAN, true).\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 122,
        "bugNodeStartChar": 5596,
        "bugNodeLength": 75,
        "fixLineNum": 122,
        "fixNodeStartChar": 5596,
        "fixNodeLength": 81,
        "sourceBeforeFix": "SimpleAttributeDefinitionBuilder.create(\"min-inclusive\",ModelType.BOOLEAN)",
        "sourceAfterFix": "SimpleAttributeDefinitionBuilder.create(\"min-inclusive\",ModelType.BOOLEAN,true)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "ddb6e83f170ced7f2746d5ad81e0086d7087b9f1",
        "fixCommitParentSHA1": "99127a214adeed1594d3df96369782563c43250a",
        "bugFilePath": "services/src/main/java/io/druid/guice/RealtimeModule.java",
        "fixPatch": "diff --git a/services/src/main/java/io/druid/guice/RealtimeModule.java b/services/src/main/java/io/druid/guice/RealtimeModule.java\nindex 04f897a..276f850 100644\n--- a/services/src/main/java/io/druid/guice/RealtimeModule.java\n+++ b/services/src/main/java/io/druid/guice/RealtimeModule.java\n@@ -48,13 +48,13 @@\n         binder,\n         \"druid.publish.type\",\n         Key.get(SegmentPublisher.class),\n-        Key.get(NoopSegmentPublisher.class)\n+        Key.get(DbSegmentPublisher.class)\n     );\n     final MapBinder<String, SegmentPublisher> publisherBinder = PolyBind.optionBinder(\n         binder,\n         Key.get(SegmentPublisher.class)\n     );\n-    publisherBinder.addBinding(\"db\").to(DbSegmentPublisher.class);\n+    publisherBinder.addBinding(\"noop\").to(NoopSegmentPublisher.class);\n     binder.bind(DbSegmentPublisher.class).in(LazySingleton.class);\n \n     JsonConfigProvider.bind(binder, \"druid.realtime\", RealtimeManagerConfig.class);\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 51,
        "bugNodeStartChar": 1785,
        "bugNodeLength": 26,
        "fixLineNum": 51,
        "fixNodeStartChar": 1785,
        "fixNodeLength": 24,
        "sourceBeforeFix": "NoopSegmentPublisher.class",
        "sourceAfterFix": "DbSegmentPublisher.class"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "be92987b18c2e991a5ae64367a12d76f8cae2029",
        "fixCommitParentSHA1": "255ceb1c9eea219b0e2c3af9d79bc77efcbb7a97",
        "bugFilePath": "jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java",
        "fixPatch": "diff --git a/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java b/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\nindex 936e971..054e8d9 100644\n--- a/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\n+++ b/jsr77/src/main/java/org/jboss/as/jsr77/JSR77Messages.java\n@@ -106,27 +106,27 @@\n     @Message(id = 19903, value = \"No attribute called %s\")\n     AttributeNotFoundException noAttributeCalled(String attribute);\n \n-    @Message(id = 19903, value = \"No mbean found called %s\")\n+    @Message(id = 19904, value = \"No mbean found called %s\")\n     InstanceNotFoundException noMBeanCalled(ObjectName name);\n \n-    @Message(id = 19904, value = \"Should not get called\")\n+    @Message(id = 19905, value = \"Should not get called\")\n     IllegalStateException shouldNotGetCalled();\n \n-    @Message(id = 19905, value = \"Could not find %s\")\n+    @Message(id = 19906, value = \"Could not find %s\")\n     InstanceNotFoundException couldNotFindJ2eeType(String j2eeType);\n \n-    @Message(id = 19906, value = \"Invalid ObjectName: %s\")\n+    @Message(id = 19907, value = \"Invalid ObjectName: %s\")\n     IllegalStateException invalidObjectName(@Cause Throwable t, String s);\n \n-    @Message(id = 19907, value = \"Could not create ObjectName: %s\")\n+    @Message(id = 19908, value = \"Could not create ObjectName: %s\")\n     IllegalStateException couldNotCreateObjectName(@Cause Throwable t, String s);\n \n-    @Message(id = 19908, value = \"%s is read-only\")\n+    @Message(id = 19909, value = \"%s is read-only\")\n     IllegalStateException mbeanIsReadOnly(ObjectName on);\n \n-    @Message(id = 19909, value = \"Not yet implemented\")\n+    @Message(id = 19910, value = \"Not yet implemented\")\n     IllegalStateException notYetImplemented();\n \n-    @Message(id = 19910, value = \"Unknown method: %s\")\n+    @Message(id = 19911, value = \"Unknown method: %s\")\n     IllegalArgumentException unknownMethod(Method m);\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 130,
        "bugNodeStartChar": 4827,
        "bugNodeLength": 10,
        "fixLineNum": 130,
        "fixNodeStartChar": 4827,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=19910",
        "sourceAfterFix": "id=19911"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "845d0b065c3d9ec57d597a2bd1ae42b4366912c9",
        "fixCommitParentSHA1": "0cf02cfa104d161ad83be9baea5dd065772ae5ab",
        "bugFilePath": "twitter4j-core/src/main/java/twitter4j/TwitterImpl.java",
        "fixPatch": "diff --git a/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java b/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java\nindex fe61c5b..718c624 100644\n--- a/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java\n+++ b/twitter4j-core/src/main/java/twitter4j/TwitterImpl.java\n@@ -543,7 +543,7 @@\n                 new HttpParameter[]{\n                         new HttpParameter(\"screen_name\", screenName),\n                         new HttpParameter(\"device\", enableDeviceNotification),\n-                        new HttpParameter(\"retweets\", enableDeviceNotification)\n+                        new HttpParameter(\"retweets\", retweets)\n                 }));\n     }\n \n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 546,
        "bugNodeStartChar": 18594,
        "bugNodeLength": 55,
        "fixLineNum": 546,
        "fixNodeStartChar": 18594,
        "fixNodeLength": 39,
        "sourceBeforeFix": "new HttpParameter(\"retweets\",enableDeviceNotification)",
        "sourceAfterFix": "new HttpParameter(\"retweets\",retweets)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "1682d9037d8e9f49bbccdfe682553203abfea665",
        "fixCommitParentSHA1": "1f421be2133108bcd2d851811deb2157f887be03",
        "bugFilePath": "nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/FileBuffer.java",
        "fixPatch": "diff --git a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/FileBuffer.java b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/FileBuffer.java\nindex f5b7404..ee8d456 100644\n--- a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/FileBuffer.java\n+++ b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/io/channels/FileBuffer.java\n@@ -183,7 +183,7 @@\n \t\t\t}\n \n \t\t\tbytesWritten += b;\n-\t\t\tthis.totalBytesWritten += bytesWritten;\n+\t\t\tthis.totalBytesWritten += b;\n \t\t\tdiff = this.bufferSize - this.totalBytesWritten;\n \t\t}\n \n",
        "projectName": "apache.flink",
        "bugLineNum": 186,
        "bugNodeStartChar": 5316,
        "bugNodeLength": 38,
        "fixLineNum": 186,
        "fixNodeStartChar": 5316,
        "fixNodeLength": 27,
        "sourceBeforeFix": "this.totalBytesWritten+=bytesWritten",
        "sourceAfterFix": "this.totalBytesWritten+=b"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "62caf9c05867fe3183c6ffd35764809d21b14878",
        "fixCommitParentSHA1": "bebcfef5c70c809836b5b7e23e2dac9b4e12c5ea",
        "bugFilePath": "twitter4j-core/src/test/java/twitter4j/SearchAPITest.java",
        "fixPatch": "diff --git a/twitter4j-core/src/test/java/twitter4j/SearchAPITest.java b/twitter4j-core/src/test/java/twitter4j/SearchAPITest.java\nindex ec67f52..eaf5ae5 100644\n--- a/twitter4j-core/src/test/java/twitter4j/SearchAPITest.java\n+++ b/twitter4j-core/src/test/java/twitter4j/SearchAPITest.java\n@@ -47,7 +47,7 @@\n     public void testQuery() throws Exception {\n         SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n         Query query = new Query(\"test\")\n-                .until(format.format(new java.util.Date()));\n+                .until(format.format(new java.util.Date(System.currentTimeMillis() - 3600*24)));\n         HttpParameter[] params = query.asHttpParameterArray();\n         assertTrue(findParameter(params,\"q\"));\n         assertTrue(findParameter(params,\"until\"));\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 50,
        "bugNodeStartChar": 2111,
        "bugNodeLength": 20,
        "fixLineNum": 50,
        "fixNodeStartChar": 2111,
        "fixNodeLength": 56,
        "sourceBeforeFix": "new java.util.Date()",
        "sourceAfterFix": "new java.util.Date(System.currentTimeMillis() - 3600 * 24)"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "d819e4c0748aad7ed80b002b21b0ad8dad2d54b0",
        "fixCommitParentSHA1": "f6f255838943dfb92c0ed6fac973428ece6723ee",
        "bugFilePath": "bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java",
        "fixPatch": "diff --git a/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java b/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\nindex 42d5874..dec4d1b 100644\n--- a/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\n+++ b/bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java\n@@ -190,7 +190,7 @@\n \t\t\t\n \t\t\t// and now the rules, which only want to see state changes\n \t\t\tif(triggerManager!=null) {\n-\t\t\t\tIterable<Rule> rules = triggerManager.getRules(CHANGE, item, newState, oldState);\n+\t\t\t\tIterable<Rule> rules = triggerManager.getRules(CHANGE, item, oldState, newState);\n \t\t\t\tRuleEvaluationContext context = new RuleEvaluationContext();\n \t\t\t\tcontext.newValue(QualifiedName.create(RuleContextHelper.VAR_PREVIOUS_STATE), oldState);\n \t\t\t\texecuteRules(rules, context);\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 193,
        "bugNodeStartChar": 6563,
        "bugNodeLength": 57,
        "fixLineNum": 193,
        "fixNodeStartChar": 6563,
        "fixNodeLength": 57,
        "sourceBeforeFix": "triggerManager.getRules(CHANGE,item,newState,oldState)",
        "sourceAfterFix": "triggerManager.getRules(CHANGE,item,oldState,newState)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "99ed41cc78fe7dbc36ea17d9a6a1a56b51bcb12d",
        "fixCommitParentSHA1": "c7d98d185193c8911c6e70bbe610546816505d4a",
        "bugFilePath": "modules/StatisticsPlugin/src/test/java/org/gephi/statistics/plugin/DegreeNGTest.java",
        "fixPatch": "diff --git a/modules/StatisticsPlugin/src/test/java/org/gephi/statistics/plugin/DegreeNGTest.java b/modules/StatisticsPlugin/src/test/java/org/gephi/statistics/plugin/DegreeNGTest.java\nindex 6c9f1b5..bb5fd2c 100644\n--- a/modules/StatisticsPlugin/src/test/java/org/gephi/statistics/plugin/DegreeNGTest.java\n+++ b/modules/StatisticsPlugin/src/test/java/org/gephi/statistics/plugin/DegreeNGTest.java\n@@ -176,7 +176,7 @@\n         assertEquals(inDegree1, 0);\r\n         assertEquals(inDegree2, 1);\r\n         assertEquals(outDegree1, 1);\r\n-        assertEquals(avDegree, 1.0);\r\n+        assertEquals(avDegree, 0.5);\r\n     }\r\n \r\n     @Test\r\n@@ -194,7 +194,7 @@\n         assertEquals(inDegree3, 1);\r\n         assertEquals(degree1, 2);\r\n         assertEquals(outDegree5, 1);\r\n-        assertEquals(avDegree, 2.0);\r\n+        assertEquals(avDegree, 1.0);\r\n     }\r\n \r\n     @Test\r\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 179,
        "bugNodeStartChar": 6667,
        "bugNodeLength": 27,
        "fixLineNum": 179,
        "fixNodeStartChar": 6489,
        "fixNodeLength": 27,
        "sourceBeforeFix": "assertEquals(avDegree,1.0)",
        "sourceAfterFix": "assertEquals(avDegree,0.5)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "63b7cec3050338899e04957cbc7039cd509cd214",
        "fixCommitParentSHA1": "462bc816369822d38dfc34c164fdbe1ac2461e6f",
        "bugFilePath": "junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java",
        "fixPatch": "diff --git a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\nindex b26310c..604d4f8 100644\n--- a/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n+++ b/junit/src/test/java/cucumber/runtime/junit/RuntimeOptionsFactoryTest.java\n@@ -113,7 +113,7 @@\n         RuntimeOptionsFactory runtimeOptionsFactory = new RuntimeOptionsFactory(SubClassWithMonoChromeTrue.class);\n         RuntimeOptions runtimeOptions = runtimeOptionsFactory.create();\n \n-        assertFalse(runtimeOptions.isMonochrome());\n+        assertTrue(runtimeOptions.isMonochrome());\n     }\n \n \n@@ -166,12 +166,12 @@\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = false)\n+    @Cucumber.Options(monochrome = true)\n     static class SubClassWithMonoChromeTrue extends BaseClassWithMonoChromeFalse {\n         // empty\n     }\n \n-    @Cucumber.Options(monochrome = true)\n+    @Cucumber.Options(monochrome = false)\n     static class BaseClassWithMonoChromeFalse {\n         // empty\n     }\n",
        "projectName": "cucumber.cucumber-jvm",
        "bugLineNum": 116,
        "bugNodeStartChar": 4631,
        "bugNodeLength": 42,
        "fixLineNum": 116,
        "fixNodeStartChar": 4631,
        "fixNodeLength": 41,
        "sourceBeforeFix": "assertFalse(runtimeOptions.isMonochrome())",
        "sourceAfterFix": "assertTrue(runtimeOptions.isMonochrome())"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "8cac34cb2fd489023a20702dabf24db38c64b3cf",
        "fixCommitParentSHA1": "bea1151cb403e9a6f46d90d0336c6ef2d97571a4",
        "bugFilePath": "graylog2-server/src/main/java/org/graylog2/rest/resources/search/SearchResource.java",
        "fixPatch": "diff --git a/graylog2-server/src/main/java/org/graylog2/rest/resources/search/SearchResource.java b/graylog2-server/src/main/java/org/graylog2/rest/resources/search/SearchResource.java\nindex f4c87b8..2aa7ec7 100644\n--- a/graylog2-server/src/main/java/org/graylog2/rest/resources/search/SearchResource.java\n+++ b/graylog2-server/src/main/java/org/graylog2/rest/resources/search/SearchResource.java\n@@ -122,10 +122,10 @@\n             throw new BadRequestException(\"Missing required parameter `fields`\");\n         }\n         final Iterable<String> split = Splitter.on(',').omitEmptyStrings().trimResults().split(fields);\n-        final ArrayList<String> fieldList = Lists.newArrayList(\"timestamp\", \"source\");\n-        // skip the mandatory fields timestamp and source\n+        final ArrayList<String> fieldList = Lists.newArrayList(\"timestamp\");\n+        // skip the mandatory field timestamp\n         for (String field : split) {\n-            if (\"timestamp\".equals(field) || \"source\".equals(field)) {\n+            if (\"timestamp\".equals(field)) {\n                 continue;\n             }\n             fieldList.add(field);\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 125,
        "bugNodeStartChar": 4941,
        "bugNodeLength": 41,
        "fixLineNum": 125,
        "fixNodeStartChar": 4941,
        "fixNodeLength": 31,
        "sourceBeforeFix": "Lists.newArrayList(\"timestamp\",\"source\")",
        "sourceAfterFix": "Lists.newArrayList(\"timestamp\")"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "0a8470b78e9a173775de0f3ab10fba81e3da106f",
        "fixCommitParentSHA1": "cd04524bf004fc3a26e1ba57d8dfb44e121a66c2",
        "bugFilePath": "value/src/it/functional/src/test/java/com/google/auto/value/AutoValueTest.java",
        "fixPatch": "diff --git a/value/src/it/functional/src/test/java/com/google/auto/value/AutoValueTest.java b/value/src/it/functional/src/test/java/com/google/auto/value/AutoValueTest.java\nindex 333e6ec..94d2e9e 100644\n--- a/value/src/it/functional/src/test/java/com/google/auto/value/AutoValueTest.java\n+++ b/value/src/it/functional/src/test/java/com/google/auto/value/AutoValueTest.java\n@@ -1032,7 +1032,7 @@\n       for (int j = 0; j < versions.length; j++) {\n         int actual = Integer.signum(versions[i].compareTo(versions[j]));\n         int expected = Integer.signum(i - j);\n-        assertEquals(actual, expected);\n+        assertEquals(expected, actual);\n       }\n     }\n   }\n",
        "projectName": "google.auto",
        "bugLineNum": 1035,
        "bugNodeStartChar": 35529,
        "bugNodeLength": 30,
        "fixLineNum": 1035,
        "fixNodeStartChar": 35529,
        "fixNodeLength": 30,
        "sourceBeforeFix": "assertEquals(actual,expected)",
        "sourceAfterFix": "assertEquals(expected,actual)"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "2b6da52d6e3e42f393964a685c6ce1cf35f9918e",
        "fixCommitParentSHA1": "bc44e38f79021d63ada79032322e5921b01e4958",
        "bugFilePath": "weld/src/main/java/org/jboss/as/weld/services/bootstrap/WeldEjbInjectionServices.java",
        "fixPatch": "diff --git a/weld/src/main/java/org/jboss/as/weld/services/bootstrap/WeldEjbInjectionServices.java b/weld/src/main/java/org/jboss/as/weld/services/bootstrap/WeldEjbInjectionServices.java\nindex 7440427..cc76aa6 100644\n--- a/weld/src/main/java/org/jboss/as/weld/services/bootstrap/WeldEjbInjectionServices.java\n+++ b/weld/src/main/java/org/jboss/as/weld/services/bootstrap/WeldEjbInjectionServices.java\n@@ -128,7 +128,7 @@\n             Class<?> injectionPointRawType = Reflections.getRawType(injectionPoint.getType());\n             //we just compare names, as for remote views the actual classes may be loaded from different class loaders\n             Class<?> c = clazz;\n-            boolean found = true;\n+            boolean found = false;\n             while (c != null && c != Object.class) {\n                 if (injectionPointRawType.getName().equals(c.getName())) {\n                     found = true;\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 131,
        "bugNodeStartChar": 5860,
        "bugNodeLength": 12,
        "fixLineNum": 131,
        "fixNodeStartChar": 5860,
        "fixNodeLength": 13,
        "sourceBeforeFix": "found=true",
        "sourceAfterFix": "found=false"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "3481c92654feb0b751ce56a990ba022c18eeffd3",
        "fixCommitParentSHA1": "52b414b553e967076a077807266a61ce5bc0e82d",
        "bugFilePath": "core/camel-core/src/test/java/org/apache/camel/language/TokenXMLPairNamespaceSplitChildNamespaceTest.java",
        "fixPatch": "diff --git a/core/camel-core/src/test/java/org/apache/camel/language/TokenXMLPairNamespaceSplitChildNamespaceTest.java b/core/camel-core/src/test/java/org/apache/camel/language/TokenXMLPairNamespaceSplitChildNamespaceTest.java\nindex 3308ce1..4f19374 100644\n--- a/core/camel-core/src/test/java/org/apache/camel/language/TokenXMLPairNamespaceSplitChildNamespaceTest.java\n+++ b/core/camel-core/src/test/java/org/apache/camel/language/TokenXMLPairNamespaceSplitChildNamespaceTest.java\n@@ -53,7 +53,8 @@\n     @Test\n     public void testTokenXMLPair2() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:split\");\n-        mock.expectedMessageCount(3);\n+        mock.expectedMessageCount(4);\n+\n         mock.message(0).body().isEqualTo(\"<order id=\\\"1\\\" xmlns=\\\"http:acme.com\\\" xmlns:foo=\\\"http:foo.com\\\">Camel in Action</order>\");\n         mock.message(1).body().isEqualTo(\"<order id=\\\"2\\\" xmlns=\\\"http:acme.com\\\" xmlns:foo=\\\"http:foo.com\\\">ActiveMQ in Action</order>\");\n         mock.message(2).body().isEqualTo(\"<order id=\\\"3\\\" xmlns=\\\"http:acme.com\\\" xmlns:foo=\\\"http:foo.com\\\">DSL in Action</order>\");\n",
        "projectName": "apache.camel",
        "bugLineNum": 56,
        "bugNodeStartChar": 2375,
        "bugNodeLength": 28,
        "fixLineNum": 56,
        "fixNodeStartChar": 2375,
        "fixNodeLength": 28,
        "sourceBeforeFix": "mock.expectedMessageCount(3)",
        "sourceAfterFix": "mock.expectedMessageCount(4)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "c80e76bd7ccfe864566bdbffd6dcb6549709ea73",
        "fixCommitParentSHA1": "1c5a929c7ad6e40939e1170cdaf19c6ffd64f583",
        "bugFilePath": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java",
        "fixPatch": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\nindex 83ca4a6..f35434f 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n@@ -711,7 +711,7 @@\n \t\tcatch (Exception e) {\n \t\t\tthrow new RuntimeException(\"Could not create TypeInformation for type \" + data[0].getClass().getName()\n \t\t\t\t\t+ \"; please specify the TypeInformation manually via \"\n-\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\");\n+\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\", e);\n \t\t}\n \t\treturn fromCollection(Arrays.asList(data), typeInfo);\n \t}\n@@ -744,7 +744,7 @@\n \t\tcatch (Exception e) {\n \t\t\tthrow new RuntimeException(\"Could not create TypeInformation for type \" + type.getName()\n \t\t\t\t\t+ \"; please specify the TypeInformation manually via \"\n-\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\");\n+\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\", e);\n \t\t}\n \t\treturn fromCollection(Arrays.asList(data), typeInfo);\n \t}\n@@ -785,7 +785,7 @@\n \t\tcatch (Exception e) {\n \t\t\tthrow new RuntimeException(\"Could not create TypeInformation for type \" + first.getClass()\n \t\t\t\t\t+ \"; please specify the TypeInformation manually via \"\n-\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\");\n+\t\t\t\t\t+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\", e);\n \t\t}\n \t\treturn fromCollection(data, typeInfo);\n \t}\n",
        "projectName": "apache.flink",
        "bugLineNum": 786,
        "bugNodeStartChar": 31312,
        "bugNodeLength": 223,
        "fixLineNum": 786,
        "fixNodeStartChar": 31312,
        "fixNodeLength": 226,
        "sourceBeforeFix": "new RuntimeException(\"Could not create TypeInformation for type \" + first.getClass() + \"; please specify the TypeInformation manually via \"+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\")",
        "sourceAfterFix": "new RuntimeException(\"Could not create TypeInformation for type \" + first.getClass() + \"; please specify the TypeInformation manually via \"+ \"StreamExecutionEnvironment#fromElements(Collection, TypeInformation)\",e)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "c6e641e81964da8454021be53adb1e585eaf38e0",
        "fixCommitParentSHA1": "01dc787261af1989715258e7fe3b2d635e135d73",
        "bugFilePath": "client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java",
        "fixPatch": "diff --git a/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java b/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\nindex 3ad6de4..5486a9e 100644\n--- a/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\n+++ b/client/src/main/java/com/metamx/druid/client/cache/MemcachedCacheBroker.java\n@@ -131,6 +131,6 @@\n   }\n \n   private String computeKey(String identifier, byte[] key) {\n-    return identifier + Base64.encodeBytes(key);\n+    return identifier + Base64.encodeBytes(key, Base64.DONT_BREAK_LINES);\n   }\n }\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 134,
        "bugNodeStartChar": 4033,
        "bugNodeLength": 23,
        "fixLineNum": 134,
        "fixNodeStartChar": 4033,
        "fixNodeLength": 48,
        "sourceBeforeFix": "Base64.encodeBytes(key)",
        "sourceAfterFix": "Base64.encodeBytes(key,Base64.DONT_BREAK_LINES)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "978a048b578f8b64513fc7923ed9dbfc4be0b965",
        "fixCommitParentSHA1": "7c42a9fcceff9411a566b719b68940958ed2e197",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\nindex 1f32e31..90a5a7c 100644\n--- a/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n+++ b/hazelcast/src/main/java/com/hazelcast/multimap/impl/txn/TxnCommitBackupOperation.java\n@@ -49,7 +49,9 @@\n             op.run();\n             op.afterRun();\n         }\n-        getOrCreateContainer().unlock(dataKey, caller, threadId);\n+        // changed to forceUnlock because replica-sync of lock causes problems, same as IMap\n+        // real solution is to make 'lock-and-get' backup-aware\n+        getOrCreateContainer().forceUnlock(dataKey);\n     }\n \n     protected void writeInternal(ObjectDataOutput out) throws IOException {\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 52,
        "bugNodeStartChar": 1827,
        "bugNodeLength": 56,
        "fixLineNum": 54,
        "fixNodeStartChar": 1984,
        "fixNodeLength": 43,
        "sourceBeforeFix": "getOrCreateContainer().unlock(dataKey,caller,threadId)",
        "sourceAfterFix": "getOrCreateContainer().forceUnlock(dataKey)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e23740aecdf20d18fcdce46153c087a99bf5b2c3",
        "fixCommitParentSHA1": "60c7b5c132bcfcddb2fb4977ca8139b9b0583779",
        "bugFilePath": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java",
        "fixPatch": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java\nindex c0785e3..2785cd1 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java\n@@ -335,7 +335,8 @@\n             try {\n                 columns.put(tableName, getTableMetadata(tableName).getColumns());\n             }\n-            catch (RuntimeException e) {\n+            catch (TableNotFoundException e) {\n+                // table disappeared during listing operation\n             }\n         }\n         return columns.build();\n",
        "projectName": "facebook.presto",
        "bugLineNum": 338,
        "bugNodeStartChar": 14071,
        "bugNodeLength": 18,
        "fixLineNum": 338,
        "fixNodeStartChar": 14071,
        "fixNodeLength": 24,
        "sourceBeforeFix": "RuntimeException e",
        "sourceAfterFix": "TableNotFoundException e"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "f78f74f5a2cf1f73f974487816f998a6e37a9cf1",
        "fixCommitParentSHA1": "f6baae0bcbd712ac642db6d84dab026470d36f1c",
        "bugFilePath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "fixPatch": "diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\nindex e7ab873..5c1a557 100644\n--- a/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java\n@@ -352,7 +352,7 @@\n   }\n \n   void writeWindowUpdateLater(final int streamId, final long unacknowledgedBytesRead) {\n-    executor.submit(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n+    executor.execute(new NamedRunnable(\"OkHttp Window Update %s stream %d\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           frameWriter.windowUpdate(streamId, unacknowledgedBytesRead);\n@@ -384,7 +384,7 @@\n \n   private void writePingLater(\n       final boolean reply, final int payload1, final int payload2, final Ping ping) {\n-    executor.submit(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n+    executor.execute(new NamedRunnable(\"OkHttp %s ping %08x%08x\",\n         hostName, payload1, payload2) {\n       @Override public void execute() {\n         try {\n@@ -636,7 +636,7 @@\n               inFinished, headerBlock);\n           lastGoodStreamId = streamId;\n           streams.put(streamId, newStream);\n-          executor.submit(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n+          executor.execute(new NamedRunnable(\"OkHttp %s stream %d\", hostName, streamId) {\n             @Override public void execute() {\n               try {\n                 handler.receive(newStream);\n@@ -704,7 +704,7 @@\n     }\n \n     private void ackSettingsLater(final Settings peerSettings) {\n-      executor.submit(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n+      executor.execute(new NamedRunnable(\"OkHttp %s ACK Settings\", hostName) {\n         @Override public void execute() {\n           try {\n             frameWriter.ackSettings(peerSettings);\n@@ -798,7 +798,7 @@\n       }\n       currentPushRequests.add(streamId);\n     }\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Request[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onRequest(streamId, requestHeaders);\n         try {\n@@ -816,7 +816,7 @@\n \n   private void pushHeadersLater(final int streamId, final List<Header> requestHeaders,\n       final boolean inFinished) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Headers[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         boolean cancel = pushObserver.onHeaders(streamId, requestHeaders, inFinished);\n         try {\n@@ -842,7 +842,7 @@\n     source.require(byteCount); // Eagerly read the frame before firing client thread.\n     source.read(buffer, byteCount);\n     if (buffer.size() != byteCount) throw new IOException(buffer.size() + \" != \" + byteCount);\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         try {\n           boolean cancel = pushObserver.onData(streamId, buffer, byteCount, inFinished);\n@@ -859,7 +859,7 @@\n   }\n \n   private void pushResetLater(final int streamId, final ErrorCode errorCode) {\n-    pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n+    pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Reset[%s]\", hostName, streamId) {\n       @Override public void execute() {\n         pushObserver.onReset(streamId, errorCode);\n         synchronized (SpdyConnection.this) {\n",
        "projectName": "square.okhttp",
        "bugLineNum": 845,
        "bugNodeStartChar": 29074,
        "bugNodeLength": 532,
        "fixLineNum": 845,
        "fixNodeStartChar": 29074,
        "fixNodeLength": 533,
        "sourceBeforeFix": "pushExecutor.submit(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )",
        "sourceAfterFix": "pushExecutor.execute(new NamedRunnable(\"OkHttp %s Push Data[%s]\",hostName,streamId){   @Override public void execute(){     try {       boolean cancel=pushObserver.onData(streamId,buffer,byteCount,inFinished);       if (cancel)       frameWriter.rstStream(streamId,ErrorCode.CANCEL);       if (cancel || inFinished) { synchronized (SpdyConnection.this) {           currentPushRequests.remove(streamId);         }       }     }  catch (    IOException ignored) {     }   } } )"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "3847d03a4ac7e7f4e52bca451ddb5089a7402072",
        "fixCommitParentSHA1": "45484b163f343d8cf4b191efe35851e92ffe41ab",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java\nindex d054b5c..4b203e4 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java\n@@ -388,7 +388,7 @@\n         boolean needPostProjectionCoercion = false;\n         for (FunctionCall aggregate : analysis.getAggregates(node)) {\n             Expression rewritten = subPlan.rewrite(aggregate);\n-            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(aggregate));\n+            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(aggregate));\n \n             // TODO: this is a hack, because we apply coercions to the output of expressions, rather than the arguments to expressions.\n             // Therefore we can end up with this implicit cast, and have to move it into a post-projection\n@@ -567,7 +567,7 @@\n \n             // Rewrite function call in terms of pre-projected inputs\n             Expression rewritten = subPlan.rewrite(windowFunction);\n-            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getTypeWithCoercions(windowFunction));\n+            Symbol newSymbol = symbolAllocator.newSymbol(rewritten, analysis.getType(windowFunction));\n \n             boolean needCoercion = rewritten instanceof Cast;\n             // Strip out the cast and add it back as a post-projection\n",
        "projectName": "facebook.presto",
        "bugLineNum": 391,
        "bugNodeStartChar": 18132,
        "bugNodeLength": 40,
        "fixLineNum": 391,
        "fixNodeStartChar": 18132,
        "fixNodeLength": 27,
        "sourceBeforeFix": "analysis.getTypeWithCoercions(aggregate)",
        "sourceAfterFix": "analysis.getType(aggregate)"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "f467d695be2ae4ee7d5c2978191e1415aef37a9e",
        "fixCommitParentSHA1": "8b1f247a1af6a17757c491922675f0ed9dd2a8e1",
        "bugFilePath": "handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java",
        "fixPatch": "diff --git a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\nindex e935e7c..fcc840e 100644\n--- a/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n+++ b/handler/src/main/java/io/netty/handler/ssl/SslContextBuilder.java\n@@ -31,7 +31,7 @@\n      * Creates a builder for new client-side {@link SslContext}.\n      */\n     public static SslContextBuilder forClient() {\n-        return new SslContextBuilder(true);\n+        return new SslContextBuilder(false);\n     }\n \n     /**\n@@ -41,7 +41,7 @@\n      * @param keyFile a PKCS#8 private key file in PEM format\n      */\n     public static SslContextBuilder forServer(File keyCertChainFile, File keyFile) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile);\n     }\n \n     /**\n@@ -54,7 +54,7 @@\n      */\n     public static SslContextBuilder forServer(\n             File keyCertChainFile, File keyFile, String keyPassword) {\n-        return new SslContextBuilder(false).keyManager(keyCertChainFile, keyFile, keyPassword);\n+        return new SslContextBuilder(true).keyManager(keyCertChainFile, keyFile, keyPassword);\n     }\n \n     private final boolean forServer;\n",
        "projectName": "netty.netty",
        "bugLineNum": 44,
        "bugNodeStartChar": 1483,
        "bugNodeLength": 28,
        "fixLineNum": 44,
        "fixNodeStartChar": 1483,
        "fixNodeLength": 27,
        "sourceBeforeFix": "new SslContextBuilder(false)",
        "sourceAfterFix": "new SslContextBuilder(true)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557",
        "fixCommitParentSHA1": "adccab823675fb33685c5c0268388fc9857b7047",
        "bugFilePath": "clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/DistributedCacheResourceDefinition.java",
        "fixPatch": "diff --git a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/DistributedCacheResourceDefinition.java b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/DistributedCacheResourceDefinition.java\nindex 7712993..7f90847 100644\n--- a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/DistributedCacheResourceDefinition.java\n+++ b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/DistributedCacheResourceDefinition.java\n@@ -71,7 +71,7 @@\n             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n-            .setDefaultValue(new ModelNode().set(600000))\n+            .setDefaultValue(new ModelNode().set(600000L))\n             .build();\n \n     static final SimpleAttributeDefinition OWNERS = new SimpleAttributeDefinitionBuilder(ModelKeys.OWNERS, ModelType.INT, true)\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 74,
        "bugNodeStartChar": 3569,
        "bugNodeLength": 27,
        "fixLineNum": 74,
        "fixNodeStartChar": 3569,
        "fixNodeLength": 28,
        "sourceBeforeFix": "new ModelNode().set(600000)",
        "sourceAfterFix": "new ModelNode().set(600000L)"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "07d861c5ffbbbfde18ebfef12e3d57ba4dc2be42",
        "fixCommitParentSHA1": "d0f3cd383d2bdda3b55c3f071fa5622f65928f73",
        "bugFilePath": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java",
        "fixPatch": "diff --git a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\nindex 6ca2801..0e193f7 100644\n--- a/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\n+++ b/resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverContext.java\n@@ -133,7 +133,7 @@\n             public void operationComplete(Future<AddressedEnvelope<DnsResponse, InetSocketAddress>> future) {\n                 queriesInProgress.remove(future);\n \n-                if (promise.isDone()) {\n+                if (promise.isDone() || future.isCancelled()) {\n                     return;\n                 }\n \n",
        "projectName": "netty.netty",
        "bugLineNum": 136,
        "bugNodeStartChar": 5005,
        "bugNodeLength": 16,
        "fixLineNum": 136,
        "fixNodeStartChar": 5005,
        "fixNodeLength": 40,
        "sourceBeforeFix": "promise.isDone()",
        "sourceAfterFix": "promise.isDone() || future.isCancelled()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "715113fb25e3eaa18df0fdaf2df54211bf691fbe",
        "fixCommitParentSHA1": "2e8aa7bbd39325043556044d46f02855d08e82a3",
        "bugFilePath": "modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java",
        "fixPatch": "diff --git a/modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java b/modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java\nindex d3af95f..e98c33f 100755\n--- a/modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java\n+++ b/modules/activiti-jmx/src/main/java/org/activiti/management/jmx/DefaultManagementMBeanAssembler.java\n@@ -28,7 +28,7 @@\n  */\r\n public class DefaultManagementMBeanAssembler implements ManagementMBeanAssembler {\r\n \r\n-  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementAgent.class);\r\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultManagementMBeanAssembler.class);\r\n   \r\n   protected final MBeanInfoAssembler assembler;\r\n \r\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 31,
        "bugNodeStartChar": 1233,
        "bugNodeLength": 28,
        "fixLineNum": 31,
        "fixNodeStartChar": 1203,
        "fixNodeLength": 37,
        "sourceBeforeFix": "DefaultManagementAgent.class",
        "sourceAfterFix": "DefaultManagementMBeanAssembler.class"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "114211dc376cd85d1c97dde06cc7b347181314e1",
        "fixCommitParentSHA1": "06bc4f0fc48c8f98b5a6426af9de6882dbd06f16",
        "bugFilePath": "gdx-tests-android/src/com/badlogic/gdx/GDXTester.java",
        "fixPatch": "diff --git a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\nindex a554f46..dd972e9 100644\n--- a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n+++ b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n@@ -78,41 +78,41 @@\n \t\t\tintent = new Intent( this, LagTest.class );\r\n \t\tif( keyword.equals( items[14] ) )\r\n \t\t\tintent = new Intent( this, Pong.class );\r\n-\t\tif( keyword.equals( items[16] ) )\r\n+\t\tif( keyword.equals( items[15] ) )\r\n \t\t\tintent = new Intent( this, AudioDeviceTest.class );\r\n-\t\tif( keyword.equals( items[17] ) )\r\n+\t\tif( keyword.equals( items[16] ) )\r\n \t\t\tintent = new Intent( this, Mpg123Test.class );\r\n-\t\tif( keyword.equals( items[18] ) )\r\n+\t\tif( keyword.equals( items[17] ) )\r\n \t\t\tintent = new Intent( this, VorbisTest.class );\r\n-\t\tif( keyword.equals( items[19] ) )\r\n+\t\tif( keyword.equals( items[18] ) )\r\n \t\t\tintent = new Intent( this, PerformanceTest.class );\r\n-\t\tif( keyword.equals( items[20] ) )\r\n+\t\tif( keyword.equals( items[19] ) )\r\n \t\t\tintent = new Intent( this, MeshShaderTest.class );\r\n-\t\tif( keyword.equals( items[21] ) )\r\n+\t\tif( keyword.equals( items[20] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchTest.class );\r\n-\t\tif( keyword.equals( items[22] ) )\r\n+\t\tif( keyword.equals( items[21] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchShaderTest.class );\r\n-\t\tif( keyword.equals( items[23] ) )\r\n+\t\tif( keyword.equals( items[22] ) )\r\n \t\t\tintent = new Intent( this, FrameBufferTest.class );\r\n-\t\tif( keyword.equals( items[24] ) )\r\n+\t\tif( keyword.equals( items[23] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchRotationTest.class );\r\n-\t\tif( keyword.equals( items[25] ) )\r\n+\t\tif( keyword.equals( items[24] ) )\r\n \t\t\tintent = new Intent( this, Box2DTest.class );\r\n-\t\tif( keyword.equals( items[26] ) )\r\n+\t\tif( keyword.equals( items[25] ) )\r\n \t\t\tintent = new Intent( this, AudioRecorderTest.class );\r\n-\t\tif( keyword.equals( items[27] ) )\r\n+\t\tif( keyword.equals( items[26] ) )\r\n \t\t\tintent = new Intent( this, TestCollection.class );\r\n-\t\tif( keyword.equals( items[28] ) )\r\n+\t\tif( keyword.equals( items[27] ) )\r\n \t\t\tintent = new Intent( this, ResourcesTest.class );\r\n-\t\tif( keyword.equals( items[29] ) )\r\n+\t\tif( keyword.equals( items[28] ) )\r\n \t\t\tintent = new Intent( this, MD5Test.class );\r\n-\t\tif( keyword.equals( items[30] ) )\r\n+\t\tif( keyword.equals( items[29] ) )\r\n \t\t\tintent = new Intent( this, MicroBenchmarks.class );\r\n-\t\tif( keyword.equals( items[31] ) )\r\n+\t\tif( keyword.equals( items[30] ) )\r\n \t\t\tintent = new Intent( this, MultitouchTest.class );\r\n-\t\tif( keyword.equals( items[32] ) )\r\n+\t\tif( keyword.equals( items[31] ) )\r\n \t\t\tintent = new Intent( this, BufferUtilsTest.class );\r\n-\t\tif( keyword.equals( items[33] ) )\r\n+\t\tif( keyword.equals( items[32] ) )\r\n \t\t\tintent = new Intent( this, TerrainTest.class );\r\n \t\t\t\r\n \t\tstartActivity( intent );\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 83,
        "bugNodeStartChar": 3714,
        "bugNodeLength": 9,
        "fixLineNum": 83,
        "fixNodeStartChar": 3632,
        "fixNodeLength": 9,
        "sourceBeforeFix": "items[17]",
        "sourceAfterFix": "items[16]"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "ea323fc628b5c5f5fb0a954650e96be6adc32858",
        "fixCommitParentSHA1": "f5b4f47638ac513227bf880676e0ef98dbea56c9",
        "bugFilePath": "bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\nindex 6ea7830..d1edb93 100644\n--- a/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n+++ b/bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java\n@@ -22,7 +22,7 @@\n \t\tdouble temp = ParseUtils.parseTemperature(S300TH_DATA_1);\n \t\tAssert.assertEquals(23.2, temp, 0.01);\n \n-\t\tdouble humidity = ParseUtils.parseHumidity(S300TH_DATA_1);\n+\t\tdouble humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);\n \t\tAssert.assertEquals(50.8, humidity, 0.01);\n \n \t\tString address = ParseUtils.parseS300THAddress(S300TH_DATA_1);\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 25,
        "bugNodeStartChar": 875,
        "bugNodeLength": 39,
        "fixLineNum": 25,
        "fixNodeStartChar": 875,
        "fixNodeLength": 45,
        "sourceBeforeFix": "ParseUtils.parseHumidity(S300TH_DATA_1)",
        "sourceAfterFix": "ParseUtils.parseS300THHumidity(S300TH_DATA_1)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "7d63c295ccfc15bd05164f32e5c49f9fed4da89b",
        "fixCommitParentSHA1": "d3545f508672cf6b5eb66c7c28483f5ab01813ec",
        "bugFilePath": "extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java",
        "fixPatch": "diff --git a/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java b/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\nindex f53f5c3..f93cc00 100644\n--- a/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\n+++ b/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java\n@@ -785,7 +785,7 @@\n       String user\n   )\n   {\n-    Response response = resource.getUser(req, AUTHORIZER_NAME, user, \"\");\n+    Response response = resource.getUser(req, AUTHORIZER_NAME, user, \"\", null);\n     Assert.assertEquals(200, response.getStatus());\n     BasicAuthorizerUserFull userFull = (BasicAuthorizerUserFull) response.getEntity();\n     Set<String> roleNames = new HashSet<>();\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 788,
        "bugNodeStartChar": 32639,
        "bugNodeLength": 48,
        "fixLineNum": 788,
        "fixNodeStartChar": 32639,
        "fixNodeLength": 54,
        "sourceBeforeFix": "resource.getUser(req,AUTHORIZER_NAME,user,\"\")",
        "sourceAfterFix": "resource.getUser(req,AUTHORIZER_NAME,user,\"\",null)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9c540e54077fb7128af78b71ca2715475903f008",
        "fixCommitParentSHA1": "d5115ac2a2fb233162244c5d76f05d4dbea0f637",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\nindex 712c532..5fae029 100644\n--- a/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n+++ b/hazelcast/src/main/java/com/hazelcast/instance/BuildInfo.java\n@@ -80,14 +80,14 @@\n         Matcher matcher = VERSION_PATTERN.matcher(version);\n         if (matcher.matches()) {\n             try {\n-                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(1))\n-                        + MINOR_VERSION_MULTIPLIER * Integer.valueOf(matcher.group(2));\n+                int calculatedVersion = MAJOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(1))\n+                        + MINOR_VERSION_MULTIPLIER * Integer.parseInt(matcher.group(2));\n \n                 int groupCount = matcher.groupCount();\n                 if (groupCount >= PATCH_GROUP_COUNT) {\n                     String patchVersionString = matcher.group(PATCH_GROUP_COUNT);\n                     if (null != patchVersionString && !patchVersionString.startsWith(\"-\")) {\n-                        calculatedVersion += Integer.valueOf(patchVersionString);\n+                        calculatedVersion += Integer.parseInt(patchVersionString);\n                     }\n                 }\n                 return calculatedVersion;\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 83,
        "bugNodeStartChar": 2560,
        "bugNodeLength": 33,
        "fixLineNum": 83,
        "fixNodeStartChar": 2560,
        "fixNodeLength": 34,
        "sourceBeforeFix": "Integer.valueOf(matcher.group(1))",
        "sourceAfterFix": "Integer.parseInt(matcher.group(1))"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 58,
        "bugNodeStartChar": 1651,
        "bugNodeLength": 6,
        "fixLineNum": 58,
        "fixNodeStartChar": 1651,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=8",
        "sourceAfterFix": "id=11"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c3439fb13b3fa16d5e42d0e064065be5ae7462eb",
        "fixCommitParentSHA1": "a9985cbe64988960f30426fd36cbb4487e6d10b4",
        "bugFilePath": "src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java",
        "fixPatch": "diff --git a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\nindex cb35755..8377fbe 100644\n--- a/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n+++ b/src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java\n@@ -407,12 +407,12 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n+        public Builder setMaximumConnectionsPerHost(int defaultMaxConnectionPerHost) {\n             configBuilder.setMaximumConnectionsPerHost(defaultMaxConnectionPerHost);\n             return this;\n         }\n \n-        public DerivedBuilder setConnectionTimeoutInMs(int connectionTimeuot) {\n+        public Builder setConnectionTimeoutInMs(int connectionTimeuot) {\n             configBuilder.setConnectionTimeoutInMs(connectionTimeuot);\n             return this;\n         }\n@@ -427,52 +427,52 @@\n             return this;\n         }\n \n-        public DerivedBuilder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n+        public Builder setMaximumNumberOfRedirects(int maxDefaultRedirects) {\n             configBuilder.setMaximumNumberOfRedirects(maxDefaultRedirects);\n             return this;\n         }\n \n-        public DerivedBuilder setCompressionEnabled(boolean compressionEnabled) {\n+        public Builder setCompressionEnabled(boolean compressionEnabled) {\n             configBuilder.setCompressionEnabled(compressionEnabled);\n             return this;\n         }\n \n-        public DerivedBuilder setUserAgent(String userAgent) {\n+        public Builder setUserAgent(String userAgent) {\n             configBuilder.setUserAgent(userAgent);\n             return this;\n         }\n \n-        public DerivedBuilder setAllowPoolingConnection(boolean allowPoolingConnection) {\n+        public Builder setAllowPoolingConnection(boolean allowPoolingConnection) {\n             configBuilder.setAllowPoolingConnection(allowPoolingConnection);\n             return this;\n         }\n \n-        public DerivedBuilder setScheduledExecutorService(ScheduledExecutorService reaper) {\n+        public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {\n             configBuilder.setScheduledExecutorService(reaper);\n             return this;\n         }\n \n-        public DerivedBuilder setExecutorService(ExecutorService applicationThreadPool) {\n+        public Builder setExecutorService(ExecutorService applicationThreadPool) {\n             configBuilder.setExecutorService(applicationThreadPool);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n+        public Builder setSSLEngineFactory(SSLEngineFactory sslEngineFactory) {\n             configBuilder.setSSLEngineFactory(sslEngineFactory);\n             return this;\n         }\n \n-        public DerivedBuilder setSSLContext(final SSLContext sslContext) {\n+        public Builder setSSLContext(final SSLContext sslContext) {\n             configBuilder.setSSLContext(sslContext);\n             return this;\n         }\n \n-        public DerivedBuilder setRequestCompressionLevel(int requestCompressionLevel) {\n+        public Builder setRequestCompressionLevel(int requestCompressionLevel) {\n             configBuilder.setRequestCompressionLevel(requestCompressionLevel);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmDomain(String domain) {\n+        public Builder setRealmDomain(String domain) {\n             realm().setDomain(domain);\n             return this;\n         }\n@@ -482,27 +482,27 @@\n             return this;\n         }\n \n-        public DerivedBuilder setRealmPassword(String password) {\n+        public Builder setRealmPassword(String password) {\n             realm().setPassword(password);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmScheme(Realm.AuthScheme scheme) {\n+        public Builder setRealmScheme(Realm.AuthScheme scheme) {\n             realm().setScheme(scheme);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmName(String realmName) {\n+        public Builder setRealmName(String realmName) {\n             realm().setRealmName(realmName);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n+        public Builder setRealmUsePreemptiveAuth(boolean usePreemptiveAuth) {\n             realm().setUsePreemptiveAuth(usePreemptiveAuth);\n             return this;\n         }\n \n-        public DerivedBuilder setRealmEnconding(String enc) {\n+        public Builder setRealmEnconding(String enc) {\n             realm().setEnconding(enc);\n             return this;\n         }\n@@ -517,22 +517,22 @@\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPrincipal(String principal) {\n+        public Builder setProxyPrincipal(String principal) {\n             this.proxyPrincipal = principal;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPassword(String password) {\n+        public Builder setProxyPassword(String password) {\n             this.proxyPassword = password;\n             return this;\n         }\n \n-        public DerivedBuilder setProxyPort(int port) {\n+        public Builder setProxyPort(int port) {\n             this.proxyPort = port;\n             return this;\n         }\n         \n-        public DerivedBuilder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n+        public Builder setDefaultThrowableHandler(ThrowableHandler throwableHandler)\n         {\n             this.defaultThrowableHandler = throwableHandler;\n             return this;\n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 525,
        "bugNodeStartChar": 19936,
        "bugNodeLength": 135,
        "fixLineNum": 525,
        "fixNodeStartChar": 19936,
        "fixNodeLength": 128,
        "sourceBeforeFix": "public DerivedBuilder setProxyPassword(String password){   this.proxyPassword=password;   return this; } ",
        "sourceAfterFix": "public Builder setProxyPassword(String password){   this.proxyPassword=password;   return this; } "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "d0fb487b934e96378fed3bc3c0682f45a07338ff",
        "fixCommitParentSHA1": "4c261720d610b37a13bce73889bc9775f8857c13",
        "bugFilePath": "components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java",
        "fixPatch": "diff --git a/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java b/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java\nindex b930119..2b432d5 100644\n--- a/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java\n+++ b/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java\n@@ -109,7 +109,7 @@\n         boolean configIndexType = false;\n         String indexType = message.getHeader(ElasticsearchConfiguration.PARAM_INDEX_TYPE, String.class);\n         if (indexType == null) {\n-            message.setHeader(ElasticsearchConfiguration.PARAM_INDEX_TYPE, getEndpoint().getConfig().getIndexName());\n+            message.setHeader(ElasticsearchConfiguration.PARAM_INDEX_TYPE, getEndpoint().getConfig().getIndexType());\n             configIndexType = true;\n         }\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 112,
        "bugNodeStartChar": 4998,
        "bugNodeLength": 40,
        "fixLineNum": 112,
        "fixNodeStartChar": 4998,
        "fixNodeLength": 40,
        "sourceBeforeFix": "getEndpoint().getConfig().getIndexName()",
        "sourceAfterFix": "getEndpoint().getConfig().getIndexType()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "0e5fb3b2a49dc21509c63d70d2a6120830c4d51a",
        "fixCommitParentSHA1": "c19b4f172ee90391f9d3cdb7d78593f60c25da29",
        "bugFilePath": "modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java",
        "fixPatch": "diff --git a/modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java b/modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java\nindex 5b665bd..5a4fb1a 100755\n--- a/modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java\n+++ b/modules/activiti-jmx/src/test/java/org/activiti/management/jmx/MBeanInfoAssemblerTest.java\n@@ -136,9 +136,9 @@\n     ModelMBeanInfo beanInfo = mbeanInfoAssembler.getMBeanInfo(new BadInherited(), null, \"someName\");\r\n     assertNotNull(beanInfo);\r\n     assertNotNull(beanInfo.getAttributes());\r\n-    assertEquals(0, beanInfo.getAttributes().length);\r\n+    assertEquals(2, beanInfo.getAttributes().length);\r\n     assertNotNull(beanInfo.getOperations());\r\n-    assertEquals(0, beanInfo.getOperations().length);\r\n+    assertEquals(1, beanInfo.getOperations().length);\r\n \r\n   }\r\n \r\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 139,
        "bugNodeStartChar": 5667,
        "bugNodeLength": 48,
        "fixLineNum": 139,
        "fixNodeStartChar": 5529,
        "fixNodeLength": 48,
        "sourceBeforeFix": "assertEquals(0,beanInfo.getAttributes().length)",
        "sourceAfterFix": "assertEquals(2,beanInfo.getAttributes().length)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "f94694c2231e5c1025b76bcfe0337304a76ec94a",
        "fixCommitParentSHA1": "6f37a6330b0ff7eb2dfae31900c7bee16fca678e",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\nindex 971c521..a35ea92 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTable.java\n@@ -284,7 +284,7 @@\n                     if (getColumnClass(counter) == ParseTreeTableModel.class) {\n                         final MouseEvent mouseEvent = (MouseEvent) event;\n                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),\n-                                mouseEvent.getWhen(), mouseEvent.getModifiers(),\n+                                mouseEvent.getWhen(), mouseEvent.getModifiersEx(),\n                                 mouseEvent.getX() - getCellRect(0, counter, true).x,\n                                 mouseEvent.getY(), mouseEvent.getClickCount(),\n                                 mouseEvent.isPopupTrigger());\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 287,
        "bugNodeStartChar": 10741,
        "bugNodeLength": 25,
        "fixLineNum": 287,
        "fixNodeStartChar": 10741,
        "fixNodeLength": 27,
        "sourceBeforeFix": "mouseEvent.getModifiers()",
        "sourceAfterFix": "mouseEvent.getModifiersEx()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "2017a6ab6bfa3b454ada907d36faed810b8e69b6",
        "fixCommitParentSHA1": "d9c14802ae7a978b284e4b701c498da3c582c984",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/Main.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/Main.java b/presto-main/src/main/java/com/facebook/presto/Main.java\nindex 21c63f0..3cf8ec6 100644\n--- a/presto-main/src/main/java/com/facebook/presto/Main.java\n+++ b/presto-main/src/main/java/com/facebook/presto/Main.java\n@@ -24,12 +24,12 @@\n     public static void main(String[] args)\n             throws Exception\n     {\n-        CliBuilder<Runnable> builder = Cli.buildCli(\"presto\", Runnable.class)\n+        CliBuilder<Runnable> builder = Cli.<Runnable>builder(\"presto\")\n                 .withDefaultCommand(Server.class)\n                 .withCommand(Server.class)\n                 .withCommand(Execute.class)\n                 .withCommand(Console.class)\n-                .withCommands(Help.class);\n+                .withCommand(Help.class);\n \n         builder.withGroup(\"convert\")\n                 .withDescription(\"convert file formats\")\n",
        "projectName": "facebook.presto",
        "bugLineNum": 27,
        "bugNodeStartChar": 767,
        "bugNodeLength": 261,
        "fixLineNum": 27,
        "fixNodeStartChar": 767,
        "fixNodeLength": 260,
        "sourceBeforeFix": "Cli.buildCli(\"presto\",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommands(Help.class)",
        "sourceAfterFix": "Cli.buildCli(\"presto\",Runnable.class).withDefaultCommand(Server.class).withCommand(Server.class).withCommand(Execute.class).withCommand(Console.class).withCommand(Help.class)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "1be8d7fe7a40efb4c363679538e4c0cb31c6b43e",
        "fixCommitParentSHA1": "ef8bba0fe5429d2a4c8047ee309f844cb8d6b4ce",
        "bugFilePath": "src/com/google/javascript/jscomp/SourceMapInput.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/SourceMapInput.java b/src/com/google/javascript/jscomp/SourceMapInput.java\nindex 645d34a..d35d559 100644\n--- a/src/com/google/javascript/jscomp/SourceMapInput.java\n+++ b/src/com/google/javascript/jscomp/SourceMapInput.java\n@@ -33,10 +33,11 @@\n   private transient volatile boolean cached = false;\n \n   static final DiagnosticType SOURCEMAP_RESOLVE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap: {0}\");\n+      DiagnosticType.warning(\"SOURCEMAP_RESOLVE_FAILED\", \"Failed to resolve sourcemap at {0}: {1}\");\n \n   static final DiagnosticType SOURCEMAP_PARSE_FAILED =\n-      DiagnosticType.warning(\"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap: {0}\");\n+      DiagnosticType.warning(\n+          \"SOURCEMAP_PARSE_FAILED\", \"Failed to parse malformed sourcemap in {0}: {1}\");\n \n   public SourceMapInput(SourceFile sourceFile) {\n     this.sourceFile = sourceFile;\n@@ -57,10 +58,12 @@\n         consumer.parse(sourceMapContents);\n         parsedSourceMap = consumer;\n       } catch (IOException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       } catch (SourceMapParseException e) {\n-        JSError error = JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath);\n+        JSError error =\n+            JSError.make(SourceMapInput.SOURCEMAP_PARSE_FAILED, sourceMapPath, e.getMessage());\n         errorManager.report(error.getDefaultLevel(), error);\n       }\n     }\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 60,
        "bugNodeStartChar": 2329,
        "bugNodeLength": 68,
        "fixLineNum": 61,
        "fixNodeStartChar": 2341,
        "fixNodeLength": 84,
        "sourceBeforeFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath)",
        "sourceAfterFix": "JSError.make(SourceMapInput.SOURCEMAP_RESOLVE_FAILED,sourceMapPath,e.getMessage())"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "dc3e306e42f482e9fc8a92963a50c7546ffeda4c",
        "fixCommitParentSHA1": "811ac210bbc4b763b186548315a001edd7f6622d",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\nindex 4fbdf06..1010df6 100644\n--- a/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\n+++ b/hazelcast/src/test/java/com/hazelcast/test/HazelcastParallelClassRunner.java\n@@ -47,7 +47,7 @@\n \n     @Override\n     protected void runChild(final FrameworkMethod method, final RunNotifier notifier) {\n-        while (numThreads.get() > MAX_THREADS) {\n+        while (numThreads.get() >= MAX_THREADS) {\n             try {\n                 Thread.sleep(25);\n             } catch (InterruptedException e) {\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 50,
        "bugNodeStartChar": 1626,
        "bugNodeLength": 30,
        "fixLineNum": 50,
        "fixNodeStartChar": 1626,
        "fixNodeLength": 31,
        "sourceBeforeFix": "numThreads.get() > MAX_THREADS",
        "sourceAfterFix": "numThreads.get() >= MAX_THREADS"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "d52950fe7a7a7dd5dc1262d5a6833f726f012dc8",
        "fixCommitParentSHA1": "c0373fd311479a3fc3d5e177f8675431ff297b50",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/DelayerPerRouteTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/DelayerPerRouteTest.java b/camel-core/src/test/java/org/apache/camel/processor/DelayerPerRouteTest.java\nindex 3854ee8..ca4dbc2 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/DelayerPerRouteTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/DelayerPerRouteTest.java\n@@ -39,9 +39,9 @@\n         return new RouteBuilder() {\n             @Override\n             public void configure() throws Exception {\n-                context.setDelayer(1000);\n+                context.setDelayer(2000);\n \n-                from(\"seda:a\").delayer(500).to(\"mock:result\");\n+                from(\"seda:a\").delayer(1000).to(\"mock:result\");\n \n                 from(\"seda:b\").noDelayer().to(\"mock:result\");\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 44,
        "bugNodeStartChar": 1589,
        "bugNodeLength": 27,
        "fixLineNum": 44,
        "fixNodeStartChar": 1589,
        "fixNodeLength": 28,
        "sourceBeforeFix": "from(\"seda:a\").delayer(500)",
        "sourceAfterFix": "from(\"seda:a\").delayer(1000)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540",
        "fixCommitParentSHA1": "d60fca29c0ca995c76d838f34f17d08d7752279b",
        "bugFilePath": "components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java",
        "fixPatch": "diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\nindex b58ae57..7654c27 100644\n--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\n+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\n@@ -266,11 +266,11 @@\n         try {\n             Object answer;\n \n-            XMLStreamReader xmlReader;\n+            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n-                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n+                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n-                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n+                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {\n",
        "projectName": "apache.camel",
        "bugLineNum": 271,
        "bugNodeStartChar": 11587,
        "bugNodeLength": 90,
        "fixLineNum": 271,
        "fixNodeStartChar": 11587,
        "fixNodeLength": 100,
        "sourceBeforeFix": "typeConverter.convertTo(XMLStreamReader.class,createNonXmlFilterReader(exchange,stream))",
        "sourceAfterFix": "typeConverter.convertTo(XMLStreamReader.class,exchange,createNonXmlFilterReader(exchange,stream))"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "8d8e6b726ed729117504c85b0aa08f45af9e0010",
        "fixCommitParentSHA1": "6c30fe10d295362fc28748752b55893abd4c9590",
        "bugFilePath": "src/web/org/openmrs/web/controller/RegimenPortletController.java",
        "fixPatch": "diff --git a/src/web/org/openmrs/web/controller/RegimenPortletController.java b/src/web/org/openmrs/web/controller/RegimenPortletController.java\nindex 2314416..1f6cd19 100644\n--- a/src/web/org/openmrs/web/controller/RegimenPortletController.java\n+++ b/src/web/org/openmrs/web/controller/RegimenPortletController.java\n@@ -68,7 +68,7 @@\n \t\t\t\t\t\tsetIdToUse = \"*\";\r\n \t\t\t\t\tif (setIdToUse != null) {\r\n \t\t\t\t\t\thelper(patientDrugOrderSets, setIdToUse, order);\r\n-\t\t\t\t\t\tif (order.isCurrent())\r\n+\t\t\t\t\t\tif (order.isCurrent() || order.isFuture())\r\n \t\t\t\t\t\t\thelper(currentDrugOrderSets, setIdToUse, order);\r\n \t\t\t\t\t\telse\r\n \t\t\t\t\t\t\thelper(completedDrugOrderSets, setIdToUse, order);\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 71,
        "bugNodeStartChar": 2870,
        "bugNodeLength": 17,
        "fixLineNum": 71,
        "fixNodeStartChar": 2800,
        "fixNodeLength": 37,
        "sourceBeforeFix": "order.isCurrent()",
        "sourceAfterFix": "order.isCurrent() || order.isFuture()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "35076f03b4d9b49d15c77bcf6d42f7463fff4397",
        "fixCommitParentSHA1": "b43d6eab73532db6fb7123a162c20e6c259e8243",
        "bugFilePath": "ExportPlugin/src/org/gephi/io/exporter/plugin/ExporterGEXF.java",
        "fixPatch": "diff --git a/ExportPlugin/src/org/gephi/io/exporter/plugin/ExporterGEXF.java b/ExportPlugin/src/org/gephi/io/exporter/plugin/ExporterGEXF.java\nindex 48b4b6c..897b733 100644\n--- a/ExportPlugin/src/org/gephi/io/exporter/plugin/ExporterGEXF.java\n+++ b/ExportPlugin/src/org/gephi/io/exporter/plugin/ExporterGEXF.java\n@@ -409,10 +409,10 @@\n         edgeE.setAttribute(\"source\", e.getSource().getNodeData().getId());\n         edgeE.setAttribute(\"target\", e.getTarget().getNodeData().getId());\n \n-        if( e.isDirected() && !graphModel.isDirected() ) {\n+        if( e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"directed\");\n         }\n-        else if( !e.isDirected() && graphModel.isDirected() ) {\n+        else if( !e.isDirected() && graphModel.isMixed() ) {\n             edgeE.setAttribute(\"type\", \"undirected\");\n         }\n \n",
        "projectName": "gephi.gephi",
        "bugLineNum": 415,
        "bugNodeStartChar": 15138,
        "bugNodeLength": 23,
        "fixLineNum": 415,
        "fixNodeStartChar": 15138,
        "fixNodeLength": 20,
        "sourceBeforeFix": "graphModel.isDirected()",
        "sourceAfterFix": "graphModel.isMixed()"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "8639593ad0e6bcbdbe8e6fe3263c9b2550169942",
        "fixCommitParentSHA1": "1d96fb5e6a7c606f7b676111d061d90940fe6f8a",
        "bugFilePath": "modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java",
        "fixPatch": "diff --git a/modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java b/modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java\nindex fd49c8a..67b74a9 100644\n--- a/modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java\n+++ b/modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java\n@@ -470,7 +470,7 @@\n         float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n \n         graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n-        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphWidth / 2;\n+        graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphHeight / 2;\n         graphDrawable.cameraLocation[2] = newCameraLocation;\n \n         graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 473,
        "bugNodeStartChar": 18948,
        "bugNodeLength": 14,
        "fixLineNum": 473,
        "fixNodeStartChar": 18948,
        "fixNodeLength": 15,
        "sourceBeforeFix": "graphWidth / 2",
        "sourceAfterFix": "graphHeight / 2"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "2983b18fd66c6b375d7589f2b78df637151dd9db",
        "fixCommitParentSHA1": "edfa0d932a48c57c38a9fb2701394cccd0778b58",
        "bugFilePath": "modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java",
        "fixPatch": "diff --git a/modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java b/modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java\nindex 4bcd048..431ddd7 100644\n--- a/modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java\n+++ b/modules/activiti-rest/src/test/java/org/activiti/rest/api/management/JobCollectionResourceTest.java\n@@ -75,7 +75,7 @@\n     \n     // Fetch using processDefinitionId\n     url = RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + \"?processDefinitionId=\" + processInstance.getProcessDefinitionId();\n-    assertResultsPresentInDataResponse(url, timerJob.getId());\n+    assertResultsPresentInDataResponse(url, asyncJob.getId(), timerJob.getId());\n     \n     url = RestUrls.createRelativeResourceUrl(RestUrls.URL_JOB_COLLECTION) + \"?processDefinitionId=unexisting\";\n     assertResultsPresentInDataResponse(url);\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 78,
        "bugNodeStartChar": 3463,
        "bugNodeLength": 57,
        "fixLineNum": 78,
        "fixNodeStartChar": 3463,
        "fixNodeLength": 75,
        "sourceBeforeFix": "assertResultsPresentInDataResponse(url,timerJob.getId())",
        "sourceAfterFix": "assertResultsPresentInDataResponse(url,asyncJob.getId(),timerJob.getId())"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "b7e9f805c94e67b56d9c3a9cc201c19dc2e759f9",
        "fixCommitParentSHA1": "e69a5879b0c162492990d3c03a9aaed97ff471af",
        "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java",
        "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\nindex eeda381..4c827d8 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -56,7 +56,7 @@\n  * @author Andy Wilkinson\n  * @author Ivan Sopov\n  */\n-@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = false)\n+@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\n public class ServerProperties implements EmbeddedServletContainerCustomizer, Ordered {\n \n \t/**\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 59,
        "bugNodeStartChar": 2672,
        "bugNodeLength": 27,
        "fixLineNum": 59,
        "fixNodeStartChar": 2672,
        "fixNodeLength": 26,
        "sourceBeforeFix": "ignoreUnknownFields=false",
        "sourceAfterFix": "ignoreUnknownFields=true"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "4d379e7a16584651192c0f451a7f362d112e27b1",
        "fixCommitParentSHA1": "5cc04b89b2c37085c5d7809718aeff76810ab5a5",
        "bugFilePath": "src/edu/stanford/nlp/graph/DirectedMultiGraph.java",
        "fixPatch": "diff --git a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java\nindex f2118c1..98f4c96 100644\n--- a/src/edu/stanford/nlp/graph/DirectedMultiGraph.java\n+++ b/src/edu/stanford/nlp/graph/DirectedMultiGraph.java\n@@ -138,7 +138,7 @@\n     }\n     boolean foundOut = outgoingEdges.containsKey(source) && outgoingEdges.get(source).containsKey(dest) &&\n         outgoingEdges.get(source).get(dest).remove(data);\n-    boolean foundIn = incomingEdges.containsKey(source) && incomingEdges.get(source).containsKey(dest) &&\n+    boolean foundIn = incomingEdges.containsKey(dest) && incomingEdges.get(dest).containsKey(source) &&\n         incomingEdges.get(dest).get(source).remove(data);\n     if (foundOut && !foundIn) {\n       throw new AssertionError(\"Edge found in outgoing but not incoming\");\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 141,
        "bugNodeStartChar": 4155,
        "bugNodeLength": 33,
        "fixLineNum": 141,
        "fixNodeStartChar": 4155,
        "fixNodeLength": 31,
        "sourceBeforeFix": "incomingEdges.containsKey(source)",
        "sourceAfterFix": "incomingEdges.containsKey(dest)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "6ca7d1534779e93064f0dda88c7a0d999c068ecf",
        "fixCommitParentSHA1": "6f9b2ac3f82d6565ea543523b8fe62898b150808",
        "bugFilePath": "servers/src/main/java/tachyon/master/TachyonMaster.java",
        "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/TachyonMaster.java b/servers/src/main/java/tachyon/master/TachyonMaster.java\nindex bdc6c10..1b85915 100644\n--- a/servers/src/main/java/tachyon/master/TachyonMaster.java\n+++ b/servers/src/main/java/tachyon/master/TachyonMaster.java\n@@ -199,8 +199,9 @@\n       mAdditionalMasters = Lists.newArrayList();\n       List<? extends  Master> masters = Lists.newArrayList(mBlockMaster, mFileSystemMaster);\n       // Discover and register the available factories\n+      // NOTE, ClassLoader is explicitly specified so we don't need to set ContextClassLoader\n       ServiceLoader<MasterFactory> discoveredMasterFactories =\n-          ServiceLoader.load(MasterFactory.class);\n+          ServiceLoader.load(MasterFactory.class, MasterFactory.class.getClassLoader());\n       for (MasterFactory factory : discoveredMasterFactories) {\n         Master master = factory.create(masters, journalDirectory);\n         if (master != null) {\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 203,
        "bugNodeStartChar": 8369,
        "bugNodeLength": 39,
        "fixLineNum": 203,
        "fixNodeStartChar": 8369,
        "fixNodeLength": 77,
        "sourceBeforeFix": "ServiceLoader.load(MasterFactory.class)",
        "sourceAfterFix": "ServiceLoader.load(MasterFactory.class,MasterFactory.class.getClassLoader())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe",
        "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234",
        "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java",
        "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\nindex 2cbfaa9..b2664d3 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck;\n \n-public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {\n+public class XpathRegressionMethodParamPadTest extends XpathTestSupport {\n \n     @Test\n     public void testOne() throws Exception {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 31,
        "bugNodeStartChar": 1320,
        "bugNodeLength": 2971,
        "fixLineNum": 31,
        "fixNodeStartChar": 1320,
        "fixNodeLength": 2963,
        "sourceBeforeFix": "public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"4:37: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='InputMethodParamPad']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"5:13: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(\"option\",\"space\");     final String[] expectedViolation={\"4:25: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ",
        "sourceAfterFix": "public class XpathRegressionMethodParamPadTest extends XpathTestSupport {   @Test public void testOne() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadOne.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"4:37: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadOne']/OBJBLOCK\" + \"/METHOD_DEF[@text='InputMethodParamPad']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testTwo() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadTwo.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     final String[] expectedViolation={\"5:13: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_LINE_PREVIOUS,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadTwo']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   }   @Test public void testThree() throws Exception {     final String checkName=MethodParamPadCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionMethodParamPadThree.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(MethodParamPadCheck.class);     moduleConfig.addAttribute(\"option\",\"space\");     final String[] expectedViolation={\"4:25: \" + getCheckMessage(MethodParamPadCheck.class,MethodParamPadCheck.MSG_WS_NOT_PRECEDED,\"(\")};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionMethodParamPadThree']/OBJBLOCK\" + \"/METHOD_DEF[@text='sayHello']/LPAREN\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "e5560c172ef6ba15be5dd24d588138bc3913ae04",
        "fixCommitParentSHA1": "a4a99577e4f975f9103a34b21025bc3ed353b132",
        "bugFilePath": "modules/VisualizationImpl/src/main/java/org/gephi/visualization/apiimpl/VizConfig.java",
        "fixPatch": "diff --git a/modules/VisualizationImpl/src/main/java/org/gephi/visualization/apiimpl/VizConfig.java b/modules/VisualizationImpl/src/main/java/org/gephi/visualization/apiimpl/VizConfig.java\nindex 2bbbcf5..a4ed634 100644\n--- a/modules/VisualizationImpl/src/main/java/org/gephi/visualization/apiimpl/VizConfig.java\n+++ b/modules/VisualizationImpl/src/main/java/org/gephi/visualization/apiimpl/VizConfig.java\n@@ -145,7 +145,7 @@\n     public static final int DEFAULT_OCTREE_DEPTH = 5;\n     public static final int DEFAULT_OCTREE_WIDTH = 50000;\n     public static final boolean DEFAULT_CLEAN_DELETED_MODELS = true;\n-    public static final boolean DEFAULT_LABEL_MIPMAP = true;\n+    public static final boolean DEFAULT_LABEL_MIPMAP = false;//Disabled since it works bad with Intel GPUs. See https://github.com/gephi/gephi/issues/1494 (Some label characters fade away when zooming out)\n     public static final boolean DEFAULT_LABEL_ANTIALIASED = true;\n     public static final boolean DEFAULT_LABEL_FRACTIONAL_METRICS = true;\n     public static final boolean DEFAULT_VIZBAR = true;\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 148,
        "bugNodeStartChar": 9280,
        "bugNodeLength": 27,
        "fixLineNum": 148,
        "fixNodeStartChar": 9280,
        "fixNodeLength": 28,
        "sourceBeforeFix": "DEFAULT_LABEL_MIPMAP=true",
        "sourceAfterFix": "DEFAULT_LABEL_MIPMAP=false"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "2877472d921d414b9c296c8997f30e838f08d351",
        "fixCommitParentSHA1": "f0dcb974763a4607d1660d90dc3d29c7f5f0a543",
        "bugFilePath": "src/main/java/org/bukkit/DyeColor.java",
        "fixPatch": "diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java\nindex c176dfd..b8e59a4 100644\n--- a/src/main/java/org/bukkit/DyeColor.java\n+++ b/src/main/java/org/bukkit/DyeColor.java\n@@ -12,67 +12,67 @@\n     /**\n      * Represents white dye\n      */\n-    WHITE(0x0, 0xF, Color.WHITE, Color.fromRGB(0x1E1B1B)),\n+    WHITE(0x0, 0xF, Color.WHITE, Color.fromRGB(0xF0F0F0)),\n     /**\n      * Represents orange dye\n      */\n-    ORANGE(0x1, 0xE, Color.fromRGB(0xD87f33), Color.fromRGB(0xB3312C)),\n+    ORANGE(0x1, 0xE, Color.fromRGB(0xD87F33), Color.fromRGB(0xEB8844)),\n     /**\n      * Represents magenta dye\n      */\n-    MAGENTA(0x2, 0xD, Color.fromRGB(0xB24CD8), Color.fromRGB(0x3B511A)),\n+    MAGENTA(0x2, 0xD, Color.fromRGB(0xB24CD8), Color.fromRGB(0xC354CD)),\n     /**\n      * Represents light blue dye\n      */\n-    LIGHT_BLUE(0x3, 0xC, Color.fromRGB(0x6699D8), Color.fromRGB(0x51301A)),\n+    LIGHT_BLUE(0x3, 0xC, Color.fromRGB(0x6699D8), Color.fromRGB(0x6689D3)),\n     /**\n      * Represents yellow dye\n      */\n-    YELLOW(0x4, 0xB, Color.fromRGB(0xE5E533), Color.fromRGB(0x253192)),\n+    YELLOW(0x4, 0xB, Color.fromRGB(0xE5E533), Color.fromRGB(0xDECF2A)),\n     /**\n      * Represents lime dye\n      */\n-    LIME(0x5, 0xA, Color.fromRGB(0x7FCC19), Color.fromRGB(0x7B2FBE)),\n+    LIME(0x5, 0xA, Color.fromRGB(0x7FCC19), Color.fromRGB(0x41CD34)),\n     /**\n      * Represents pink dye\n      */\n-    PINK(0x6, 0x9, Color.fromRGB(0xF27FA5), Color.fromRGB(0x287697)),\n+    PINK(0x6, 0x9, Color.fromRGB(0xF27FA5), Color.fromRGB(0xD88198)),\n     /**\n      * Represents gray dye\n      */\n-    GRAY(0x7, 0x8, Color.fromRGB(0x4C4C4C), Color.fromRGB(0xABABAB)),\n+    GRAY(0x7, 0x8, Color.fromRGB(0x4C4C4C), Color.fromRGB(0x434343)),\n     /**\n      * Represents silver dye\n      */\n-    SILVER(0x8, 0x7, Color.fromRGB(0x999999), Color.fromRGB(0x434343)),\n+    SILVER(0x8, 0x7, Color.fromRGB(0x999999), Color.fromRGB(0xABABAB)),\n     /**\n      * Represents cyan dye\n      */\n-    CYAN(0x9, 0x6, Color.fromRGB(0x4C7F99), Color.fromRGB(0xD88198)),\n+    CYAN(0x9, 0x6, Color.fromRGB(0x4C7F99), Color.fromRGB(0x287697)),\n     /**\n      * Represents purple dye\n      */\n-    PURPLE(0xA, 0x5, Color.fromRGB(0x7F3FB2), Color.fromRGB(0x41CD34)),\n+    PURPLE(0xA, 0x5, Color.fromRGB(0x7F3FB2), Color.fromRGB(0x7B2FBE)),\n     /**\n      * Represents blue dye\n      */\n-    BLUE(0xB, 0x4, Color.fromRGB(0x334CB2), Color.fromRGB(0xDECF2A)),\n+    BLUE(0xB, 0x4, Color.fromRGB(0x334CB2), Color.fromRGB(0x253192)),\n     /**\n      * Represents brown dye\n      */\n-    BROWN(0xC, 0x3, Color.fromRGB(0x664C33), Color.fromRGB(0x6689D3)),\n+    BROWN(0xC, 0x3, Color.fromRGB(0x664C33), Color.fromRGB(0x51301A)),\n     /**\n      * Represents green dye\n      */\n-    GREEN(0xD, 0x2, Color.fromRGB(0x667F33), Color.fromRGB(0xC354CD)),\n+    GREEN(0xD, 0x2, Color.fromRGB(0x667F33), Color.fromRGB(0x3B511A)),\n     /**\n      * Represents red dye\n      */\n-    RED(0xE, 0x1, Color.fromRGB(0x993333), Color.fromRGB(0xEB8844)),\n+    RED(0xE, 0x1, Color.fromRGB(0x993333), Color.fromRGB(0xB3312C)),\n     /**\n      * Represents black dye\n      */\n-    BLACK(0xF, 0x0, Color.fromRGB(0x191919), Color.fromRGB(0xF0F0F0));\n+    BLACK(0xF, 0x0, Color.fromRGB(0x191919), Color.fromRGB(0x1E1B1B));\n \n     private final byte woolData;\n     private final byte dyeData;\n",
        "projectName": "Bukkit.Bukkit",
        "bugLineNum": 43,
        "bugNodeStartChar": 1067,
        "bugNodeLength": 23,
        "fixLineNum": 43,
        "fixNodeStartChar": 1067,
        "fixNodeLength": 23,
        "sourceBeforeFix": "Color.fromRGB(0xABABAB)",
        "sourceAfterFix": "Color.fromRGB(0x434343)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "6e4e6d32757138712bcba38d7ab1ed8ae97cdcb5",
        "fixCommitParentSHA1": "a19c501787a2f68a716307dbed2ed7333f448e57",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java\nindex a056822..ffd14e0 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/io/orc/OrcStruct.java\n@@ -216,7 +216,7 @@\n     @Override\n     public StructField getStructFieldRef(String s) {\n       for(StructField field: fields) {\n-        if (field.getFieldName().equals(s)) {\n+        if (field.getFieldName().equalsIgnoreCase(s)) {\n           return field;\n         }\n       }\n@@ -304,7 +304,7 @@\n         for(int i = 0; i < fields.size(); ++i) {\n           StructField left = other.get(i);\n           StructField right = fields.get(i);\n-          if (!(left.getFieldName().equals(right.getFieldName()) &&\n+          if (!(left.getFieldName().equalsIgnoreCase(right.getFieldName()) &&\n                 left.getFieldObjectInspector().equals\n                     (right.getFieldObjectInspector()))) {\n             return false;\n",
        "projectName": "apache.hive",
        "bugLineNum": 219,
        "bugNodeStartChar": 6556,
        "bugNodeLength": 30,
        "fixLineNum": 219,
        "fixNodeStartChar": 6556,
        "fixNodeLength": 40,
        "sourceBeforeFix": "field.getFieldName().equals(s)",
        "sourceAfterFix": "field.getFieldName().equalsIgnoreCase(s)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "655c286b7a16a48581b82d63dc3e3b1690e5f1e1",
        "fixCommitParentSHA1": "df1fdcd1f39d1e3ef7e1a6d698303c0a17996e89",
        "bugFilePath": "integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java",
        "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\nindex 21e199f..482ecf4 100644\n--- a/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/MasterClientAuthenticationIntegrationTest.java\n@@ -175,7 +175,7 @@\n     System.setProperty(Constants.TACHYON_SECURITY_AUTHENTICATION,\n         AuthType.KERBEROS.getAuthName());\n     //Currently the kerberos authentication doesn't support\n-    mThrown.expect(SaslException.class);\n+    mThrown.expect(UnsupportedOperationException.class);\n     mThrown.expectMessage(\"Kerberos is not supported currently\");\n     //start cluster\n     mLocalTachyonCluster.start();\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 178,
        "bugNodeStartChar": 6537,
        "bugNodeLength": 19,
        "fixLineNum": 178,
        "fixNodeStartChar": 6537,
        "fixNodeLength": 35,
        "sourceBeforeFix": "SaslException.class",
        "sourceAfterFix": "UnsupportedOperationException.class"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "8b849574ca1186c65124b43da8de6be6bace3f96",
        "fixCommitParentSHA1": "863decce5f38c8cde9882a0e172cbfe469f05743",
        "bugFilePath": "src/jvm/clojure/lang/Util.java",
        "fixPatch": "diff --git a/src/jvm/clojure/lang/Util.java b/src/jvm/clojure/lang/Util.java\nindex eb94bfb..a3306db 100644\n--- a/src/jvm/clojure/lang/Util.java\n+++ b/src/jvm/clojure/lang/Util.java\n@@ -35,6 +35,7 @@\n \treturn k1 != null && k1.equals(k2);\n }\n \n+//*\n static public boolean equals(long x, long y){\n \treturn x == y;\n }\n@@ -44,20 +45,21 @@\n }\n \n static public boolean equals(long x, Object y){\n-\treturn equals((Object)x,y);\n+\treturn equals(Numbers.num(x),y);\n }\n \n static public boolean equals(Object x, long y){\n-\treturn equals(x,(Object)y);\n+\treturn equals(x,Numbers.num(y));\n }\n \n static public boolean equals(double x, Object y){\n-\treturn equals((Object)x,y);\n+\treturn equals((Double)x,y);\n }\n \n static public boolean equals(Object x, double y){\n-\treturn equals(x,(Object)y);\n+\treturn equals(x,(Double)y);\n }\n+//*/\n \n static public boolean identical(Object k1, Object k2){\n \treturn k1 == k2;\n",
        "projectName": "clojure.clojure",
        "bugLineNum": 55,
        "bugNodeStartChar": 1422,
        "bugNodeLength": 9,
        "fixLineNum": 55,
        "fixNodeStartChar": 1422,
        "fixNodeLength": 9,
        "sourceBeforeFix": "(Object)x",
        "sourceAfterFix": "(Double)x"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "f24f07f3cd5f7a1b9fe0ed4606208dbf2cf0f817",
        "fixCommitParentSHA1": "cb769efcf659c15ed063a40561e92f0bfcd5a4a1",
        "bugFilePath": "src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java",
        "fixPatch": "diff --git a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\nindex b340135..5bccab1 100644\n--- a/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\n+++ b/src/main/java/io/vertx/core/http/impl/WebSocketImplBase.java\n@@ -323,7 +323,7 @@\n   public S binaryMessageHandler(Handler<Buffer> handler) {\n     synchronized (conn) {\n       checkClosed();\n-      if (frameHandler == null || frameHandler.getClass() == FrameAggregator.class) {\n+      if (frameHandler == null || frameHandler.getClass() != FrameAggregator.class) {\n         frameHandler = new FrameAggregator();\n       }\n       ((FrameAggregator) frameHandler).binaryMessageHandler = handler;\n",
        "projectName": "eclipse.vert.x",
        "bugLineNum": 326,
        "bugNodeStartChar": 10335,
        "bugNodeLength": 48,
        "fixLineNum": 326,
        "fixNodeStartChar": 10335,
        "fixNodeLength": 48,
        "sourceBeforeFix": "frameHandler.getClass() == FrameAggregator.class",
        "sourceAfterFix": "frameHandler.getClass() != FrameAggregator.class"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "998d200618f6c6699f8bacd059ffda7c54f4d39e",
        "fixCommitParentSHA1": "5bcc5b810895eb0463cd285f1689212b6ace7ba4",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PreconditionRules.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PreconditionRules.java b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PreconditionRules.java\nindex b6f68a1..fb7a052 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PreconditionRules.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/planner/iterative/rule/PreconditionRules.java\n@@ -28,10 +28,10 @@\n \n     public static Rule<ExchangeNode> checkRulesAreFiredBeforeAddExchangesRule()\n     {\n-        return checkPlanDoNotMatch(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n+        return checkNoPlanNodeMatches(exchange(), \"Expected rules to be fired before 'AddExchanges' optimizer\");\n     }\n \n-    public static <T extends PlanNode> Rule<T> checkPlanDoNotMatch(Pattern<T> pattern, String message)\n+    private static <T extends PlanNode> Rule<T> checkNoPlanNodeMatches(Pattern<T> pattern, String message)\n     {\n         return new CheckNoPlanNodeMatchesRule<>(pattern, message);\n     }\n",
        "projectName": "facebook.presto",
        "bugLineNum": 31,
        "bugNodeStartChar": 1173,
        "bugNodeLength": 93,
        "fixLineNum": 31,
        "fixNodeStartChar": 1173,
        "fixNodeLength": 96,
        "sourceBeforeFix": "checkPlanDoNotMatch(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")",
        "sourceAfterFix": "checkNoPlanNodeMatches(exchange(),\"Expected rules to be fired before 'AddExchanges' optimizer\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "7bdcee5e3dfc368e8ba9c5752aa07d049ca5b5ae",
        "fixCommitParentSHA1": "dc31f617b39fdea955403a6eccd5f82d5c6383d9",
        "bugFilePath": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java",
        "fixPatch": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\nindex e703714..52f7b6d 100644\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/dependencies/Dependency.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -145,7 +145,7 @@\n \n \t\tExclusion(String groupId, String artifactId) {\n \t\t\tAssert.notNull(groupId, \"GroupId must not be null\");\n-\t\t\tAssert.notNull(groupId, \"ArtifactId must not be null\");\n+\t\t\tAssert.notNull(artifactId, \"ArtifactId must not be null\");\n \t\t\tthis.groupId = groupId;\n \t\t\tthis.artifactId = artifactId;\n \t\t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 148,
        "bugNodeStartChar": 3749,
        "bugNodeLength": 54,
        "fixLineNum": 148,
        "fixNodeStartChar": 3749,
        "fixNodeLength": 57,
        "sourceBeforeFix": "Assert.notNull(groupId,\"ArtifactId must not be null\")",
        "sourceAfterFix": "Assert.notNull(artifactId,\"ArtifactId must not be null\")"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "1e1ec95117cf4701f3df2530aaf7a7c4627599f3",
        "fixCommitParentSHA1": "09db64d9ff0d0dd046365f94b519e1a5d4a8fd9b",
        "bugFilePath": "presto-cli/src/main/java/com/facebook/presto/cli/Query.java",
        "fixPatch": "diff --git a/presto-cli/src/main/java/com/facebook/presto/cli/Query.java b/presto-cli/src/main/java/com/facebook/presto/cli/Query.java\nindex 56e1014..0b9ec37 100644\n--- a/presto-cli/src/main/java/com/facebook/presto/cli/Query.java\n+++ b/presto-cli/src/main/java/com/facebook/presto/cli/Query.java\n@@ -90,7 +90,7 @@\n             waitForData();\n         }\n \n-        if ((!client.isFailed()) && (!client.isGone())) {\n+        if ((!client.isFailed()) && (!client.isGone()) && (!client.isClosed())) {\n             QueryResults results = client.isValid() ? client.current() : client.finalResults();\n             if (results.getColumns() == null) {\n                 errorChannel.printf(\"Query %s has no columns\\n\", results.getId());\n",
        "projectName": "facebook.presto",
        "bugLineNum": 93,
        "bugNodeStartChar": 3085,
        "bugNodeLength": 42,
        "fixLineNum": 93,
        "fixNodeStartChar": 3085,
        "fixNodeLength": 66,
        "sourceBeforeFix": "(!client.isFailed()) && (!client.isGone())",
        "sourceAfterFix": "(!client.isFailed()) && (!client.isGone()) && (!client.isClosed())"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "351d79582d7a6cea56af9d61f45973d3cf73a484",
        "fixCommitParentSHA1": "dfc803a1cc442bafeb5aa375f0d9f0a31d655ff2",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\nindex 0f9d635..14bec5f 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java\n@@ -40,7 +40,7 @@\n  * <b>ignoredMethodNames</b> - names of methods to ignore.\n  * </p>\n  * <p>\n- * <b>ignoreOverridenMethods</b> - ignore checking overriden methods (marked with Override\n+ * <b>ignoreOverriddenMethods</b> - ignore checking overridden methods (marked with Override\n  *  or java.lang.Override annotation) default value is <b>true</b>.\n  * </p>\n  *\n@@ -56,8 +56,8 @@\n         \"finalize\",\n     };\n \n-    /** property for ignoring overriden methods. */\n-    private boolean ignoreOverridenMethods = true;\n+    /** property for ignoring overridden methods. */\n+    private boolean ignoreOverriddenMethods = true;\n \n     /** methods which should be ignored. */\n     private final Set<String> ignoredMethodNames = Sets.newHashSet();\n@@ -119,7 +119,7 @@\n     private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n         return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || ignoreOverridenMethods\n+            || ignoreOverriddenMethods\n                && (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                   || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n@@ -145,11 +145,11 @@\n     }\n \n     /**\n-     * Sets <b>ignoreOverridenMethods</b> property value.\n-     * @param ignoreOverridenMethods Check's property.\n+     * Sets <b>ignoreOverriddenMethods</b> property value.\n+     * @param ignoreOverriddenMethods Check's property.\n      */\n-    public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)\n+    public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)\n     {\n-        this.ignoreOverridenMethods = ignoreOverridenMethods;\n+        this.ignoreOverriddenMethods = ignoreOverriddenMethods;\n     }\n }\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 122,
        "bugNodeStartChar": 4247,
        "bugNodeLength": 193,
        "fixLineNum": 122,
        "fixNodeStartChar": 4247,
        "fixNodeLength": 194,
        "sourceBeforeFix": "ignoreOverridenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))",
        "sourceAfterFix": "ignoreOverriddenMethods && (AnnotationUtility.containsAnnotation(methodDef,\"Override\") || AnnotationUtility.containsAnnotation(methodDef,\"java.lang.Override\"))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "1d1489d03c272a0df15aea38b91088eed696786b",
        "fixCommitParentSHA1": "6d9f9648e97aca3be6537a79aca534af1cc6d4ee",
        "bugFilePath": "bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java",
        "fixPatch": "diff --git a/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java b/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\nindex 8f98cb6..70d0136 100644\n--- a/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\n+++ b/bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java\n@@ -41,9 +41,9 @@\n \t\tlogger.debug(\"about to transform '{}' by the function '{}'\", source, JSonPathExpression);\n \n \t\ttry {\n-\t\t\tString transformationResult = JsonPath.read(source, JSonPathExpression);\n+\t\t\tObject transformationResult = JsonPath.read(source, JSonPathExpression);\n \t\t\tlogger.debug(\"transformation resulted in '{}'\", transformationResult);\n-\t\t\treturn transformationResult;\n+\t\t\treturn (transformationResult != null) ? transformationResult.toString() : null;\n \t\t} catch(InvalidPathException e) {\n \t\t\tthrow new TransformationException(\"An error occured while transforming JSON expression.\", e);\n \t\t} \n",
        "projectName": "openhab.openhab",
        "bugLineNum": 44,
        "bugNodeStartChar": 1367,
        "bugNodeLength": 72,
        "fixLineNum": 44,
        "fixNodeStartChar": 1367,
        "fixNodeLength": 72,
        "sourceBeforeFix": "String transformationResult=JsonPath.read(source,JSonPathExpression); ",
        "sourceAfterFix": "Object transformationResult=JsonPath.read(source,JSonPathExpression); "
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 137,
        "bugNodeStartChar": 4367,
        "bugNodeLength": 7,
        "fixLineNum": 137,
        "fixNodeStartChar": 4367,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=39",
        "sourceAfterFix": "id=37"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "a48c1695a3795d9a2ed55069407f1d8f7a2358a0",
        "fixCommitParentSHA1": "bf0afc9f6ccf706acab1842f1982c6f4dc38f2b0",
        "bugFilePath": "lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java",
        "fixPatch": "diff --git a/lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java b/lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java\nindex e12ad6b..a450885 100644\n--- a/lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java\n+++ b/lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java\n@@ -41,7 +41,7 @@\n     @Nullable\n     @Override\n     public View getChildAt(final int index) {\n-        return mListView.getChildAt(index);\n+        return mListView.getListChildAt(index);\n     }\n \n     @Override\n",
        "projectName": "nhaarman.ListViewAnimations",
        "bugLineNum": 44,
        "bugNodeStartChar": 1340,
        "bugNodeLength": 27,
        "fixLineNum": 44,
        "fixNodeStartChar": 1340,
        "fixNodeLength": 31,
        "sourceBeforeFix": "mListView.getChildAt(index)",
        "sourceAfterFix": "mListView.getListChildAt(index)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "ac9fdf161f9e1464c3492fa6162895be00189540",
        "fixCommitParentSHA1": "d60fca29c0ca995c76d838f34f17d08d7752279b",
        "bugFilePath": "components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java",
        "fixPatch": "diff --git a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\nindex b58ae57..7654c27 100644\n--- a/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\n+++ b/components/camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java\n@@ -266,11 +266,11 @@\n         try {\n             Object answer;\n \n-            XMLStreamReader xmlReader;\n+            final XMLStreamReader xmlReader;\n             if (needFiltering(exchange)) {\n-                xmlReader = typeConverter.convertTo(XMLStreamReader.class, createNonXmlFilterReader(exchange, stream));\n+                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, createNonXmlFilterReader(exchange, stream));\n             } else {\n-                xmlReader = typeConverter.convertTo(XMLStreamReader.class, stream);\n+                xmlReader = typeConverter.convertTo(XMLStreamReader.class, exchange, stream);\n             }\n             String partClassFromHeader = exchange.getIn().getHeader(JaxbConstants.JAXB_PART_CLASS, String.class);\n             if (partialClass != null || partClassFromHeader != null) {\n",
        "projectName": "apache.camel",
        "bugLineNum": 273,
        "bugNodeStartChar": 11728,
        "bugNodeLength": 54,
        "fixLineNum": 273,
        "fixNodeStartChar": 11728,
        "fixNodeLength": 64,
        "sourceBeforeFix": "typeConverter.convertTo(XMLStreamReader.class,stream)",
        "sourceAfterFix": "typeConverter.convertTo(XMLStreamReader.class,exchange,stream)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "93b0ac77e59d936e91684ba016978a315d50d055",
        "fixCommitParentSHA1": "d9bc9431441ca3e0069a5082d846a795e366c9f0",
        "bugFilePath": "bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java",
        "fixPatch": "diff --git a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\nindex 8ccade9..ea17163 100644\n--- a/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n+++ b/bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java\n@@ -72,7 +72,7 @@\n \tpublic Item getItem(String name) throws ItemNotFoundException {\n \t\tfor(Collection<Item> items : itemMap.values()) {\n \t\t\tfor(Item item : items) {\n-\t\t\t\tif(item.getName().matches(name)) {\n+\t\t\t\tif(item.getName().equals(name)) {\n \t\t\t\t\treturn item;\n \t\t\t\t}\n \t\t\t}\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 75,
        "bugNodeStartChar": 2815,
        "bugNodeLength": 28,
        "fixLineNum": 75,
        "fixNodeStartChar": 2815,
        "fixNodeLength": 27,
        "sourceBeforeFix": "item.getName().matches(name)",
        "sourceAfterFix": "item.getName().equals(name)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "317b247a1fff90a1cc50d51f548d116221caf99a",
        "fixCommitParentSHA1": "3ec86771c517dcca322b7e327616f9d3cf945344",
        "bugFilePath": "clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java",
        "fixPatch": "diff --git a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\nindex 9472871..4b64b50 100644\n--- a/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n+++ b/clients/unshaded/src/main/java/tachyon/hadoop/AbstractTFS.java\n@@ -212,7 +212,7 @@\n     }\n     TachyonURI path = new TachyonURI(Utils.getPathWithoutScheme(cPath));\n     DeleteOptions options =\n-        new DeleteOptions.Builder(ClientContext.getConf()).setRecursive(recursive).build();\n+        new DeleteOptions.Builder().setRecursive(recursive).build();\n     try {\n       TachyonFile file = mTFS.open(path);\n       mTFS.delete(file, options);\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 215,
        "bugNodeStartChar": 8712,
        "bugNodeLength": 50,
        "fixLineNum": 215,
        "fixNodeStartChar": 8712,
        "fixNodeLength": 27,
        "sourceBeforeFix": "new DeleteOptions.Builder(ClientContext.getConf())",
        "sourceAfterFix": "new DeleteOptions.Builder()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "7ffa9eb8a9b21d708eba945be8709207503d9247",
        "fixCommitParentSHA1": "f2d66c21c7a3a6607b1b7b8de1bb89a277e9a066",
        "bugFilePath": "src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\nindex 5b5784d..56bb596 100644\n--- a/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n+++ b/src/com/google/javascript/jscomp/NameBasedDefinitionProvider.java\n@@ -94,7 +94,7 @@\n    * should not have to drop definitions itself.\n    */\n   private void dropUntypedExterns() {\n-    for (String externName : nameDefinitionMultimap.keySet()) {\n+    for (String externName : nameDefinitionMultimap.keys()) {\n       for (Definition def : new ArrayList<Definition>(nameDefinitionMultimap.get(externName))) {\n         if (def instanceof ExternalNameOnlyDefinition) {\n           Node node = def.getLValue();\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 97,
        "bugNodeStartChar": 4395,
        "bugNodeLength": 31,
        "fixLineNum": 97,
        "fixNodeStartChar": 4395,
        "fixNodeLength": 29,
        "sourceBeforeFix": "nameDefinitionMultimap.keySet()",
        "sourceAfterFix": "nameDefinitionMultimap.keys()"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "c56426eaa91e72179cc742b570e08a66f52936be",
        "fixCommitParentSHA1": "096501aa179d772a3a6044dd92c7a5712bf9a442",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex 4d04b05..54089e2 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -725,7 +725,7 @@\n         }\n \n         // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource\n-        if (maxSuspendResource.get() > 0 && resources.size() <= maxSuspendResource.get()) {\n+        if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {\n             // Resume the first in.\n             if (policy == POLICY.FIFO) {\n                 // TODO handle null return from poll()\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 728,
        "bugNodeStartChar": 26289,
        "bugNodeLength": 44,
        "fixLineNum": 728,
        "fixNodeStartChar": 26289,
        "fixNodeLength": 44,
        "sourceBeforeFix": "resources.size() <= maxSuspendResource.get()",
        "sourceAfterFix": "resources.size() >= maxSuspendResource.get()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "3fcda6a67e8e859de3fc41ed93903832a30fc126",
        "fixCommitParentSHA1": "58b75feac96b31f18ad19e12e9835b43e12d3e0e",
        "bugFilePath": "core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java",
        "fixPatch": "diff --git a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\nindex 30de836..d4febbe 100644\n--- a/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n+++ b/core/common/src/main/java/alluxio/util/network/NetworkAddressUtils.java\n@@ -100,19 +100,19 @@\n     private final String mServiceName;\n \n     // the key of connect hostname\n-    private final String mHostNameKey;\n+    private final PropertyKey mHostNameKey;\n \n     // the key of bind hostname\n-    private final String mBindHostKey;\n+    private final PropertyKey mBindHostKey;\n \n     // the key of service port\n-    private final String mPortKey;\n+    private final PropertyKey mPortKey;\n \n     // default port number\n     private final int mDefaultPort;\n \n-    ServiceType(String serviceName, String hostNameKey, String bindHostKey, String portKey,\n-        int defaultPort) {\n+    ServiceType(String serviceName, PropertyKey hostNameKey, PropertyKey bindHostKey,\n+        PropertyKey portKey, int defaultPort) {\n       mServiceName = serviceName;\n       mHostNameKey = hostNameKey;\n       mBindHostKey = bindHostKey;\n@@ -134,7 +134,7 @@\n      *\n      * @return key of connect hostname\n      */\n-    public String getHostNameKey() {\n+    public PropertyKey getHostNameKey() {\n       return mHostNameKey;\n     }\n \n@@ -143,7 +143,7 @@\n      *\n      * @return key of bind hostname\n      */\n-    public String getBindHostKey() {\n+    public PropertyKey getBindHostKey() {\n       return mBindHostKey;\n     }\n \n@@ -152,7 +152,7 @@\n      *\n      * @return key of service port\n      */\n-    public String getPortKey() {\n+    public PropertyKey getPortKey() {\n       return mPortKey;\n     }\n \n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 106,
        "bugNodeStartChar": 3402,
        "bugNodeLength": 34,
        "fixLineNum": 106,
        "fixNodeStartChar": 3402,
        "fixNodeLength": 39,
        "sourceBeforeFix": "private final String mBindHostKey; ",
        "sourceAfterFix": "private final PropertyKey mBindHostKey; "
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "e5ae9753d043d292923efc4759c2b0e2e68daa27",
        "fixCommitParentSHA1": "ed8acf931a22fb02026970f78031f3a16b06034a",
        "bugFilePath": "components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java",
        "fixPatch": "diff --git a/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java b/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java\nindex d7aab9a..d0fc7bf 100644\n--- a/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java\n+++ b/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java\n@@ -640,7 +640,7 @@\n                 configuration = new Configuration();\n                 configuration.setHostLanguage(Configuration.XQUERY);\n                 configuration.setStripsWhiteSpace(isStripsAllWhiteSpace() ? Whitespace.ALL : Whitespace.IGNORABLE);\n-                LOG.debug(\"Created new Configuration {}\");\n+                LOG.debug(\"Created new Configuration {}\", configuration);\n             } else {\n                 LOG.debug(\"Using existing Configuration {}\", configuration);\n             }\n",
        "projectName": "apache.camel",
        "bugLineNum": 643,
        "bugNodeStartChar": 22840,
        "bugNodeLength": 41,
        "fixLineNum": 643,
        "fixNodeStartChar": 22840,
        "fixNodeLength": 56,
        "sourceBeforeFix": "LOG.debug(\"Created new Configuration {}\")",
        "sourceAfterFix": "LOG.debug(\"Created new Configuration {}\",configuration)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
        "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
        "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
        "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 58,
        "bugNodeStartChar": 2271,
        "bugNodeLength": 88,
        "fixLineNum": 58,
        "fixNodeStartChar": 2271,
        "fixNodeLength": 92,
        "sourceBeforeFix": "defaults.jackson2Decoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))",
        "sourceAfterFix": "defaults.jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,EMPTY_MIME_TYPES))"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "2082d923ff4d3015eefa06e2e383dbe9fa3de2c5",
        "fixCommitParentSHA1": "b598f281edf6c17fd54ce83dacd9fcfe14516b77",
        "bugFilePath": "web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java",
        "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\nindex 6b32dcd..a322aa2 100644\n--- a/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/visit/VisitFormController.java\n@@ -326,7 +326,7 @@\n \t\r\n \t@ModelAttribute(\"visitTypes\")\r\n \tpublic List<VisitType> getVisitTypes() throws Exception {\r\n-\t\treturn Context.getVisitService().getAllVisitTypes(false);\r\n+\t\treturn Context.getVisitService().getAllVisitTypes(true);\r\n \t}\r\n \t\r\n \t@ModelAttribute(\"attributeTypes\")\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 329,
        "bugNodeStartChar": 13284,
        "bugNodeLength": 49,
        "fixLineNum": 329,
        "fixNodeStartChar": 12956,
        "fixNodeLength": 48,
        "sourceBeforeFix": "Context.getVisitService().getAllVisitTypes(false)",
        "sourceAfterFix": "Context.getVisitService().getAllVisitTypes(true)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e",
        "fixCommitParentSHA1": "83a61950f79424caccd548888d8b58a59905d379",
        "bugFilePath": "integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java",
        "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\nindex 056519f..edf75e2 100644\n--- a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n@@ -142,11 +142,11 @@\n           fileInfo.getPersistenceState());\n \n       // sleep and wait for worker to persist the file\n-      CommonUtils.sleepMs(5);\n+      CommonUtils.sleepMs(200);\n \n       // worker notifies the master\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n-      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n+      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n           TimeUnit.SECONDS));\n \n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 149,
        "bugNodeStartChar": 6206,
        "bugNodeLength": 103,
        "fixLineNum": 149,
        "fixNodeStartChar": 6206,
        "fixNodeLength": 105,
        "sourceBeforeFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)",
        "sourceAfterFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "296b9236fd1544637ae57d022c9e1dd9758577d0",
        "fixCommitParentSHA1": "a3a2c8b86f6abb319e4be31d71d69c4dc5e6b594",
        "bugFilePath": "indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java",
        "fixPatch": "diff --git a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\nindex 6dd97b9..e562f7f 100644\n--- a/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n+++ b/indexing-hadoop/src/main/java/io/druid/indexer/IndexGeneratorJob.java\n@@ -448,7 +448,7 @@\n       } else if (outputFS instanceof DistributedFileSystem) {\n         loadSpec = ImmutableMap.<String, Object>of(\n             \"type\", \"hdfs\",\n-            \"path\", indexOutURI.getPath()\n+            \"path\", indexOutURI.toString()\n         );\n       } else {\n         throw new ISE(\"Unknown file system[%s]\", outputFS.getClass());\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 451,
        "bugNodeStartChar": 15151,
        "bugNodeLength": 21,
        "fixLineNum": 451,
        "fixNodeStartChar": 15151,
        "fixNodeLength": 22,
        "sourceBeforeFix": "indexOutURI.getPath()",
        "sourceAfterFix": "indexOutURI.toString()"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "a899d5ff801aadd8292262f28334350cc7ead048",
        "fixCommitParentSHA1": "4cab94661ac8d000dc5823e1412cf64f518f7990",
        "bugFilePath": "components/camel-asterisk/src/main/java/org/apache/camel/component/asterisk/AsteriskEndpoint.java",
        "fixPatch": "diff --git a/components/camel-asterisk/src/main/java/org/apache/camel/component/asterisk/AsteriskEndpoint.java b/components/camel-asterisk/src/main/java/org/apache/camel/component/asterisk/AsteriskEndpoint.java\nindex 0ca8304..b75dc5d 100644\n--- a/components/camel-asterisk/src/main/java/org/apache/camel/component/asterisk/AsteriskEndpoint.java\n+++ b/components/camel-asterisk/src/main/java/org/apache/camel/component/asterisk/AsteriskEndpoint.java\n@@ -85,7 +85,7 @@\n         }\n         \n         // validate action value\n-        ActionsEnum.valueOf(action);\n+        AsteriskActionEnum.valueOf(action);\n \n         return new AsteriskProducer(this);\n     }\n",
        "projectName": "apache.camel",
        "bugLineNum": 88,
        "bugNodeStartChar": 2986,
        "bugNodeLength": 27,
        "fixLineNum": 88,
        "fixNodeStartChar": 2986,
        "fixNodeLength": 34,
        "sourceBeforeFix": "ActionsEnum.valueOf(action)",
        "sourceAfterFix": "AsteriskActionEnum.valueOf(action)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "59116c60b91cc0bd2d7a52a3a6ff7cf8674527d7",
        "fixCommitParentSHA1": "cb6cec9d728b09b416ade5a5b1a000c498c9bd75",
        "bugFilePath": "src/jvm/storm/trident/state/map/CachedBatchReadsMap.java",
        "fixPatch": "diff --git a/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java b/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\nindex 62bd202..d6c3b21 100644\n--- a/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\n+++ b/src/jvm/storm/trident/state/map/CachedBatchReadsMap.java\n@@ -7,11 +7,11 @@\n import storm.trident.state.ValueUpdater;\n \n public class CachedBatchReadsMap<T> implements MapState<T> {\n-    Map<List<Object>, Object> _cached = new HashMap();\n+    Map<List<Object>, T> _cached = new HashMap<List<Object>, T>();\n     \n-    public MapState _delegate;\n+    public MapState<T> _delegate;\n     \n-    public CachedBatchReadsMap(MapState delegate) {\n+    public CachedBatchReadsMap(MapState<T> delegate) {\n         _delegate = delegate;\n     }\n     \n@@ -23,7 +23,7 @@\n             for(int i=0; i<keys.size(); i++) {\n                 List<Object> key = keys.get(i);\n                 if(_cached.containsKey(key)) {\n-                    ret.set(i, (T) _cached.get(key));\n+                    ret.set(i, _cached.get(key));\n                 }\n             }\n         }\n@@ -31,7 +31,7 @@\n     }\n \n     @Override\n-    public List multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n+    public List<T> multiUpdate(List<List<Object>> keys, List<ValueUpdater> updaters) {\n         List<T> vals = _delegate.multiUpdate(keys, updaters);\n         cache(keys, vals);\n         return vals;\n",
        "projectName": "apache.storm",
        "bugLineNum": 10,
        "bugNodeStartChar": 240,
        "bugNodeLength": 25,
        "fixLineNum": 10,
        "fixNodeStartChar": 240,
        "fixNodeLength": 20,
        "sourceBeforeFix": "Map<List<Object>,Object>",
        "sourceAfterFix": "Map<List<Object>,T>"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "1ec309268bbed966214ce1a4f3880f48d0ca25e3",
        "fixCommitParentSHA1": "64140b52a44ae7ea10721b22fe72c4eb32847a0e",
        "bugFilePath": "api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java",
        "fixPatch": "diff --git a/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java b/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\nindex 610f521..b38319e 100644\n--- a/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\n+++ b/api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java\n@@ -347,7 +347,7 @@\n             c.prepareGet(\"http://google.com/\").execute(new AsyncHandlerAdapter() {\n \n                 public STATE onStatusReceived(HttpResponseStatus status) throws Exception {\n-                    assertEquals(301, status.getStatusCode());\n+                    assertEquals(302, status.getStatusCode());\n                     return STATE.CONTINUE;\n                 }\n \n",
        "projectName": "AsyncHttpClient.async-http-client",
        "bugLineNum": 350,
        "bugNodeStartChar": 13511,
        "bugNodeLength": 41,
        "fixLineNum": 350,
        "fixNodeStartChar": 13511,
        "fixNodeLength": 41,
        "sourceBeforeFix": "assertEquals(301,status.getStatusCode())",
        "sourceAfterFix": "assertEquals(302,status.getStatusCode())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "0b9749aa429c009e6e392e2e526cb382fbee18df",
        "fixCommitParentSHA1": "690601ae1e82eede51760d5b7aaf303e77caffd2",
        "bugFilePath": "test/com/google/javascript/jscomp/ConstCheckTest.java",
        "fixPatch": "diff --git a/test/com/google/javascript/jscomp/ConstCheckTest.java b/test/com/google/javascript/jscomp/ConstCheckTest.java\nindex 3b061c5..1b7acf6 100644\n--- a/test/com/google/javascript/jscomp/ConstCheckTest.java\n+++ b/test/com/google/javascript/jscomp/ConstCheckTest.java\n@@ -186,10 +186,10 @@\n   public void testConstNameInExterns() {\n     String externs = \"/** @const */ var FOO;\";\n     String js = \"FOO = 1;\";\n-    test(externs, js, (String) null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR, null);\n+    test(externs, js, (String) null, null, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n   private void testError(String js) {\n-    testError(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+    testWarning(js, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n }\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 193,
        "bugNodeStartChar": 5459,
        "bugNodeLength": 54,
        "fixLineNum": 193,
        "fixNodeStartChar": 5459,
        "fixNodeLength": 56,
        "sourceBeforeFix": "testError(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)",
        "sourceAfterFix": "testWarning(js,ConstCheck.CONST_REASSIGNED_VALUE_ERROR)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f",
        "fixCommitParentSHA1": "b36a323211503978fd314dddaab01bf964ad358b",
        "bugFilePath": "modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java",
        "fixPatch": "diff --git a/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java b/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\nindex 3cce777..b677597 100644\n--- a/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\n+++ b/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\n@@ -52,27 +52,27 @@\n     }\n \n     @Override\n-    public ResponseImpl schema(Property property) {\n+    public Response schema(Property property) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl description(String description) {\n+    public Response description(String description) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl example(String type, Object example) {\n+    public Response example(String type, Object example) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl header(String name, Property property) {\n+    public Response header(String name, Property property) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl headers(Map<String, Property> headers) {\n+    public Response headers(Map<String, Property> headers) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n",
        "projectName": "swagger-api.swagger-core",
        "bugLineNum": 64,
        "bugNodeStartChar": 1499,
        "bugNodeLength": 133,
        "fixLineNum": 64,
        "fixNodeStartChar": 1499,
        "fixNodeLength": 129,
        "sourceBeforeFix": "@Override public ResponseImpl example(String type,Object example){   throw new RuntimeException(\"Not implemented\"); } ",
        "sourceAfterFix": "@Override public Response example(String type,Object example){   throw new RuntimeException(\"Not implemented\"); } "
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "a3f2882aa888f9515546a9fa27c359e4817c9f4f",
        "fixCommitParentSHA1": "59d44610658599cbbe5854669fbcfd6ea6239ba4",
        "bugFilePath": "examples/mini-service/src/test/functional/org/springside/examples/miniservice/functional/BaseFunctionalTestCase.java",
        "fixPatch": "diff --git a/examples/mini-service/src/test/functional/org/springside/examples/miniservice/functional/BaseFunctionalTestCase.java b/examples/mini-service/src/test/functional/org/springside/examples/miniservice/functional/BaseFunctionalTestCase.java\nindex 5457cdf..ae32c00 100644\n--- a/examples/mini-service/src/test/functional/org/springside/examples/miniservice/functional/BaseFunctionalTestCase.java\n+++ b/examples/mini-service/src/test/functional/org/springside/examples/miniservice/functional/BaseFunctionalTestCase.java\n@@ -30,7 +30,7 @@\n \n \tprotected static SimpleDriverDataSource dataSource;\n \n-\tprotected static PropertiesLoader propertiesLoader = new PropertiesLoader(\n+\tprotected static PropertiesLoader propertiesLoader = new PropertiesLoader(\"classpath:/application.properties\",\n \t\t\t\"classpath:/application.functional.properties\", \"classpath:/application.functional-local.properties\");\n \n \tprivate static Logger logger = LoggerFactory.getLogger(BaseFunctionalTestCase.class);\n",
        "projectName": "springside.springside4",
        "bugLineNum": 33,
        "bugNodeStartChar": 819,
        "bugNodeLength": 126,
        "fixLineNum": 33,
        "fixNodeStartChar": 819,
        "fixNodeLength": 162,
        "sourceBeforeFix": "new PropertiesLoader(\"classpath:/application.functional.properties\",\"classpath:/application.functional-local.properties\")",
        "sourceAfterFix": "new PropertiesLoader(\"classpath:/application.properties\",\"classpath:/application.functional.properties\",\"classpath:/application.functional-local.properties\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e7bf415427b37bbc760ff9b9c69650db8ec477e4",
        "fixCommitParentSHA1": "69fcae6b44cb9443bd970f89f7215258d6092bcc",
        "bugFilePath": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java",
        "fixPatch": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\nindex 250e3ac..ceafa9d 100644\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -153,7 +153,7 @@\n \t@Configuration\n \t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"db\")\n+\t@ConditionalOnEnabledHealthIndicator(\"db\")\n \tpublic static class DataSourcesHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<DataSourceHealthIndicator, DataSource>\n \t\t\timplements InitializingBean {\n@@ -193,7 +193,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(MongoTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mongo\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<MongoHealthIndicator, MongoTemplate> {\n \n@@ -210,7 +210,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RedisConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"redis\")\n+\t@ConditionalOnEnabledHealthIndicator(\"redis\")\n \tpublic static class RedisHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<RedisHealthIndicator, RedisConnectionFactory> {\n@@ -228,7 +228,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(RabbitTemplate.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"rabbit\")\n+\t@ConditionalOnEnabledHealthIndicator(\"rabbit\")\n \tpublic static class RabbitHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<RabbitHealthIndicator, RabbitTemplate> {\n \n@@ -245,7 +245,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(SolrServer.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"solr\")\n+\t@ConditionalOnEnabledHealthIndicator(\"solr\")\n \tpublic static class SolrHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<SolrHealthIndicator, SolrServer> {\n \n@@ -261,7 +261,7 @@\n \t}\n \n \t@Configuration\n-\t@ConditionalOnEnablednHealthIndicator(\"diskspace\")\n+\t@ConditionalOnEnabledHealthIndicator(\"diskspace\")\n \tpublic static class DiskSpaceHealthIndicatorConfiguration {\n \n \t\t@Bean\n@@ -280,7 +280,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(JavaMailSenderImpl.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"mail\")\n+\t@ConditionalOnEnabledHealthIndicator(\"mail\")\n \tpublic static class MailHealthIndicatorConfiguration\n \t\t\textends\n \t\t\tCompositeHealthIndicatorConfiguration<MailHealthIndicator, JavaMailSenderImpl> {\n@@ -298,7 +298,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(ConnectionFactory.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"jms\")\n+\t@ConditionalOnEnabledHealthIndicator(\"jms\")\n \tpublic static class JmsHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<JmsHealthIndicator, ConnectionFactory> {\n \n@@ -315,7 +315,7 @@\n \n \t@Configuration\n \t@ConditionalOnBean(Client.class)\n-\t@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")\n+\t@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")\n \t@EnableConfigurationProperties(ElasticsearchHealthIndicatorProperties.class)\n \tpublic static class ElasticsearchHealthIndicatorConfiguration extends\n \t\t\tCompositeHealthIndicatorConfiguration<ElasticsearchHealthIndicator, Client> {\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 318,
        "bugNodeStartChar": 11906,
        "bugNodeLength": 54,
        "fixLineNum": 318,
        "fixNodeStartChar": 11906,
        "fixNodeLength": 53,
        "sourceBeforeFix": "@ConditionalOnEnablednHealthIndicator(\"elasticsearch\")",
        "sourceAfterFix": "@ConditionalOnEnabledHealthIndicator(\"elasticsearch\")"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "46fcd4cadab8a2bd4676ec4e430f5a25f7a99577",
        "fixCommitParentSHA1": "927af954b758b5e6c0af17d067dceec20cdf83a4",
        "bugFilePath": "components/camel-chronicle/src/test/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumerTest.java",
        "fixPatch": "diff --git a/components/camel-chronicle/src/test/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumerTest.java b/components/camel-chronicle/src/test/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumerTest.java\nindex ccb6298..b6ee450 100644\n--- a/components/camel-chronicle/src/test/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumerTest.java\n+++ b/components/camel-chronicle/src/test/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumerTest.java\n@@ -58,17 +58,17 @@\n         mock.assertIsSatisfied();\n \n         assertEquals(\n-            mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),\n-            ChronicleEngineMapEventType.INSERT);\n+            ChronicleEngineMapEventType.INSERT,\n+            mock.getExchanges().get(0).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE));\n         assertEquals(\n-            mock.getExchanges().get(0).getIn().getBody(String.class),\n-            \"val-1\");\n+            \"val-1\",\n+            mock.getExchanges().get(0).getIn().getBody(String.class));\n         assertEquals(\n-            mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE),\n-            ChronicleEngineMapEventType.REMOVE);\n+            ChronicleEngineMapEventType.REMOVE,\n+            mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.MAP_EVENT_TYPE));\n         assertEquals(\n-            mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),\n-            \"val-2\");\n+            \"val-2\",\n+            mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE));\n     }\n \n     @Test\n",
        "projectName": "apache.camel",
        "bugLineNum": 69,
        "bugNodeStartChar": 2651,
        "bugNodeLength": 128,
        "fixLineNum": 69,
        "fixNodeStartChar": 2651,
        "fixNodeLength": 128,
        "sourceBeforeFix": "assertEquals(mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE),\"val-2\")",
        "sourceAfterFix": "assertEquals(\"val-2\",mock.getExchanges().get(1).getIn().getHeader(ChronicleEngineConstants.OLD_VALUE))"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e2efffc72002968f835a0ea6a70f8e7762752b15",
        "fixCommitParentSHA1": "71fdc224c67c6fda92aa8e89592745a281dcafb6",
        "bugFilePath": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java",
        "fixPatch": "diff --git a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\nindex d5eb318..204add3 100644\n--- a/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n+++ b/api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java\n@@ -116,7 +116,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -128,7 +128,7 @@\n \t@Test(expected = DuplicateConceptNameException.class)\r\n \t@Verifies(value = \"should fail if there is a duplicate unretired preferred name in the same locale\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldFailIfThereIsADuplicateUnretiredPreferredNameInTheSameLocale() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName preferredName = new ConceptName(\"preferred name\", Context.getLocale());\r\n \t\tconcept.setPreferredName(preferredName);\r\n@@ -139,7 +139,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(\"preferred name\");\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t}\r\n \t\r\n@@ -177,7 +177,7 @@\n \t@Test\r\n \t@Verifies(value = \"should pass if the duplicate ConceptName is neither preferred nor fully Specified\", method = \"validate(Object,Errors)\")\r\n \tpublic void validate_shouldPassIfTheDuplicateConceptNameIsNeitherPreferredNorFullySpecified() throws Exception {\r\n-\t\tContext.setLocale(Context.getLocale());\r\n+\t\tContext.setLocale(new Locale(\"en\"));\r\n \t\tConcept concept = Context.getConceptService().getConcept(5497);\r\n \t\tConceptName duplicateName = new ConceptName(\"duplicate name\", Context.getLocale());\r\n \t\t//note that the name is neither fully specified nor preferred,\r\n@@ -191,7 +191,7 @@\n \t\tConceptName assumedDuplicateName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tassumedDuplicateName.setName(duplicateName.getName());\r\n \t\tnewConcept.addName(assumedDuplicateName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n@@ -212,7 +212,7 @@\n \t\tConceptName anotherConceptName = ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n \t\tanotherConceptName.setName(duplicateName);\r\n \t\tnewConcept.addName(anotherConceptName);\r\n-\t\tErrors errors = new BindException(concept, \"concept\");\r\n+\t\tErrors errors = new BindException(newConcept, \"concept\");\r\n \t\tnew ConceptValidator().validate(newConcept, errors);\r\n \t\tAssert.assertEquals(false, errors.hasErrors());\r\n \t}\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 119,
        "bugNodeStartChar": 5436,
        "bugNodeLength": 37,
        "fixLineNum": 119,
        "fixNodeStartChar": 5318,
        "fixNodeLength": 40,
        "sourceBeforeFix": "new BindException(concept,\"concept\")",
        "sourceAfterFix": "new BindException(newConcept,\"concept\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "e9c4a734ff5160673024538f5b3ef1339c5424e7",
        "fixCommitParentSHA1": "1621199028afbd27c03d9916adfa73905118811d",
        "bugFilePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java",
        "fixPatch": "diff --git a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\nindex 89b1d44..becb513 100644\n--- a/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n+++ b/titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryStoreManager.java\n@@ -80,7 +80,7 @@\n \n     @Override\n     public KeyColumnValueStore openDatabase(final String name) throws StorageException {\n-        if (!stores.contains(name)) {\n+        if (!stores.containsKey(name)) {\n             stores.putIfAbsent(name,new InMemoryKeyColumnValueStore(name));\n         }\n         KeyColumnValueStore store = stores.get(name);\n",
        "projectName": "thinkaurelius.titan",
        "bugLineNum": 83,
        "bugNodeStartChar": 2538,
        "bugNodeLength": 21,
        "fixLineNum": 83,
        "fixNodeStartChar": 2538,
        "fixNodeLength": 24,
        "sourceBeforeFix": "stores.contains(name)",
        "sourceAfterFix": "stores.containsKey(name)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e073ea8e8a6a7adbd245c9888f5d47e0f28eeb60",
        "fixCommitParentSHA1": "1a43b1c94781397f37de293ae23e869e531a5e0a",
        "bugFilePath": "community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java",
        "fixPatch": "diff --git a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\nindex f380e54..162057f 100644\n--- a/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\n+++ b/community/kernel/src/main/java/org/neo4j/kernel/impl/api/index/IndexPopulationJob.java\n@@ -254,7 +254,7 @@\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + descriptor + \"]\";\n+        return getClass().getSimpleName() + \"[populator:\" + populator + \", descriptor:\" + indexUserDescription + \"]\";\n     }\n \n     public void awaitCompletion() throws InterruptedException\n",
        "projectName": "neo4j.neo4j",
        "bugLineNum": 257,
        "bugNodeStartChar": 9769,
        "bugNodeLength": 91,
        "fixLineNum": 257,
        "fixNodeStartChar": 9769,
        "fixNodeLength": 101,
        "sourceBeforeFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ descriptor+ \"]\"",
        "sourceAfterFix": "getClass().getSimpleName() + \"[populator:\" + populator+ \", descriptor:\"+ indexUserDescription+ \"]\""
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "a63faf44e1b103a49d25a15c720fc5940ae9fc07",
        "fixCommitParentSHA1": "2b0a4f13844bbb93482c52bd2c60a55e3fa24a88",
        "bugFilePath": "retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java",
        "fixPatch": "diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\nindex 5897161..dea046f 100644\n--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactoryTest.java\n@@ -73,10 +73,10 @@\n     assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyClass = new TypeToken<Maybe<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyClass = new TypeToken<Flowable<String>>() {}.getType();\n-    assertThat(factory.get(sBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyWildcard = new TypeToken<Observable<? extends String>>() {}.getType();\n@@ -86,10 +86,10 @@\n     assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mBodyWildcard = new TypeToken<Maybe<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fBodyWildcard = new TypeToken<Flowable<? extends String>>() {}.getType();\n-    assertThat(factory.get(sBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oBodyGeneric = new TypeToken<Observable<List<String>>>() {}.getType();\n@@ -99,10 +99,10 @@\n     assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type mBodyGeneric = new TypeToken<Maybe<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n     Type fBodyGeneric = new TypeToken<Flowable<List<String>>>() {}.getType();\n-    assertThat(factory.get(sBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fBodyGeneric, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(new TypeToken<List<String>>() {}.getType());\n \n     Type oResponseClass = new TypeToken<Observable<Response<String>>>() {}.getType();\n@@ -112,10 +112,10 @@\n     assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseClass = new TypeToken<Maybe<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseClass = new TypeToken<Flowable<Response<String>>>() {}.getType();\n-    assertThat(factory.get(sResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResponseWildcard = new TypeToken<Observable<Response<? extends String>>>() {}.getType();\n@@ -125,10 +125,10 @@\n     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResponseWildcard = new TypeToken<Maybe<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResponseWildcard = new TypeToken<Flowable<Response<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();\n@@ -138,10 +138,10 @@\n     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultClass = new TypeToken<Maybe<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultClass = new TypeToken<Flowable<Result<String>>>() {}.getType();\n-    assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultClass, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n \n     Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();\n@@ -151,10 +151,10 @@\n     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type mResultWildcard = new TypeToken<Maybe<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(mResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n     Type fResultWildcard = new TypeToken<Flowable<Result<? extends String>>>() {}.getType();\n-    assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n+    assertThat(factory.get(fResultWildcard, NO_ANNOTATIONS, retrofit).responseType())\n         .isEqualTo(String.class);\n   }\n \n",
        "projectName": "square.retrofit",
        "bugLineNum": 79,
        "bugNodeStartChar": 2784,
        "bugNodeLength": 49,
        "fixLineNum": 79,
        "fixNodeStartChar": 2784,
        "fixNodeLength": 49,
        "sourceBeforeFix": "factory.get(sBodyClass,NO_ANNOTATIONS,retrofit)",
        "sourceAfterFix": "factory.get(fBodyClass,NO_ANNOTATIONS,retrofit)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "0b22eb07bb8ecfa456f170dc9a1dec418ed01e2a",
        "fixCommitParentSHA1": "7db2563c6a16b4cc69a2343172e0ff0277f1f0c6",
        "bugFilePath": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableLocator.java",
        "fixPatch": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableLocator.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableLocator.java\nindex d2448b3..dccd7ca 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableLocator.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableLocator.java\n@@ -326,7 +326,7 @@\n \n     void doWaiting() throws InterruptedException {\n       try {\n-        while (new MetaTableLocator().waitMetaRegionLocation(watcher, 100) == null);\n+        while (new MetaTableLocator().waitMetaRegionLocation(watcher, 10000) == null);\n       } catch (NotAllMetaRegionsOnlineException e) {\n         //Ignore\n       }\n",
        "projectName": "apache.hbase",
        "bugLineNum": 329,
        "bugNodeStartChar": 12313,
        "bugNodeLength": 59,
        "fixLineNum": 329,
        "fixNodeStartChar": 12313,
        "fixNodeLength": 61,
        "sourceBeforeFix": "new MetaTableLocator().waitMetaRegionLocation(watcher,100)",
        "sourceAfterFix": "new MetaTableLocator().waitMetaRegionLocation(watcher,10000)"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "3b2bcc69cfa47b6f81daf4a7bb645b489072f2a0",
        "fixCommitParentSHA1": "29276cd629fac95e212f82b62619b92233b70115",
        "bugFilePath": "components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java",
        "fixPatch": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\nindex 8329372..f3427b3 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n@@ -382,7 +382,7 @@\n         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n-                if (out != null) {\n+                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {\n",
        "projectName": "apache.camel",
        "bugLineNum": 385,
        "bugNodeStartChar": 16488,
        "bugNodeLength": 11,
        "fixLineNum": 385,
        "fixNodeStartChar": 16488,
        "fixNodeLength": 42,
        "sourceBeforeFix": "out != null",
        "sourceAfterFix": "out != null && out.getJmsMessage() != null"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e67e99a8475aadaeecafbdf2a7a6508423102415",
        "fixCommitParentSHA1": "3179d8094ed773167efafeb955d9fb73a8b3d5d8",
        "bugFilePath": "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java",
        "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\nindex b810f75..62d9e30 100644\n--- a/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\n+++ b/src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java\n@@ -81,8 +81,7 @@\n             // An exceptional case:\n             // 'Expires' attribute can contain a comma without surrounded with quotes.\n             if (name.equalsIgnoreCase(CookieHeaderNames.EXPIRES) &&\n-                value.length() <= 3) {\n-                // value contains comma, but not surrounded with quotes.\n+                value.length() <= 9) { // Longest day of week is 'Wednesday'.\n                 if (m.find(pos)) {\n                     value = value + \", \" + m.group(1);\n                     pos = m.end();\n",
        "projectName": "netty.netty",
        "bugLineNum": 84,
        "bugNodeStartChar": 2709,
        "bugNodeLength": 19,
        "fixLineNum": 84,
        "fixNodeStartChar": 2709,
        "fixNodeLength": 19,
        "sourceBeforeFix": "value.length() <= 3",
        "sourceAfterFix": "value.length() <= 9"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "9ada10f883aef37b9a87984fe499cdc04e4f1f06",
        "fixCommitParentSHA1": "fea5c84ce230c4d08f1d581952c9a4ce300e43c7",
        "bugFilePath": "beeline/src/java/org/apache/hive/beeline/Commands.java",
        "fixPatch": "diff --git a/beeline/src/java/org/apache/hive/beeline/Commands.java b/beeline/src/java/org/apache/hive/beeline/Commands.java\nindex 3a204c0..387861b 100644\n--- a/beeline/src/java/org/apache/hive/beeline/Commands.java\n+++ b/beeline/src/java/org/apache/hive/beeline/Commands.java\n@@ -1316,7 +1316,7 @@\n     Properties props = new Properties();\n     if (url != null) {\n       String saveUrl = getUrlToUse(url);\n-      props.setProperty(JdbcConnectionParams.PROPERTY_URL, url);\n+      props.setProperty(JdbcConnectionParams.PROPERTY_URL, saveUrl);\n     }\n \n     String value = null;\n",
        "projectName": "apache.hive",
        "bugLineNum": 1319,
        "bugNodeStartChar": 38847,
        "bugNodeLength": 57,
        "fixLineNum": 1319,
        "fixNodeStartChar": 38847,
        "fixNodeLength": 61,
        "sourceBeforeFix": "props.setProperty(JdbcConnectionParams.PROPERTY_URL,url)",
        "sourceAfterFix": "props.setProperty(JdbcConnectionParams.PROPERTY_URL,saveUrl)"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "80af60b986f4aaf57ab56b243d3c897dabb0bddd",
        "fixCommitParentSHA1": "dac281f407a15020620ca74bc56303b3a4c3c850",
        "bugFilePath": "flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java",
        "fixPatch": "diff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java b/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\nindex 1eabb83..fcf9f8d 100644\n--- a/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/plantranslate/NepheleJobGraphGenerator.java\n@@ -101,7 +101,7 @@\n \t\n \tpublic static final String MERGE_ITERATION_AUX_TASKS_KEY = \"compiler.merge-iteration-aux\";\n \t\n-\tprivate static final boolean mergeIterationAuxTasks = GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY, true);\n+\tprivate static final boolean mergeIterationAuxTasks = GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY, false);\n \t\n //\tprivate static final Log LOG = LogFactory.getLog(NepheleJobGraphGenerator.class);\n \t\n",
        "projectName": "apache.flink",
        "bugLineNum": 104,
        "bugNodeStartChar": 5422,
        "bugNodeLength": 67,
        "fixLineNum": 104,
        "fixNodeStartChar": 5422,
        "fixNodeLength": 68,
        "sourceBeforeFix": "GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,true)",
        "sourceAfterFix": "GlobalConfiguration.getBoolean(MERGE_ITERATION_AUX_TASKS_KEY,false)"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "cb19c749d2f312320b819c9b201f2eb6f692dafc",
        "fixCommitParentSHA1": "aea6a6d428a4a202557a0fce0c3c73916c34a0dd",
        "bugFilePath": "flink-core/src/main/java/org/apache/flink/api/common/operators/util/ListKeyGroupedIterator.java",
        "fixPatch": "diff --git a/flink-core/src/main/java/org/apache/flink/api/common/operators/util/ListKeyGroupedIterator.java b/flink-core/src/main/java/org/apache/flink/api/common/operators/util/ListKeyGroupedIterator.java\nindex e530f8a..673440d 100644\n--- a/flink-core/src/main/java/org/apache/flink/api/common/operators/util/ListKeyGroupedIterator.java\n+++ b/flink-core/src/main/java/org/apache/flink/api/common/operators/util/ListKeyGroupedIterator.java\n@@ -89,7 +89,7 @@\n \t\t\t// Required if user code / reduce() method did not read the whole value iterator.\n \t\t\tE next;\n \t\t\twhile (true) {\n-\t\t\t\tif ((next = this.input.get(currentPosition++)) != null) {\n+\t\t\t\tif (currentPosition < input.size() && (next = this.input.get(currentPosition++)) != null) {\n \t\t\t\t\tif (!this.comparator.equalToReference(next)) {\n \t\t\t\t\t\t// the keys do not match, so we have a new group. store the current key\n \t\t\t\t\t\tthis.comparator.setReference(next);\n",
        "projectName": "apache.flink",
        "bugLineNum": 92,
        "bugNodeStartChar": 3060,
        "bugNodeLength": 50,
        "fixLineNum": 92,
        "fixNodeStartChar": 3060,
        "fixNodeLength": 84,
        "sourceBeforeFix": "(next=this.input.get(currentPosition++)) != null",
        "sourceAfterFix": "currentPosition < input.size() && (next=this.input.get(currentPosition++)) != null"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "6956f9776d189ef182f0fc25853c44304cf5fb78",
        "fixCommitParentSHA1": "c26ce0cb1e20c0dc066989f0cd94c92d683d62ee",
        "bugFilePath": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java\nindex 3de1422..244c7c3 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/ButtonGroup.java\n@@ -71,7 +71,7 @@\n \t\tif (text == null) throw new IllegalArgumentException(\"text cannot be null.\");\r\n \t\tfor (int i = 0, n = buttons.size; i < n; i++) {\r\n \t\t\tButton button = buttons.get(i);\r\n-\t\t\tif (button instanceof TextButton && text.equals(((TextButton)button).getText())) {\r\n+\t\t\tif (button instanceof TextButton && text.contentEquals(((TextButton)button).getText())) {\r\n \t\t\t\tbutton.setChecked(true);\r\n \t\t\t\treturn;\r\n \t\t\t}\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 74,
        "bugNodeStartChar": 2803,
        "bugNodeLength": 43,
        "fixLineNum": 74,
        "fixNodeStartChar": 2730,
        "fixNodeLength": 50,
        "sourceBeforeFix": "text.equals(((TextButton)button).getText())",
        "sourceAfterFix": "text.contentEquals(((TextButton)button).getText())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "5825d83fc69047c2b821beca9d27f69f49533e84",
        "fixCommitParentSHA1": "0ab0e83883dfea096bfce8700c3ed0aa121c7345",
        "bugFilePath": "core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java",
        "fixPatch": "diff --git a/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java b/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\nindex d65c42e..d3b90db 100644\n--- a/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\n+++ b/core/common/src/main/java/alluxio/underfs/options/MkdirsOptions.java\n@@ -97,7 +97,7 @@\n     if (this == o) {\n       return true;\n     }\n-    if (!(o instanceof CreateOptions)) {\n+    if (!(o instanceof MkdirsOptions)) {\n       return false;\n     }\n     MkdirsOptions that = (MkdirsOptions) o;\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 100,
        "bugNodeStartChar": 2822,
        "bugNodeLength": 26,
        "fixLineNum": 100,
        "fixNodeStartChar": 2822,
        "fixNodeLength": 26,
        "sourceBeforeFix": "o instanceof CreateOptions",
        "sourceAfterFix": "o instanceof MkdirsOptions"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "0c797c7035998e70bc194c801f44d44cfac2effe",
        "fixCommitParentSHA1": "a189f64d0a71258c860aa5e8949a1a94f3444234",
        "bugFilePath": "src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java",
        "fixPatch": "diff --git a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\nindex f93f4be..cdce4a7 100644\n--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\n+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java\n@@ -28,7 +28,7 @@\n import com.puppycrawl.tools.checkstyle.DefaultConfiguration;\n import com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck;\n \n-public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {\n+public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {\n \n     @Test\n     public void testCorrect() throws Exception {\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 31,
        "bugNodeStartChar": 1315,
        "bugNodeLength": 1046,
        "fixLineNum": 31,
        "fixNodeStartChar": 1315,
        "fixNodeLength": 1038,
        "sourceBeforeFix": "public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedIfDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={\"10:17: \" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } ",
        "sourceAfterFix": "public class XpathRegressionNestedIfDepthTest extends XpathTestSupport {   @Test public void testCorrect() throws Exception {     final String checkName=NestedIfDepthCheck.class.getSimpleName();     final File fileToProcess=new File(getPath(checkName,\"SuppressionXpathRegressionNestedIfDepth.java\"));     final DefaultConfiguration moduleConfig=createModuleConfig(NestedIfDepthCheck.class);     final String[] expectedViolation={\"10:17: \" + getCheckMessage(NestedIfDepthCheck.class,NestedIfDepthCheck.MSG_KEY,2,1)};     final List<String> expectedXpathQueries=Collections.singletonList(\"/CLASS_DEF[@text='SuppressionXpathRegressionNestedIfDepth']/OBJBLOCK\" + \"/METHOD_DEF[@text='test']/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF\");     runVerifications(moduleConfig,fileToProcess,expectedViolation,expectedXpathQueries);   } } "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "8a8060eaa3a12703b594d4f4c581fa14bd846b19",
        "fixCommitParentSHA1": "3c8bdee86132e48f99825706b97e24b4e119dc1e",
        "bugFilePath": "stratosphere-java/src/main/java/eu/stratosphere/api/java/IterativeDataSet.java",
        "fixPatch": "diff --git a/stratosphere-java/src/main/java/eu/stratosphere/api/java/IterativeDataSet.java b/stratosphere-java/src/main/java/eu/stratosphere/api/java/IterativeDataSet.java\nindex bab990d..be3fdf7 100644\n--- a/stratosphere-java/src/main/java/eu/stratosphere/api/java/IterativeDataSet.java\n+++ b/stratosphere-java/src/main/java/eu/stratosphere/api/java/IterativeDataSet.java\n@@ -137,6 +137,6 @@\n \t@Override\n \tprotected eu.stratosphere.api.common.operators.SingleInputOperator<T, T, ?> translateToDataFlow(Operator<T> input) {\n \t\t// All the translation magic happens when the iteration end is encountered.\n-\t\tthrow new UnsupportedOperationException(\"This should never happen.\");\n+\t\tthrow new RuntimeException(\"Error while creating the data flow plan for an iteration: The iteration end was not specified correctly.\");\n \t}\n }\n",
        "projectName": "apache.flink",
        "bugLineNum": 140,
        "bugNodeStartChar": 6629,
        "bugNodeLength": 62,
        "fixLineNum": 140,
        "fixNodeStartChar": 6629,
        "fixNodeLength": 128,
        "sourceBeforeFix": "new UnsupportedOperationException(\"This should never happen.\")",
        "sourceAfterFix": "new RuntimeException(\"Error while creating the data flow plan for an iteration: The iteration end was not specified correctly.\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f",
        "fixCommitParentSHA1": "b9ed7d8912c94ef77749c5bd672c670a94728c50",
        "bugFilePath": "backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java",
        "fixPatch": "diff --git a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\nindex 0c1a19f..9fbfeff 100644\n--- a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n+++ b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n@@ -383,7 +383,7 @@\n \t}\r\n \r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL15.glGetBufferParameter(target, pname, params);\r\n+\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetError () {\r\n@@ -391,15 +391,15 @@\n \t}\r\n \r\n \tpublic void glGetFloatv (int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetFloat(pname, params);\r\n+\t\tGL11.glGetFloatv(pname, params);\r\n \t}\r\n \r\n \tpublic void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target, attachment, pname, params);\r\n+\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetIntegerv (int pname, IntBuffer params) {\r\n-\t\tGL11.glGetInteger(pname, params);\r\n+\t\tGL11.glGetIntegerv(pname, params);\r\n \t}\r\n \r\n \tpublic String glGetProgramInfoLog (int program) {\r\n@@ -417,11 +417,11 @@\n \t}\r\n \r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetProgram(program, pname, params);\r\n+\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n+\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetShaderInfoLog (int shader) {\r\n@@ -443,7 +443,7 @@\n \t}\r\n \r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetShader(shader, pname, params);\r\n+\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetString (int name) {\r\n@@ -451,11 +451,11 @@\n \t}\r\n \r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetUniformLocation (int program, String name) {\r\n@@ -463,11 +463,11 @@\n \t}\r\n \r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r\n@@ -475,11 +475,11 @@\n \t}\r\n \r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glHint (int target, int mode) {\r\n@@ -616,7 +616,7 @@\n \t}\r\n \r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r\n@@ -624,7 +624,7 @@\n \t}\r\n \r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r\n@@ -649,11 +649,11 @@\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform1i (int location, int x) {\r\n@@ -661,12 +661,12 @@\n \t}\r\n \r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform2f (int location, float x, float y) {\r\n@@ -674,11 +674,11 @@\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform2i (int location, int x, int y) {\r\n@@ -686,11 +686,11 @@\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r\n@@ -698,11 +698,11 @@\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r\n@@ -710,11 +710,11 @@\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r\n@@ -722,11 +722,11 @@\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r\n@@ -734,35 +734,35 @@\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toIntBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4iv(location, toIntBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n \t}\r\n \r\n \tpublic void glUseProgram (int program) {\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 420,
        "bugNodeStartChar": 13738,
        "bugNodeLength": 41,
        "fixLineNum": 420,
        "fixNodeStartChar": 13319,
        "fixNodeLength": 43,
        "sourceBeforeFix": "GL20.glGetProgram(program,pname,params)",
        "sourceAfterFix": "GL20.glGetProgramiv(program,pname,params)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "3c4402897d8288b9642c11497a1a7f006804d10a",
        "fixCommitParentSHA1": "8a43f47550545387e048241300f6c7b6ac6ae7ce",
        "bugFilePath": "src/test/java/twitter4j/TwitterTestUnit.java",
        "fixPatch": "diff --git a/src/test/java/twitter4j/TwitterTestUnit.java b/src/test/java/twitter4j/TwitterTestUnit.java\nindex 54c440c..eae74c5 100644\n--- a/src/test/java/twitter4j/TwitterTestUnit.java\n+++ b/src/test/java/twitter4j/TwitterTestUnit.java\n@@ -249,12 +249,12 @@\n         twitterAPI1.destroyStatus(status.getId());\n     }\n     public void testGetFriends() throws Exception{\n-        List<User> actualReturn = twitterAPI1.getFriends(id2);\n+        List<User> actualReturn = twitterAPI1.getFriends(\"al3x\");\n         boolean found = false;\n         for(User user: actualReturn){\n             found = found || user.getName().equals(\"Yusuke Yamamoto\");\n         }\n-        assertTrue(found);\n+        assertFalse(found);\n         assertTrue(90 < twitterAPI2.getFriends(\"akr\",2).size());\n     }\n     public void testAccountMethods() throws Exception{\n",
        "projectName": "yusuke.twitter4j",
        "bugLineNum": 257,
        "bugNodeStartChar": 10969,
        "bugNodeLength": 17,
        "fixLineNum": 257,
        "fixNodeStartChar": 10969,
        "fixNodeLength": 18,
        "sourceBeforeFix": "assertTrue(found)",
        "sourceAfterFix": "assertFalse(found)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "a0f2bac065232855e4f8bb1221a60b0cbf7fd2a9",
        "fixCommitParentSHA1": "03a15583ca8b257f4159b27ace4d80cc71f0b174",
        "bugFilePath": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java",
        "fixPatch": "diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\nindex 38b8be4..d090042 100644\n--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java\n@@ -472,13 +472,13 @@\n     @Test\n     public void test_1168408_1() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_01.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_01.java\"), expected);\n     }\n \n     @Test\n     public void test_1168408_2() throws Exception {\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_02.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_02.java\"), expected);\n     }\n \n     @Test\n@@ -486,7 +486,7 @@\n         checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");\n         checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");\n         final String[] expected = {};\n-        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);\n+        verify(checkConfig, getPath(\"checks/javadoc/Input_03.java\"), expected);\n     }\n \n     @Test\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 475,
        "bugNodeStartChar": 24840,
        "bugNodeLength": 42,
        "fixLineNum": 475,
        "fixNodeStartChar": 24840,
        "fixNodeLength": 39,
        "sourceBeforeFix": "getSrcPath(\"checks/javadoc/Input_01.java\")",
        "sourceAfterFix": "getPath(\"checks/javadoc/Input_01.java\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "c212701d56cfe9cffd9e5dc1e34c3483a50f8182",
        "fixCommitParentSHA1": "b2fc8b427eb03a40df232f481c908eb7bf48b7b8",
        "bugFilePath": "flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/NFA.java",
        "fixPatch": "diff --git a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/NFA.java b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/NFA.java\nindex deee0a1..5624db9 100644\n--- a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/NFA.java\n+++ b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/NFA.java\n@@ -1132,7 +1132,7 @@\n \t\t\t\tint length = in.readInt();\n \n \t\t\t\tbyte[] serCondition = new byte[length];\n-\t\t\t\tin.read(serCondition);\n+\t\t\t\tin.readFully(serCondition);\n \n \t\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(serCondition);\n \t\t\t\tObjectInputStream ois = new ObjectInputStream(bais);\n",
        "projectName": "apache.flink",
        "bugLineNum": 1135,
        "bugNodeStartChar": 40671,
        "bugNodeLength": 21,
        "fixLineNum": 1135,
        "fixNodeStartChar": 40671,
        "fixNodeLength": 26,
        "sourceBeforeFix": "in.read(serCondition)",
        "sourceAfterFix": "in.readFully(serCondition)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e1626ef3aeecb1ccf7acf4056fb7bcf23243be25",
        "fixCommitParentSHA1": "a354507ccf650a2b304a2ea76797e7846564e620",
        "bugFilePath": "llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java",
        "fixPatch": "diff --git a/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java b/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java\nindex 349ee14..1df6df0 100644\n--- a/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java\n+++ b/llap-common/src/test/org/apache/hadoop/hive/llap/tez/TestConverters.java\n@@ -42,7 +42,7 @@\n \n public class TestConverters {\n \n-  @Test(timeout = 5000)\n+  @Test(timeout = 10000)\n   public void testTaskSpecToFragmentSpec() {\n     ByteBuffer procBb = ByteBuffer.allocate(4);\n     procBb.putInt(0, 200);\n@@ -98,7 +98,7 @@\n \n   }\n \n-  @Test (timeout = 5000)\n+  @Test (timeout = 10000)\n   public void testFragmentSpecToTaskSpec() {\n \n     ByteBuffer procBb = ByteBuffer.allocate(4);\n@@ -142,7 +142,7 @@\n \n     SignableVertexSpec vertexProto = builder.build();\n \n-    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, null);\n+    TaskSpec taskSpec = Converters.getTaskSpecfromProto(vertexProto, 0, 0, tezTaskAttemptId);\n \n     assertEquals(\"dagName\", taskSpec.getDAGName());\n     assertEquals(\"vertexName\", taskSpec.getVertexName());\n",
        "projectName": "apache.hive",
        "bugLineNum": 45,
        "bugNodeStartChar": 1837,
        "bugNodeLength": 14,
        "fixLineNum": 45,
        "fixNodeStartChar": 1837,
        "fixNodeLength": 15,
        "sourceBeforeFix": "timeout=5000",
        "sourceAfterFix": "timeout=10000"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "67e8cb0706ece341bb993ab1f0364d5a904a716c",
        "fixCommitParentSHA1": "323f1d590f403e72531c84643e54c0b8ed870fec",
        "bugFilePath": "servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java",
        "fixPatch": "diff --git a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\nindex 7061cb6..cecbef8 100644\n--- a/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n+++ b/servers/src/main/java/tachyon/master/file/journal/AddCheckpointEntry.java\n@@ -35,7 +35,7 @@\n     mWorkerId = workerId;\n     mFileId = fileId;\n     mLength = length;\n-    mCheckpointPath = checkpointPath.getPath();\n+    mCheckpointPath = checkpointPath.toString();\n     mOpTimeMs = opTimeMs;\n   }\n \n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 38,
        "bugNodeStartChar": 1448,
        "bugNodeLength": 24,
        "fixLineNum": 38,
        "fixNodeStartChar": 1448,
        "fixNodeLength": 25,
        "sourceBeforeFix": "checkpointPath.getPath()",
        "sourceAfterFix": "checkpointPath.toString()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "6586b6ae0a8cb0660e219a8b2b32ca75a218ddb7",
        "fixCommitParentSHA1": "16d4314e381df5f2bd208cdea16cea6c7334fc5b",
        "bugFilePath": "core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java",
        "fixPatch": "diff --git a/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java b/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\nindex 0073148..ab1d3e6 100644\n--- a/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\n+++ b/core/client/src/main/java/alluxio/client/file/options/InStreamOptions.java\n@@ -117,18 +117,19 @@\n       return false;\n     }\n     InStreamOptions that = (InStreamOptions) o;\n-    return Objects.equal(mLocationPolicy, that.mLocationPolicy) && Objects\n-        .equal(mReadType, that.mReadType);\n+    return Objects.equal(mLocationPolicy, that.mLocationPolicy) &&\n+        Objects.equal(mReadType, that.mReadType) &&\n+        Objects.equal(mCacheIncompleteBlock, that.mCacheIncompleteBlock);\n   }\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mLocationPolicy, mReadType);\n+    return Objects.hashCode(mLocationPolicy, mReadType, mCacheIncompleteBlock);\n   }\n \n   @Override\n   public String toString() {\n     return Objects.toStringHelper(this).add(\"locationPolicy\", mLocationPolicy)\n-        .add(\"readType\", mReadType).toString();\n+        .add(\"readType\", mReadType).add(\"cacheIncompleteBlock\", mCacheIncompleteBlock).toString();\n   }\n }\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 126,
        "bugNodeStartChar": 3644,
        "bugNodeLength": 44,
        "fixLineNum": 126,
        "fixNodeStartChar": 3644,
        "fixNodeLength": 67,
        "sourceBeforeFix": "Objects.hashCode(mLocationPolicy,mReadType)",
        "sourceAfterFix": "Objects.hashCode(mLocationPolicy,mReadType,mCacheIncompleteBlock)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "bde51f9e46600154bd60321d3d345bb539b30ed1",
        "fixCommitParentSHA1": "8dbc64105c13dfae467f2cfb75ec67d0d2d56c84",
        "bugFilePath": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/FlinkSqlOperatorTable.java",
        "fixPatch": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/FlinkSqlOperatorTable.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/FlinkSqlOperatorTable.java\nindex f78bd1c..b619eb5 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/FlinkSqlOperatorTable.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/functions/sql/FlinkSqlOperatorTable.java\n@@ -632,8 +632,7 @@\n \t\tOperandTypes.or(\n \t\t\tOperandTypes.NILADIC,\n \t\t\tOperandTypes.family(SqlTypeFamily.STRING),\n-\t\t\tOperandTypes.family(SqlTypeFamily.STRING, SqlTypeFamily.STRING),\n-\t\t\tOperandTypes.family(SqlTypeFamily.TIMESTAMP)),\n+\t\t\tOperandTypes.family(SqlTypeFamily.STRING, SqlTypeFamily.STRING)),\n \t\tSqlFunctionCategory.TIMEDATE) {\n \n \t\t@Override\n",
        "projectName": "apache.flink",
        "bugLineNum": 632,
        "bugNodeStartChar": 19388,
        "bugNodeLength": 204,
        "fixLineNum": 632,
        "fixNodeStartChar": 19388,
        "fixNodeLength": 155,
        "sourceBeforeFix": "OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.TIMESTAMP))",
        "sourceAfterFix": "OperandTypes.or(OperandTypes.NILADIC,OperandTypes.family(SqlTypeFamily.STRING),OperandTypes.family(SqlTypeFamily.STRING,SqlTypeFamily.STRING))"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "00d52565fc7047090c947eb7d34ca0392cf47002",
        "fixCommitParentSHA1": "491b2470c7640b2d9e613b547d5adaa117f7d276",
        "bugFilePath": "web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java",
        "fixPatch": "diff --git a/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java b/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\nindex 84ebc0e..7ea076c 100644\n--- a/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\n+++ b/web/src/main/java/org/openmrs/web/controller/PatientEncountersPortletController.java\n@@ -36,7 +36,7 @@\n \t\t// determine whether it's need to show disclaimer on jsp page or not\r\n \t\t// as current user does not have enough permissions to view at least one\r\n \t\t// type of encounters\r\n-\t\tmodel.put(\"showDisclaimer\", Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n+\t\tmodel.put(\"showDisclaimer\", !Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser()));\r\n \t}\r\n \t\r\n }\r\n",
        "projectName": "openmrs.openmrs-core",
        "bugLineNum": 39,
        "bugNodeStartChar": 1471,
        "bugNodeLength": 86,
        "fixLineNum": 39,
        "fixNodeStartChar": 1433,
        "fixNodeLength": 87,
        "sourceBeforeFix": "Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())",
        "sourceAfterFix": "!Context.getEncounterService().canViewAllEncounterTypes(Context.getAuthenticatedUser())"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "d4468b05034b3c4166195394e88eed6633bec842",
        "fixCommitParentSHA1": "1c4a7b96ac6f2d3466702fe92faaf73a82c82742",
        "bugFilePath": "core-common/src/main/java/org/glassfish/jersey/internal/Errors.java",
        "fixPatch": "diff --git a/core-common/src/main/java/org/glassfish/jersey/internal/Errors.java b/core-common/src/main/java/org/glassfish/jersey/internal/Errors.java\nindex 6e4be4b..d73284b 100644\n--- a/core-common/src/main/java/org/glassfish/jersey/internal/Errors.java\n+++ b/core-common/src/main/java/org/glassfish/jersey/internal/Errors.java\n@@ -1,7 +1,7 @@\n /*\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n  *\n- * Copyright (c) 2012-2015 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012-2016 Oracle and/or its affiliates. All rights reserved.\n  *\n  * The contents of this file are subject to the terms of either the GNU\n  * General Public License Version 2 only (\"GPL\") or the Common Development\n@@ -178,7 +178,7 @@\n                         warnings.append(LocalizationMessages.WARNING_MSG(error.getMessage())).append('\\n');\n                         break;\n                     case HINT:\n-                        warnings.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n+                        hints.append(LocalizationMessages.HINT_MSG(error.getMessage())).append('\\n');\n                         break;\n                 }\n             }\n",
        "projectName": "jersey.jersey",
        "bugLineNum": 181,
        "bugNodeStartChar": 7205,
        "bugNodeLength": 66,
        "fixLineNum": 181,
        "fixNodeStartChar": 7205,
        "fixNodeLength": 63,
        "sourceBeforeFix": "warnings.append(LocalizationMessages.HINT_MSG(error.getMessage()))",
        "sourceAfterFix": "hints.append(LocalizationMessages.HINT_MSG(error.getMessage()))"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "f3e85df8a467608047ac463ed30d6843d9effc27",
        "fixCommitParentSHA1": "88ae1b574a2f4e1e61716c97c57db20eed450e0a",
        "bugFilePath": "camel-core/src/main/java/org/apache/camel/converter/IOConverter.java",
        "fixPatch": "diff --git a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\nindex 958547a..ebc6dd1 100644\n--- a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\n+++ b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\n@@ -376,7 +376,7 @@\n      */\n     @Deprecated\n     public static String getCharsetName(Exchange exchange, boolean useDefault) {\n-        return IOHelper.getCharsetName(exchange);\n+        return IOHelper.getCharsetName(exchange, useDefault);\n     }\n \n     /**\n",
        "projectName": "apache.camel",
        "bugLineNum": 379,
        "bugNodeStartChar": 12037,
        "bugNodeLength": 33,
        "fixLineNum": 379,
        "fixNodeStartChar": 12037,
        "fixNodeLength": 45,
        "sourceBeforeFix": "IOHelper.getCharsetName(exchange)",
        "sourceAfterFix": "IOHelper.getCharsetName(exchange,useDefault)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e38662958d7db7030bf961d25341586cedea5f1f",
        "fixCommitParentSHA1": "41c66b4ea4ed0d5ae2561fe812fd83e14ce773e7",
        "bugFilePath": "ejb3/src/main/java/org/jboss/as/ejb3/EjbMessages.java",
        "fixPatch": "diff --git a/ejb3/src/main/java/org/jboss/as/ejb3/EjbMessages.java b/ejb3/src/main/java/org/jboss/as/ejb3/EjbMessages.java\nindex a409f65..d2492d8 100644\n--- a/ejb3/src/main/java/org/jboss/as/ejb3/EjbMessages.java\n+++ b/ejb3/src/main/java/org/jboss/as/ejb3/EjbMessages.java\n@@ -2457,9 +2457,9 @@\n     @Message(id = 14238, value = \"More than one timer found in database with id %s\")\n     RuntimeException moreThanOneTimerFoundWithId(String id);\n \n-    @Message(id = 14238, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n+    @Message(id = 14239, value = \"The timer service has been disabled. Please add a <timer-service> entry into the ejb section of the server configuration to enable it.\")\n     String timerServiceIsNotActive();\n \n-    @Message(id = 14239, value = \"This EJB does not have any timeout methods\")\n+    @Message(id = 14240, value = \"This EJB does not have any timeout methods\")\n     String ejbHasNoTimerMethods();\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 2463,
        "bugNodeStartChar": 113658,
        "bugNodeLength": 10,
        "fixLineNum": 2463,
        "fixNodeStartChar": 113658,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=14239",
        "sourceAfterFix": "id=14240"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2155f66a2a44fa9057bed99e91e8ccded7a006f4",
        "fixCommitParentSHA1": "6e4c84483397a3fc48ee58b112dd0d3294a3a320",
        "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java",
        "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\nindex 4ad4190..43a49cf 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/impl/ListenerManager.java\n@@ -99,7 +99,7 @@\n                 entryListeners.put(name, new HashMap<Object, List<EntryListener<?, ?>>>());\n             }\n             if (!entryListeners.get(name).containsKey(key)) {\n-                entryListeners.get(name).put(key, new ArrayList<EntryListener<?, ?>>());\n+                entryListeners.get(name).put(key, new CopyOnWriteArrayList<EntryListener<?, ?>>());\n             }\n             entryListeners.get(name).get(key).add(entryListener);\n         }\n@@ -207,7 +207,7 @@\n \n         public synchronized void registerMessageListener(String name, MessageListener messageListener) {\n             if (!messageListeners.containsKey(name)) {\n-                messageListeners.put(name, new ArrayList<MessageListener<Object>>());\n+                messageListeners.put(name, new CopyOnWriteArrayList<MessageListener<Object>>());\n             }\n             messageListeners.get(name).add(messageListener);\n         }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 210,
        "bugNodeStartChar": 8759,
        "bugNodeLength": 34,
        "fixLineNum": 210,
        "fixNodeStartChar": 8759,
        "fixNodeLength": 45,
        "sourceBeforeFix": "ArrayList<MessageListener<Object>>",
        "sourceAfterFix": "CopyOnWriteArrayList<MessageListener<Object>>"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "b041bcdeb2b96589efd6e6058fb0ba9dc630e949",
        "fixCommitParentSHA1": "8bf70562c09e416b9d7fd1f903f1ea8a9cb943a7",
        "bugFilePath": "gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java\nindex 410f489..3208eef 100644\n--- a/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java\n+++ b/gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java\n@@ -199,7 +199,7 @@\n \t * @param child The Node to add as child of this Node\r\n \t * @return the zero-based index of the child */\r\n \tpublic <T extends Node> int insertChild (int index, final T child) {\r\n-\t\tfor (Node p = this; p != null; p = child.getParent()) {\r\n+\t\tfor (Node p = this; p != null; p = p.getParent()) {\r\n \t\t\tif (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n \t\t}\r\n \t\tNode p = child.getParent();\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 202,
        "bugNodeStartChar": 9075,
        "bugNodeLength": 17,
        "fixLineNum": 202,
        "fixNodeStartChar": 8874,
        "fixNodeLength": 13,
        "sourceBeforeFix": "child.getParent()",
        "sourceAfterFix": "p.getParent()"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "e9cad4da3a814bcde46c10c0e4da2fc84f99d815",
        "fixCommitParentSHA1": "20a464f5bd2a911d93262638d76015083ef49dd7",
        "bugFilePath": "flink-contrib/flink-storm-compatibility/flink-storm-compatibility-examples/src/main/java/org/apache/flink/stormcompatibility/excamation/StormExclamationLocal.java",
        "fixPatch": "diff --git a/flink-contrib/flink-storm-compatibility/flink-storm-compatibility-examples/src/main/java/org/apache/flink/stormcompatibility/excamation/StormExclamationLocal.java b/flink-contrib/flink-storm-compatibility/flink-storm-compatibility-examples/src/main/java/org/apache/flink/stormcompatibility/excamation/StormExclamationLocal.java\nindex c87fe8f..a25e5e0 100644\n--- a/flink-contrib/flink-storm-compatibility/flink-storm-compatibility-examples/src/main/java/org/apache/flink/stormcompatibility/excamation/StormExclamationLocal.java\n+++ b/flink-contrib/flink-storm-compatibility/flink-storm-compatibility-examples/src/main/java/org/apache/flink/stormcompatibility/excamation/StormExclamationLocal.java\n@@ -42,7 +42,7 @@\n \t\tfinal FlinkLocalCluster cluster = FlinkLocalCluster.getLocalCluster();\n \t\tcluster.submitTopology(topologyId, null, builder.createTopology());\n \n-\t\tUtils.sleep(5 * 1000);\n+\t\tUtils.sleep(10 * 1000);\n \n \t\t// TODO kill does no do anything so far\n \t\tcluster.killTopology(topologyId);\n",
        "projectName": "apache.flink",
        "bugLineNum": 45,
        "bugNodeStartChar": 1736,
        "bugNodeLength": 8,
        "fixLineNum": 45,
        "fixNodeStartChar": 1736,
        "fixNodeLength": 9,
        "sourceBeforeFix": "5 * 1000",
        "sourceAfterFix": "10 * 1000"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "a295b91c37f681199a83fdb963344c19e0d015c0",
        "fixCommitParentSHA1": "639746c600fda2645e33223cb7c6607cf7163783",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\nindex c7d803b..5dcc1ca 100644\n--- a/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n+++ b/hazelcast/src/main/java/com/hazelcast/ascii/memcache/SetCommandParser.java\n@@ -44,7 +44,7 @@\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n         if (st.hasMoreTokens()) {\n-            flag = Integer.valueOf(st.nextToken());\n+            flag = Integer.parseInt(st.nextToken());\n         } else {\n             return new ErrorCommand(ERROR_CLIENT);\n         }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 47,
        "bugNodeStartChar": 1645,
        "bugNodeLength": 31,
        "fixLineNum": 47,
        "fixNodeStartChar": 1645,
        "fixNodeLength": 32,
        "sourceBeforeFix": "Integer.valueOf(st.nextToken())",
        "sourceAfterFix": "Integer.parseInt(st.nextToken())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "51c2b049c21582fcf9db82244063e67196cabad5",
        "fixCommitParentSHA1": "c1101e7eb22ae383bd24374c7991f26c54f93905",
        "bugFilePath": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java",
        "fixPatch": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\nindex f35d4d9..69794cf 100644\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 60,
        "bugNodeStartChar": 2365,
        "bugNodeLength": 88,
        "fixLineNum": 60,
        "fixNodeStartChar": 2365,
        "fixNodeLength": 92,
        "sourceBeforeFix": "defaults.jackson2Encoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))",
        "sourceAfterFix": "defaults.jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,EMPTY_MIME_TYPES))"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "74d1fbf11bad03768e3b9a8b257e4c18ed05416f",
        "fixCommitParentSHA1": "b9ed7d8912c94ef77749c5bd672c670a94728c50",
        "bugFilePath": "backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java",
        "fixPatch": "diff --git a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\nindex 0c1a19f..9fbfeff 100644\n--- a/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n+++ b/backends/gdx-backend-lwjgl3/src/com/badlogic/gdx/backends/lwjgl3/LwjglGL20.java\n@@ -383,7 +383,7 @@\n \t}\r\n \r\n \tpublic void glGetBufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL15.glGetBufferParameter(target, pname, params);\r\n+\t\tGL15.glGetBufferParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetError () {\r\n@@ -391,15 +391,15 @@\n \t}\r\n \r\n \tpublic void glGetFloatv (int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetFloat(pname, params);\r\n+\t\tGL11.glGetFloatv(pname, params);\r\n \t}\r\n \r\n \tpublic void glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterEXT(target, attachment, pname, params);\r\n+\t\tEXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetIntegerv (int pname, IntBuffer params) {\r\n-\t\tGL11.glGetInteger(pname, params);\r\n+\t\tGL11.glGetIntegerv(pname, params);\r\n \t}\r\n \r\n \tpublic String glGetProgramInfoLog (int program) {\r\n@@ -417,11 +417,11 @@\n \t}\r\n \r\n \tpublic void glGetProgramiv (int program, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetProgram(program, pname, params);\r\n+\t\tGL20.glGetProgramiv(program, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetRenderbufferParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tEXTFramebufferObject.glGetRenderbufferParameterEXT(target, pname, params);\r\n+\t\tEXTFramebufferObject.glGetRenderbufferParameterivEXT(target, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetShaderInfoLog (int shader) {\r\n@@ -443,7 +443,7 @@\n \t}\r\n \r\n \tpublic void glGetShaderiv (int shader, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetShader(shader, pname, params);\r\n+\t\tGL20.glGetShaderiv(shader, pname, params);\r\n \t}\r\n \r\n \tpublic String glGetString (int name) {\r\n@@ -451,11 +451,11 @@\n \t}\r\n \r\n \tpublic void glGetTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glGetTexParameter(target, pname, params);\r\n+\t\tGL11.glGetTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic int glGetUniformLocation (int program, String name) {\r\n@@ -463,11 +463,11 @@\n \t}\r\n \r\n \tpublic void glGetUniformfv (int program, int location, FloatBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformfv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetUniformiv (int program, int location, IntBuffer params) {\r\n-\t\tGL20.glGetUniform(program, location, params);\r\n+\t\tGL20.glGetUniformiv(program, location, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribPointerv (int index, int pname, Buffer pointer) {\r\n@@ -475,11 +475,11 @@\n \t}\r\n \r\n \tpublic void glGetVertexAttribfv (int index, int pname, FloatBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribfv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glGetVertexAttribiv (int index, int pname, IntBuffer params) {\r\n-\t\tGL20.glGetVertexAttrib(index, pname, params);\r\n+\t\tGL20.glGetVertexAttribiv(index, pname, params);\r\n \t}\r\n \r\n \tpublic void glHint (int target, int mode) {\r\n@@ -616,7 +616,7 @@\n \t}\r\n \r\n \tpublic void glTexParameterfv (int target, int pname, FloatBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameterfv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexParameteri (int target, int pname, int param) {\r\n@@ -624,7 +624,7 @@\n \t}\r\n \r\n \tpublic void glTexParameteriv (int target, int pname, IntBuffer params) {\r\n-\t\tGL11.glTexParameter(target, pname, params);\r\n+\t\tGL11.glTexParameteriv(target, pname, params);\r\n \t}\r\n \r\n \tpublic void glTexSubImage2D (int target, int level, int xoffset, int yoffset, int width, int height, int format, int type,\r\n@@ -649,11 +649,11 @@\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform1fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toFloatBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1fv(location, toFloatBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform1i (int location, int x) {\r\n@@ -661,12 +661,12 @@\n \t}\r\n \r\n \tpublic void glUniform1iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform1(location, v);\r\n+\t\tGL20.glUniform1iv(location, v);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic void glUniform1iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform1(location, toIntBuffer(v, offset, count));\r\n+\t\tGL20.glUniform1iv(location, toIntBuffer(v, offset, count));\r\n \t}\r\n \r\n \tpublic void glUniform2f (int location, float x, float y) {\r\n@@ -674,11 +674,11 @@\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toFloatBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2fv(location, toFloatBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform2i (int location, int x, int y) {\r\n@@ -686,11 +686,11 @@\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform2(location, v);\r\n+\t\tGL20.glUniform2iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform2iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform2(location, toIntBuffer(v, offset, count << 1));\r\n+\t\tGL20.glUniform2iv(location, toIntBuffer(v, offset, count << 1));\r\n \t}\r\n \r\n \tpublic void glUniform3f (int location, float x, float y, float z) {\r\n@@ -698,11 +698,11 @@\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toFloatBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3fv(location, toFloatBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform3i (int location, int x, int y, int z) {\r\n@@ -710,11 +710,11 @@\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform3(location, v);\r\n+\t\tGL20.glUniform3iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform3iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform3(location, toIntBuffer(v, offset, count * 3));\r\n+\t\tGL20.glUniform3iv(location, toIntBuffer(v, offset, count * 3));\r\n \t}\r\n \r\n \tpublic void glUniform4f (int location, float x, float y, float z, float w) {\r\n@@ -722,11 +722,11 @@\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, FloatBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4fv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4fv (int location, int count, float[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toFloatBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4fv(location, toFloatBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniform4i (int location, int x, int y, int z, int w) {\r\n@@ -734,35 +734,35 @@\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, IntBuffer v) {\r\n-\t\tGL20.glUniform4(location, v);\r\n+\t\tGL20.glUniform4iv(location, v);\r\n \t}\r\n \r\n \tpublic void glUniform4iv (int location, int count, int[] v, int offset) {\r\n-\t\tGL20.glUniform4(location, toIntBuffer(v, offset, count << 2));\r\n+\t\tGL20.glUniform4iv(location, toIntBuffer(v, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix2fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix2(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n+\t\tGL20.glUniformMatrix2fv(location, transpose, toFloatBuffer(value, offset, count << 2));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix3fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix3(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n+\t\tGL20.glUniformMatrix3fv(location, transpose, toFloatBuffer(value, offset, count * 9));\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, FloatBuffer value) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, value);\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, value);\r\n \t}\r\n \r\n \tpublic void glUniformMatrix4fv (int location, int count, boolean transpose, float[] value, int offset) {\r\n-\t\tGL20.glUniformMatrix4(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n+\t\tGL20.glUniformMatrix4fv(location, transpose, toFloatBuffer(value, offset, count << 4));\r\n \t}\r\n \r\n \tpublic void glUseProgram (int program) {\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 446,
        "bugNodeStartChar": 14706,
        "bugNodeLength": 39,
        "fixLineNum": 446,
        "fixNodeStartChar": 14261,
        "fixNodeLength": 41,
        "sourceBeforeFix": "GL20.glGetShader(shader,pname,params)",
        "sourceAfterFix": "GL20.glGetShaderiv(shader,pname,params)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 64,
        "bugNodeStartChar": 1811,
        "bugNodeLength": 7,
        "fixLineNum": 64,
        "fixNodeStartChar": 1811,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=10",
        "sourceAfterFix": "id=13"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "e468368e908ffe056690c2399d9e0b59557af2d8",
        "fixCommitParentSHA1": "049a44c3a2a10cc6e1a7b3e21e434619aea4fa4d",
        "bugFilePath": "src/com/google/javascript/jscomp/NewTypeInference.java",
        "fixPatch": "diff --git a/src/com/google/javascript/jscomp/NewTypeInference.java b/src/com/google/javascript/jscomp/NewTypeInference.java\nindex 3917232..515b599 100644\n--- a/src/com/google/javascript/jscomp/NewTypeInference.java\n+++ b/src/com/google/javascript/jscomp/NewTypeInference.java\n@@ -3236,7 +3236,8 @@\n     if (NodeUtil.isFunctionBind(expr)) {\n       return true;\n     }\n-    if (!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")) {\n+    if (!expr.isGetProp() || !expr.isQualifiedName()\n+        || !expr.getLastChild().getString().equals(\"bind\")) {\n       return false;\n     }\n     Node recv = expr.getFirstChild();\n",
        "projectName": "google.closure-compiler",
        "bugLineNum": 3239,
        "bugNodeStartChar": 128190,
        "bugNodeLength": 68,
        "fixLineNum": 3239,
        "fixNodeStartChar": 128190,
        "fixNodeLength": 103,
        "sourceBeforeFix": "!expr.isGetProp() || !expr.getLastChild().getString().equals(\"bind\")",
        "sourceAfterFix": "!expr.isGetProp() || !expr.isQualifiedName() || !expr.getLastChild().getString().equals(\"bind\")"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "5e7873ebd45790d9d72eb9d312de4611dc97f796",
        "fixCommitParentSHA1": "ea1743c1045cf359c88ad2c43fcc6d74160c6619",
        "bugFilePath": "modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java",
        "fixPatch": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java\nindex 2ae8ddf..cf8e5e5 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricActivityInstanceTest.java\n@@ -100,9 +100,9 @@\n     assertEquals(0, historyService.createHistoricActivityInstanceQuery().executionId(\"nonExistingExecutionId\").list().size());\n     \n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n-      assertEquals(2, historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n-      assertEquals(1, historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().executionId(processInstance.getId()).list().size());\n     }\n@@ -110,9 +110,9 @@\n     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(\"nonExistingProcessInstanceId\").list().size());\n \n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n-      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n-      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size());\n     }\n@@ -120,9 +120,9 @@\n     assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(\"nonExistingProcessDefinitionId\").list().size());\n \n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n-      assertEquals(2, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n-      assertEquals(1, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().processDefinitionId(processInstance.getProcessDefinitionId()).list().size());\n     }\n@@ -130,9 +130,9 @@\n     assertEquals(0, historyService.createHistoricActivityInstanceQuery().unfinished().list().size());\n \n     if (processEngineConfiguration.getHistoryLevel()==ProcessEngineConfigurationImpl.HISTORYLEVEL_FULL) {\n-      assertEquals(2, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else if (processEngineConfiguration.getHistoryLevel()>=ProcessEngineConfigurationImpl.HISTORYLEVEL_ACTIVITY) {\n-      assertEquals(1, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n+      assertEquals(3, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     } else {\n       assertEquals(0, historyService.createHistoricActivityInstanceQuery().finished().list().size());\n     }\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 113,
        "bugNodeStartChar": 5796,
        "bugNodeLength": 126,
        "fixLineNum": 113,
        "fixNodeStartChar": 5796,
        "fixNodeLength": 126,
        "sourceBeforeFix": "assertEquals(2,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())",
        "sourceAfterFix": "assertEquals(3,historyService.createHistoricActivityInstanceQuery().processInstanceId(processInstance.getId()).list().size())"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "7982cd3d6716b56dd9d13db35e61a79b89090646",
        "fixCommitParentSHA1": "eb0134ad067cdb5e5b04de58a23cbfaba5f8c1e3",
        "bugFilePath": "DesktopImport/src/org/gephi/desktop/importer/DesktopImportController.java",
        "fixPatch": "diff --git a/DesktopImport/src/org/gephi/desktop/importer/DesktopImportController.java b/DesktopImport/src/org/gephi/desktop/importer/DesktopImportController.java\nindex 28d3b0e..fbbb070 100644\n--- a/DesktopImport/src/org/gephi/desktop/importer/DesktopImportController.java\n+++ b/DesktopImport/src/org/gephi/desktop/importer/DesktopImportController.java\n@@ -494,7 +494,7 @@\n                 return true;\n             }\n         }\n-        if (fileObject.hasExt(\"zip\")) {\n+        if (fileObject.hasExt(\"zip\") || fileObject.hasExt(\"ZIP\")) {\n             return true;\n         }\n         return false;\n",
        "projectName": "gephi.gephi",
        "bugLineNum": 497,
        "bugNodeStartChar": 19578,
        "bugNodeLength": 24,
        "fixLineNum": 497,
        "fixNodeStartChar": 19578,
        "fixNodeLength": 52,
        "sourceBeforeFix": "fileObject.hasExt(\"zip\")",
        "sourceAfterFix": "fileObject.hasExt(\"zip\") || fileObject.hasExt(\"ZIP\")"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "127108d1005124b8d33651569780b08fa2b5d5b8",
        "fixCommitParentSHA1": "06c166c9f45758afbb1ebcff4214b4c3796ac624",
        "bugFilePath": "components/camel-properties/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java",
        "fixPatch": "diff --git a/components/camel-properties/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java b/components/camel-properties/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java\nindex b6a2df5..5094e47 100644\n--- a/components/camel-properties/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java\n+++ b/components/camel-properties/src/main/java/org/apache/camel/component/properties/PropertiesComponent.java\n@@ -120,7 +120,7 @@\n     private Properties overrideProperties;\n     @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int systemPropertiesMode = SYSTEM_PROPERTIES_MODE_OVERRIDE;\n-    @Metadata(defaultValue = \"\" + SYSTEM_PROPERTIES_MODE_FALLBACK, enums = \"0,1,2\")\n+    @Metadata(defaultValue = \"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE, enums = \"0,1,2\")\n     private int environmentVariableMode = ENVIRONMENT_VARIABLES_MODE_OVERRIDE;\n \n     public PropertiesComponent() {\n",
        "projectName": "apache.camel",
        "bugLineNum": 123,
        "bugNodeStartChar": 5009,
        "bugNodeLength": 36,
        "fixLineNum": 123,
        "fixNodeStartChar": 5009,
        "fixNodeLength": 40,
        "sourceBeforeFix": "\"\" + SYSTEM_PROPERTIES_MODE_FALLBACK",
        "sourceAfterFix": "\"\" + ENVIRONMENT_VARIABLES_MODE_OVERRIDE"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "6cf86311e8d061d65c3b8c70d705b69a9d205127",
        "fixCommitParentSHA1": "c2c5bfecaa440f04bc39f21d6f68a840105496bb",
        "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java",
        "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\nindex 675dddb..b9d8a6c 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/ExecutorServiceClientProxy.java\n@@ -135,7 +135,7 @@\n             private void handle(Object response) {\n                 Object result = response;\n                 if (response == null) {\n-                    inner.innerSetException(new TimeoutException());\n+                    inner.innerSetException(new TimeoutException(), false);\n                 } else {\n                     if (response instanceof Packet) {\n                         Packet responsePacket = (Packet) response;\n@@ -145,7 +145,7 @@\n                         MemberLeftException memberLeftException = (MemberLeftException) result;\n                         inner.innerSetMemberLeft(memberLeftException.getMember());\n                     } else if (result instanceof Throwable) {\n-                        inner.innerSetException((Throwable) result);\n+                        inner.innerSetException((Throwable) result, true);\n                     } else {\n                         if (dt instanceof MultiTask) {\n                             if (result != null) {\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 138,
        "bugNodeStartChar": 4885,
        "bugNodeLength": 47,
        "fixLineNum": 138,
        "fixNodeStartChar": 4885,
        "fixNodeLength": 54,
        "sourceBeforeFix": "inner.innerSetException(new TimeoutException())",
        "sourceAfterFix": "inner.innerSetException(new TimeoutException(),false)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "544b0ed025cdea88bec8a5dd4ff5462242442eca",
        "fixCommitParentSHA1": "64d880881c08f70758a9bbe6b14a12c4004423e8",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\nindex 49bd0b0..bbaabcb 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java\n@@ -68,7 +68,7 @@\n                         logger.error(\"Invalid WebSocket Specification {} with {} \",\n                                 r.getHeader(\"Connection\"), r.getIntHeader(\"Sec-WebSocket-Version\"));\n                         HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, \"Websocket protocol not supported\");\n-                        HttpServletResponse.class.cast(response).sendError(202, \"Websocket protocol not supported\");\n+                        HttpServletResponse.class.cast(response).sendError(501, \"Websocket protocol not supported\");\n                         return;\n                     }\n                 }\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 71,
        "bugNodeStartChar": 2793,
        "bugNodeLength": 91,
        "fixLineNum": 71,
        "fixNodeStartChar": 2793,
        "fixNodeLength": 91,
        "sourceBeforeFix": "HttpServletResponse.class.cast(response).sendError(202,\"Websocket protocol not supported\")",
        "sourceAfterFix": "HttpServletResponse.class.cast(response).sendError(501,\"Websocket protocol not supported\")"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "3d76925f31db8747ba6726e1c0d568441479de6e",
        "fixCommitParentSHA1": "8459387c93407382b251f01eca24eba5fdcb4d5f",
        "bugFilePath": "hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java",
        "fixPatch": "diff --git a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\nindex c2f55a6..e92c5ce 100644\n--- a/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\n+++ b/hazelcast/src/test/java/com/hazelcast/map/impl/mapstore/MapStoreWriteBehindTest.java\n@@ -245,7 +245,7 @@\n     public void testOneMemberWriteBehindFlush() {\n         TestMapStore testMapStore = new TestMapStore(1, 1, 1);\n         testMapStore.setLoadAllKeys(false);\n-        int writeDelaySeconds = 2;\n+        int writeDelaySeconds = 10;\n         Config config = newConfig(testMapStore, writeDelaySeconds);\n         TestHazelcastInstanceFactory nodeFactory = createHazelcastInstanceFactory(3);\n         HazelcastInstance instance = nodeFactory.newHazelcastInstance(config);\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 248,
        "bugNodeStartChar": 10294,
        "bugNodeLength": 21,
        "fixLineNum": 248,
        "fixNodeStartChar": 10294,
        "fixNodeLength": 22,
        "sourceBeforeFix": "writeDelaySeconds=2",
        "sourceAfterFix": "writeDelaySeconds=10"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "fedfad854b134ea5428c592ea711c59b377a71fa",
        "fixCommitParentSHA1": "7a8678decaae4216d3cd55f60a189ce24c48f759",
        "bugFilePath": "host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerMessages.java",
        "fixPatch": "diff --git a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerMessages.java b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerMessages.java\nindex fe3a059..7647e78 100644\n--- a/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerMessages.java\n+++ b/host-controller/src/main/java/org/jboss/as/domain/controller/DomainControllerMessages.java\n@@ -37,7 +37,7 @@\n import org.jboss.logging.Messages;\n \n /**\n- * This module is using message IDs in the range 10900-10999. This file is using the subset 10975-10999 for domain\n+ * This module is using message IDs in the range 10800-10899. This file is using the subset 10830-10899 for domain\n  * controller non-logger messages. See http://community.jboss.org/docs/DOC-16810 for the full list of currently reserved\n  * JBAS message id blocks.\n  * <p/>\n@@ -58,7 +58,7 @@\n      *\n      * @return a message for the error.\n      */\n-    @Message(id = 15830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n+    @Message(id = 10830, value = \"Registration of remote hosts is not supported on slave host controllers\")\n     String slaveControllerCannotAcceptOtherSlaves();\n \n     /**\n@@ -69,7 +69,7 @@\n      *\n      * @return a message for the error.\n      */\n-    @Message(id = 15831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n+    @Message(id = 10831, value = \"The master host controller cannot register slave host controllers as it's current running mode is '%s'\")\n     String adminOnlyModeCannotAcceptSlaves(RunningMode runningMode);\n \n     /**\n@@ -80,7 +80,7 @@\n      *\n      * @return a message for the error.\n      */\n-    @Message(id = 15832, value = \"There is already a registered host named '%s'\")\n+    @Message(id = 10832, value = \"There is already a registered host named '%s'\")\n     String slaveAlreadyRegistered(String slaveName);\n \n     /**\n@@ -92,7 +92,7 @@\n      *\n      * @return the error message\n      */\n-    @Message(id = 15833, value = \"%s is missing %s: %s\")\n+    @Message(id = 10833, value = \"%s is missing %s: %s\")\n     String requiredChildIsMissing(String parent, String child, String parentSpec);\n \n     /**\n@@ -104,7 +104,7 @@\n      *\n      * @return the error message\n      */\n-    @Message(id = 15834, value = \"%s recognizes only %s as children: %s\")\n+    @Message(id = 10834, value = \"%s recognizes only %s as children: %s\")\n     String unrecognizedChildren(String parent, String children, String parentSpec);\n \n     /**\n@@ -114,7 +114,7 @@\n      *\n      * @return the error message\n      */\n-    @Message(id = 15835, value = IN_SERIES + \" is missing groups: %s\")\n+    @Message(id = 10835, value = IN_SERIES + \" is missing groups: %s\")\n     String inSeriesIsMissingGroups(String rolloutPlan);\n \n     /**\n@@ -124,7 +124,7 @@\n      *\n      * @return the error message\n      */\n-    @Message(id = 15836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n+    @Message(id = 10836, value = SERVER_GROUP + \" expects one and only one child: %s\")\n     String serverGroupExpectsSingleChild(String rolloutPlan);\n \n     /**\n@@ -135,7 +135,7 @@\n      *\n      * @return the error message\n      */\n-    @Message(id = 15837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n+    @Message(id = 10837, value = \"One of the groups does not define neither \" + SERVER_GROUP + \" nor \" + CONCURRENT_GROUPS + \": %s\")\n     String unexpectedInSeriesGroup(String rolloutPlan);\n \n     /**\n@@ -143,7 +143,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15838, value = \"Unexplained failure\")\n+    @Message(id = 10838, value = \"Unexplained failure\")\n     String unexplainedFailure();\n \n     /**\n@@ -151,7 +151,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15839, value = \"Operation failed or was rolled back on all servers.\")\n+    @Message(id = 10839, value = \"Operation failed or was rolled back on all servers.\")\n     String operationFailedOrRolledBack();\n \n     /**\n@@ -161,7 +161,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15840, value = \"Interrupted waiting for result from server %s\")\n+    @Message(id = 10840, value = \"Interrupted waiting for result from server %s\")\n     String interruptedAwaitingResultFromServer(ServerIdentity server);\n \n     /**\n@@ -172,7 +172,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15841, value = \"Exception getting result from server %s: %s\")\n+    @Message(id = 10841, value = \"Exception getting result from server %s: %s\")\n     String exceptionAwaitingResultFromServer(ServerIdentity server, String message);\n \n     /**\n@@ -184,7 +184,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n+    @Message(id = 10842, value = \"Invalid rollout plan. %s is not a valid child of node %s\")\n     String invalidRolloutPlan(ModelNode modelNode, String nodeName);\n \n     /**\n@@ -195,7 +195,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n+    @Message(id = 10843, value = \"Invalid rollout plan. Plan operations affect server groups %s that are not reflected in the rollout plan\")\n     String invalidRolloutPlan(Set<String> groups);\n \n     /**\n@@ -206,7 +206,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n+    @Message(id = 10844, value = \"Invalid rollout plan. Server group %s appears more than once in the plan.\")\n     String invalidRolloutPlanGroupAlreadyExists(String group);\n \n     /**\n@@ -219,7 +219,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n+    @Message(id = 10845, value = \"Invalid rollout plan. Server group %s has a %s value of %s; must be between 0 and 100.\")\n     String invalidRolloutPlanRange(String name, String propertyName, int value);\n \n     /**\n@@ -232,7 +232,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n+    @Message(id = 10846, value = \"Invalid rollout plan. Server group %s has a %s value of %s; cannot be less than 0.\")\n     String invalidRolloutPlanLess(String name, String propertyName, int value);\n \n     /**\n@@ -242,7 +242,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15847, value = \"Interrupted waiting for result from host %s\")\n+    @Message(id = 10847, value = \"Interrupted waiting for result from host %s\")\n     String interruptedAwaitingResultFromHost(String name);\n \n     /**\n@@ -253,7 +253,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15848, value = \"Exception getting result from host %s: %s\")\n+    @Message(id = 10848, value = \"Exception getting result from host %s: %s\")\n     String exceptionAwaitingResultFromHost(String name, String message);\n \n     /**\n@@ -265,7 +265,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15849, value = \"Operation %s for address %s can only be handled by the \" +\n+    @Message(id = 10849, value = \"Operation %s for address %s can only be handled by the \" +\n             \"master Domain Controller; this host is not the master Domain Controller\")\n     String masterDomainControllerOnlyOperation(String operation, PathAddress address);\n \n@@ -277,7 +277,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15850, value = \"No handler for operation %s at address %s\")\n+    @Message(id = 10850, value = \"No handler for operation %s at address %s\")\n     String noHandlerForOperation(String operationName, PathAddress address);\n \n     /**\n@@ -287,7 +287,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15851, value = \"Operation targets host %s but that host is not registered\")\n+    @Message(id = 10851, value = \"Operation targets host %s but that host is not registered\")\n     String invalidOperationTargetHost(String name);\n \n     /**\n@@ -298,7 +298,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15852, value = \"Caught %s storing deployment content -- %s\")\n+    @Message(id = 10852, value = \"Caught %s storing deployment content -- %s\")\n     String caughtExceptionStoringDeploymentContent(String exceptionName, Throwable exception);\n \n     /**\n@@ -308,7 +308,7 @@\n      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n-    @Message(id = 15853, value = \"Unexpected initial path key %s\")\n+    @Message(id = 10853, value = \"Unexpected initial path key %s\")\n     IllegalStateException unexpectedInitialPathKey(String key);\n \n     /**\n@@ -318,7 +318,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15854, value = \"Null stream at index %d\")\n+    @Message(id = 10854, value = \"Null stream at index %d\")\n     String nullStream(int index);\n \n     /**\n@@ -326,7 +326,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15855, value = \"Invalid byte stream.\")\n+    @Message(id = 10855, value = \"Invalid byte stream.\")\n     String invalidByteStream();\n \n     /**\n@@ -334,7 +334,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15856, value = \"Invalid url stream.\")\n+    @Message(id = 10856, value = \"Invalid url stream.\")\n     String invalidUrlStream();\n \n     /**\n@@ -342,7 +342,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n+    @Message(id = 10857, value = \"Only 1 piece of content is currently supported (AS7-431)\")\n     String as7431();\n \n     /**\n@@ -352,7 +352,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n+    @Message(id = 10858, value = \"No deployment content with hash %s is available in the deployment content repository.\")\n     String noDeploymentContentWithHash(String hash);\n \n     /**\n@@ -360,7 +360,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15859, value = \"A slave domain controller cannot accept deployment content uploads\")\n+    @Message(id = 10859, value = \"A slave domain controller cannot accept deployment content uploads\")\n     String slaveCannotAcceptUploads();\n \n     /**\n@@ -370,7 +370,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15860, value = \"No deployment with name %s found\")\n+    @Message(id = 10860, value = \"No deployment with name %s found\")\n     String noDeploymentContentWithName(String name);\n \n     /**\n@@ -381,7 +381,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n+    @Message(id = 10861, value = \"Cannot remove deployment %s from the domain as it is still used by server groups %s\")\n     String cannotRemoveDeploymentInUse(String name, List<String> groups);\n \n     /**\n@@ -393,7 +393,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n+    @Message(id = 10862, value = \"Invalid '%s' value: %d, the maximum index is %d\")\n     String invalidValue(String name, int value, int maxIndex);\n \n     /**\n@@ -404,7 +404,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15863, value = \"%s is not a valid URL -- %s\")\n+    @Message(id = 10863, value = \"%s is not a valid URL -- %s\")\n     String invalidUrl(String url, String message);\n \n     /**\n@@ -415,7 +415,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15864, value = \"Error obtaining input stream from URL %s -- %s\")\n+    @Message(id = 10864, value = \"Error obtaining input stream from URL %s -- %s\")\n     String errorObtainingUrlStream(String url, String message);\n \n     /**\n@@ -423,7 +423,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15865, value = \"Invalid content declaration\")\n+    @Message(id = 10865, value = \"Invalid content declaration\")\n     String invalidContentDeclaration();\n \n     /**\n@@ -433,7 +433,7 @@\n      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n-    @Message(id = 15866, value = \"%s is null\")\n+    @Message(id = 10866, value = \"%s is null\")\n     IllegalArgumentException nullVar(String name);\n \n     /**\n@@ -448,7 +448,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n+    @Message(id = 10867, value = \"Cannot use %s with the same value for parameters %s and %s. \" +\n             \"Use %s to redeploy the same content or %s to replace content with a new version with the same name.\")\n     String cannotUseSameValueForParameters(String opName, String param1, String param2, String redeployOpName, String replaceOpName);\n \n@@ -459,7 +459,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15868, value = \"Deployment %s is already started\")\n+    @Message(id = 10868, value = \"Deployment %s is already started\")\n     String deploymentAlreadyStarted(String name);\n \n     /**\n@@ -470,7 +470,7 @@\n      *\n      * @return the message.\n      */\n-    @Message(id = 15869, value = \"Unknown %s %s\")\n+    @Message(id = 10869, value = \"Unknown %s %s\")\n     String unknown(String name, String value);\n \n     /**\n@@ -480,7 +480,7 @@\n      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n-    @Message(id = 15870, value = \"Unknown server group %s\")\n+    @Message(id = 10870, value = \"Unknown server group %s\")\n     IllegalStateException unknownServerGroup(String serverGroup);\n \n     /**\n@@ -490,7 +490,7 @@\n      *\n      * @return an {@link IllegalStateException} for the error.\n      */\n-    @Message(id = 15871, value = \"Unknown server %s\")\n+    @Message(id = 10871, value = \"Unknown server %s\")\n     IllegalStateException unknownServer(ServerIdentity server);\n \n     /**\n@@ -500,6 +500,6 @@\n      *\n      * @return an {@link IllegalArgumentException} for the error.\n      */\n-    @Message(id = 15872, value = \"Invalid code %d\")\n+    @Message(id = 10872, value = \"Invalid code %d\")\n     IllegalArgumentException invalidCode(int code);\n }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 337,
        "bugNodeStartChar": 12839,
        "bugNodeLength": 10,
        "fixLineNum": 337,
        "fixNodeStartChar": 12839,
        "fixNodeLength": 10,
        "sourceBeforeFix": "id=15856",
        "sourceAfterFix": "id=10856"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "114211dc376cd85d1c97dde06cc7b347181314e1",
        "fixCommitParentSHA1": "06bc4f0fc48c8f98b5a6426af9de6882dbd06f16",
        "bugFilePath": "gdx-tests-android/src/com/badlogic/gdx/GDXTester.java",
        "fixPatch": "diff --git a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\nindex a554f46..dd972e9 100644\n--- a/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n+++ b/gdx-tests-android/src/com/badlogic/gdx/GDXTester.java\n@@ -78,41 +78,41 @@\n \t\t\tintent = new Intent( this, LagTest.class );\r\n \t\tif( keyword.equals( items[14] ) )\r\n \t\t\tintent = new Intent( this, Pong.class );\r\n-\t\tif( keyword.equals( items[16] ) )\r\n+\t\tif( keyword.equals( items[15] ) )\r\n \t\t\tintent = new Intent( this, AudioDeviceTest.class );\r\n-\t\tif( keyword.equals( items[17] ) )\r\n+\t\tif( keyword.equals( items[16] ) )\r\n \t\t\tintent = new Intent( this, Mpg123Test.class );\r\n-\t\tif( keyword.equals( items[18] ) )\r\n+\t\tif( keyword.equals( items[17] ) )\r\n \t\t\tintent = new Intent( this, VorbisTest.class );\r\n-\t\tif( keyword.equals( items[19] ) )\r\n+\t\tif( keyword.equals( items[18] ) )\r\n \t\t\tintent = new Intent( this, PerformanceTest.class );\r\n-\t\tif( keyword.equals( items[20] ) )\r\n+\t\tif( keyword.equals( items[19] ) )\r\n \t\t\tintent = new Intent( this, MeshShaderTest.class );\r\n-\t\tif( keyword.equals( items[21] ) )\r\n+\t\tif( keyword.equals( items[20] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchTest.class );\r\n-\t\tif( keyword.equals( items[22] ) )\r\n+\t\tif( keyword.equals( items[21] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchShaderTest.class );\r\n-\t\tif( keyword.equals( items[23] ) )\r\n+\t\tif( keyword.equals( items[22] ) )\r\n \t\t\tintent = new Intent( this, FrameBufferTest.class );\r\n-\t\tif( keyword.equals( items[24] ) )\r\n+\t\tif( keyword.equals( items[23] ) )\r\n \t\t\tintent = new Intent( this, SpriteBatchRotationTest.class );\r\n-\t\tif( keyword.equals( items[25] ) )\r\n+\t\tif( keyword.equals( items[24] ) )\r\n \t\t\tintent = new Intent( this, Box2DTest.class );\r\n-\t\tif( keyword.equals( items[26] ) )\r\n+\t\tif( keyword.equals( items[25] ) )\r\n \t\t\tintent = new Intent( this, AudioRecorderTest.class );\r\n-\t\tif( keyword.equals( items[27] ) )\r\n+\t\tif( keyword.equals( items[26] ) )\r\n \t\t\tintent = new Intent( this, TestCollection.class );\r\n-\t\tif( keyword.equals( items[28] ) )\r\n+\t\tif( keyword.equals( items[27] ) )\r\n \t\t\tintent = new Intent( this, ResourcesTest.class );\r\n-\t\tif( keyword.equals( items[29] ) )\r\n+\t\tif( keyword.equals( items[28] ) )\r\n \t\t\tintent = new Intent( this, MD5Test.class );\r\n-\t\tif( keyword.equals( items[30] ) )\r\n+\t\tif( keyword.equals( items[29] ) )\r\n \t\t\tintent = new Intent( this, MicroBenchmarks.class );\r\n-\t\tif( keyword.equals( items[31] ) )\r\n+\t\tif( keyword.equals( items[30] ) )\r\n \t\t\tintent = new Intent( this, MultitouchTest.class );\r\n-\t\tif( keyword.equals( items[32] ) )\r\n+\t\tif( keyword.equals( items[31] ) )\r\n \t\t\tintent = new Intent( this, BufferUtilsTest.class );\r\n-\t\tif( keyword.equals( items[33] ) )\r\n+\t\tif( keyword.equals( items[32] ) )\r\n \t\t\tintent = new Intent( this, TerrainTest.class );\r\n \t\t\t\r\n \t\tstartActivity( intent );\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 87,
        "bugNodeStartChar": 3890,
        "bugNodeLength": 9,
        "fixLineNum": 87,
        "fixNodeStartChar": 3804,
        "fixNodeLength": 9,
        "sourceBeforeFix": "items[19]",
        "sourceAfterFix": "items[18]"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "2be95491786ea3c3ef4d94a5d206b89cf4a76a1f",
        "fixCommitParentSHA1": "fcc9c2ad45f54bbd18cc61792d9a4a75b8d0a77e",
        "bugFilePath": "src/test/java/com/alibaba/json/bvt/util/Base64Test.java",
        "fixPatch": "diff --git a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\nindex 075f670..073235d 100644\n--- a/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n+++ b/src/test/java/com/alibaba/json/bvt/util/Base64Test.java\n@@ -12,17 +12,17 @@\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str);\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str, 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n \n         {\n             byte[] bytes2 = Base64.decodeFast(base64Str.toCharArray(), 0, base64Str.length());\n-            assertEquals(str, new String(bytes2));\n+            assertEquals(str, new String(bytes2, \"UTF8\"));\n         }\n     }\n }\n",
        "projectName": "alibaba.fastjson",
        "bugLineNum": 15,
        "bugNodeStartChar": 641,
        "bugNodeLength": 18,
        "fixLineNum": 15,
        "fixNodeStartChar": 641,
        "fixNodeLength": 26,
        "sourceBeforeFix": "new String(bytes2)",
        "sourceAfterFix": "new String(bytes2,\"UTF8\")"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "0a7300b42629c2eb700d2c4b5e39caa76f4d5305",
        "fixCommitParentSHA1": "5494af37be57a54ca5c1858ddfde6dd7d085e6e5",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\nindex b504800..e8b67ac 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java\n@@ -188,11 +188,11 @@\n \n             releaseExternalResources();\n             if (notifierFuture != null) {\n-                notifierFuture.cancel(true);\n+                notifierFuture.cancel(false);\n             }\n \n             if (asyncWriteFuture != null) {\n-                asyncWriteFuture.cancel(true);\n+                asyncWriteFuture.cancel(false);\n             }\n \n             if (bc != null) {\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 195,
        "bugNodeStartChar": 8790,
        "bugNodeLength": 29,
        "fixLineNum": 195,
        "fixNodeStartChar": 8790,
        "fixNodeLength": 30,
        "sourceBeforeFix": "asyncWriteFuture.cancel(true)",
        "sourceAfterFix": "asyncWriteFuture.cancel(false)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "175d89d7652a572df375f43c0fe18259453312cc",
        "fixCommitParentSHA1": "61c197fc1b6b4fedcb452fd5c908d995604f46c9",
        "bugFilePath": "aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java",
        "fixPatch": "diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java\nindex c709909..98f7351 100644\n--- a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java\n+++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/transfer/TransferManager.java\n@@ -1526,7 +1526,7 @@\n                             .replaceAll(\"\\\\\\\\\", \"/\");\n \n                     ObjectMetadata metadata = new ObjectMetadata();\n-                    ObjectTagging objectTagging = new ObjectTagging();\n+                    ObjectTagging objectTagging = new ObjectTagging(new ArrayList<Tag>());\n \n                     // Invoke the callback if it's present.\n                     // The callback allows the user to customize the metadata\n",
        "projectName": "aws.aws-sdk-java",
        "bugLineNum": 1529,
        "bugNodeStartChar": 72879,
        "bugNodeLength": 19,
        "fixLineNum": 1529,
        "fixNodeStartChar": 72879,
        "fixNodeLength": 39,
        "sourceBeforeFix": "new ObjectTagging()",
        "sourceAfterFix": "new ObjectTagging(new ArrayList<Tag>())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "556b9e45e830a0b78912baf9e1217e92e683306d",
        "fixCommitParentSHA1": "4e6c7b2e9e3a62f4ded011c57e302d75cf07dd6c",
        "bugFilePath": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\nindex 3611dbb..5a11dbe 100644\n--- a/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n+++ b/bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java\n@@ -64,7 +64,7 @@\n   }\n \n   private int getTimeZone() {\n-    return calendar.getTimeZone().getDSTSavings() / 3600000;\n+    return calendar.getTimeZone().getRawOffset() / 3600000;\n   }\n \n   private boolean isDaylightSavingTime() {\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 67,
        "bugNodeStartChar": 2082,
        "bugNodeLength": 38,
        "fixLineNum": 67,
        "fixNodeStartChar": 2082,
        "fixNodeLength": 37,
        "sourceBeforeFix": "calendar.getTimeZone().getDSTSavings()",
        "sourceAfterFix": "calendar.getTimeZone().getRawOffset()"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "040743693ffbcf226dca01371b4a2d47a75e7511",
        "fixCommitParentSHA1": "4e833d0b5a2b266532cd6a450948ae1615c64240",
        "bugFilePath": "enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java",
        "fixPatch": "diff --git a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\nindex 2ebbc2a..7a70d7b 100644\n--- a/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\n+++ b/enterprise/ha/src/main/java/org/neo4j/kernel/ha/MasterImpl.java\n@@ -278,14 +278,14 @@\n             XaDataSource dataSource = graphDbConfig.getTxModule().getXaDataSourceManager()\n                     .getXaDataSource( resource );\n             final long txId = dataSource.applyPreparedTransaction( txGetter.extract() );\n-            Predicate<Long> notThisTx = new Predicate<Long>()\n+            Predicate<Long> upUntilThisTx = new Predicate<Long>()\n             {\n                 public boolean accept( Long item )\n                 {\n-                    return item != txId;\n+                    return item < txId;\n                 }\n             };\n-            return packResponse( context, txId, notThisTx );\n+            return packResponse( context, txId, upUntilThisTx );\n         }\n         catch ( IOException e )\n         {\n",
        "projectName": "neo4j.neo4j",
        "bugLineNum": 285,
        "bugNodeStartChar": 9459,
        "bugNodeLength": 12,
        "fixLineNum": 285,
        "fixNodeStartChar": 9459,
        "fixNodeLength": 11,
        "sourceBeforeFix": "item != txId",
        "sourceAfterFix": "item < txId"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542",
        "fixCommitParentSHA1": "2d045731da193d28bb3e6b15fbee514ec9a0c69f",
        "bugFilePath": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java",
        "fixPatch": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\nindex 55360a4..f2c1f8b 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\n@@ -115,7 +115,7 @@\n \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n-\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n+\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}\n \n@@ -184,7 +184,7 @@\n \n \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n-\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n+\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}\n@@ -195,7 +195,7 @@\n \n \t\t// verify that the in-progress file is still there\n \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n-\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n+\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \n \t@Test\n@@ -258,7 +258,7 @@\n \n \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n-\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n+\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}\n",
        "projectName": "apache.flink",
        "bugLineNum": 261,
        "bugNodeStartChar": 10312,
        "bugNodeLength": 54,
        "fixLineNum": 261,
        "fixNodeStartChar": 10312,
        "fixNodeLength": 53,
        "sourceBeforeFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).toString()",
        "sourceAfterFix": "new Path(bucketPath,\"test-\" + i + '-'+ j).getPath()"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "5b11b62810156d985ad70527c02708d9c7ecc2a4",
        "fixCommitParentSHA1": "3658ad88855a19e517f2b04e7cba72c7fd48ead9",
        "bugFilePath": "threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolExecutorElement.java",
        "fixPatch": "diff --git a/threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolExecutorElement.java b/threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolExecutorElement.java\nindex 6d99928..7488677 100644\n--- a/threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolExecutorElement.java\n+++ b/threads/src/main/java/org/jboss/as/threads/BoundedQueueThreadPoolExecutorElement.java\n@@ -146,7 +146,7 @@\n         }\n         serviceBuilder.addDependency(threadFactoryName, ThreadFactory.class, service.getThreadFactoryInjector());\n         final String handoffExecutor = this.handoffExecutor;\n-        if (handoffExecutor == null) {\n+        if (handoffExecutor != null) {\n             final ServiceName handoffExecutorName = JBOSS_THREAD_EXECUTOR.append(handoffExecutor);\n             serviceBuilder.addDependency(handoffExecutorName, Executor.class, service.getHandoffExecutorInjector());\n         }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 149,
        "bugNodeStartChar": 6760,
        "bugNodeLength": 23,
        "fixLineNum": 149,
        "fixNodeStartChar": 6760,
        "fixNodeLength": 23,
        "sourceBeforeFix": "handoffExecutor == null",
        "sourceAfterFix": "handoffExecutor != null"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "06f8fe87421493280f6602aeb73153e677844542",
        "fixCommitParentSHA1": "2d045731da193d28bb3e6b15fbee514ec9a0c69f",
        "bugFilePath": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java",
        "fixPatch": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\nindex 55360a4..f2c1f8b 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketStateSerializerTest.java\n@@ -115,7 +115,7 @@\n \t\tAssert.assertEquals(1L, statuses.length);\n \t\tAssert.assertTrue(\n \t\t\t\tstatuses[0].getPath().getPath().startsWith(\n-\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).toString())\n+\t\t\t\t\t\t(new Path(testBucket.getParent(), \".test.inprogress\")).getPath())\n \t\t);\n \t}\n \n@@ -184,7 +184,7 @@\n \n \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n-\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).toString();\n+\t\t\t\tfinal String part = new Path(bucketPath, \"part-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}\n@@ -195,7 +195,7 @@\n \n \t\t// verify that the in-progress file is still there\n \t\tAssert.assertTrue(paths.iterator().next().startsWith(\n-\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").toString())));\n+\t\t\t\t(new Path(testBucket.getParent(), \".test-2.inprogress\").getPath())));\n \t}\n \n \t@Test\n@@ -258,7 +258,7 @@\n \n \t\tfor (int i = 0; i < noOfTasks; i++) {\n \t\t\tfor (int j = 0; j < 2 + i; j++) {\n-\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).toString();\n+\t\t\t\tfinal String part = new Path(bucketPath, \"test-\" + i + '-' + j).getPath();\n \t\t\t\tAssert.assertTrue(paths.contains(part));\n \t\t\t\tpaths.remove(part);\n \t\t\t}\n",
        "projectName": "apache.flink",
        "bugLineNum": 187,
        "bugNodeStartChar": 7377,
        "bugNodeLength": 54,
        "fixLineNum": 187,
        "fixNodeStartChar": 7377,
        "fixNodeLength": 53,
        "sourceBeforeFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).toString()",
        "sourceAfterFix": "new Path(bucketPath,\"part-\" + i + '-'+ j).getPath()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "6d04aa179485f331deff328f511f9b494bdb4d43",
        "fixCommitParentSHA1": "8de820786ce8d708a6d2fd32b36ab9128bc6fc0f",
        "bugFilePath": "hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java",
        "fixPatch": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java\nindex 5dc0565..dad9aef 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java\n@@ -1759,7 +1759,7 @@\n       // master tries to assign these offline regions. This is followed by re-assignments of the\n       // daughter regions from resumed {@link SplitTableRegionProcedure}\n       addRegionStateToPut(putA, RegionState.State.CLOSED);\n-      addRegionStateToPut(putA, RegionState.State.CLOSED);\n+      addRegionStateToPut(putB, RegionState.State.CLOSED);\n \n       addSequenceNum(putA, 1, -1, splitA.getReplicaId()); //new regions, openSeqNum = 1 is fine.\n       addSequenceNum(putB, 1, -1, splitB.getReplicaId());\n",
        "projectName": "apache.hbase",
        "bugLineNum": 1762,
        "bugNodeStartChar": 67674,
        "bugNodeLength": 51,
        "fixLineNum": 1762,
        "fixNodeStartChar": 67674,
        "fixNodeLength": 51,
        "sourceBeforeFix": "addRegionStateToPut(putA,RegionState.State.CLOSED)",
        "sourceAfterFix": "addRegionStateToPut(putB,RegionState.State.CLOSED)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "e1cef176adedae3d7d4e12f1dfef7e573274c264",
        "fixCommitParentSHA1": "d52950fe7a7a7dd5dc1262d5a6833f726f012dc8",
        "bugFilePath": "camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java",
        "fixPatch": "diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\nindex d760e05..fd50d18 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n@@ -71,7 +71,7 @@\n  * @version $Revision$\n  */\n @XmlAccessorType(XmlAccessType.PROPERTY)\n-public abstract class ProcessorDefinition<Type extends ProcessorDefinition> extends OptionalIdentifiedType<Type> implements Block {\n+public abstract class ProcessorDefinition<Type extends ProcessorDefinition> extends OptionalIdentifiedDefinition<Type> implements Block {\n     protected final transient Log log = LogFactory.getLog(getClass());\n     private ErrorHandlerBuilder errorHandlerBuilder;\n     private NodeFactory nodeFactory;\n",
        "projectName": "apache.camel",
        "bugLineNum": 74,
        "bugNodeStartChar": 3183,
        "bugNodeLength": 28,
        "fixLineNum": 74,
        "fixNodeStartChar": 3183,
        "fixNodeLength": 34,
        "sourceBeforeFix": "OptionalIdentifiedType<Type>",
        "sourceAfterFix": "OptionalIdentifiedDefinition<Type>"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "499d9d3f89368592549f1ec3701f5a7616113a4c",
        "fixCommitParentSHA1": "9b76bc6a719994b0cfdd70794b8ae2715beed4cb",
        "bugFilePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java",
        "fixPatch": "diff --git a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\nindex d6593a2..8787c5c 100644\n--- a/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\n+++ b/runtime-testsuite/test/org/antlr/v4/test/runtime/go/TestParseTrees.java\n@@ -193,7 +193,7 @@\n \t@Test\n \tpublic void testTokenAndRuleContextString() throws Exception {\n \t\tmkdir(parserpkgdir);\n-\t\tStringBuilder grammarBuilder = new StringBuilder(167);\n+\t\tStringBuilder grammarBuilder = new StringBuilder(194);\n \t\tgrammarBuilder.append(\"grammar T;\\n\");\n \t\tgrammarBuilder.append(\"s\\n\");\n \t\tgrammarBuilder.append(\"@init {\\n\");\n@@ -204,7 +204,7 @@\n \t\tgrammarBuilder.append(\"}\\n\");\n \t\tgrammarBuilder.append(\"  : r=a ;\\n\");\n \t\tgrammarBuilder.append(\"a : 'x' { \\n\");\n-\t\tgrammarBuilder.append(\"fmt.Println(p.GetRuleInvocationStack(nil))\\n\");\n+\t\tgrammarBuilder.append(\"fmt.Println(antlr.PrintArrayJavaStyle(p.GetRuleInvocationStack(nil)))\\n\");\n \t\tgrammarBuilder.append(\"} ;\");\n \t\tString grammar = grammarBuilder.toString();\n \t\tString input =\"x\";\n",
        "projectName": "antlr.antlr4",
        "bugLineNum": 196,
        "bugNodeStartChar": 7809,
        "bugNodeLength": 22,
        "fixLineNum": 196,
        "fixNodeStartChar": 7809,
        "fixNodeLength": 22,
        "sourceBeforeFix": "new StringBuilder(167)",
        "sourceAfterFix": "new StringBuilder(194)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\nindex 509dedf..dec10b8 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/QueueTemplate.java\n@@ -28,61 +28,61 @@\n     @EncodeMethod(id = 1)\n     void offer(String name, Data value, long timeoutMillis);\n \n-    @EncodeMethod(id = 1)\n+    @EncodeMethod(id = 2)\n     void put(String name, Data value);\n \n-    @EncodeMethod(id = 2)\n+    @EncodeMethod(id = 3)\n     void size(String name);\n \n-    @EncodeMethod(id = 3)\n+    @EncodeMethod(id = 4)\n     void remove(String name, Data value);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 5)\n     void poll(String name, long timeoutMillis);\n \n-    @EncodeMethod(id = 4)\n+    @EncodeMethod(id = 6)\n     void take(String name);\n \n-    @EncodeMethod(id = 5)\n+    @EncodeMethod(id = 7)\n     void peek(String name);\n \n-    @EncodeMethod(id = 6)\n+    @EncodeMethod(id = 8)\n     void iterator(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 9)\n     void drainTo(String name);\n \n-    @EncodeMethod(id = 7)\n+    @EncodeMethod(id = 10)\n     void drainToMaxSize(String name, int maxSize);\n \n-    @EncodeMethod(id = 8)\n+    @EncodeMethod(id = 11)\n     void contains(String name, Data value);\n \n-    @EncodeMethod(id = 9)\n+    @EncodeMethod(id = 12)\n     void containsAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 10)\n+    @EncodeMethod(id = 13)\n     void compareAndRemoveAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 11)\n+    @EncodeMethod(id = 14)\n     void compareAndRetainAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 12)\n+    @EncodeMethod(id = 15)\n     void clear(String name);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 16)\n     void addAll(String name, Collection<Data> dataList);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 17)\n     void addListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 18)\n     void removeListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 19)\n     void remainingCapacity(String name);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 20)\n     void isEmpty(String name);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 82,
        "bugNodeStartChar": 2323,
        "bugNodeLength": 7,
        "fixLineNum": 82,
        "fixNodeStartChar": 2323,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=16",
        "sourceAfterFix": "id=19"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "9a3c1894123322a90e5d2e002d7ae417349bfeed",
        "fixCommitParentSHA1": "03664e04288f62931716f88759d3faeef1fcca2b",
        "bugFilePath": "test/com/google/inject/internal/TypeResolverTest.java",
        "fixPatch": "diff --git a/test/com/google/inject/internal/TypeResolverTest.java b/test/com/google/inject/internal/TypeResolverTest.java\nindex 9bd994e..980bed3 100644\n--- a/test/com/google/inject/internal/TypeResolverTest.java\n+++ b/test/com/google/inject/internal/TypeResolverTest.java\n@@ -153,7 +153,7 @@\n   }\n \n   public void testRelatedTypeVariables() {\n-    TypeResolver resolver = new TypeResolver(arrayListOfString);\n+    TypeResolver resolver = new TypeResolver(hasRelatedOfString);\n     assertEquals(String.class, resolver.getParameterTypes(echo).get(0));\n     assertEquals(String.class, resolver.getReturnType(echo));\n   }\n",
        "projectName": "google.guice",
        "bugLineNum": 156,
        "bugNodeStartChar": 6157,
        "bugNodeLength": 35,
        "fixLineNum": 156,
        "fixNodeStartChar": 6157,
        "fixNodeLength": 36,
        "sourceBeforeFix": "new TypeResolver(arrayListOfString)",
        "sourceAfterFix": "new TypeResolver(hasRelatedOfString)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "f2188d334cf2e91dbd62f84aeba025186738f4ea",
        "fixCommitParentSHA1": "f364a44fa21c90120749de4335ce1cee4215536d",
        "bugFilePath": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java",
        "fixPatch": "diff --git a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java\nindex 3a2fe03..63e2cd5 100644\n--- a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java\n+++ b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/annotation/Reference.java\n@@ -164,7 +164,7 @@\n      *\r\n      * @see Constants#DEFAULT_RETRIES\r\n      */\r\n-    int retries() default 0;\r\n+    int retries() default 2;\r\n \r\n     /**\r\n      * Load balance strategy, legal values include: random, roundrobin, leastactive\r\n",
        "projectName": "alibaba.dubbo",
        "bugLineNum": 162,
        "bugNodeStartChar": 4705,
        "bugNodeLength": 128,
        "fixLineNum": 162,
        "fixNodeStartChar": 4544,
        "fixNodeLength": 123,
        "sourceBeforeFix": "/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 0; ",
        "sourceAfterFix": "/**   * Service invocation retry times  * @see Constants#DEFAULT_RETRIES  */ int retries() default 2; "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "da91e33c80c3d417388c4bdc1e0139b763f548a4",
        "fixCommitParentSHA1": "59aed5966228d843323695023e5a46c668a943a9",
        "bugFilePath": "graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java",
        "fixPatch": "diff --git a/graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java b/graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java\nindex b965249..e97e15f 100644\n--- a/graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java\n+++ b/graylog2-plugin-interfaces/src/main/java/org/graylog2/plugin/inputs/MessageInput.java\n@@ -102,7 +102,7 @@\n \n     public MessageInput(MetricRegistry metricRegistry,\n                         Transport transport,\n-                        LocalMetricRegistry localRegistry, Codec codec, Config config, Descriptor descriptor, ServerStatus serverStatus) {\n+                        MetricRegistry localRegistry, Codec codec, Config config, Descriptor descriptor, ServerStatus serverStatus) {\n         if (metricRegistry == localRegistry) {\n             LOG.error(\"########### Do not add the global metric registry twice, the localRegistry parameter is \" +\n                               \"the same as the global metricRegistry. \" +\n",
        "projectName": "Graylog2.graylog2-server",
        "bugLineNum": 105,
        "bugNodeStartChar": 4799,
        "bugNodeLength": 33,
        "fixLineNum": 105,
        "fixNodeStartChar": 4799,
        "fixNodeLength": 28,
        "sourceBeforeFix": "LocalMetricRegistry localRegistry",
        "sourceAfterFix": "MetricRegistry localRegistry"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "8bb08f39e3d806264edbd2854bf678f961c7157a",
        "fixCommitParentSHA1": "f675ca667128c612762adbfb568a600236cb7774",
        "bugFilePath": "indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java",
        "fixPatch": "diff --git a/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java b/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\nindex dcd643d..349620e 100644\n--- a/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\n+++ b/indexing-service/src/test/java/io/druid/indexing/overlord/RemoteTaskRunnerTest.java\n@@ -72,7 +72,7 @@\n   private static final String announcementsPath = String.format(\"%s/indexer/announcements/worker\", basePath);\n   private static final String tasksPath = String.format(\"%s/indexer/tasks/worker\", basePath);\n   private static final String statusPath = String.format(\"%s/indexer/status/worker\", basePath);\n-  private static final int TIMEOUT_SECONDS = 5;\n+  private static final int TIMEOUT_SECONDS = 20;\n \n   private ObjectMapper jsonMapper;\n \n@@ -453,7 +453,7 @@\n   private void doSetup() throws Exception\n   {\n     makeWorker();\n-    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT1S\")));\n+    makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period(\"PT5S\")));\n   }\n \n   private void makeRemoteTaskRunner(RemoteTaskRunnerConfig config) throws Exception\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 75,
        "bugNodeStartChar": 3289,
        "bugNodeLength": 19,
        "fixLineNum": 75,
        "fixNodeStartChar": 3289,
        "fixNodeLength": 20,
        "sourceBeforeFix": "TIMEOUT_SECONDS=5",
        "sourceAfterFix": "TIMEOUT_SECONDS=20"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "788d9452d8541b3ec7a11cae5d9fa605c2626fc1",
        "fixCommitParentSHA1": "8624c2904f2840b901e805f1e0b33b6977e581ca",
        "bugFilePath": "flink-core/src/main/java/org/apache/flink/api/common/Plan.java",
        "fixPatch": "diff --git a/flink-core/src/main/java/org/apache/flink/api/common/Plan.java b/flink-core/src/main/java/org/apache/flink/api/common/Plan.java\nindex 0235af0..db10ce4 100644\n--- a/flink-core/src/main/java/org/apache/flink/api/common/Plan.java\n+++ b/flink-core/src/main/java/org/apache/flink/api/common/Plan.java\n@@ -201,7 +201,7 @@\n \t * @param sink The data sink to add.\n \t */\n \tpublic void addDataSink(GenericDataSinkBase<?> sink) {\n-\t\tcheckNotNull(jobName, \"The data sink must not be null.\");\n+\t\tcheckNotNull(sink, \"The data sink must not be null.\");\n \t\t\n \t\tif (!this.sinks.contains(sink)) {\n \t\t\tthis.sinks.add(sink);\n",
        "projectName": "apache.flink",
        "bugLineNum": 204,
        "bugNodeStartChar": 7861,
        "bugNodeLength": 56,
        "fixLineNum": 204,
        "fixNodeStartChar": 7861,
        "fixNodeLength": 53,
        "sourceBeforeFix": "checkNotNull(jobName,\"The data sink must not be null.\")",
        "sourceAfterFix": "checkNotNull(sink,\"The data sink must not be null.\")"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "872c35e52fc3034da081239fca062e5889c14c8a",
        "fixCommitParentSHA1": "1c123e40e564b097fde22da648679963c40bdfe3",
        "bugFilePath": "flink-connectors/flink-connector-kafka-0.11/src/main/java/org/apache/flink/streaming/connectors/kafka/FlinkKafkaProducer011.java",
        "fixPatch": "diff --git a/flink-connectors/flink-connector-kafka-0.11/src/main/java/org/apache/flink/streaming/connectors/kafka/FlinkKafkaProducer011.java b/flink-connectors/flink-connector-kafka-0.11/src/main/java/org/apache/flink/streaming/connectors/kafka/FlinkKafkaProducer011.java\nindex e83966c..6242a20 100644\n--- a/flink-connectors/flink-connector-kafka-0.11/src/main/java/org/apache/flink/streaming/connectors/kafka/FlinkKafkaProducer011.java\n+++ b/flink-connectors/flink-connector-kafka-0.11/src/main/java/org/apache/flink/streaming/connectors/kafka/FlinkKafkaProducer011.java\n@@ -136,7 +136,7 @@\n \t\tNONE\n \t}\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(FlinkKafkaProducerBase.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(FlinkKafkaProducer011.class);\n \n \tprivate static final long serialVersionUID = 1L;\n \n",
        "projectName": "apache.flink",
        "bugLineNum": 139,
        "bugNodeStartChar": 6372,
        "bugNodeLength": 28,
        "fixLineNum": 139,
        "fixNodeStartChar": 6372,
        "fixNodeLength": 27,
        "sourceBeforeFix": "FlinkKafkaProducerBase.class",
        "sourceAfterFix": "FlinkKafkaProducer011.class"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "7369734ba2477dc5f208c9bcdbf438d42e92ac25",
        "fixCommitParentSHA1": "01196f282535b641f0c3c19933c214286e0cac2f",
        "bugFilePath": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java\nindex 7dc5690..eb02c1b 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Container.java\n@@ -14,7 +14,7 @@\n  * {@link Table} with a single cell but is more lightweight.\n  * @author Nathan Sweet */\n public class Container<T extends Actor> extends WidgetGroup {\n-\tprivate Actor actor;\n+\tprivate T actor;\n \tprivate Value minWidth = Value.minWidth, minHeight = Value.minHeight;\n \tprivate Value prefWidth = Value.prefWidth, prefHeight = Value.prefHeight;\n \tprivate Value maxWidth = Value.zero, maxHeight = Value.zero;\n@@ -31,7 +31,7 @@\n \t\tsetTransform(false);\n \t}\n \n-\tpublic Container (Actor actor) {\n+\tpublic Container (T actor) {\n \t\tthis();\n \t\tsetActor(actor);\n \t}\n@@ -151,7 +151,7 @@\n \t}\n \n \t/** @param actor May be null. */\n-\tpublic void setActor (Actor actor) {\n+\tpublic void setActor (T actor) {\n \t\tif (actor == this) throw new IllegalArgumentException(\"actor cannot be the Container.\");\n \t\tif (this.actor != null) super.removeActor(this.actor);\n \t\tthis.actor = actor;\n@@ -160,7 +160,7 @@\n \n \t/** @return May be null. */\n \tpublic T getActor () {\n-\t\treturn (T)actor;\n+\t\treturn actor;\n \t}\n \n \t/** @deprecated Container may have only a single child.\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 34,
        "bugNodeStartChar": 1333,
        "bugNodeLength": 11,
        "fixLineNum": 34,
        "fixNodeStartChar": 1333,
        "fixNodeLength": 7,
        "sourceBeforeFix": "Actor actor",
        "sourceAfterFix": "T actor"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "2b6d45508192c28f6b957a1ec18eb4fc075f9a97",
        "fixCommitParentSHA1": "8a666af5ccbd66908324012686c72f22a70cfd7f",
        "bugFilePath": "servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java",
        "fixPatch": "diff --git a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\nindex 4a24ff9..8f92a4a 100644\n--- a/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n+++ b/servers/src/test/java/tachyon/worker/block/BlockWorkerUtilsTest.java\n@@ -73,19 +73,19 @@\n \n     InetSocketAddress masterAddress = BlockWorkerUtils.getMasterAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster1\", 10000));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster1\", 10000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterHostNameTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, 20000));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 20000), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullMasterPortTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(\"RemoteMaster3\", defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(\"RemoteMaster3\", defaultPort), masterAddress);\n \n     masterAddress = BlockWorkerUtils.getMasterAddress(mNullTachyonConf);\n     Assert.assertNotNull(masterAddress);\n-    Assert.assertEquals(masterAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), masterAddress);\n   }\n \n   @Test\n@@ -95,10 +95,10 @@\n \n     InetSocketAddress workerAddress = BlockWorkerUtils.getWorkerAddress(mCustomPropsTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, 10001));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, 10001), workerAddress);\n \n     workerAddress = BlockWorkerUtils.getWorkerAddress(mNullTachyonConf);\n     Assert.assertNotNull(workerAddress);\n-    Assert.assertEquals(workerAddress, new InetSocketAddress(defaultHostname, defaultPort));\n+    Assert.assertEquals(new InetSocketAddress(defaultHostname, defaultPort), workerAddress);\n   }\n }\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 88,
        "bugNodeStartChar": 3672,
        "bugNodeLength": 87,
        "fixLineNum": 88,
        "fixNodeStartChar": 3672,
        "fixNodeLength": 87,
        "sourceBeforeFix": "Assert.assertEquals(masterAddress,new InetSocketAddress(defaultHostname,defaultPort))",
        "sourceAfterFix": "Assert.assertEquals(new InetSocketAddress(defaultHostname,defaultPort),masterAddress)"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "57ba1bdeaa0172ae4927e92a5b074be623141e04",
        "fixCommitParentSHA1": "01b3cc097cdb1a665c815cd5d93ce459eab57fcd",
        "bugFilePath": "camel-core/src/main/java/org/apache/camel/util/URISupport.java",
        "fixPatch": "diff --git a/camel-core/src/main/java/org/apache/camel/util/URISupport.java b/camel-core/src/main/java/org/apache/camel/util/URISupport.java\nindex 4b06a13..0f37a2c 100644\n--- a/camel-core/src/main/java/org/apache/camel/util/URISupport.java\n+++ b/camel-core/src/main/java/org/apache/camel/util/URISupport.java\n@@ -155,7 +155,7 @@\n                 char ch = uri.charAt(i);\n                 // look ahead of the next char\n                 char next;\n-                if (i < uri.length() - 2) {\n+                if (i <= uri.length() - 2) {\n                     next = uri.charAt(i + 1);\n                 } else {\n                     next = '\\u0000';\n",
        "projectName": "apache.camel",
        "bugLineNum": 158,
        "bugNodeStartChar": 6471,
        "bugNodeLength": 20,
        "fixLineNum": 158,
        "fixNodeStartChar": 6471,
        "fixNodeLength": 21,
        "sourceBeforeFix": "i < uri.length() - 2",
        "sourceAfterFix": "i <= uri.length() - 2"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "62b871774af5d0f43ec45bb1248738a428cecb7f",
        "fixCommitParentSHA1": "dd855a376bc025aa61f6816584f79eb9854fe5d7",
        "bugFilePath": "builder/src/main/java/com/iluwatar/Hero.java",
        "fixPatch": "diff --git a/builder/src/main/java/com/iluwatar/Hero.java b/builder/src/main/java/com/iluwatar/Hero.java\nindex c87cfdf..47e5d75 100644\n--- a/builder/src/main/java/com/iluwatar/Hero.java\n+++ b/builder/src/main/java/com/iluwatar/Hero.java\n@@ -94,7 +94,7 @@\n \r\n \t\tpublic HeroBuilder(Profession profession, String name) {\r\n \t\t\tif (profession == null || name == null) {\r\n-\t\t\t\tthrow new NullPointerException(\r\n+\t\t\t\tthrow new IllegalArgumentException(\n \t\t\t\t\t\t\"profession and name can not be null\");\r\n \t\t\t}\r\n \t\t\tthis.profession = profession;\r\n",
        "projectName": "iluwatar.java-design-patterns",
        "bugLineNum": 97,
        "bugNodeStartChar": 1964,
        "bugNodeLength": 71,
        "fixLineNum": 97,
        "fixNodeStartChar": 1868,
        "fixNodeLength": 74,
        "sourceBeforeFix": "new NullPointerException(\"profession and name can not be null\")",
        "sourceAfterFix": "new IllegalArgumentException(\"profession and name can not be null\")"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "c0d55ea6c6d29478b55deec439643e7b984c0739",
        "fixCommitParentSHA1": "0f7a46b3d5ad05ff93a7e56fd522c7d7de235534",
        "bugFilePath": "src/edu/stanford/nlp/parser/nndep/DependencyParser.java",
        "fixPatch": "diff --git a/src/edu/stanford/nlp/parser/nndep/DependencyParser.java b/src/edu/stanford/nlp/parser/nndep/DependencyParser.java\nindex 2ea6106..f306055 100644\n--- a/src/edu/stanford/nlp/parser/nndep/DependencyParser.java\n+++ b/src/edu/stanford/nlp/parser/nndep/DependencyParser.java\n@@ -995,17 +995,17 @@\n                 ? new BufferedReader(new InputStreamReader(System.in, encoding))\n                 : IOUtils.readerFromString(inputFilename, encoding);\n       } catch (IOException e) {\n-        throw new RuntimeIOException(e);\n+        throw new RuntimeIOException(\"No input file provided (use -parseFile)\", e);\n       }\n \n       String outputFilename = props.getProperty(\"outFile\");\n       PrintWriter output;\n       try {\n-        output = outputFilename.equals(\"-\")\n+        output = outputFilename == null || outputFilename.equals(\"-\")\n             ? IOUtils.encodedOutputStreamPrintWriter(System.out, encoding, true)\n             : IOUtils.getPrintWriter(outputFilename, encoding);\n       } catch (IOException e) {\n-        throw new RuntimeIOException(e);\n+        throw new RuntimeIOException(\"Error opening output file\", e);\n       }\n \n       parser.parseTextFile(input, output);\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 998,
        "bugNodeStartChar": 35078,
        "bugNodeLength": 25,
        "fixLineNum": 998,
        "fixNodeStartChar": 35078,
        "fixNodeLength": 68,
        "sourceBeforeFix": "new RuntimeIOException(e)",
        "sourceAfterFix": "new RuntimeIOException(\"No input file provided (use -parseFile)\",e)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "44222d8bd493110bbf925c97d68abf40e0a1b31f",
        "fixCommitParentSHA1": "65f8e59dd5e58a19e61011868b0f47efd905146f",
        "bugFilePath": "guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java",
        "fixPatch": "diff --git a/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java b/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\nindex 171b99c..59c4dbc 100644\n--- a/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\n+++ b/guice/src/main/java/cucumber/runtime/java/guice/impl/InjectorSourceFactory.java\n@@ -38,7 +38,7 @@\n \n     private InjectorSource instantiateUserSpecifiedInjectorSource(String injectorSourceClassName) {\n         try {\n-            return (InjectorSource) Class.forName(injectorSourceClassName).newInstance();\n+            return (InjectorSource) Class.forName(injectorSourceClassName, true, Thread.currentThread().getContextClassLoader()).newInstance();\n         } catch (Exception e) {\n             String message = format(\"Instantiation of ''{0}'' failed. Check the caused by exception and ensure your\" +\n                     \"InjectorSource implementation is accessible and has a public zero args constructor.\",\n",
        "projectName": "cucumber.cucumber-jvm",
        "bugLineNum": 41,
        "bugNodeStartChar": 1375,
        "bugNodeLength": 38,
        "fixLineNum": 41,
        "fixNodeStartChar": 1375,
        "fixNodeLength": 92,
        "sourceBeforeFix": "Class.forName(injectorSourceClassName)",
        "sourceAfterFix": "Class.forName(injectorSourceClassName,true,Thread.currentThread().getContextClassLoader())"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "4a1a7785fe4b809277faafb9b7dd65a7ecec62fa",
        "fixCommitParentSHA1": "084b2ae787d729cd0343fd884ca2d65baa45cd1e",
        "bugFilePath": "src/main/java/com/zaxxer/hikari/pool/HikariPool.java",
        "fixPatch": "diff --git a/src/main/java/com/zaxxer/hikari/pool/HikariPool.java b/src/main/java/com/zaxxer/hikari/pool/HikariPool.java\nindex 02598fe..7fb48dc 100644\n--- a/src/main/java/com/zaxxer/hikari/pool/HikariPool.java\n+++ b/src/main/java/com/zaxxer/hikari/pool/HikariPool.java\n@@ -425,7 +425,7 @@\n    protected final boolean addConnection()\n    {\n       // Speculative increment of totalConnections with expectation of success\n-      if (totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()) {\n+      if (totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()) {\n          totalConnections.decrementAndGet(); // Pool is maxed out, so undo speculative increment of totalConnections\n          lastConnectionFailure.set(new SQLException(String.format(\"HikariCP pool %s is at maximum capacity\", configuration.getPoolName())));\n          return true;\n",
        "projectName": "brettwooldridge.HikariCP",
        "bugLineNum": 428,
        "bugNodeStartChar": 16164,
        "bugNodeLength": 72,
        "fixLineNum": 428,
        "fixNodeStartChar": 16164,
        "fixNodeLength": 71,
        "sourceBeforeFix": "totalConnections.incrementAndGet() <= configuration.getMaximumPoolSize()",
        "sourceAfterFix": "totalConnections.incrementAndGet() > configuration.getMaximumPoolSize()"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "556976f81c236be7798e5d065a0dae09ca0cc1d3",
        "fixCommitParentSHA1": "6fcf6088fd78018dadc61536f149027247055598",
        "bugFilePath": "guava-testlib/src/com/google/common/testing/NullPointerTester.java",
        "fixPatch": "diff --git a/guava-testlib/src/com/google/common/testing/NullPointerTester.java b/guava-testlib/src/com/google/common/testing/NullPointerTester.java\nindex 3f7028a..1142056 100644\n--- a/guava-testlib/src/com/google/common/testing/NullPointerTester.java\n+++ b/guava-testlib/src/com/google/common/testing/NullPointerTester.java\n@@ -292,7 +292,7 @@\n     for (int i = 0; i < types.length; i++) {\n       if (i != indexOfParamToSetToNull) {\n         params[i] = defaults.get(types[i]);\n-        if (!parameterIsPrimitiveOrNullable(func, indexOfParamToSetToNull)) {\n+        if (!parameterIsPrimitiveOrNullable(func, i)) {\n           Assert.assertTrue(\"No default value found for \" + types[i].getName(),\n               params[i] != null);\n         }\n",
        "projectName": "google.guava",
        "bugLineNum": 295,
        "bugNodeStartChar": 10514,
        "bugNodeLength": 61,
        "fixLineNum": 295,
        "fixNodeStartChar": 10514,
        "fixNodeLength": 39,
        "sourceBeforeFix": "parameterIsPrimitiveOrNullable(func,indexOfParamToSetToNull)",
        "sourceAfterFix": "parameterIsPrimitiveOrNullable(func,i)"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "a23c05e8f4518312ba67269d567c6b6dc2a6cfb0",
        "fixCommitParentSHA1": "1a89ef0ceb772c6db173322d805d2f252371b346",
        "bugFilePath": "testsuite/shared/src/main/java/org/wildfly/test/security/common/elytron/FileSystemRealm.java",
        "fixPatch": "diff --git a/testsuite/shared/src/main/java/org/wildfly/test/security/common/elytron/FileSystemRealm.java b/testsuite/shared/src/main/java/org/wildfly/test/security/common/elytron/FileSystemRealm.java\nindex 1013629..a574e6e 100644\n--- a/testsuite/shared/src/main/java/org/wildfly/test/security/common/elytron/FileSystemRealm.java\n+++ b/testsuite/shared/src/main/java/org/wildfly/test/security/common/elytron/FileSystemRealm.java\n@@ -62,7 +62,7 @@\n                             name, user.getName(), user.getPassword()));\n             cli.sendLine(\n                     String.format(\"/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])\",\n-                            name, user.getName(), user.getPassword(), String.join(\",\", user.getRoles())));\n+                            name, user.getName(), String.join(\",\", user.getRoles())));\n         }\n     }\n \n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 64,
        "bugNodeStartChar": 2452,
        "bugNodeLength": 211,
        "fixLineNum": 64,
        "fixNodeStartChar": 2452,
        "fixNodeLength": 191,
        "sourceBeforeFix": "String.format(\"/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])\",name,user.getName(),user.getPassword(),String.join(\",\",user.getRoles()))",
        "sourceAfterFix": "String.format(\"/subsystem=elytron/filesystem-realm=%s/identity=%s:add-attribute(name=groups, value=[%s])\",name,user.getName(),String.join(\",\",user.getRoles()))"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "e68b9038b64e1b3ad8068541216baf17da23ddde",
        "fixCommitParentSHA1": "aa2fabcfbdb12cfcabdf651f647ec5d18af6696a",
        "bugFilePath": "pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/costs/CostEstimator.java",
        "fixPatch": "diff --git a/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/costs/CostEstimator.java b/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/costs/CostEstimator.java\nindex 7cd9e27..20cbdaf 100644\n--- a/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/costs/CostEstimator.java\n+++ b/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/costs/CostEstimator.java\n@@ -132,7 +132,7 @@\n \t\t}\n \n \t\t// if we have a second input, add its costs\n-\t\tif (secConn != null) {\n+\t\tif (secConn != null && secConn.size() > 0) {\n \t\t\tCosts secCost = new Costs();\n \n \t\t\t// we assume that all connections in the list have the same ship strategy;\n",
        "projectName": "apache.flink",
        "bugLineNum": 135,
        "bugNodeStartChar": 5417,
        "bugNodeLength": 15,
        "fixLineNum": 135,
        "fixNodeStartChar": 5417,
        "fixNodeLength": 37,
        "sourceBeforeFix": "secConn != null",
        "sourceAfterFix": "secConn != null && secConn.size() > 0"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "ce804fa7fd6ddfde68e6b6e299f7aa0f175601e6",
        "fixCommitParentSHA1": "7a0c9e8048399b78285c4223913e99eda0d3e91d",
        "bugFilePath": "components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaConsumerIdleMessageTest.java",
        "fixPatch": "diff --git a/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaConsumerIdleMessageTest.java b/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaConsumerIdleMessageTest.java\nindex c50c58d..5d745ed 100644\n--- a/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaConsumerIdleMessageTest.java\n+++ b/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaConsumerIdleMessageTest.java\n@@ -29,7 +29,7 @@\n     \n     @Test\n     public void testConsumeIdleMessages() throws Exception {\n-        Thread.sleep(110);\n+        Thread.sleep(130);\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n         mock.expectedMinimumMessageCount(2);\n         assertMockEndpointsSatisfied();\n",
        "projectName": "apache.camel",
        "bugLineNum": 32,
        "bugNodeStartChar": 1344,
        "bugNodeLength": 17,
        "fixLineNum": 32,
        "fixNodeStartChar": 1344,
        "fixNodeLength": 17,
        "sourceBeforeFix": "Thread.sleep(110)",
        "sourceAfterFix": "Thread.sleep(130)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "8a5a0cb731f1b8a772612005f4baeeb1a7d3fb07",
        "fixCommitParentSHA1": "905461d6a78f1ac086639deb19bc3ddd842df22d",
        "bugFilePath": "components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java",
        "fixPatch": "diff --git a/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java b/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java\nindex d78e9c7..13ecade 100644\n--- a/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java\n+++ b/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java\n@@ -163,7 +163,7 @@\n             boolean stmtExecutionResult = ps.execute();\n             if (stmtExecutionResult) {\n                 rs = ps.getResultSet();\n-                shouldCloseResources = setResultSet(exchange, rs);\n+                shouldCloseResources = setResultSet(exchange, conn, rs);\n             } else {\n                 int updateCount = ps.getUpdateCount();\n                 // preserve headers\n@@ -173,7 +173,7 @@\n             }\n \n             if (shouldRetrieveGeneratedKeys) {\n-                setGeneratedKeys(exchange, ps.getGeneratedKeys());\n+                setGeneratedKeys(exchange, conn, ps.getGeneratedKeys());\n             }\n         } finally {\n             if (shouldCloseResources) {\n@@ -219,7 +219,7 @@\n \n             if (stmtExecutionResult) {\n                 rs = stmt.getResultSet();\n-                shouldCloseResources = setResultSet(exchange, rs);\n+                shouldCloseResources = setResultSet(exchange, conn, rs);\n             } else {\n                 int updateCount = stmt.getUpdateCount();\n                 // preserve headers\n@@ -229,7 +229,7 @@\n             }\n \n             if (shouldRetrieveGeneratedKeys) {\n-                setGeneratedKeys(exchange, stmt.getGeneratedKeys());\n+                setGeneratedKeys(exchange, conn, stmt.getGeneratedKeys());\n             }\n         } finally {\n             if (shouldCloseResources) {\n@@ -286,11 +286,12 @@\n      * - {@link JdbcConstants#JDBC_GENERATED_KEYS_DATA} : the generated keys data\n      *\n      * @param exchange The exchange where to store the generated keys\n+     * @param conn          Current JDBC connection\n      * @param generatedKeys The result set containing the generated keys\n      */\n-    protected void setGeneratedKeys(Exchange exchange, ResultSet generatedKeys) throws SQLException {\n+    protected void setGeneratedKeys(Exchange exchange, Connection conn, ResultSet generatedKeys) throws SQLException {\n         if (generatedKeys != null) {\n-            ResultSetIterator iterator = new ResultSetIterator(generatedKeys, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n+            ResultSetIterator iterator = new ResultSetIterator(conn, generatedKeys, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n             List<Map<String, Object>> data = extractRows(iterator);\n \n             exchange.getOut().setHeader(JdbcConstants.JDBC_GENERATED_KEYS_ROW_COUNT, data.size());\n@@ -303,10 +304,10 @@\n      *\n      * @return whether to close resources\n      */\n-    protected boolean setResultSet(Exchange exchange, ResultSet rs) throws SQLException {\n+    protected boolean setResultSet(Exchange exchange, Connection conn, ResultSet rs) throws SQLException {\n         boolean answer = true;\n \n-        ResultSetIterator iterator = new ResultSetIterator(rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n+        ResultSetIterator iterator = new ResultSetIterator(conn, rs, getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics());\n \n         // preserve headers\n         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());\n",
        "projectName": "apache.camel",
        "bugLineNum": 293,
        "bugNodeStartChar": 11531,
        "bugNodeLength": 91,
        "fixLineNum": 293,
        "fixNodeStartChar": 11531,
        "fixNodeLength": 97,
        "sourceBeforeFix": "new ResultSetIterator(generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())",
        "sourceAfterFix": "new ResultSetIterator(conn,generatedKeys,getEndpoint().isUseJDBC4ColumnNameAndLabelSemantics())"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "1e3c0da4bdd228f518ad7297096fdc26c9d53ead",
        "fixCommitParentSHA1": "6c7a5c5077d624e85f6db4d870735888f479cc41",
        "bugFilePath": "spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java",
        "fixPatch": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\nindex 6247e48..ed273d5 100644\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/DefaultPropertyNamePatternsMatcherTests.java\n@@ -69,9 +69,9 @@\n \n \t@Test\n \tpublic void withSquareBrackets() throws Exception {\n-\t\tchar[] delimeters = \"._[\".toCharArray();\n+\t\tchar[] delimiters = \"._[\".toCharArray();\n \t\tPropertyNamePatternsMatcher matcher = new DefaultPropertyNamePatternsMatcher(\n-\t\t\t\tdelimeters, \"aaa\", \"bbbb\", \"ccccc\");\n+\t\t\t\tdelimiters, \"aaa\", \"bbbb\", \"ccccc\");\n \t\tassertTrue(matcher.matches(\"bbbb\"));\n \t\tassertTrue(matcher.matches(\"bbbb[4]\"));\n \t\tassertFalse(matcher.matches(\"bbb[4]\"));\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 73,
        "bugNodeStartChar": 2122,
        "bugNodeLength": 79,
        "fixLineNum": 73,
        "fixNodeStartChar": 2122,
        "fixNodeLength": 79,
        "sourceBeforeFix": "new DefaultPropertyNamePatternsMatcher(delimeters,\"aaa\",\"bbbb\",\"ccccc\")",
        "sourceAfterFix": "new DefaultPropertyNamePatternsMatcher(delimiters,\"aaa\",\"bbbb\",\"ccccc\")"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "3d732616366b93a75351f4f43ecaa80d2d544abe",
        "fixCommitParentSHA1": "6b264008a9bcdf5ffc9ebf0f6a4b71be07766208",
        "bugFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
        "fixPatch": "diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java\nindex be1c154..dacaae9 100644\n--- a/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java\n+++ b/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java\n@@ -431,7 +431,7 @@\n         if (!root.exists()) {\n           // storage directory does not exist\n           if (startOpt != StartupOption.FORMAT) {\n-            LOG.info(\"Storage directory \" + rootPath + \" does not exist\");\n+            LOG.warn(\"Storage directory \" + rootPath + \" does not exist\");\n             return StorageState.NON_EXISTENT;\n           }\n           LOG.info(rootPath + \" does not exist. Creating ...\");\n@@ -440,15 +440,15 @@\n         }\n         // or is inaccessible\n         if (!root.isDirectory()) {\n-          LOG.info(rootPath + \"is not a directory\");\n+          LOG.warn(rootPath + \"is not a directory\");\n           return StorageState.NON_EXISTENT;\n         }\n         if (!root.canWrite()) {\n-          LOG.info(\"Cannot access storage directory \" + rootPath);\n+          LOG.warn(\"Cannot access storage directory \" + rootPath);\n           return StorageState.NON_EXISTENT;\n         }\n       } catch(SecurityException ex) {\n-        LOG.info(\"Cannot access storage directory \" + rootPath, ex);\n+        LOG.warn(\"Cannot access storage directory \" + rootPath, ex);\n         return StorageState.NON_EXISTENT;\n       }\n \n",
        "projectName": "apache.hadoop",
        "bugLineNum": 434,
        "bugNodeStartChar": 14714,
        "bugNodeLength": 61,
        "fixLineNum": 434,
        "fixNodeStartChar": 14714,
        "fixNodeLength": 61,
        "sourceBeforeFix": "LOG.info(\"Storage directory \" + rootPath + \" does not exist\")",
        "sourceAfterFix": "LOG.warn(\"Storage directory \" + rootPath + \" does not exist\")"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "62daee8bf2d60c90827d2adc864662c9db6c4713",
        "fixCommitParentSHA1": "17192c873c62e527859f80085a07e89d5b098dd7",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java b/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\nindex 6a788d9..d672b3e 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java\n@@ -70,7 +70,7 @@\n             if (m.path().contains(\"{\")) {\n                 framework.interceptors().add(new MeteorServiceInterceptor());\n             }\n-            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), true), l);\n+            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), m.path(), true), l);\n             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());\n         } catch (Throwable e) {\n             logger.warn(\"\", e);\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 73,
        "bugNodeStartChar": 2823,
        "bugNodeLength": 63,
        "fixLineNum": 73,
        "fixNodeStartChar": 2823,
        "fixNodeLength": 73,
        "sourceBeforeFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),true)",
        "sourceAfterFix": "framework.getBroadcasterFactory().lookup(m.broadcaster(),m.path(),true)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "5f973272def613827e164c06e948ca8e7ae2bc34",
        "fixCommitParentSHA1": "4b2b644646506124ae14cdea21e6a5b01bfe4726",
        "bugFilePath": "presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordSetProvider.java",
        "fixPatch": "diff --git a/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordSetProvider.java b/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordSetProvider.java\nindex 9627da1..39f449e 100644\n--- a/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordSetProvider.java\n+++ b/presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordSetProvider.java\n@@ -34,7 +34,7 @@\n public class CassandraRecordSetProvider\n         implements ConnectorRecordSetProvider\n {\n-    private static final Logger log = Logger.get(ConnectorRecordSetProvider.class);\n+    private static final Logger log = Logger.get(CassandraRecordSetProvider.class);\n \n     private final String connectorId;\n     private final CassandraSession cassandraSession;\n",
        "projectName": "facebook.presto",
        "bugLineNum": 37,
        "bugNodeStartChar": 1432,
        "bugNodeLength": 32,
        "fixLineNum": 37,
        "fixNodeStartChar": 1432,
        "fixNodeLength": 32,
        "sourceBeforeFix": "ConnectorRecordSetProvider.class",
        "sourceAfterFix": "CassandraRecordSetProvider.class"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c75c9f00ac9e34031b88f097a9f436ec261e3b82",
        "fixCommitParentSHA1": "230cd73883c40bf535cfca2d745f1f98564753db",
        "bugFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java",
        "fixPatch": "diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\nindex 8cc2ab4..f0c69f2 100644\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java\n@@ -63,7 +63,7 @@\n     private final JTextArea textArea;\n     private File lastDirectory;\n     private File currentFile;\n-    private final Action reloadAction;\n+    private final ReloadAction reloadAction;\n     private final List<Integer>   linesToPosition  = new ArrayList<>();\n \n     /**\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 66,
        "bugNodeStartChar": 2448,
        "bugNodeLength": 34,
        "fixLineNum": 66,
        "fixNodeStartChar": 2448,
        "fixNodeLength": 40,
        "sourceBeforeFix": "private final Action reloadAction; ",
        "sourceAfterFix": "private final ReloadAction reloadAction; "
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "be1426a22096f6e95d36f389a5ea9b8a38482ebe",
        "fixCommitParentSHA1": "d292fdafddafb749f5b5f077f5cfb00d14ae536a",
        "bugFilePath": "common/src/main/java/io/netty/util/NetUtil.java",
        "fixPatch": "diff --git a/common/src/main/java/io/netty/util/NetUtil.java b/common/src/main/java/io/netty/util/NetUtil.java\nindex 9962c92..dfd6b8b 100644\n--- a/common/src/main/java/io/netty/util/NetUtil.java\n+++ b/common/src/main/java/io/netty/util/NetUtil.java\n@@ -120,7 +120,7 @@\n                 }\n             } catch (SocketException e) {\n                 //Nope. Can't do anything else, sorry!\n-                logger.error(\"Failed to enumerate network interfaces\", e);\n+                logger.warn(\"Failed to enumerate network interfaces\", e);\n             }\n         }\n \n",
        "projectName": "netty.netty",
        "bugLineNum": 123,
        "bugNodeStartChar": 4726,
        "bugNodeLength": 57,
        "fixLineNum": 123,
        "fixNodeStartChar": 4726,
        "fixNodeLength": 56,
        "sourceBeforeFix": "logger.error(\"Failed to enumerate network interfaces\",e)",
        "sourceAfterFix": "logger.warn(\"Failed to enumerate network interfaces\",e)"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "35d27031902e30f4c9ed1f0a76800ef157449925",
        "fixCommitParentSHA1": "f0ee245e2a2c879785374d7b9649e7617b24b295",
        "bugFilePath": "messaging/src/main/java/org/jboss/as/messaging/CommonAttributes.java",
        "fixPatch": "diff --git a/messaging/src/main/java/org/jboss/as/messaging/CommonAttributes.java b/messaging/src/main/java/org/jboss/as/messaging/CommonAttributes.java\nindex 71f17bc..75004eb 100644\n--- a/messaging/src/main/java/org/jboss/as/messaging/CommonAttributes.java\n+++ b/messaging/src/main/java/org/jboss/as/messaging/CommonAttributes.java\n@@ -179,7 +179,7 @@\n \n     SimpleAttributeDefinition GROUP_PORT = new SimpleAttributeDefinition(\"group-port\", ModelType.INT, false);\n \n-    SimpleAttributeDefinition HA = new SimpleAttributeDefinition(\"ha\", new ModelNode().set(HornetQClient.DEFAULT_HA),  ModelType.BOOLEAN, false);\n+    SimpleAttributeDefinition HA = new SimpleAttributeDefinition(\"ha\", new ModelNode().set(HornetQClient.DEFAULT_HA),  ModelType.BOOLEAN, true);\n \n     SimpleAttributeDefinition ID_CACHE_SIZE = new SimpleAttributeDefinition(\"id-cache-size\",\n             new ModelNode().set(ConfigurationImpl.DEFAULT_ID_CACHE_SIZE), ModelType.INT,  true, MeasurementUnit.NONE);\n@@ -499,7 +499,7 @@\n     };\n \n     AttributeDefinition[] BROADCAST_GROUP_ATTRIBUTES = {\n-        LOCAL_BIND_ADDRESS, LOCAL_BIND_PORT, GROUP_ADDRESS, GROUP_PORT, ConnectorRefsAttribute.BROADCAST_GROUP\n+        LOCAL_BIND_ADDRESS, LOCAL_BIND_PORT, GROUP_ADDRESS, GROUP_PORT, BROADCAST_PERIOD, ConnectorRefsAttribute.BROADCAST_GROUP\n     };\n \n     AttributeDefinition[] DISCOVERY_GROUP_ATTRIBUTES = {\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 182,
        "bugNodeStartChar": 11827,
        "bugNodeLength": 109,
        "fixLineNum": 182,
        "fixNodeStartChar": 11827,
        "fixNodeLength": 108,
        "sourceBeforeFix": "new SimpleAttributeDefinition(\"ha\",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,false)",
        "sourceAfterFix": "new SimpleAttributeDefinition(\"ha\",new ModelNode().set(HornetQClient.DEFAULT_HA),ModelType.BOOLEAN,true)"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "3bf41faa04284b1f50adcd7da50dbb74664a8396",
        "fixCommitParentSHA1": "ce736af2a5025a4bb07b39362b064bd64aecdeef",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorColumnSetInfo.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorColumnSetInfo.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorColumnSetInfo.java\nindex d9c16dc..8c4b6ea 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorColumnSetInfo.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorColumnSetInfo.java\n@@ -126,7 +126,8 @@\n       doubleIndices[doubleIndicesIndex] = addIndex;\n       indexLookup[addIndex].setDouble(doubleIndicesIndex);\n       ++doubleIndicesIndex;\n-    } else if (VectorizationContext.isStringFamily(outputType)) {\n+    } else if (VectorizationContext.isStringFamily(outputType) ||\n+        outputType.equalsIgnoreCase(\"binary\")) {\n       stringIndices[stringIndicesIndex]= addIndex;\n       indexLookup[addIndex].setString(stringIndicesIndex);\n       ++stringIndicesIndex;\n",
        "projectName": "apache.hive",
        "bugLineNum": 129,
        "bugNodeStartChar": 3780,
        "bugNodeLength": 47,
        "fixLineNum": 129,
        "fixNodeStartChar": 3780,
        "fixNodeLength": 96,
        "sourceBeforeFix": "VectorizationContext.isStringFamily(outputType)",
        "sourceAfterFix": "VectorizationContext.isStringFamily(outputType) || outputType.equalsIgnoreCase(\"binary\")"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "68e8a46f67e0d42bc3ae4ca828be1ba3c079c786",
        "fixCommitParentSHA1": "41b768d0380e29250aa44de006dd7c2ece310a04",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\nindex 5c660c9..5560f22 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java\n@@ -363,7 +363,7 @@\n         WebSocketHandler webSocketHandler = webSocket.webSocketHandler();\n         try {\n             if (webSocketHandler == null) {\n-                if (!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {\n+                if (WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {\n                     List<AtmosphereRequest> list = WebSocketProtocolStream.class.cast(webSocketProtocol).onBinaryStream(webSocket, stream);\n                     dispatch(webSocket, list);\n                 } else {\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 366,
        "bugNodeStartChar": 15603,
        "bugNodeLength": 77,
        "fixLineNum": 366,
        "fixNodeStartChar": 15603,
        "fixNodeLength": 76,
        "sourceBeforeFix": "!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())",
        "sourceAfterFix": "WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())"
    },
    {
        "bugType": "MORE_SPECIFIC_IF",
        "fixCommitSHA1": "e68b9038b64e1b3ad8068541216baf17da23ddde",
        "fixCommitParentSHA1": "aa2fabcfbdb12cfcabdf651f647ec5d18af6696a",
        "bugFilePath": "pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java",
        "fixPatch": "diff --git a/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java b/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java\nindex 4026f62..02d50e2 100644\n--- a/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java\n+++ b/pact/pact-compiler/src/main/java/eu/stratosphere/pact/compiler/plan/MatchNode.java\n@@ -804,7 +804,7 @@\n \t\t\tgp1 = new GlobalProperties();\n \t\t}\n \n-\t\tif(preds2.size() == 1) {\n+\t\tif(preds2 != null && preds2.size() == 1) {\n \t\t\tgp2 = PactConnection.getGlobalPropertiesAfterConnection(preds2.get(0), this, ss2);\n \t\t} else {\n \t\t\t// TODO right now we drop all properties in the union case; need to figure out what properties can be kept\n",
        "projectName": "apache.flink",
        "bugLineNum": 807,
        "bugNodeStartChar": 33881,
        "bugNodeLength": 18,
        "fixLineNum": 807,
        "fixNodeStartChar": 33881,
        "fixNodeLength": 36,
        "sourceBeforeFix": "preds2.size() == 1",
        "sourceAfterFix": "preds2 != null && preds2.size() == 1"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\nindex 4ccc105..f5c07a1 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/MapTemplate.java\n@@ -83,109 +83,109 @@\n     @EncodeMethod(id = 19)\n     void lock(String name, Data key, long threadId, long ttl);\n \n-    @EncodeMethod(id = 21)\n+    @EncodeMethod(id = 20)\n     void tryLock(String name, Data key, long threadId, long timeout);\n \n-    @EncodeMethod(id = 23)\n+    @EncodeMethod(id = 21)\n     void isLocked(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 24)\n+    @EncodeMethod(id = 22)\n     void unlock(String name, Data key, long threadId, boolean force);\n \n-    @EncodeMethod(id = 25)\n+    @EncodeMethod(id = 23)\n     void addInterceptor(String name, Data interceptor);\n \n-    @EncodeMethod(id = 26)\n+    @EncodeMethod(id = 24)\n     void removeInterceptor(String name, String id);\n \n-    @EncodeMethod(id = 27)\n+    @EncodeMethod(id = 25)\n     void addEntryListenerToKeyWithPredicate(String name, Data key, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 28)\n+    @EncodeMethod(id = 26)\n     void addEntryListenerWithPredicate(String name, Data predicate, boolean includeValue);\n \n-    @EncodeMethod(id = 29)\n+    @EncodeMethod(id = 27)\n     void addEntryListenerToKey(String name, Data key, boolean includeValue);\n \n-    @EncodeMethod(id = 30)\n+    @EncodeMethod(id = 28)\n     void addEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 31)\n+    @EncodeMethod(id = 29)\n     void addNearCacheEntryListener(String name, boolean includeValue);\n \n-    @EncodeMethod(id = 32)\n+    @EncodeMethod(id = 30)\n     void removeEntryListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 33)\n+    @EncodeMethod(id = 31)\n     void addPartitionLostListener(String name);\n \n-    @EncodeMethod(id = 34)\n+    @EncodeMethod(id = 32)\n     void removePartitionLostListener(String name, String registrationId);\n \n-    @EncodeMethod(id = 35)\n+    @EncodeMethod(id = 33)\n     void getEntryView(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 36)\n+    @EncodeMethod(id = 34)\n     void evict(String name, Data key, long threadId);\n \n-    @EncodeMethod(id = 37)\n+    @EncodeMethod(id = 35)\n     void evictAll(String name);\n \n-    @EncodeMethod(id = 38)\n+    @EncodeMethod(id = 36)\n     void loadAll(String name, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 39)\n+    @EncodeMethod(id = 37)\n     void loadGivenKeys(String name, List<Data> keys, boolean replaceExistingValues);\n \n-    @EncodeMethod(id = 40)\n+    @EncodeMethod(id = 38)\n     void keySet(String name);\n \n-    @EncodeMethod(id = 41)\n+    @EncodeMethod(id = 39)\n     void getAll(String name, Set<Data> keys);\n \n-    @EncodeMethod(id = 42)\n+    @EncodeMethod(id = 40)\n     void values(String name);\n \n-    @EncodeMethod(id = 43)\n+    @EncodeMethod(id = 41)\n     void entrySet(String name);\n \n-    @EncodeMethod(id = 44)\n+    @EncodeMethod(id = 42)\n     void keySetWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 45)\n+    @EncodeMethod(id = 43)\n     void valuesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 46)\n+    @EncodeMethod(id = 44)\n     void entriesWithPredicate(String name, Data predicate);\n \n-    @EncodeMethod(id = 47)\n+    @EncodeMethod(id = 45)\n     void addIndex(String name, String attribute, boolean ordered);\n \n-    @EncodeMethod(id = 48)\n+    @EncodeMethod(id = 46)\n     void size(String name);\n \n-    @EncodeMethod(id = 49)\n+    @EncodeMethod(id = 47)\n     void isEmpty(String name);\n \n-    @EncodeMethod(id = 50)\n+    @EncodeMethod(id = 48)\n     void putAll(String name, List<Data> keys, List<Data> values);\n \n-    @EncodeMethod(id = 51)\n+    @EncodeMethod(id = 49)\n     void clear(String name);\n \n-    @EncodeMethod(id = 52)\n+    @EncodeMethod(id = 50)\n     void executeOnKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 53)\n+    @EncodeMethod(id = 51)\n     void submitToKey(String name, Data entryProcessor, Data key);\n \n-    @EncodeMethod(id = 54)\n+    @EncodeMethod(id = 52)\n     void executeOnAllKeys(String name, Data entryProcessor);\n \n-    @EncodeMethod(id = 55)\n+    @EncodeMethod(id = 53)\n     void executeWithPredicate(String name, Data entryProcessor, Data predicate);\n \n-    @EncodeMethod(id = 56)\n+    @EncodeMethod(id = 54)\n     void executeOnKeys(String name, Data entryProcessor, Set<Data> keys);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 182,
        "bugNodeStartChar": 5542,
        "bugNodeLength": 7,
        "fixLineNum": 182,
        "fixNodeStartChar": 5542,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=54",
        "sourceAfterFix": "id=52"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "460e5befec4e5f821e6f0808b5fc166844f578c9",
        "fixCommitParentSHA1": "05b0d8f1bf3229ebda5cb338362f56a5cce6096d",
        "bugFilePath": "modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java",
        "fixPatch": "diff --git a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\nindex ae22656..1cf57b8 100644\n--- a/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\n+++ b/modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/JaxRSServerCodegen.java\n@@ -171,7 +171,7 @@\n         String port = \"8080\";\n         if(host != null) {\n             String[] parts = host.split(\":\");\n-            if(parts.length > 0) {\n+            if(parts.length > 1) {\n                 port = parts[1];\n             }\n         }\n",
        "projectName": "swagger-api.swagger-codegen",
        "bugLineNum": 174,
        "bugNodeStartChar": 7262,
        "bugNodeLength": 16,
        "fixLineNum": 174,
        "fixNodeStartChar": 7262,
        "fixNodeLength": 16,
        "sourceBeforeFix": "parts.length > 0",
        "sourceAfterFix": "parts.length > 1"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "c232dcecf1f1512e4d3c5fbe9246f7825dd42f54",
        "fixCommitParentSHA1": "fc836787c99ace0d49affba5b38b38eec03ed8d0",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\nindex 310e1df..664f6cf 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java\n@@ -88,7 +88,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\") <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0) {\n                         handler = map(p, handlers);\n \n@@ -131,7 +131,7 @@\n \n                 // (4) try without a path\n                 if (handler == null) {\n-                    String p = path.lastIndexOf(\"/\") == 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n+                    String p = path.lastIndexOf(\"/\")  <= 0 ? \"/\" : path.substring(0, path.lastIndexOf(\"/\"));\n                     while (p.length() > 0 && p.indexOf(\"/\") != -1) {\n                         handler = match(p, handlers);\n \n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 91,
        "bugNodeStartChar": 2920,
        "bugNodeLength": 26,
        "fixLineNum": 91,
        "fixNodeStartChar": 2920,
        "fixNodeLength": 26,
        "sourceBeforeFix": "path.lastIndexOf(\"/\") == 0",
        "sourceAfterFix": "path.lastIndexOf(\"/\") <= 0"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9704f6049c41315c3de3fa6be6faf01e62c67863",
        "fixCommitParentSHA1": "bfda6ae20e55c8190b157eda7925a1d1a8d82f26",
        "bugFilePath": "src/test/org/apache/hadoop/hbase/TestInfoServers.java",
        "fixPatch": "diff --git a/src/test/org/apache/hadoop/hbase/TestInfoServers.java b/src/test/org/apache/hadoop/hbase/TestInfoServers.java\nindex 9a79b00..911ac44 100644\n--- a/src/test/org/apache/hadoop/hbase/TestInfoServers.java\n+++ b/src/test/org/apache/hadoop/hbase/TestInfoServers.java\n@@ -50,11 +50,11 @@\n     new HTable(conf, \".META.\");\n     int port = cluster.getMaster().getInfoServer().getPort();\n     assertHasExpectedContent(new URL(\"http://localhost:\" + port +\n-      \"/index.html\"), \"Master\");\n+      \"/index.html\"), \"master\");\n     port = cluster.getRegionThreads().get(0).getRegionServer().\n       getInfoServer().getPort();\n     assertHasExpectedContent(new URL(\"http://localhost:\" + port +\n-      \"/index.html\"), \"Region Server\");\n+      \"/index.html\"), \"regionserver\");\n   }\n   \n   private void assertHasExpectedContent(final URL u, final String expected)\n@@ -71,6 +71,6 @@\n     }\n     bis.close();\n     String content = sb.toString();\n-    assertTrue(content.matches(expected));\n+    assertTrue(content.contains(expected));\n   }\n }\n\\ No newline at end of file\n",
        "projectName": "apache.hbase",
        "bugLineNum": 74,
        "bugNodeStartChar": 2798,
        "bugNodeLength": 25,
        "fixLineNum": 74,
        "fixNodeStartChar": 2798,
        "fixNodeLength": 26,
        "sourceBeforeFix": "content.matches(expected)",
        "sourceAfterFix": "content.contains(expected)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "5955ecf032d678aa27095bd5193e24ed865b32b4",
        "fixCommitParentSHA1": "187b2beb47ce960f6cb01712a760218267168e68",
        "bugFilePath": "processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java",
        "fixPatch": "diff --git a/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java b/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\nindex ac85b75..90175c5 100644\n--- a/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\n+++ b/processing/src/main/java/io/druid/query/aggregation/JavaScriptAggregatorFactory.java\n@@ -150,7 +150,7 @@\n           @Override\n           public AggregatorFactory apply(String input)\n           {\n-            return new JavaScriptAggregatorFactory(name, Arrays.asList(input), fnAggregate, fnReset, fnCombine);\n+            return new JavaScriptAggregatorFactory(input, Arrays.asList(input), fnAggregate, fnReset, fnCombine);\n           }\n         }\n     );\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 153,
        "bugNodeStartChar": 5020,
        "bugNodeLength": 92,
        "fixLineNum": 153,
        "fixNodeStartChar": 5020,
        "fixNodeLength": 93,
        "sourceBeforeFix": "new JavaScriptAggregatorFactory(name,Arrays.asList(input),fnAggregate,fnReset,fnCombine)",
        "sourceAfterFix": "new JavaScriptAggregatorFactory(input,Arrays.asList(input),fnAggregate,fnReset,fnCombine)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "ceedf8077728da8d462bbdf607a89da82e9a5f2b",
        "fixCommitParentSHA1": "45379946e7cc7bcd45b5b587b7c1232400aea4f6",
        "bugFilePath": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java",
        "fixPatch": "diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\nindex 01e7c1e..214fad7 100644\n--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMagicNumber.java\n@@ -182,19 +182,19 @@\n         int z=101;\n     }\n \n-    @IntMethodAnnotation(42)\n+    @InputIntMethodAnnotation(42)\n     public void another() {\n     }\n \n-    @IntMethodAnnotation(value=43)\n+    @InputIntMethodAnnotation(value=43)\n     public void another2() {\n     }\n     \n-    @IntMethodAnnotation(-44)\n+    @InputIntMethodAnnotation(-44)\n     public void anotherNegative() {\n     }\n \n-    @IntMethodAnnotation(value=-45)\n+    @InputIntMethodAnnotation(value=-45)\n     public void anotherNegative2() {\n     }\n }\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 189,
        "bugNodeStartChar": 4212,
        "bugNodeLength": 30,
        "fixLineNum": 189,
        "fixNodeStartChar": 4212,
        "fixNodeLength": 35,
        "sourceBeforeFix": "@IntMethodAnnotation(value=43)",
        "sourceAfterFix": "@InputIntMethodAnnotation(value=43)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "10e4ecd7341ca6afd1d374c11546935aa488a054",
        "fixCommitParentSHA1": "b92b037a96d086e3d5b5b8326883c20642d310c1",
        "bugFilePath": "hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java",
        "fixPatch": "diff --git a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\nindex ffce204..157f0d0 100644\n--- a/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n+++ b/hazelcast/src/main/java/com/hazelcast/client/impl/protocol/parameters/ListTemplate.java\n@@ -69,28 +69,28 @@\n     @EncodeMethod(id = 14)\n     void addAllWithIndex(String name, int index, List<Data> valueList);\n \n-    @EncodeMethod(id = 13)\n+    @EncodeMethod(id = 15)\n     void get(String name, int index);\n \n-    @EncodeMethod(id = 14)\n+    @EncodeMethod(id = 16)\n     void set(String name, int index, Data value);\n \n-    @EncodeMethod(id = 15)\n+    @EncodeMethod(id = 17)\n     void addWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 16)\n+    @EncodeMethod(id = 18)\n     void removeWithIndex(String name, int index, Data value);\n \n-    @EncodeMethod(id = 17)\n+    @EncodeMethod(id = 19)\n     void lastIndexOf(String name, Data value);\n \n-    @EncodeMethod(id = 18)\n+    @EncodeMethod(id = 20)\n     void indexOf(String name, Data value);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 21)\n     void sub(String name, int from, int to);\n \n-    @EncodeMethod(id = 19)\n+    @EncodeMethod(id = 22)\n     void iterator(String name);\n \n }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 81,
        "bugNodeStartChar": 2327,
        "bugNodeLength": 7,
        "fixLineNum": 81,
        "fixNodeStartChar": 2327,
        "fixNodeLength": 7,
        "sourceBeforeFix": "id=16",
        "sourceAfterFix": "id=18"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "d3eda036ed839d344415dbaab471fef4472a8d9b",
        "fixCommitParentSHA1": "3d058660c94d97b15e9700b615a82051b599be34",
        "bugFilePath": "src/jvm/storm/kafka/PartitionManager.java",
        "fixPatch": "diff --git a/src/jvm/storm/kafka/PartitionManager.java b/src/jvm/storm/kafka/PartitionManager.java\nindex 9186953..b9cfd97 100644\n--- a/src/jvm/storm/kafka/PartitionManager.java\n+++ b/src/jvm/storm/kafka/PartitionManager.java\n@@ -151,7 +151,7 @@\n         for(MessageAndOffset msg: msgs) {\n             _pending.add(_emittedToOffset);\n             _waitingToEmit.add(new MessageAndRealOffset(msg.message(), _emittedToOffset));\n-            _emittedToOffset = msg.offset();\n+            _emittedToOffset = msg.nextOffset();\n         }\n         if(numMessages>0) {\n           LOG.info(\"Added \" + numMessages + \" messages from Kafka: \" + _consumer.host() + \":\" + _partition.partition + \" to internal buffers\");\n",
        "projectName": "apache.storm",
        "bugLineNum": 154,
        "bugNodeStartChar": 6436,
        "bugNodeLength": 12,
        "fixLineNum": 154,
        "fixNodeStartChar": 6436,
        "fixNodeLength": 16,
        "sourceBeforeFix": "msg.offset()",
        "sourceAfterFix": "msg.nextOffset()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "a2fe91696b850bdea3e1f4fa8621188076dba7d0",
        "fixCommitParentSHA1": "c671863d64fae759954dd6ad0fa897c29c9f8667",
        "bugFilePath": "src/java/org/apache/hadoop/hbase/io/hfile/HFile.java",
        "fixPatch": "diff --git a/src/java/org/apache/hadoop/hbase/io/hfile/HFile.java b/src/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nindex 3bf079a..5c96420 100644\n--- a/src/java/org/apache/hadoop/hbase/io/hfile/HFile.java\n+++ b/src/java/org/apache/hadoop/hbase/io/hfile/HFile.java\n@@ -1167,7 +1167,9 @@\n           return false; // key is before the start of the file.\n \n         // Question: does this block begin with 'key'?\n-        if (this.reader.comparator.compare(reader.blockIndex.blockKeys[b], key) == 0) {\n+        if (this.reader.comparator.compare(reader.blockIndex.blockKeys[b],\n+            0, reader.blockIndex.blockKeys[b].length,\n+            key, offset, length) == 0) {\n           // Ok the key we're interested in is the first of the block, so go back one.\n           if (b == 0) {\n             // we have a 'problem', the key we want is the first of the file.\n",
        "projectName": "apache.hbase",
        "bugLineNum": 1170,
        "bugNodeStartChar": 41454,
        "bugNodeLength": 67,
        "fixLineNum": 1170,
        "fixNodeStartChar": 41454,
        "fixNodeLength": 149,
        "sourceBeforeFix": "this.reader.comparator.compare(reader.blockIndex.blockKeys[b],key)",
        "sourceAfterFix": "this.reader.comparator.compare(reader.blockIndex.blockKeys[b],0,reader.blockIndex.blockKeys[b].length,key,offset,length)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "86c753a14931a2cace312a5c55ee139feb5ad012",
        "fixCommitParentSHA1": "74317a220ea41419856608bacaecc68996ed811c",
        "bugFilePath": "spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java",
        "fixPatch": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\nindex d0be9cc..907e1a2 100644\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n@@ -144,7 +144,7 @@\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n \t\t// Just the application and management endpoints now\n-\t\tassertEquals(2,\n+\t\tassertEquals(3,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 147,
        "bugNodeStartChar": 6666,
        "bugNodeLength": 90,
        "fixLineNum": 147,
        "fixNodeStartChar": 6666,
        "fixNodeLength": 90,
        "sourceBeforeFix": "assertEquals(2,this.context.getBean(FilterChainProxy.class).getFilterChains().size())",
        "sourceAfterFix": "assertEquals(3,this.context.getBean(FilterChainProxy.class).getFilterChains().size())"
    },
    {
        "bugType": "CHANGE_OPERAND",
        "fixCommitSHA1": "ad743978ed62cdf18bb3f8d580deb27b9b2195a4",
        "fixCommitParentSHA1": "d8f4792f8e20bf7c0c0ca7a057245c3fd1e2a75d",
        "bugFilePath": "src/java/org/apache/hadoop/hbase/HMaster.java",
        "fixPatch": "diff --git a/src/java/org/apache/hadoop/hbase/HMaster.java b/src/java/org/apache/hadoop/hbase/HMaster.java\nindex 9163eea..877379a 100644\n--- a/src/java/org/apache/hadoop/hbase/HMaster.java\n+++ b/src/java/org/apache/hadoop/hbase/HMaster.java\n@@ -2087,7 +2087,7 @@\n           if (closed.get()) {\n             return true;\n           }\n-          if (!rootScanned ||\n+          if (!rootRescanned ||\n               numberOfMetaRegions.get() != onlineMetaRegions.size()) {\n             // We can't proceed because not all of the meta regions are online.\n             // We can't block either because that would prevent the meta region\n@@ -2096,7 +2096,7 @@\n             \n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Requeuing shutdown because rootScanned: \" +\n-                  rootScanned + \", numberOfMetaRegions: \" +\n+                  rootRescanned + \", numberOfMetaRegions: \" +\n                   numberOfMetaRegions.get() + \", onlineMetaRegions.size(): \" +\n                   onlineMetaRegions.size());\n             }\n",
        "projectName": "apache.hbase",
        "bugLineNum": 2098,
        "bugNodeStartChar": 72942,
        "bugNodeLength": 226,
        "fixLineNum": 2098,
        "fixNodeStartChar": 72942,
        "fixNodeLength": 228,
        "sourceBeforeFix": "\"Requeuing shutdown because rootScanned: \" + rootScanned + \", numberOfMetaRegions: \"+ numberOfMetaRegions.get()+ \", onlineMetaRegions.size(): \"+ onlineMetaRegions.size()",
        "sourceAfterFix": "\"Requeuing shutdown because rootScanned: \" + rootRescanned + \", numberOfMetaRegions: \"+ numberOfMetaRegions.get()+ \", onlineMetaRegions.size(): \"+ onlineMetaRegions.size()"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "96b731c4af632c41e1c1954e2008dddf27240fc1",
        "fixCommitParentSHA1": "60277c4ad399c26a0a820e08915f7283b5b120b2",
        "bugFilePath": "extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java",
        "fixPatch": "diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java\nindex fb6d59f..bcd48cf 100644\n--- a/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java\n+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tools/imagepacker/MaxRectsPacker.java\n@@ -52,20 +52,20 @@\n \t\tif (settings.fast) {\r\n \t\t\tif (settings.rotation) {\r\n \t\t\t\t// Sort by longest side if rotation is enabled.\r\n-\t\t\t\tsort.sort(inputRects.items, new Comparator<Rect>() {\r\n+\t\t\t\tsort.sort(inputRects, new Comparator<Rect>() {\r\n \t\t\t\t\tpublic int compare (Rect o1, Rect o2) {\r\n \t\t\t\t\t\tint n1 = o1.width > o1.height ? o1.width : o1.height;\r\n \t\t\t\t\t\tint n2 = o2.width > o2.height ? o2.width : o2.height;\r\n \t\t\t\t\t\treturn n2 - n1;\r\n \t\t\t\t\t}\r\n-\t\t\t\t}, 0, inputRects.size);\r\n+\t\t\t\t});\r\n \t\t\t} else {\r\n \t\t\t\t// Sort only by width (largest to smallest) if rotation is disabled.\r\n-\t\t\t\tsort.sort(inputRects.items, new Comparator<Rect>() {\r\n+\t\t\t\tsort.sort(inputRects, new Comparator<Rect>() {\r\n \t\t\t\t\tpublic int compare (Rect o1, Rect o2) {\r\n \t\t\t\t\t\treturn o2.width - o1.width;\r\n \t\t\t\t\t}\r\n-\t\t\t\t}, 0, inputRects.size);\r\n+\t\t\t\t});\r\n \t\t\t}\r\n \t\t}\r\n \r\n@@ -136,7 +136,7 @@\n \t\tif (bestResult == null)\r\n \t\t\tbestResult = packAtSize(false, settings.maxWidth - edgePaddingX, settings.maxHeight - edgePaddingY, inputRects);\r\n \r\n-\t\tbestResult.outputRects.sort(rectComparator);\r\n+\t\tsort.sort(bestResult.outputRects, rectComparator);\r\n \r\n \t\treturn bestResult;\r\n \t}\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 64,
        "bugNodeStartChar": 2697,
        "bugNodeLength": 169,
        "fixLineNum": 64,
        "fixNodeStartChar": 2634,
        "fixNodeLength": 145,
        "sourceBeforeFix": "sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } ,0,inputRects.size)",
        "sourceAfterFix": "sort.sort(inputRects.items,new Comparator<Rect>(){   public int compare(  Rect o1,  Rect o2){     return o2.width - o1.width;   } } )"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "b8900cd656476175770869d83f2ab99935650b0c",
        "fixCommitParentSHA1": "703cbe01c3ddff289fd6cba89cbd45314bb70473",
        "bugFilePath": "camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java",
        "fixPatch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java\nindex c9b53c2..81417cd 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java\n@@ -1450,7 +1450,7 @@\n         }\n         \n         if (timeoutCheckerExecutorService != null) {\n-            camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService);\n+            camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService);\n         }\n         \n         ServiceHelper.stopServices(timeoutMap, processor, deadLetterProducerTemplate);\n",
        "projectName": "apache.camel",
        "bugLineNum": 1453,
        "bugNodeStartChar": 64082,
        "bugNodeLength": 80,
        "fixLineNum": 1453,
        "fixNodeStartChar": 64082,
        "fixNodeLength": 83,
        "sourceBeforeFix": "camelContext.getExecutorServiceManager().shutdown(timeoutCheckerExecutorService)",
        "sourceAfterFix": "camelContext.getExecutorServiceManager().shutdownNow(timeoutCheckerExecutorService)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "048c1d20bae99c00f76b088fc9fdd7c286deb7b8",
        "fixCommitParentSHA1": "b844a7400cdd9f4961ba30ebb1439390aac9fd61",
        "bugFilePath": "hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java",
        "fixPatch": "diff --git a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\nindex ec449b8..39f7144 100644\n--- a/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n+++ b/hazelcast-client/src/main/java/com/hazelcast/client/proxy/ClientMapProxy.java\n@@ -561,10 +561,9 @@\n                     void invalidate(EntryEvent<K, V> event){\n                         System.err.println(\"invalidate\");\n                         final Data key = toData(event.getKey());\n-//                        nearCache.invalidate(key);\n-                        nearCache.put(key, event.getValue());\n+                        nearCache.invalidate(key);\n                     }\n-                }, true);\n+                }, false);\n             }\n         }\n     }\n",
        "projectName": "hazelcast.hazelcast",
        "bugLineNum": 565,
        "bugNodeStartChar": 21523,
        "bugNodeLength": 36,
        "fixLineNum": 564,
        "fixNodeStartChar": 21470,
        "fixNodeLength": 25,
        "sourceBeforeFix": "nearCache.put(key,event.getValue())",
        "sourceAfterFix": "nearCache.invalidate(key)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "958fa58492daee485f640bf3261449d9bab9ee6e",
        "fixCommitParentSHA1": "381a9d2e70e976531aa3d3962a0965d91a17140d",
        "bugFilePath": "presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java",
        "fixPatch": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java b/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java\nindex 8c89b90..30657a9 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/s3/PrestoS3FileSystem.java\n@@ -550,7 +550,7 @@\n      */\n     @VisibleForTesting\n     static class UnrecoverableS3OperationException\n-            extends RuntimeException\n+            extends IOException\n     {\n         public UnrecoverableS3OperationException(Path path, Throwable cause)\n         {\n",
        "projectName": "facebook.presto",
        "bugLineNum": 547,
        "bugNodeStartChar": 23056,
        "bugNodeLength": 568,
        "fixLineNum": 547,
        "fixNodeStartChar": 23056,
        "fixNodeLength": 563,
        "sourceBeforeFix": "/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, \"Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ...\"  */ @VisibleForTesting static class UnrecoverableS3OperationException extends RuntimeException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format(\"%s (Path: %s)\",cause,path),cause);   } } ",
        "sourceAfterFix": "/**   * This exception is for stopping retries for S3 calls that shouldn't be retried. For example, \"Caused by: com.amazonaws.services.s3.model.AmazonS3Exception: Forbidden (Service: Amazon S3; Status Code: 403 ...\"  */ @VisibleForTesting static class UnrecoverableS3OperationException extends IOException {   public UnrecoverableS3OperationException(  Path path,  Throwable cause){     super(format(\"%s (Path: %s)\",cause,path),cause);   } } "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "38a6c7171c5c3d76d348d8db8c550412f59b5e7d",
        "fixCommitParentSHA1": "037b4cc4151aedc6e5fa2242e495e80b0580a735",
        "bugFilePath": "src/com/activeandroid/Model.java",
        "fixPatch": "diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java\nindex 07ad46c..e705680 100644\n--- a/src/com/activeandroid/Model.java\n+++ b/src/com/activeandroid/Model.java\n@@ -164,7 +164,7 @@\n \t\tnew Delete().from(type).where(\"Id=?\", id).execute();\n \t}\n \n-\tpublic static <T extends Model> T load(Class<? extends Model> type, long id) {\n+\tpublic static <T extends Model> T load(Class<T> type, long id) {\n \t\treturn new Select().from(type).where(\"Id=?\", id).executeSingle();\n \t}\n \n@@ -269,7 +269,7 @@\n \t// PROTECTED METHODS\n \t//////////////////////////////////////////////////////////////////////////////////////\n \n-\tprotected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {\n+\tprotected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {\n \t\treturn new Select().from(type).where(Cache.getTableName(type) + \".\" + foreignKey + \"=?\", getId()).execute();\n \t}\n \n",
        "projectName": "pardom.ActiveAndroid",
        "bugLineNum": 272,
        "bugNodeStartChar": 9155,
        "bugNodeLength": 15,
        "fixLineNum": 272,
        "fixNodeStartChar": 9155,
        "fixNodeLength": 15,
        "sourceBeforeFix": "E extends Model",
        "sourceAfterFix": "T extends Model"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "d1cb70710f70a129598e92a638d536b9207aa01f",
        "fixCommitParentSHA1": "b36a323211503978fd314dddaab01bf964ad358b",
        "bugFilePath": "modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java",
        "fixPatch": "diff --git a/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java b/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\nindex 3cce777..b677597 100644\n--- a/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\n+++ b/modules/swagger-models/src/main/java/io/swagger/models/RefResponse.java\n@@ -52,27 +52,27 @@\n     }\n \n     @Override\n-    public ResponseImpl schema(Property property) {\n+    public Response schema(Property property) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl description(String description) {\n+    public Response description(String description) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl example(String type, Object example) {\n+    public Response example(String type, Object example) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl header(String name, Property property) {\n+    public Response header(String name, Property property) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n     @Override\n-    public ResponseImpl headers(Map<String, Property> headers) {\n+    public Response headers(Map<String, Property> headers) {\n         throw new RuntimeException(\"Not implemented\");\n     }\n \n",
        "projectName": "swagger-api.swagger-core",
        "bugLineNum": 59,
        "bugNodeStartChar": 1365,
        "bugNodeLength": 128,
        "fixLineNum": 59,
        "fixNodeStartChar": 1365,
        "fixNodeLength": 124,
        "sourceBeforeFix": "@Override public ResponseImpl description(String description){   throw new RuntimeException(\"Not implemented\"); } ",
        "sourceAfterFix": "@Override public Response description(String description){   throw new RuntimeException(\"Not implemented\"); } "
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "0ea48a75db6718c8e6a953495c20971ede930537",
        "fixCommitParentSHA1": "63a368bf671e3356c5be441b8833bad844a4ff8e",
        "bugFilePath": "integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java",
        "fixPatch": "diff --git a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\nindex edf75e2..373d5f6 100644\n--- a/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n+++ b/integration-tests/src/test/java/tachyon/master/lineage/LineageMasterIntegrationTest.java\n@@ -146,7 +146,7 @@\n \n       // worker notifies the master\n       HeartbeatScheduler.schedule(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC);\n-      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 500,\n+      Assert.assertTrue(HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC, 5,\n           TimeUnit.SECONDS));\n \n       fileInfo = getFileSystemMasterClient().getFileInfo(fileId);\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 149,
        "bugNodeStartChar": 6208,
        "bugNodeLength": 105,
        "fixLineNum": 149,
        "fixNodeStartChar": 6208,
        "fixNodeLength": 103,
        "sourceBeforeFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500,TimeUnit.SECONDS)",
        "sourceAfterFix": "HeartbeatScheduler.await(HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5,TimeUnit.SECONDS)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "370ead7395fc9194a3dc2d05afc4b3409f6b27da",
        "fixCommitParentSHA1": "c4dd016566067eb16b97bfaa22f1a8a466afce6c",
        "bugFilePath": "ql/src/java/org/apache/hadoop/hive/ql/parse/QBParseInfo.java",
        "fixPatch": "diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/QBParseInfo.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/QBParseInfo.java\nindex 15c3467..af62c87 100644\n--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/QBParseInfo.java\n+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/QBParseInfo.java\n@@ -58,7 +58,7 @@\n   private int outerQueryLimit;\n \n   // used by GroupBy\n-  private HashMap<String, HashMap<String, ASTNode> > destToAggregationExprs;\n+  private LinkedHashMap<String, LinkedHashMap<String, ASTNode> > destToAggregationExprs;\n   private HashMap<String, ASTNode> destToDistinctFuncExpr;\n \n   @SuppressWarnings(\"unused\")\n@@ -76,7 +76,7 @@\n     this.destToSortby = new HashMap<String, ASTNode>();\n     this.destToLimit = new HashMap<String, Integer>();\n     \n-    this.destToAggregationExprs = new HashMap<String, HashMap<String, ASTNode> >();\n+    this.destToAggregationExprs = new LinkedHashMap<String, LinkedHashMap<String, ASTNode> >();\n     this.destToDistinctFuncExpr = new HashMap<String, ASTNode>();\n     \n     this.alias = alias;\n@@ -84,7 +84,7 @@\n     this.outerQueryLimit = -1;\n   }\n \n-  public void setAggregationExprsForClause(String clause, HashMap<String, ASTNode> aggregationTrees) {\n+  public void setAggregationExprsForClause(String clause, LinkedHashMap<String, ASTNode> aggregationTrees) {\n     this.destToAggregationExprs.put(clause, aggregationTrees);\n   }\n \n@@ -273,7 +273,7 @@\n        (!destToClusterby.isEmpty()))\n       return false;\n     \n-    Iterator<Map.Entry<String, HashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n+    Iterator<Map.Entry<String, LinkedHashMap<String, ASTNode>>> aggrIter = destToAggregationExprs.entrySet().iterator();\n     while (aggrIter.hasNext()) {\n       HashMap<String, ASTNode> h = aggrIter.next().getValue();\n       if ((h != null) && (!h.isEmpty()))\n",
        "projectName": "apache.hive",
        "bugLineNum": 61,
        "bugNodeStartChar": 2063,
        "bugNodeLength": 42,
        "fixLineNum": 61,
        "fixNodeStartChar": 2063,
        "fixNodeLength": 54,
        "sourceBeforeFix": "HashMap<String,HashMap<String,ASTNode>>",
        "sourceAfterFix": "LinkedHashMap<String,LinkedHashMap<String,ASTNode>>"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "c9a1cc9df3dc4fe2eef78ad6090a9b1d95a02557",
        "fixCommitParentSHA1": "adccab823675fb33685c5c0268388fc9857b7047",
        "bugFilePath": "clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/ClusteredCacheResourceDefinition.java",
        "fixPatch": "diff --git a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/ClusteredCacheResourceDefinition.java b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/ClusteredCacheResourceDefinition.java\nindex 9839918..25c9b46 100644\n--- a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/ClusteredCacheResourceDefinition.java\n+++ b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/ClusteredCacheResourceDefinition.java\n@@ -65,7 +65,7 @@\n             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n-            .setDefaultValue(new ModelNode().set(10))\n+            .setDefaultValue(new ModelNode().set(10L))\n             .build();\n \n     static final SimpleAttributeDefinition QUEUE_SIZE = new SimpleAttributeDefinitionBuilder(ModelKeys.QUEUE_SIZE, ModelType.INT, true)\n@@ -80,7 +80,7 @@\n             .setMeasurementUnit(MeasurementUnit.MILLISECONDS)\n             .setAllowExpression(true)\n             .setFlags(AttributeAccess.Flag.RESTART_ALL_SERVICES)\n-            .setDefaultValue(new ModelNode().set(17500))\n+            .setDefaultValue(new ModelNode().set(17500L))\n             .build();\n \n     static final AttributeDefinition[] ATTRIBUTES = new AttributeDefinition[] { ASYNC_MARSHALLING, MODE, QUEUE_SIZE, QUEUE_FLUSH_INTERVAL, REMOTE_TIMEOUT };\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 83,
        "bugNodeStartChar": 4272,
        "bugNodeLength": 26,
        "fixLineNum": 83,
        "fixNodeStartChar": 4272,
        "fixNodeLength": 27,
        "sourceBeforeFix": "new ModelNode().set(17500)",
        "sourceAfterFix": "new ModelNode().set(17500L)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "133d8bf48f66bebefef85ac5814058a5409cffde",
        "fixCommitParentSHA1": "ff7169ceb12d22a2f08e5899cffca7138986440e",
        "bugFilePath": "tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java",
        "fixPatch": "diff --git a/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java b/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java\nindex 0413769..be1a9a5 100644\n--- a/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java\n+++ b/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java\n@@ -175,7 +175,7 @@\n \n             // using the features to install the camel components\n             scanFeatures(getCamelKarafFeatureUrl(),\n-                \"camel-core\", \"camel-spring\", \"camel-\" + feature),\n+                \"xml-specs-api\", \"camel-core\", \"camel-spring\", \"camel-\" + feature),\n \n             workingDirectory(\"target/paxrunner/\"));\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 177,
        "bugNodeStartChar": 6668,
        "bugNodeLength": 105,
        "fixLineNum": 177,
        "fixNodeStartChar": 6668,
        "fixNodeLength": 122,
        "sourceBeforeFix": "scanFeatures(getCamelKarafFeatureUrl(),\"camel-core\",\"camel-spring\",\"camel-\" + feature)",
        "sourceAfterFix": "scanFeatures(getCamelKarafFeatureUrl(),\"xml-specs-api\",\"camel-core\",\"camel-spring\",\"camel-\" + feature)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "5324bb65a6b5d94652f950f2b03fd6345fb6f66d",
        "fixCommitParentSHA1": "4962f78c15541005454776469cfaaf8fea023b7d",
        "bugFilePath": "bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java",
        "fixPatch": "diff --git a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\nindex 6416058..b6b762c 100644\n--- a/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n+++ b/bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java\n@@ -138,7 +138,7 @@\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tlogger.error(\"Could not open url '{}' for sending it via XMPP\", attachmentUrl, e);\n \t\t\t\t} finally {\n-\t\t\t\t\tIOUtils.closeQuitely(is);\n+\t\t\t\t\tIOUtils.closeQuietly(is);\n \t\t\t\t}\n \t\t\t}\n \t\t} catch (NotInitializedException e) {\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 141,
        "bugNodeStartChar": 4832,
        "bugNodeLength": 24,
        "fixLineNum": 141,
        "fixNodeStartChar": 4832,
        "fixNodeLength": 24,
        "sourceBeforeFix": "IOUtils.closeQuitely(is)",
        "sourceAfterFix": "IOUtils.closeQuietly(is)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "474f8ec97f7750303807e5b73b78b8f78c7c6d95",
        "fixCommitParentSHA1": "9eaf49542d1688cc9946e96f208a5825162e1895",
        "bugFilePath": "src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java",
        "fixPatch": "diff --git a/src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java b/src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java\nindex e624240..bc8c2f6 100644\n--- a/src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java\n+++ b/src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java\n@@ -60,7 +60,7 @@\n \n         {\n             // \u5e76\u53d1\u521b\u5efa14\u4e2a\n-            concurrent(driver, dataSource, 100);\n+            concurrent(driver, dataSource, 30);\n         }\n \n         // \u8fde\u7eed\u6253\u5f00\u5173\u95ed\u5355\u4e2a\u8fde\u63a5\n",
        "projectName": "alibaba.druid",
        "bugLineNum": 63,
        "bugNodeStartChar": 2444,
        "bugNodeLength": 35,
        "fixLineNum": 63,
        "fixNodeStartChar": 2444,
        "fixNodeLength": 34,
        "sourceBeforeFix": "concurrent(driver,dataSource,100)",
        "sourceAfterFix": "concurrent(driver,dataSource,30)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "2a4442771eee1cc9e857f6999b3ead8e7cc43fd4",
        "fixCommitParentSHA1": "bccfa52d8df8eb135fdeb5bbcfbfa7d68f078a39",
        "bugFilePath": "modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java",
        "fixPatch": "diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java\nindex 8e1bf22..6e77c75 100644\n--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java\n+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/interceptor/CommandContext.java\n@@ -137,7 +137,7 @@\n               // reduce log level, as normally we're not interested in logging this exception\n               log.debug(\"Optimistic locking exception : \" + exception);\n             } else {\n-              log.error(\"Error while closing command context\", exception);\n+              log.debug(\"Error while closing command context\", exception);\n             }\n \n             transactionContext.rollback();\n",
        "projectName": "Activiti.Activiti",
        "bugLineNum": 140,
        "bugNodeStartChar": 6484,
        "bugNodeLength": 59,
        "fixLineNum": 140,
        "fixNodeStartChar": 6484,
        "fixNodeLength": 59,
        "sourceBeforeFix": "log.error(\"Error while closing command context\",exception)",
        "sourceAfterFix": "log.debug(\"Error while closing command context\",exception)"
    },
    {
        "bugType": "LESS_SPECIFIC_IF",
        "fixCommitSHA1": "59b25b4bc0d483dfbf1cc9004fd6a6083de89313",
        "fixCommitParentSHA1": "3432058a200909f043d1df1e14ac8dc55717cb55",
        "bugFilePath": "core/src/main/java/fi/iki/elonen/NanoHTTPD.java",
        "fixPatch": "diff --git a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\nindex c796aa4..2ebf093 100644\n--- a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\n+++ b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\n@@ -659,7 +659,7 @@\n                     // First line is boundary string\n                     String mpline = in.readLine();\n                     headerLines++;\n-                    if (!mpline.contains(boundary)) {\n+                    if (mpline == null || !mpline.contains(boundary)) {\n                         throw new ResponseException(Response.Status.BAD_REQUEST, \"BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.\");\n                     }\n \n",
        "projectName": "NanoHttpd.nanohttpd",
        "bugLineNum": 662,
        "bugNodeStartChar": 23701,
        "bugNodeLength": 26,
        "fixLineNum": 662,
        "fixNodeStartChar": 23701,
        "fixNodeLength": 44,
        "sourceBeforeFix": "!mpline.contains(boundary)",
        "sourceAfterFix": "mpline == null || !mpline.contains(boundary)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "58ce4c40970fc29d00e5740bc6098eb475668e86",
        "fixCommitParentSHA1": "b8c558e473c0a9a75c41312e31df34b8572a271b",
        "bugFilePath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java",
        "fixPatch": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\nindex 469e3f1..91e69a2 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java\n@@ -39,7 +39,8 @@\n  * <p>\n  * Checks the Javadoc of a method or constructor.\n  * By default, does not check for unused throws.\n- * To check for unused throws, set property checkUnusedThrows to true.\n+ * To allow documented <code>java.lang.RuntimeException</code>s\n+ * that are not declared, set property allowUndeclaredRTE to true.\n  * The scope to verify is specified using the {@link Scope} class and\n  * defaults to {@link Scope#PRIVATE}. To verify another scope,\n  * set property scope to one of the {@link Scope} constants.\n@@ -50,13 +51,14 @@\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"/&gt;\n  * </pre>\n- * <p> An example of how to configure the check to check for unused imports\n+ * <p> An example of how to configure the check to check to allow\n+ * documentation of undeclared RuntimeExceptions\n  * and for the {@link Scope#PUBLIC} scope is:\n  *</p>\n  * <pre>\n  * &lt;module name=\"JavadocMethod\"&gt;\n  *    &lt;property name=\"scope\" value=\"public\"/&gt;\n- *    &lt;property name=\"checkUnusedThrows\" value=\"true\"/&gt;\n+ *    &lt;property name=\"allowUndeclaredRTE\" value=\"true\"/&gt;\n  * &lt;/module&gt;\n  * </pre>\n  *\n@@ -121,8 +123,12 @@\n     /** the visibility scope where Javadoc comments are checked **/\n     private Scope mScope = Scope.PRIVATE;\n \n-    /** check for unused throws **/\n-    private boolean mCheckUnusedThrows = false;\n+    /**\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n+     **/\n+    private boolean mAllowUndeclaredRTE = false;\n \n     /**\n      * Set the scope.\n@@ -134,12 +140,14 @@\n     }\n \n     /**\n-     * Set whether to check for unused throws.\n+     * controls whether to allow documented exceptions that\n+     * are not declared if they are a subclass of\n+     * java.lang.RuntimeException.\n      * @param aFlag a <code>Boolean</code> value\n      */\n-    public void setCheckUnusedThrows(boolean aFlag)\n+    public void setAllowUndeclaredRTE(boolean aFlag)\n     {\n-        mCheckUnusedThrows = aFlag;\n+        mAllowUndeclaredRTE = aFlag;\n     }\n \n     /** @see com.puppycrawl.tools.checkstyle.api.Check */\n@@ -179,12 +187,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() == TokenTypes.PACKAGE_DEF) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processPackage(aAST);\n             }\n         }\n         else if (aAST.getType() == TokenTypes.IMPORT) {\n-            if (mCheckUnusedThrows) {\n+            if (mAllowUndeclaredRTE) {\n                 processImport(aAST);\n             }\n         }\n@@ -510,7 +518,7 @@\n             // Handle extra JavadocTag.\n             if (!found) {\n                 boolean reqd = true;\n-                if (mCheckUnusedThrows) {\n+                if (mAllowUndeclaredRTE) {\n                     final ClassResolver cr =\n                         new ClassResolver(\n                             getClassLoader(),\n",
        "projectName": "checkstyle.checkstyle",
        "bugLineNum": 142,
        "bugNodeStartChar": 5477,
        "bugNodeLength": 26,
        "fixLineNum": 142,
        "fixNodeStartChar": 5477,
        "fixNodeLength": 27,
        "sourceBeforeFix": "mCheckUnusedThrows=aFlag",
        "sourceAfterFix": "mAllowUndeclaredRTE=aFlag"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "02f1f95e522fd142dc0805c37e91d12880ab5996",
        "fixCommitParentSHA1": "aa89f69519cbc34e0203faf377f557559174aceb",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeUtils.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeUtils.java b/presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeUtils.java\nindex ef3d186..f8f1023 100644\n--- a/presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeUtils.java\n+++ b/presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeUtils.java\n@@ -44,7 +44,7 @@\n import static com.facebook.presto.sql.gen.Bootstrap.CALL_SITES_FIELD_NAME;\n import static java.lang.String.format;\n \n-public class ByteCodeUtils\n+public final class ByteCodeUtils\n {\n     private ByteCodeUtils()\n     {\n@@ -68,7 +68,7 @@\n     public static ByteCodeNode handleNullValue(CompilerContext context,\n             LabelNode label,\n             Class<?> returnType,\n-            List<? extends Class<?>> stackArgsToPop,\n+            List<Class<?>> stackArgsToPop,\n             boolean clearNullFlag)\n     {\n         Block nullCheck = new Block(context)\n@@ -165,7 +165,7 @@\n         Block block = new Block(context)\n                 .setDescription(\"invoke \" + signature);\n \n-        ArrayList<Class<?>> stackTypes = new ArrayList<>();\n+        List<Class<?>> stackTypes = new ArrayList<>();\n \n         int index = 0;\n         for (Class<?> type : methodType.parameterArray()) {\n@@ -176,7 +176,7 @@\n             else {\n                 block.append(arguments.get(index));\n                 index++;\n-                block.append(ByteCodeUtils.ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n+                block.append(ifWasNullPopAndGoto(context, end, unboxedReturnType, Lists.reverse(stackTypes)));\n             }\n         }\n         block.append(invoke(context, binding));\n@@ -192,7 +192,7 @@\n                         .pushJavaDefault(unboxedReturnType)\n                         .gotoLabel(end)\n                         .visitLabel(notNull)\n-                        .append(ByteCodeUtils.unboxPrimitive(context, unboxedReturnType));\n+                        .append(unboxPrimitive(context, unboxedReturnType));\n             }\n             else {\n                 block.dup(methodType.returnType())\n",
        "projectName": "facebook.presto",
        "bugLineNum": 168,
        "bugNodeStartChar": 6895,
        "bugNodeLength": 19,
        "fixLineNum": 168,
        "fixNodeStartChar": 6895,
        "fixNodeLength": 14,
        "sourceBeforeFix": "ArrayList<Class<?>>",
        "sourceAfterFix": "List<Class<?>>"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "b23347c8d0fae222109b2c7e0252533cebb30d85",
        "fixCommitParentSHA1": "1376fa5c4f2b277f057f50f5236e99598ad1fcc4",
        "bugFilePath": "extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java",
        "fixPatch": "diff --git a/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java b/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\nindex 275ea7e..4ecd3b5 100644\n--- a/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\n+++ b/extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java\n@@ -99,7 +99,7 @@\n         logger.info(\"{} shared connection pool {}\", getClass().getName(), sharedPool);\n \n         if (sharedPool) {\n-            if (config.properties().get(REDIS_SHARED_POOL) == null) {\n+            if (config.properties().get(REDIS_SHARED_POOL) != null) {\n                 jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);\n             }\n \n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 102,
        "bugNodeStartChar": 3262,
        "bugNodeLength": 50,
        "fixLineNum": 102,
        "fixNodeStartChar": 3262,
        "fixNodeLength": 50,
        "sourceBeforeFix": "config.properties().get(REDIS_SHARED_POOL) == null",
        "sourceAfterFix": "config.properties().get(REDIS_SHARED_POOL) != null"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "9bf95c4215ed2dc53be742e94be9ed4b08db8c82",
        "fixCommitParentSHA1": "2e08502c4d5c333aa7b2f865cdb2b49600898b7c",
        "bugFilePath": "spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java",
        "fixPatch": "diff --git a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\nindex a9fd56c..657cefa 100644\n--- a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n+++ b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n@@ -27,8 +27,7 @@\n @Component\n public class CacheManagerCheck implements CommandLineRunner {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(SampleCacheApplication.class);\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CacheManagerCheck.class);\n \n \tprivate final CacheManager cacheManager;\n \n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 31,
        "bugNodeStartChar": 1054,
        "bugNodeLength": 28,
        "fixLineNum": 30,
        "fixNodeStartChar": 1050,
        "fixNodeLength": 23,
        "sourceBeforeFix": "SampleCacheApplication.class",
        "sourceAfterFix": "CacheManagerCheck.class"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "678913db7377dc67b3cbe92f6c9c9e401b777d97",
        "fixCommitParentSHA1": "f7b6f9051a068a4714391b6d11686709ed6cce12",
        "bugFilePath": "presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java",
        "fixPatch": "diff --git a/presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java b/presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java\nindex 7632e5e..1e5788f 100644\n--- a/presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java\n+++ b/presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java\n@@ -71,7 +71,7 @@\n                 else {\n                     callback.process(entry.getFileStatus(), entry.getBlockLocations());\n                 }\n-                if (future.isCancelled()) {\n+                if (future.isDone()) {\n                     return;\n                 }\n             }\n",
        "projectName": "facebook.presto",
        "bugLineNum": 74,
        "bugNodeStartChar": 2696,
        "bugNodeLength": 20,
        "fixLineNum": 74,
        "fixNodeStartChar": 2696,
        "fixNodeLength": 15,
        "sourceBeforeFix": "future.isCancelled()",
        "sourceAfterFix": "future.isDone()"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "af6a4908c4dd38c0f935803ab6b8ed99387219f2",
        "fixCommitParentSHA1": "decbd1bd742cbea4d986b3ae79c6189a1e6a4779",
        "bugFilePath": "bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\nindex 3795cad..a4a0db5 100644\n--- a/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n+++ b/bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java\n@@ -356,11 +356,11 @@\n \t\t\t\tThread.sleep(delay);\n \t\t\t\topen();\n \t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t} catch (InterruptedException e) {\n-\t\t\t\tlogger.error(\"Interrupted while reconnecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Interrupted while connecting to Plex\", e);\n \t\t\t} catch (ExecutionException e) {\n-\t\t\t\tlogger.error(\"Error connecting to Plex\", e);\n+\t\t\t\tlogger.debug(\"Error connecting to Plex\", e);\n \t\t\t}\n \t\t\tdelay = RECONNECT_DELAY;\n \t\t}\n@@ -389,7 +389,7 @@\n \t\t\t} else if (e instanceof TimeoutException) {\n \t\t\t\tlogger.debug(\"[{}]: Websocket timeout error\", connection.getHost());\n \t\t\t} else {\n-\t\t\t\tlogger.error(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n+\t\t\t\tlogger.debug(\"[{}]: Websocket error: {}\", connection.getHost(), e.getMessage());\n \t\t\t}\n \t\t}\n \t\t\n",
        "projectName": "openhab.openhab",
        "bugLineNum": 392,
        "bugNodeStartChar": 12280,
        "bugNodeLength": 79,
        "fixLineNum": 392,
        "fixNodeStartChar": 12280,
        "fixNodeLength": 79,
        "sourceBeforeFix": "logger.error(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())",
        "sourceAfterFix": "logger.debug(\"[{}]: Websocket error: {}\",connection.getHost(),e.getMessage())"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "f0cd1c2accadd71cdfb6300c34bc0587b16d4c69",
        "fixCommitParentSHA1": "463f282132bf47d5800a2a539f42ccff47eed3d5",
        "bugFilePath": "clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/InfinispanDescriptions.java",
        "fixPatch": "diff --git a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/InfinispanDescriptions.java b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/InfinispanDescriptions.java\nindex 4e79441..2ad93d7 100644\n--- a/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/InfinispanDescriptions.java\n+++ b/clustering/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/InfinispanDescriptions.java\n@@ -99,7 +99,7 @@\n             attr.addResourceAttributeDescription(resources, keyPrefix, container);\n         }\n         // need to add value type until we replace with a ListAttribute\n-        ALIAS.addResourceAttributeDescription(resources, keyPrefix, container).\n+        ALIASES.addResourceAttributeDescription(resources, keyPrefix, container).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         // information about its child \"singleton=transport\"\n         container.get(CHILDREN, ModelKeys.SINGLETON, DESCRIPTION).set(resources.getString(keyPrefix + \".singleton\"));\n@@ -139,7 +139,7 @@\n             attr.addOperationParameterDescription(resources, \"infinispan.container\", op);\n         }\n         // need to add value type until we replace with a ListAttribute\n-        ALIAS.addOperationParameterDescription(resources, \"infinispan.container\", op).\n+        ALIASES.addOperationParameterDescription(resources, \"infinispan.container\", op).\n                 get(ModelDescriptionConstants.VALUE_TYPE).set(ModelType.STRING);\n         return op;\n     }\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 142,
        "bugNodeStartChar": 7745,
        "bugNodeLength": 77,
        "fixLineNum": 142,
        "fixNodeStartChar": 7745,
        "fixNodeLength": 79,
        "sourceBeforeFix": "ALIAS.addOperationParameterDescription(resources,\"infinispan.container\",op)",
        "sourceAfterFix": "ALIASES.addOperationParameterDescription(resources,\"infinispan.container\",op)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "2956fca2f1fd1c8609d682fa58e72e3ccc54826a",
        "fixCommitParentSHA1": "4266cf6a0325835e4cd71172afc17989955bebbd",
        "bugFilePath": "components/camel-reactor/src/main/java/org/apache/camel/component/reactor/engine/ReactorCamelProcessor.java",
        "fixPatch": "diff --git a/components/camel-reactor/src/main/java/org/apache/camel/component/reactor/engine/ReactorCamelProcessor.java b/components/camel-reactor/src/main/java/org/apache/camel/component/reactor/engine/ReactorCamelProcessor.java\nindex 548cace..d3c270f 100644\n--- a/components/camel-reactor/src/main/java/org/apache/camel/component/reactor/engine/ReactorCamelProcessor.java\n+++ b/components/camel-reactor/src/main/java/org/apache/camel/component/reactor/engine/ReactorCamelProcessor.java\n@@ -49,12 +49,11 @@\n         this.camelProducer = null;\n         this.camelSink = new AtomicReference<>();\n \n-\n-        // TODO: A emitter processor with buffer-size 0 would be perfect\n-        // The effect of having a prefetch of 1 element is that the chain buffers at least 2 elements instead of only one\n-        // (one in the FluxSink and one in the EmitterProcessor) when using the \"latest\" or \"oldest\" strategy.\n-        // This affects slightly the behavior of the backpressure strategy \"latest\" (but it doesn't change the semantics).\n-        this.publisher = EmitterProcessor.create(1);\n+        // TODO: The perfect emitter processor would have no buffer (0 sized)\n+        // The chain caches one more item than expected.\n+        // This implementation has (almost) full control over backpressure, but it's too chatty.\n+        // There's a ticket to improve chattiness of the reactive-streams internal impl.\n+        this.publisher = EmitterProcessor.create(1, false);\n     }\n \n     @Override\n@@ -76,7 +75,7 @@\n             detach();\n \n             ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();\n-            Flux<Exchange> flux = Flux.create(camelSink::set);\n+            Flux<Exchange> flux = Flux.create(camelSink::set, FluxSink.OverflowStrategy.IGNORE);\n \n             if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {\n                 // signal item emitted for non-dropped items only\n",
        "projectName": "apache.camel",
        "bugLineNum": 79,
        "bugNodeStartChar": 3335,
        "bugNodeLength": 27,
        "fixLineNum": 79,
        "fixNodeStartChar": 3335,
        "fixNodeLength": 61,
        "sourceBeforeFix": "Flux.create(camelSink::set)",
        "sourceAfterFix": "Flux.create(camelSink::set,FluxSink.OverflowStrategy.IGNORE)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "7eab75c2851c3494d6bdea34a4d7e8c594fdb7a1",
        "fixCommitParentSHA1": "4aa4d104847e015cd0aa9cf21cbdb679f26b3674",
        "bugFilePath": "stratosphere-tests/src/test/java/eu/stratosphere/test/exampleScalaPrograms/ConnectedComponentsITCase.java",
        "fixPatch": "diff --git a/stratosphere-tests/src/test/java/eu/stratosphere/test/exampleScalaPrograms/ConnectedComponentsITCase.java b/stratosphere-tests/src/test/java/eu/stratosphere/test/exampleScalaPrograms/ConnectedComponentsITCase.java\nindex 7caa948..039b70d 100644\n--- a/stratosphere-tests/src/test/java/eu/stratosphere/test/exampleScalaPrograms/ConnectedComponentsITCase.java\n+++ b/stratosphere-tests/src/test/java/eu/stratosphere/test/exampleScalaPrograms/ConnectedComponentsITCase.java\n@@ -31,7 +31,7 @@\n         int dop = config.getInteger(\"ConnectedComponents#NumSubtasks\", 1);\n         int maxIterations = config.getInteger(\"ConnectedComponents#NumIterations\", 1);\n         ConnectedComponents cc = new ConnectedComponents();\n-        Plan plan = cc.getPlan(verticesPath, edgesPath, resultPath, maxIterations);\n+        Plan plan = cc.getScalaPlan(verticesPath, edgesPath, resultPath, maxIterations);\n         plan.setDefaultParallelism(dop);\n         return plan;\n     }\n",
        "projectName": "apache.flink",
        "bugLineNum": 34,
        "bugNodeStartChar": 1673,
        "bugNodeLength": 62,
        "fixLineNum": 34,
        "fixNodeStartChar": 1673,
        "fixNodeLength": 67,
        "sourceBeforeFix": "cc.getPlan(verticesPath,edgesPath,resultPath,maxIterations)",
        "sourceAfterFix": "cc.getScalaPlan(verticesPath,edgesPath,resultPath,maxIterations)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "6a6e67b3003df3da728a2366f951b7efe857a6e7",
        "fixCommitParentSHA1": "8a8669f6190a306b48030c5453adb57286660b20",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTest.java b/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTest.java\nindex db12ca4..d462ab3 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/RecipientListParallelTest.java\n@@ -27,7 +27,7 @@\n \n     public void testRecipientListParallel() throws Exception {\n         MockEndpoint mock = getMockEndpoint(\"mock:result\");\n-        mock.expectedBodiesReceived(\"c\", \"b\", \"a\");\n+        mock.expectedBodiesReceivedInAnyOrder(\"c\", \"b\", \"a\");\n \n         template.sendBodyAndHeader(\"direct:start\", \"Hello World\", \"foo\", \"direct:a,direct:b,direct:c\");\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 30,
        "bugNodeStartChar": 1216,
        "bugNodeLength": 42,
        "fixLineNum": 30,
        "fixNodeStartChar": 1216,
        "fixNodeLength": 52,
        "sourceBeforeFix": "mock.expectedBodiesReceived(\"c\",\"b\",\"a\")",
        "sourceAfterFix": "mock.expectedBodiesReceivedInAnyOrder(\"c\",\"b\",\"a\")"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "d24d566d5dbec85503eb7ff654caae91ca4dce06",
        "fixCommitParentSHA1": "aa643e23cdb15cc16f76f450149f0590e5a27094",
        "bugFilePath": "camel-core/src/test/java/org/apache/camel/issues/StopRouteFromRouteTest.java",
        "fixPatch": "diff --git a/camel-core/src/test/java/org/apache/camel/issues/StopRouteFromRouteTest.java b/camel-core/src/test/java/org/apache/camel/issues/StopRouteFromRouteTest.java\nindex 73b52b3..56e18db 100644\n--- a/camel-core/src/test/java/org/apache/camel/issues/StopRouteFromRouteTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/issues/StopRouteFromRouteTest.java\n@@ -51,7 +51,7 @@\n         template.sendBody(\"direct:start\", \"Hello Camel\");\n \n         // just wait a bit for the thread to stop the route\n-        Thread.sleep(1000);\n+        Thread.sleep(1500);\n \n         // the route should now be stopped\n         assertTrue(\"Route myRoute should be stopped\", context.getRouteStatus(\"myRoute\").isStopped());\n",
        "projectName": "apache.camel",
        "bugLineNum": 54,
        "bugNodeStartChar": 2230,
        "bugNodeLength": 18,
        "fixLineNum": 54,
        "fixNodeStartChar": 2230,
        "fixNodeLength": 18,
        "sourceBeforeFix": "Thread.sleep(1000)",
        "sourceAfterFix": "Thread.sleep(1500)"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "9e756fefbb053926754108335e3ad78b586439ac",
        "fixCommitParentSHA1": "e6da66a69840d8aa5ab1926974a92b779f90c868",
        "bugFilePath": "components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java",
        "fixPatch": "diff --git a/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java b/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java\nindex 029529d..27e01ba 100644\n--- a/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java\n+++ b/components/camel-websocket/src/test/java/org/apache/camel/component/websocket/WebscoketEndpointConfigurationTest.java\n@@ -44,7 +44,7 @@\n         WebsocketEndpoint websocketEndpoint = (WebsocketEndpoint)context.getEndpoint(uri);\n         WebsocketComponent component = websocketEndpoint.getComponent();\n         component.setMinThreads(1);\n-        component.setMaxThreads(11);\n+        component.setMaxThreads(20);\n         Consumer consumer = websocketEndpoint.createConsumer(processor);\n         component.connect((WebsocketProducerConsumer) consumer);\n         \n",
        "projectName": "apache.camel",
        "bugLineNum": 47,
        "bugNodeStartChar": 1891,
        "bugNodeLength": 27,
        "fixLineNum": 47,
        "fixNodeStartChar": 1891,
        "fixNodeLength": 27,
        "sourceBeforeFix": "component.setMaxThreads(11)",
        "sourceAfterFix": "component.setMaxThreads(20)"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "9716d2ae673a576cb345c3bfb24cf71654d8f112",
        "fixCommitParentSHA1": "3181f10fb9e6b330d1effee25be3ef87872f8fa0",
        "bugFilePath": "bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java",
        "fixPatch": "diff --git a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\nindex 89010de..010aef6 100644\n--- a/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n+++ b/bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java\n@@ -98,7 +98,7 @@\n \t */\n \tpublic GarageDoorData getGarageData() throws InvalidLoginException,\n \t\t\tIOException {\n-\t\tlogger.debug(\"Retreiveing door data\");\n+\t\tlogger.trace(\"Retreiveing door data\");\n \t\tString url = String.format(\n \t\t\t\t\"%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s\",\n \t\t\t\tWEBSITE, enc(appId), enc(getSecurityToken()));\n@@ -112,7 +112,7 @@\n \t * Validates Username and Password then saved sercurityToken to a variable\n \t */\n \tprivate void login() throws InvalidLoginException, IOException {\n-\t\tlogger.debug(\"attempting to login\");\n+\t\tlogger.trace(\"attempting to login\");\n \t\tString url = String\n \t\t\t\t.format(\"%s/api/user/validate?appId=%s&SecurityToken=null&username=%s&password=%s\",\n \t\t\t\t\t\tWEBSITE, enc(appId), enc(userName), enc(password));\n@@ -183,13 +183,13 @@\n \t\t\tString payload, String payloadType, boolean retry)\n \t\t\tthrows IOException, InvalidLoginException {\n \n-\t\tlogger.debug(\"Requsting URL {}\", url);\n+\t\tlogger.trace(\"Requsting URL {}\", url);\n \n \t\tString dataString = executeUrl(method, url, header,\n \t\t\t\tpayload == null ? null : IOUtils.toInputStream(payload),\n \t\t\t\tpayloadType, timeout);\n \n-\t\tlogger.debug(\"Received MyQ  JSON: {}\", dataString);\n+\t\tlogger.trace(\"Received MyQ  JSON: {}\", dataString);\n \n \t\tif (dataString == null) {\n \t\t\tthrow new IOException(\"Null response from MyQ server\");\n@@ -199,7 +199,7 @@\n \t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tJsonNode rootNode = mapper.readTree(dataString);\n \t\t\tint returnCode = rootNode.get(\"ReturnCode\").asInt();\n-\t\t\tlogger.debug(\"myq ReturnCode: {}\", returnCode);\n+\t\t\tlogger.trace(\"myq ReturnCode: {}\", returnCode);\n \n \t\t\tMyQResponseCode rc = MyQResponseCode.fromCode(returnCode);\n \n",
        "projectName": "openhab.openhab",
        "bugLineNum": 192,
        "bugNodeStartChar": 5847,
        "bugNodeLength": 50,
        "fixLineNum": 192,
        "fixNodeStartChar": 5847,
        "fixNodeLength": 50,
        "sourceBeforeFix": "logger.debug(\"Received MyQ  JSON: {}\",dataString)",
        "sourceAfterFix": "logger.trace(\"Received MyQ  JSON: {}\",dataString)"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "8642e3d582552d28c68715644f92af66d16038c9",
        "fixCommitParentSHA1": "27e0191c930194810dd578568c83de756da5a04c",
        "bugFilePath": "presto-spi/src/main/java/com/facebook/presto/spi/type/AbstractType.java",
        "fixPatch": "diff --git a/presto-spi/src/main/java/com/facebook/presto/spi/type/AbstractType.java b/presto-spi/src/main/java/com/facebook/presto/spi/type/AbstractType.java\nindex 486c413..2c8c9b0 100644\n--- a/presto-spi/src/main/java/com/facebook/presto/spi/type/AbstractType.java\n+++ b/presto-spi/src/main/java/com/facebook/presto/spi/type/AbstractType.java\n@@ -90,67 +90,67 @@\n     @Override\n     public boolean getBoolean(Block block, int position)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeBoolean(BlockBuilder blockBuilder, boolean value)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public long getLong(Block block, int position)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeLong(BlockBuilder blockBuilder, long value)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public double getDouble(Block block, int position)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeDouble(BlockBuilder blockBuilder, double value)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public Slice getSlice(Block block, int position)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeSlice(BlockBuilder blockBuilder, Slice value)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeSlice(BlockBuilder blockBuilder, Slice value, int offset, int length)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public Object getObject(Block block, int position)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n     public void writeObject(BlockBuilder blockBuilder, Object value)\n     {\n-        throw new UnsupportedOperationException();\n+        throw new UnsupportedOperationException(getClass().getName());\n     }\n \n     @Override\n",
        "projectName": "facebook.presto",
        "bugLineNum": 93,
        "bugNodeStartChar": 2404,
        "bugNodeLength": 35,
        "fixLineNum": 93,
        "fixNodeStartChar": 2404,
        "fixNodeLength": 55,
        "sourceBeforeFix": "new UnsupportedOperationException()",
        "sourceAfterFix": "new UnsupportedOperationException(getClass().getName())"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "102843f024ebb120e6e31c0046b6fbc5c37fb9a3",
        "fixCommitParentSHA1": "635356abbfc883d250288e526378ffbcddc5bc0e",
        "bugFilePath": "components/camel-testng/src/test/java/org/apache/camel/testng/AbstractCamelTestNGSpringContextTestsPlainTest.java",
        "fixPatch": "diff --git a/components/camel-testng/src/test/java/org/apache/camel/testng/AbstractCamelTestNGSpringContextTestsPlainTest.java b/components/camel-testng/src/test/java/org/apache/camel/testng/AbstractCamelTestNGSpringContextTestsPlainTest.java\nindex 1984450..d1aa63d 100644\n--- a/components/camel-testng/src/test/java/org/apache/camel/testng/AbstractCamelTestNGSpringContextTestsPlainTest.java\n+++ b/components/camel-testng/src/test/java/org/apache/camel/testng/AbstractCamelTestNGSpringContextTestsPlainTest.java\n@@ -103,8 +103,9 @@\n     public void testStopwatch() {\n         StopWatch stopWatch = StopWatchTestExecutionListener.getStopWatch();\n         \n+        // some servers is slower\n         assertNotNull(stopWatch);\n-        assertTrue(stopWatch.taken() < 100);\n+        assertTrue(stopWatch.taken() < 1000);\n     }\n     \n     @Test\n",
        "projectName": "apache.camel",
        "bugLineNum": 107,
        "bugNodeStartChar": 3845,
        "bugNodeLength": 23,
        "fixLineNum": 107,
        "fixNodeStartChar": 3845,
        "fixNodeLength": 24,
        "sourceBeforeFix": "stopWatch.taken() < 100",
        "sourceAfterFix": "stopWatch.taken() < 1000"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "b30c9ba15edd3060a51d6e46a735cdbd838ada7f",
        "fixCommitParentSHA1": "29dc0b93701b6ccb435daf51b94228c6b163e36f",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/server/security/AuthenticationFilter.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/server/security/AuthenticationFilter.java b/presto-main/src/main/java/com/facebook/presto/server/security/AuthenticationFilter.java\nindex ec62c72..d7b6c1a 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/security/AuthenticationFilter.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/security/AuthenticationFilter.java\n@@ -96,7 +96,7 @@\n         skipRequestBody(request);\n \n         for (String value : authenticateHeaders) {\n-            response.setHeader(WWW_AUTHENTICATE, value);\n+            response.addHeader(WWW_AUTHENTICATE, value);\n         }\n \n         if (messages.isEmpty()) {\n",
        "projectName": "facebook.presto",
        "bugLineNum": 99,
        "bugNodeStartChar": 3433,
        "bugNodeLength": 43,
        "fixLineNum": 99,
        "fixNodeStartChar": 3433,
        "fixNodeLength": 43,
        "sourceBeforeFix": "response.setHeader(WWW_AUTHENTICATE,value)",
        "sourceAfterFix": "response.addHeader(WWW_AUTHENTICATE,value)"
    },
    {
        "bugType": "CHANGE_UNARY_OPERATOR",
        "fixCommitSHA1": "d0d25198716e23bb206e278f35ee4eeb6d00ba2c",
        "fixCommitParentSHA1": "cac77a47b265e4fd2e39fc469d0abb6d32704b72",
        "bugFilePath": "src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java",
        "fixPatch": "diff --git a/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java b/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\nindex de3598d..ba8d605 100644\n--- a/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\n+++ b/src/main/java/org/jboss/netty/handler/stream/ChunkedFile.java\n@@ -130,7 +130,7 @@\n     }\n \n     public boolean isEndOfInput() throws Exception {\n-        return hasNextChunk();\n+        return !hasNextChunk();\n     }\n \n     public void close() throws Exception {\n",
        "projectName": "netty.netty",
        "bugLineNum": 133,
        "bugNodeStartChar": 4251,
        "bugNodeLength": 14,
        "fixLineNum": 133,
        "fixNodeStartChar": 4251,
        "fixNodeLength": 15,
        "sourceBeforeFix": "hasNextChunk()",
        "sourceAfterFix": "!hasNextChunk()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "d0cb778dc8811906c7e7b5a20e08bd70f49dd163",
        "fixCommitParentSHA1": "5ca595cc254728fcf29cedcafe4d01481b6bba81",
        "bugFilePath": "core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java",
        "fixPatch": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\nindex 830d712..901105b 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/BaseFileSystemTest.java\n@@ -362,9 +362,9 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doNothing().when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     mFileSystem.rename(src, dst, renameOptions);\n-    Mockito.verify(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.verify(mFileSystemMasterClient).rename(src, dst, renameOptions);\n   }\n \n   /**\n@@ -375,7 +375,7 @@\n     AlluxioURI src = new AlluxioURI(\"/file\");\n     AlluxioURI dst = new AlluxioURI(\"/file2\");\n     RenameOptions renameOptions = RenameOptions.defaults();\n-    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst);\n+    Mockito.doThrow(EXCEPTION).when(mFileSystemMasterClient).rename(src, dst, renameOptions);\n     try {\n       mFileSystem.rename(src, dst, renameOptions);\n       Assert.fail(SHOULD_HAVE_PROPAGATED_MESSAGE);\n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 367,
        "bugNodeStartChar": 13882,
        "bugNodeLength": 56,
        "fixLineNum": 367,
        "fixNodeStartChar": 13882,
        "fixNodeLength": 71,
        "sourceBeforeFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst)",
        "sourceAfterFix": "Mockito.verify(mFileSystemMasterClient).rename(src,dst,renameOptions)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "68ae53e4e14e5e7c69af1aafa9864e8c71df55d3",
        "fixCommitParentSHA1": "13b0f2bfb53bb1b3407ee0161c89d80504ddfae4",
        "bugFilePath": "presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java",
        "fixPatch": "diff --git a/presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java b/presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java\nindex 70eafa2..6a75b89 100644\n--- a/presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java\n+++ b/presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java\n@@ -1813,7 +1813,7 @@\n         assertQuery(\"SELECT \\\"TOTALPRICE\\\" \\\"my price\\\" FROM \\\"ORDERS\\\"\");\n     }\n \n-    @Test(expectedExceptions = Exception.class, expectedExceptionsMessageRegExp = \".*orderkey_1.*\")\n+    @Test(expectedExceptions = RuntimeException.class, expectedExceptionsMessageRegExp = \".*orderkey_1.*\")\n     public void testInvalidColumn()\n             throws Exception\n     {\n@@ -2961,7 +2961,7 @@\n                         MILLISECONDS.toSeconds(new DateTime(1970, 1, 1, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(1960, 1, 22, 3, 4, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n                         MILLISECONDS.toSeconds(new DateTime(2013, 3, 22, 0, 0, 0, 0, DateTimeZone.UTC).getMillis()) + \",  \" +\n-                        String.valueOf(TimeUnit.DAYS.toSeconds(123)));\n+                        TimeUnit.DAYS.toSeconds(123));\n     }\n \n     @Test\n",
        "projectName": "facebook.presto",
        "bugLineNum": 1816,
        "bugNodeStartChar": 66778,
        "bugNodeLength": 15,
        "fixLineNum": 1816,
        "fixNodeStartChar": 66778,
        "fixNodeLength": 22,
        "sourceBeforeFix": "Exception.class",
        "sourceAfterFix": "RuntimeException.class"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "588cfa851896440f9d1208654e33ed480a33e7da",
        "fixCommitParentSHA1": "e67e99a8475aadaeecafbdf2a7a6508423102415",
        "bugFilePath": "src/main/java/org/jboss/netty/buffer/ChannelBuffers.java",
        "fixPatch": "diff --git a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\nindex 9f3cf48..e7c8698 100644\n--- a/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n+++ b/src/main/java/org/jboss/netty/buffer/ChannelBuffers.java\n@@ -293,7 +293,7 @@\n             return EMPTY_BUFFER;\n         }\n         if (!buffer.isReadOnly() && buffer.hasArray()) {\n-            return wrappedBuffer(buffer.array(), buffer.arrayOffset(),buffer.remaining());\n+            return wrappedBuffer(buffer.order(), buffer.array(), buffer.arrayOffset(),buffer.remaining());\n         } else {\n             return new ByteBufferBackedChannelBuffer(buffer);\n         }\n",
        "projectName": "netty.netty",
        "bugLineNum": 296,
        "bugNodeStartChar": 10984,
        "bugNodeLength": 70,
        "fixLineNum": 296,
        "fixNodeStartChar": 10984,
        "fixNodeLength": 86,
        "sourceBeforeFix": "wrappedBuffer(buffer.array(),buffer.arrayOffset(),buffer.remaining())",
        "sourceAfterFix": "wrappedBuffer(buffer.order(),buffer.array(),buffer.arrayOffset(),buffer.remaining())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "051f6ab285eb21d16afeb87ed5bd9cfacfc67e47",
        "fixCommitParentSHA1": "b6501aac03cf70419e94b4cfc160695e4950914a",
        "bugFilePath": "community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java",
        "fixPatch": "diff --git a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\nindex b48ef15..575e820 100644\n--- a/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n+++ b/community/cypher/src/main/java/org/neo4j/cypher/javacompat/QueryStatistics.java\n@@ -73,7 +73,7 @@\n      */\n     public int getDeletedRelationships()\n     {\n-        return inner.deletedNodes();\n+        return inner.deletedRelationships();\n     }\n \n     /**\n",
        "projectName": "neo4j.neo4j",
        "bugLineNum": 76,
        "bugNodeStartChar": 2262,
        "bugNodeLength": 20,
        "fixLineNum": 76,
        "fixNodeStartChar": 2262,
        "fixNodeLength": 28,
        "sourceBeforeFix": "inner.deletedNodes()",
        "sourceAfterFix": "inner.deletedRelationships()"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "70fd3ee0bcb1f42ecbdacb5164990becbc43d99a",
        "fixCommitParentSHA1": "c4a20abf032decffe74ade4d7df3787528e4edf3",
        "bugFilePath": "modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java",
        "fixPatch": "diff --git a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\nindex f2bad23..9e77f83 100644\n--- a/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n+++ b/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java\n@@ -51,7 +51,7 @@\n \n     @Override\n     public AsyncIOWriter write(AtmosphereResponse response, String data) throws IOException {\n-        return write(response, data.getBytes());\n+        return write(response, data.getBytes(response.getCharacterEncoding()));\n     }\n \n     @Override\n",
        "projectName": "Atmosphere.atmosphere",
        "bugLineNum": 54,
        "bugNodeStartChar": 1888,
        "bugNodeLength": 15,
        "fixLineNum": 54,
        "fixNodeStartChar": 1888,
        "fixNodeLength": 46,
        "sourceBeforeFix": "data.getBytes()",
        "sourceAfterFix": "data.getBytes(response.getCharacterEncoding())"
    },
    {
        "bugType": "CHANGE_NUMERAL",
        "fixCommitSHA1": "0d63547e1a68b2c84a3bdd8f9d9a78e575f27686",
        "fixCommitParentSHA1": "b66dc890955c549713f89752d5552839a7886ef6",
        "bugFilePath": "core/src/main/java/com/yahoo/ycsb/measurements/OneMeasurementHdrHistogram.java",
        "fixPatch": "diff --git a/core/src/main/java/com/yahoo/ycsb/measurements/OneMeasurementHdrHistogram.java b/core/src/main/java/com/yahoo/ycsb/measurements/OneMeasurementHdrHistogram.java\nindex 6712d78..5373b40 100644\n--- a/core/src/main/java/com/yahoo/ycsb/measurements/OneMeasurementHdrHistogram.java\n+++ b/core/src/main/java/com/yahoo/ycsb/measurements/OneMeasurementHdrHistogram.java\n@@ -101,7 +101,7 @@\n     exporter.write(getName(), \"AverageLatency(us)\", totalHistogram.getMean());\n     exporter.write(getName(), \"MinLatency(us)\", totalHistogram.getMinValue());\n     exporter.write(getName(), \"MaxLatency(us)\", totalHistogram.getMaxValue());\n-    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(90));\n+    exporter.write(getName(), \"95thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(95));\n     exporter.write(getName(), \"99thPercentileLatency(us)\", totalHistogram.getValueAtPercentile(99));\n     \n     exportReturnCodes(exporter);\n",
        "projectName": "brianfrankcooper.YCSB",
        "bugLineNum": 104,
        "bugNodeStartChar": 3802,
        "bugNodeLength": 39,
        "fixLineNum": 104,
        "fixNodeStartChar": 3802,
        "fixNodeLength": 39,
        "sourceBeforeFix": "totalHistogram.getValueAtPercentile(90)",
        "sourceAfterFix": "totalHistogram.getValueAtPercentile(95)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "fc13cf7d7843029d807878869e3c64cace5640dd",
        "fixCommitParentSHA1": "efb95a17945cc91aa639396f6f6c528b52c71fcb",
        "bugFilePath": "hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java",
        "fixPatch": "diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java\nindex 7ed4dc0..4d16fca 100644\n--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java\n+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java\n@@ -73,7 +73,7 @@\n    * Does a deep copy of the contents to a new memory area and returns it as a new cell.\n    * @return The deep cloned cell\n    */\n-  Cell deepClone();\n+  ExtendedCell deepClone();\n \n   /**\n    * Extracts the id of the backing bytebuffer of this cell if it was obtained from fixed sized\n",
        "projectName": "apache.hbase",
        "bugLineNum": 72,
        "bugNodeStartChar": 2986,
        "bugNodeLength": 152,
        "fixLineNum": 72,
        "fixNodeStartChar": 2986,
        "fixNodeLength": 160,
        "sourceBeforeFix": "/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ Cell deepClone(); ",
        "sourceAfterFix": "/**   * Does a deep copy of the contents to a new memory area and returns it as a new cell.  * @return The deep cloned cell  */ ExtendedCell deepClone(); "
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "c4babda4bab878adeec4d534a1e62c8ddf5c5c06",
        "fixCommitParentSHA1": "81e94da3ce773f1f2c192163244b3bef59e6b253",
        "bugFilePath": "cli/src/main/java/org/jboss/as/cli/gui/ManagementModelNode.java",
        "fixPatch": "diff --git a/cli/src/main/java/org/jboss/as/cli/gui/ManagementModelNode.java b/cli/src/main/java/org/jboss/as/cli/gui/ManagementModelNode.java\nindex 484e868..fcd0dc7 100644\n--- a/cli/src/main/java/org/jboss/as/cli/gui/ManagementModelNode.java\n+++ b/cli/src/main/java/org/jboss/as/cli/gui/ManagementModelNode.java\n@@ -169,7 +169,7 @@\n             this.name = \"/\";\n             this.value = \"\";\n             this.isLeaf = false;\n-            this.seperator = \"\";\n+            this.separator = \"\";\n         }\n         /**\n          * Constructor for generic folder where resource=*.\n",
        "projectName": "wildfly.wildfly",
        "bugLineNum": 172,
        "bugNodeStartChar": 6324,
        "bugNodeLength": 14,
        "fixLineNum": 172,
        "fixNodeStartChar": 6324,
        "fixNodeLength": 14,
        "sourceBeforeFix": "this.seperator",
        "sourceAfterFix": "this.separator"
    },
    {
        "bugType": "OVERLOAD_METHOD_DELETED_ARGS",
        "fixCommitSHA1": "165540532a351f8c2c249f0aad2b1827441aa46e",
        "fixCommitParentSHA1": "f4a644df54da667a2052e6a57d5ce552ed2e48af",
        "bugFilePath": "presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestStateCompiler.java",
        "fixPatch": "diff --git a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestStateCompiler.java b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestStateCompiler.java\nindex 0f1b40d..1630216 100644\n--- a/presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestStateCompiler.java\n+++ b/presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestStateCompiler.java\n@@ -255,7 +255,7 @@\n                 field.setAccessible(true);\n                 if (type == BlockBigArray.class || type == BooleanBigArray.class || type == SliceBigArray.class ||\n                         type == ByteBigArray.class || type == DoubleBigArray.class || type == LongBigArray.class || type == IntBigArray.class) {\n-                    MethodHandle sizeOf = Reflection.methodHandle(type, \"sizeOf\", null);\n+                    MethodHandle sizeOf = Reflection.methodHandle(type, \"sizeOf\");\n                     retainedSize += (long) sizeOf.invokeWithArguments(field.get(state));\n                 }\n             }\n@@ -283,7 +283,7 @@\n                         continue;\n                     }\n                     bigArrayField.setAccessible(true);\n-                    MethodHandle sizeOf = Reflection.methodHandle(bigArrayField.getType(), \"sizeOf\", null);\n+                    MethodHandle sizeOf = Reflection.methodHandle(bigArrayField.getType(), \"sizeOf\");\n                     overhead += (long) sizeOf.invokeWithArguments(bigArrayField.get(stateField.get(state)));\n                 }\n             }\n",
        "projectName": "facebook.presto",
        "bugLineNum": 286,
        "bugNodeStartChar": 13718,
        "bugNodeLength": 64,
        "fixLineNum": 286,
        "fixNodeStartChar": 13718,
        "fixNodeLength": 58,
        "sourceBeforeFix": "Reflection.methodHandle(bigArrayField.getType(),\"sizeOf\",null)",
        "sourceAfterFix": "Reflection.methodHandle(bigArrayField.getType(),\"sizeOf\")"
    },
    {
        "bugType": "SWAP_BOOLEAN_LITERAL",
        "fixCommitSHA1": "bce9b34b81eec6bce73b01bf6ff062b386095875",
        "fixCommitParentSHA1": "835fb8501e8a26a7180086d96a511a9b43674bcd",
        "bugFilePath": "src/edu/stanford/nlp/ie/util/OntonotesXMLtoColumn.java",
        "fixPatch": "diff --git a/src/edu/stanford/nlp/ie/util/OntonotesXMLtoColumn.java b/src/edu/stanford/nlp/ie/util/OntonotesXMLtoColumn.java\nindex 9a34e2f..6c61b1f 100644\n--- a/src/edu/stanford/nlp/ie/util/OntonotesXMLtoColumn.java\n+++ b/src/edu/stanford/nlp/ie/util/OntonotesXMLtoColumn.java\n@@ -32,7 +32,7 @@\n  */\n public class OntonotesXMLtoColumn {\n \n-  private static final boolean VERBOSE = true;\n+  private static final boolean VERBOSE = false;\n \n   final SAXParser parser;\n \n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 35,
        "bugNodeStartChar": 1112,
        "bugNodeLength": 14,
        "fixLineNum": 35,
        "fixNodeStartChar": 1112,
        "fixNodeLength": 15,
        "sourceBeforeFix": "VERBOSE=true",
        "sourceAfterFix": "VERBOSE=false"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "2170c35fb25ca10d67a21943efe27a5ca89ccd66",
        "fixCommitParentSHA1": "dc30ba9d9e854c29534bacf2f644e533fd929a5b",
        "bugFilePath": "core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java",
        "fixPatch": "diff --git a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\nindex 97a07fa..195d89a 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/netty/DataServerReadHandler.java\n@@ -393,7 +393,7 @@\n     @GuardedBy(\"mLock\")\n     private boolean shouldRestartPacketReader() {\n       return !mPacketReaderActive && !tooManyPendingPackets() && mPosToQueue < mRequest.mEnd\n-          && mError != null && !mCancel && !mEof;\n+          && mError == null && !mCancel && !mEof;\n     }\n   }\n \n",
        "projectName": "Alluxio.alluxio",
        "bugLineNum": 396,
        "bugNodeStartChar": 13507,
        "bugNodeLength": 14,
        "fixLineNum": 396,
        "fixNodeStartChar": 13507,
        "fixNodeLength": 14,
        "sourceBeforeFix": "mError != null",
        "sourceAfterFix": "mError == null"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "ba91960ef4f56fe20a68f04375b023486e79a416",
        "fixCommitParentSHA1": "bce343fd7548221e956f73eefc4baf869bc8ea2a",
        "bugFilePath": "gdx/src/com/badlogic/gdx/utils/ArrayMap.java",
        "fixPatch": "diff --git a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java\nindex f460df5..b95e415 100644\n--- a/gdx/src/com/badlogic/gdx/utils/ArrayMap.java\n+++ b/gdx/src/com/badlogic/gdx/utils/ArrayMap.java\n@@ -136,12 +136,12 @@\n \tpublic K getKey (V value, boolean identity) {\r\n \t\tObject[] values = this.values;\r\n \t\tint i = size - 1;\r\n-\t\tif (identity || values == null) {\r\n+\t\tif (identity || value == null) {\r\n \t\t\tfor (; i >= 0; i--)\r\n-\t\t\t\tif (values[i] == values) return keys[i];\r\n+\t\t\t\tif (values[i] == value) return keys[i];\r\n \t\t} else {\r\n \t\t\tfor (; i >= 0; i--)\r\n-\t\t\t\tif (values.equals(values[i])) return keys[i];\r\n+\t\t\t\tif (value.equals(values[i])) return keys[i];\r\n \t\t}\r\n \t\treturn null;\r\n \t}\r\n",
        "projectName": "libgdx.libgdx",
        "bugLineNum": 144,
        "bugNodeStartChar": 6038,
        "bugNodeLength": 24,
        "fixLineNum": 144,
        "fixNodeStartChar": 5895,
        "fixNodeLength": 23,
        "sourceBeforeFix": "values.equals(values[i])",
        "sourceAfterFix": "value.equals(values[i])"
    },
    {
        "bugType": "SWAP_ARGUMENTS",
        "fixCommitSHA1": "d6a891e13eb646dfbfd5d7e0d9c1791b4c9a9b18",
        "fixCommitParentSHA1": "e78c69ed1abfded400d9d58c94f39ce8c296a53b",
        "bugFilePath": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java",
        "fixPatch": "diff --git a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\nindex 52368f9..24bc432 100644\n--- a/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n+++ b/presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java\n@@ -186,8 +186,8 @@\n                 booleanProperty(\n                         DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,\n                         \"Experimental: Use dynamic schedule for grouped execution when possible\",\n-                        false,\n-                        featuresConfig.isDynamicScheduleForGroupedExecutionEnabled()),\n+                        featuresConfig.isDynamicScheduleForGroupedExecutionEnabled(),\n+                        false),\n                 booleanProperty(\n                         PREFER_STREAMING_OPERATORS,\n                         \"Prefer source table layouts that produce streaming operators\",\n",
        "projectName": "facebook.presto",
        "bugLineNum": 186,
        "bugNodeStartChar": 11420,
        "bugNodeLength": 295,
        "fixLineNum": 186,
        "fixNodeStartChar": 11420,
        "fixNodeLength": 295,
        "sourceBeforeFix": "booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,\"Experimental: Use dynamic schedule for grouped execution when possible\",false,featuresConfig.isDynamicScheduleForGroupedExecutionEnabled())",
        "sourceAfterFix": "booleanProperty(DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION,\"Experimental: Use dynamic schedule for grouped execution when possible\",featuresConfig.isDynamicScheduleForGroupedExecutionEnabled(),false)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772",
        "fixCommitParentSHA1": "1c148887c286d3333708dc2ee63dff9f70220c25",
        "bugFilePath": "components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java",
        "fixPatch": "diff --git a/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java b/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\nindex 4cf79d4..52bd453 100644\n--- a/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\n+++ b/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineConsumer.java\n@@ -38,7 +38,7 @@\n     private final String path;\n     private AssetTree client;\n \n-    public ChronicleEngineConsumer(ChronicleEngineEnpoint endpoint, Processor processor) {\n+    public ChronicleEngineConsumer(ChronicleEngineEndpoint endpoint, Processor processor) {\n         super(endpoint, processor);\n \n         this.path = endpoint.getPath();\n@@ -50,7 +50,7 @@\n             throw new IllegalStateException(\"AssetTree already configured\");\n         }\n \n-        ChronicleEngineEnpoint endpoint = (ChronicleEngineEnpoint)getEndpoint();\n+        ChronicleEngineEndpoint endpoint = (ChronicleEngineEndpoint)getEndpoint();\n         ChronicleEngineConfiguration conf = endpoint.getConfiguration();\n         client = endpoint.createRemoteAssetTree();\n \n",
        "projectName": "apache.camel",
        "bugLineNum": 41,
        "bugNodeStartChar": 1675,
        "bugNodeLength": 31,
        "fixLineNum": 41,
        "fixNodeStartChar": 1675,
        "fixNodeLength": 32,
        "sourceBeforeFix": "ChronicleEngineEnpoint endpoint",
        "sourceAfterFix": "ChronicleEngineEndpoint endpoint"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "3863ad4a1e168bda4cf0d2dd77a06a1d192d5f16",
        "fixCommitParentSHA1": "8276731ca30f609690fc069691d6ec09831eedd2",
        "bugFilePath": "presto-parser/src/main/java/com/facebook/presto/sql/tree/DereferenceExpression.java",
        "fixPatch": "diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DereferenceExpression.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DereferenceExpression.java\nindex 351759b..d0624f7 100644\n--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DereferenceExpression.java\n+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DereferenceExpression.java\n@@ -56,7 +56,7 @@\n     @Override\n     public List<Node> getChildren()\n     {\n-        return ImmutableList.of();\n+        return ImmutableList.of(base);\n     }\n \n     public Expression getBase()\n",
        "projectName": "facebook.presto",
        "bugLineNum": 59,
        "bugNodeStartChar": 1806,
        "bugNodeLength": 18,
        "fixLineNum": 59,
        "fixNodeStartChar": 1806,
        "fixNodeLength": 22,
        "sourceBeforeFix": "ImmutableList.of()",
        "sourceAfterFix": "ImmutableList.of(base)"
    },
    {
        "bugType": "CHANGE_OPERATOR",
        "fixCommitSHA1": "7d4fcae2f04b29fb14e54346d614ebd1021ae0f1",
        "fixCommitParentSHA1": "020f3299ebccc36297a0d3db425cc5f44c70a8b7",
        "bugFilePath": "flink-runtime/src/main/java/org/apache/flink/runtime/heartbeat/HeartbeatManagerImpl.java",
        "fixPatch": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/heartbeat/HeartbeatManagerImpl.java b/flink-runtime/src/main/java/org/apache/flink/runtime/heartbeat/HeartbeatManagerImpl.java\nindex 42268fc..242fbaa 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/heartbeat/HeartbeatManagerImpl.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/heartbeat/HeartbeatManagerImpl.java\n@@ -277,7 +277,7 @@\n \t\t\tthis.scheduledExecutor = Preconditions.checkNotNull(scheduledExecutor);\n \t\t\tthis.heartbeatListener = Preconditions.checkNotNull(heartbeatListener);\n \n-\t\t\tPreconditions.checkArgument(heartbeatTimeoutIntervalMs >= 0L, \"The heartbeat timeout interval has to be larger than 0.\");\n+\t\t\tPreconditions.checkArgument(heartbeatTimeoutIntervalMs > 0L, \"The heartbeat timeout interval has to be larger than 0.\");\n \t\t\tthis.heartbeatTimeoutIntervalMs = heartbeatTimeoutIntervalMs;\n \n \t\t\tlastHeartbeat = 0L;\n",
        "projectName": "apache.flink",
        "bugLineNum": 280,
        "bugNodeStartChar": 9654,
        "bugNodeLength": 32,
        "fixLineNum": 280,
        "fixNodeStartChar": 9654,
        "fixNodeLength": 31,
        "sourceBeforeFix": "heartbeatTimeoutIntervalMs >= 0L",
        "sourceAfterFix": "heartbeatTimeoutIntervalMs > 0L"
    },
    {
        "bugType": "OVERLOAD_METHOD_MORE_ARGS",
        "fixCommitSHA1": "8783e22c53a444ba096e8e7e814f7f509b1edcf4",
        "fixCommitParentSHA1": "8ef406c94e97ea01f9b68711db679e784d46aab7",
        "bugFilePath": "src/edu/stanford/nlp/pipeline/NERCombinerAnnotator.java",
        "fixPatch": "diff --git a/src/edu/stanford/nlp/pipeline/NERCombinerAnnotator.java b/src/edu/stanford/nlp/pipeline/NERCombinerAnnotator.java\nindex f524de8..7e4053e 100644\n--- a/src/edu/stanford/nlp/pipeline/NERCombinerAnnotator.java\n+++ b/src/edu/stanford/nlp/pipeline/NERCombinerAnnotator.java\n@@ -363,7 +363,8 @@\n           CoreAnnotations.IndexAnnotation.class,\n           CoreAnnotations.OriginalTextAnnotation.class,\n           CoreAnnotations.SentenceIndexAnnotation.class,\n-          CoreAnnotations.IsNewlineAnnotation.class\n+          CoreAnnotations.IsNewlineAnnotation.class,\n+          CoreAnnotations.TokenIndexAnnotation.class\n       )));\n     } else {\n       return Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n@@ -379,7 +380,8 @@\n           CoreAnnotations.IndexAnnotation.class,\n           CoreAnnotations.OriginalTextAnnotation.class,\n           CoreAnnotations.SentenceIndexAnnotation.class,\n-          CoreAnnotations.IsNewlineAnnotation.class\n+          CoreAnnotations.IsNewlineAnnotation.class,\n+          CoreAnnotations.TokenIndexAnnotation.class\n       )));\n     }\n   }\n",
        "projectName": "stanfordnlp.CoreNLP",
        "bugLineNum": 351,
        "bugNodeStartChar": 14204,
        "bugNodeLength": 823,
        "fixLineNum": 351,
        "fixNodeStartChar": 14204,
        "fixNodeLength": 877,
        "sourceBeforeFix": "Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class)",
        "sourceAfterFix": "Arrays.asList(CoreAnnotations.TextAnnotation.class,CoreAnnotations.TokensAnnotation.class,CoreAnnotations.SentencesAnnotation.class,CoreAnnotations.CharacterOffsetBeginAnnotation.class,CoreAnnotations.CharacterOffsetEndAnnotation.class,CoreAnnotations.PartOfSpeechAnnotation.class,CoreAnnotations.LemmaAnnotation.class,CoreAnnotations.BeforeAnnotation.class,CoreAnnotations.AfterAnnotation.class,CoreAnnotations.TokenBeginAnnotation.class,CoreAnnotations.TokenEndAnnotation.class,CoreAnnotations.IndexAnnotation.class,CoreAnnotations.OriginalTextAnnotation.class,CoreAnnotations.SentenceIndexAnnotation.class,CoreAnnotations.IsNewlineAnnotation.class,CoreAnnotations.TokenIndexAnnotation.class)"
    },
    {
        "bugType": "CHANGE_CALLER_IN_FUNCTION_CALL",
        "fixCommitSHA1": "db556102db1b01327240df5c6265df1912104ec3",
        "fixCommitParentSHA1": "f9386c36231f158e62731bc09f3182f1e6e6aa47",
        "bugFilePath": "server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java",
        "fixPatch": "diff --git a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\nindex 41553b4..5607872 100644\n--- a/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n+++ b/server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java\n@@ -52,7 +52,7 @@\n \n         // Also account for queued segments\n         for (DataSegment segment : serverHolder.getPeon().getSegmentsToLoad()) {\n-          Integer numReplicants = segmentsInCluster.get(segment.getIdentifier(), server.getTier());\n+          Integer numReplicants = loadingSegments.get(segment.getIdentifier(), server.getTier());\n           if (numReplicants == null) {\n             numReplicants = 0;\n           }\n",
        "projectName": "druid-io.druid",
        "bugLineNum": 55,
        "bugNodeStartChar": 2230,
        "bugNodeLength": 64,
        "fixLineNum": 55,
        "fixNodeStartChar": 2230,
        "fixNodeLength": 62,
        "sourceBeforeFix": "segmentsInCluster.get(segment.getIdentifier(),server.getTier())",
        "sourceAfterFix": "loadingSegments.get(segment.getIdentifier(),server.getTier())"
    },
    {
        "bugType": "DIFFERENT_METHOD_SAME_ARGS",
        "fixCommitSHA1": "b75894aec218a045bd91652840f07f0aecf01a73",
        "fixCommitParentSHA1": "e7153dd604416e0d964d93c3e7da250e79606fd0",
        "bugFilePath": "spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java",
        "fixPatch": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\nindex 4aa2a34..ac249e4 100644\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n@@ -168,7 +168,7 @@\n \n \t\tEnumerableCompositePropertySource group = getGeneric(basename);\n \t\tgroup.add(source);\n-\t\tlogger.info(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n+\t\tlogger.trace(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n \t\tif (this.propertySources.contains(group.getName())) {\n \t\t\tthis.propertySources.replace(group.getName(), group);\n \t\t}\n",
        "projectName": "spring-projects.spring-boot",
        "bugLineNum": 171,
        "bugNodeStartChar": 6067,
        "bugNodeLength": 74,
        "fixLineNum": 171,
        "fixNodeStartChar": 6067,
        "fixNodeLength": 75,
        "sourceBeforeFix": "logger.info(\"Adding PropertySource: \" + source + \" in group: \"+ basename)",
        "sourceAfterFix": "logger.trace(\"Adding PropertySource: \" + source + \" in group: \"+ basename)"
    },
    {
        "bugType": "CHANGE_IDENTIFIER",
        "fixCommitSHA1": "03eca7708ef2b1d9bdf3a4265639dd3d5541ca74",
        "fixCommitParentSHA1": "b09fcfb558c6cdb451a76924ea2c14f64282c61b",
        "bugFilePath": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java",
        "fixPatch": "diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java\nindex e68325f..5a2beb9 100644\n--- a/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java\n+++ b/serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java\n@@ -49,7 +49,7 @@\n       List<String> columnNames) {\n     ArrayList<List<String>> key = new ArrayList<List<String>>(1);\n     key.add(columnNames);\n-    MetadataListStructObjectInspector result = cached.get(columnNames);\n+    MetadataListStructObjectInspector result = cached.get(key);\n     if (result == null) {\n       result = new MetadataListStructObjectInspector(columnNames);\n       MetadataListStructObjectInspector prev = cached.putIfAbsent(key, result);\n",
        "projectName": "apache.hive",
        "bugLineNum": 52,
        "bugNodeStartChar": 2223,
        "bugNodeLength": 23,
        "fixLineNum": 52,
        "fixNodeStartChar": 2223,
        "fixNodeLength": 15,
        "sourceBeforeFix": "cached.get(columnNames)",
        "sourceAfterFix": "cached.get(key)"
    }
]